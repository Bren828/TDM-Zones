#include <a_samp>
#undef MAX_PLAYERS
#define MAX_PLAYERS  160
#include <Pawn.CMD>
#include <streamer>
#include <a_mysql>
#include <foreach>
#include <sscanf2>
#include <rustext>

#define MAX_MAPS     49				//Кол-во карт
#define MAX_VEHICLE  114			//все машины на сервере
#define MAX_LEVEL    20				//Кол-во рангов
#define COLOR_RED    0xFF0000AA	
#define MAX_ADVANCE  21				//Кол-во достижений
#define InitRandomNumberArr(%0,%1) new %1[%0+1]; ReInitRandomNumberArr(%1, %0+1)
enum pInfo
{
	pPass[65], pPass1[65], pSalt[11], pSalt1[11],
	pRoomAccount,
	pIpReg[16], pIpLocal[16], pDateTimeReg[24], pLastEntrance[24],
	pAdmin, pAdminTime, pVip, pVipTime,
 	pMuted, pPrison, pFreeze,
 	pLevel[2], pDeaths, pKills, pLastScore, pMoney,
  	pTimeGame[3],
 	pSpawnKill[3],
 	pVisits,
 	pYourSkin[2], pNickColor, pTimers, pWeather, pFreeMode,
    pBindingIp,//нет (сделать пароль если не тот IP то будет требовать пароль, пароль 4 символа цыфры)
 	pCheaterTime,
	pFloodCmd,
 	pHisWeapons[3], pMessage[6], pPassive,
  	pDuel[4], pRussifier[2], pInfoText[13], pBonus[9], pServerHelp[3],
 	pGang[4], pDonat,
  	pAutoBuyWeapon[5], pClassWeapons[6], pAchievements[MAX_ADVANCE], pInteraction[7], pAimingX[2],
};
enum MapS
{
	Preset[5], Name[22], Name1[22], Float:Zone[6]
};
new MySQL:MysqlConnectID;
new PlayerInfo[MAX_PLAYERS][pInfo];
new PlayerLogged[MAX_PLAYERS];
new PlayerName[MAX_PLAYERS][MAX_PLAYER_NAME];
new PlayerIp[MAX_PLAYERS][16];
new Arena[21] = {3, 900, 0, 0, 0, 0, 0, 15, 900, 0, 0, 0, 0, 0, 20, 900, 0, 0, 0, 0, 0}, PlayerOnline[5], ServerConfig[5] = {0, 1, 1, 0, 0};
new AutoCheck[MAX_PLAYERS], VehicleClose[MAX_VEHICLES];
new Pause[MAX_PLAYERS][2];
new WrPass[MAX_PLAYERS];
new bool: Spawned[MAX_PLAYERS];
new HealthCheck[MAX_PLAYERS][2], Health[MAX_PLAYERS], Armour[MAX_PLAYERS][5];
new WeaponPlayer[MAX_PLAYERS][13], WeaponPlayerAmmo[MAX_PLAYERS][13], WeaponPlayerIgnore[MAX_PLAYERS][2];
new Float: PosBreik[MAX_PLAYERS][3], AntiBreik[MAX_PLAYERS];
new SpawnCheck[MAX_PLAYERS][5], Float:SpawnKillPos[MAX_PLAYERS][3];
new Observation[MAX_PLAYERS][3];
new MenuProcurementTime[MAX_PLAYERS], Text: MenuProcurementIcon[MAX_PLAYERS][2];
new Text:ArenaInfo[MAX_PLAYERS][14];
new DamageTime[MAX_PLAYERS][2];
new PlayerText:gSelectionItems[MAX_PLAYERS][24], Text:SelectionPrice[MAX_PLAYERS][20], gSelectionItemsTag[MAX_PLAYERS][24], Text:MenuSelection[MAX_PLAYERS][18], SelectionCheck[MAX_PLAYERS][10];
new SpeedCheck[MAX_PLAYERS];
new GmTestCheck[MAX_PLAYERS][3];
new DuelCheck[MAX_PLAYERS][29], Text:DuelInfo[MAX_PLAYERS][48];
new DialogueCheck[MAX_PLAYERS][3];
new PlayerCheatCheck[MAX_PLAYERS];
new RapidFire[MAX_PLAYERS][3];
new MoneyInfoTime[MAX_PLAYERS], Text: MoneyInfo[MAX_PLAYERS];
new TimeInput[MAX_PLAYERS];
new PutVehicle[MAX_PLAYERS][2], TuningCheck[MAX_PLAYERS], TuningVehicle[MAX_VEHICLES][3], RemoveVehicle[MAX_PLAYERS], AutoTpCheck[MAX_PLAYERS][2];
new ProtectionFlooding[MAX_PLAYERS][6];
new BanIpInfo[MAX_PLAYERS], BanInfo[MAX_PLAYERS][25];
new FrozenCheck[MAX_PLAYERS], Float: FrozenPos[MAX_PLAYERS][3];
new InteractionCheck[MAX_PLAYERS][12], Float:InteractionPos[MAX_PLAYERS][3], Text3D:InteractionText[MAX_PLAYERS][4];
new ChoiceTeamCheck[MAX_PLAYERS][8], Text:ChoiceTeam[MAX_PLAYERS][33];
new GangTag[MAX_PLAYERS][5], GangName[MAX_PLAYERS][21], GangRank[MAX_PLAYERS][13][15], GangCheck[MAX_PLAYERS][3], GangList[MAX_PLAYERS][10];
new RegistrationHealth[MAX_PLAYERS][3];
new Text:InfoKills[MAX_PLAYERS][19], KillsCheck[MAX_PLAYERS][12];
new Text3D:PlayerText[MAX_PLAYERS];
new Text: UpPanel[MAX_PLAYERS];
new PlayerInterior[MAX_PLAYERS][2];
new ChangeMap[MAX_PLAYERS][5], Text:ChangeMapp[MAX_PLAYERS][41]/*9,10 свободны*/, Text:ScoreArena[MAX_PLAYERS][18];
new PlayerColor[MAX_PLAYERS];
new Revival[MAX_PLAYERS][5], Text:RevivalText[MAX_PLAYERS][4];
new MegaBullet[MAX_PLAYERS];
new WeaponsSlotSpawn[MAX_PLAYERS][10];
new PassiveCheck[MAX_PLAYERS];
new OrderKills[MAX_PLAYERS][2];
new Text:NewLelevT[MAX_PLAYERS][3], NewLevelCheck[MAX_PLAYERS][2];//5560
new ChoiceItemsCheck[MAX_PLAYERS][6], Text:ChoiceItems[MAX_PLAYERS][16], PlayerText:ChoiceItemsPosi[MAX_PLAYERS];
new AchievementsCheck[MAX_PLAYERS][2], Text:AchievementsT[MAX_PLAYERS][5];
new Text: Glasses[MAX_PLAYERS];
new SkillsWeapon[MAX_PLAYERS][2];
new ServerHelpInfo[MAX_PLAYERS][3];
new Text: HealthPure[MAX_PLAYERS];
new Float: PossSave[MAX_PLAYERS][7];
new ChatTimeStop[MAX_PLAYERS], ChatMsgStop[MAX_PLAYERS][128];
new ObjectLoading[MAX_PLAYERS][5];

new Text:Aiming[MAX_PLAYERS][2], AimingCheck[MAX_PLAYERS][3], AimingText[11] = {92, 1, 47, 126, 110, 126, 47, 1, 92}, AimingTextR[16] = {126, 114, 126, 126, 104, 126, 92, 1, 47, 126, 110, 126, 47, 1, 92};
new BreathCam[MAX_PLAYERS][3];
new ForbiddenArea[MAX_PLAYERS][2];
new Text:KillInfo[MAX_PLAYERS][12], KillSlot[MAX_PLAYERS][12][72];
new Float:SpeedVer[MAX_PLAYERS], SpeedVerTime[MAX_PLAYERS];
new EnterVehicle[MAX_PLAYERS][2];
new PrisonCheckArena[MAX_PLAYERS];
new CheckTextDraw[MAX_PLAYERS] = 0;
new Playidles[MAX_PLAYERS];
new Text:ListTable[MAX_PLAYERS][10], TopList[MAX_PLAYERS][5];
new ClientCheck[MAX_PLAYERS];// 0 - 0.3.7 | 1 - 0.3 DL  0.3.8 RC   (принудительно изменить CMD /client (команда доступна всем))

new Text:TextBarInfo[MAX_PLAYERS];
new TextBarInfoCheck[MAX_PLAYERS];
new WSlot[] = {0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 8, 8, 8, -1, -1, -1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 4, 6, 6, 7, 7, 7, 7, 8, 12, 9, 9, 9, 11, 11, 11},
VType[] =
{
	2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 3, 3, 3, 0, 0,
	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 3, 0, 0, 2,
	0, 0, 0, 0, 4, 0, 0, 3, 0, 0, 2, 2, 0, 0, 0, 0, 3, 0, 0, 0,
	2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 2, 2, 2, 0, 0, 0,
	0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 3
},
Float:VehicleRespray[5][3] = 
{
	{-2721.7964, 218.2624, 4.1913},
	{-1936.1837, 245.4983, 34.0419},
	{2387.1555, 1049.7482, 10.4392},
	{1042.2147, -1018.0926, 31.8323},
	{2645.5771, -2045.3768, 13.2828}
},
WeaponsName[54][20] =
{
	"Off", "Brass Knuckles", "Golf Club", "Nightstick", "Knife", "Baseball Bat", "Shovel", "Pool Cue", "Katana", "Chainsaw", "Purple Dildo", "Dildo", "Vibrator", "Silver Vibrator", "Flowers", "Cane", "Grenade", "Tear Gas",
	"Molotov Cocktail", "_", "_", "_", "9mm", "Silenced 9mm", "Desert Eagle", "Shotgun", "Sawnoff Shotgun", "Combat Shot", "Micro Uzi", "MP5", "AK-47", "M4", "Tec-9", "Country Rifle", "Sniper Rifle", "RPG", "HS Rocket",
	"Flamethrower", "Minigun", "Satchel Charge", "Detonator", "Spraycan", "Fire Extinguisher", "Camera", "Night Vis Goggles", "Thermal Goggles", "Parachute", "Off", "Land Mina", "Vehicle", "Helicopter Blades", "Explosion", "Drowned", "Splat"
},
MapSettings[MAX_MAPS][MapS] =
{/*
Онлайн - максимальный онлайн на картах
(ВАЖНО!! НЕ ДОЛЖНО БЫТЬ ОДИНАКОВЫХ ЗНАЧЕНИЙ. ЕСЛИ У ВАС ЕСТЬ КАРТА С ОНЛАЙНОМ ОТ 0 ДО 20 ИГРОКОВ И ДРУГАЯ КАРТА ОТ 20 ДО 30 ИГРОКОВ ТО ЗНАЧЕНИЯ БУДУТ ТАКИМИ

пример:
Первая карта (0,  20)
Вторая карта (21, 31)  |  НЕ ПРАВИЛЬНО (20, 30)!!!


1 - Онлайн от
2 - Онлайн до
3 - int
4 - время
5 - погода
6 - название
7 - название
8 - ограничение зоны 
	 1	  2	   3    4   5    	6    				7					 	8*/
	{{0,  20,  1, 	7,  5},   " Basement",     		" Подвал", 				{2234.642333, 1570.634033, 998.0,   2168.157226, 1628.982543, 1005.0}},
	{{21, 31,  0, 	6,  27},  " Cemetery",     		" Кладбище", 			{952.4391, -1055.6504, 20.0, 		805.7720, -1131.1779, 45.0}},
	{{21, 31,  1,  	7,  5},   " Casino LV",    		" Казино LV", 			{2295.311035, 1555.082763, 1004.0,  2115.257080, 1744.009399, 1014.0}},
	{{21, 31,  0, 	7,  38},  " Farm I",       		" Ферма I", 			{-178.0, -125.0, 0.0,   			17.0, 118.0, 33.0}},
	{{0,  20,  3, 	7,  5},   " City hall",    		" Мэрия", 				{392.163848, 146.786865, 1007.0,    315.703125, 222.856338, 1029.0}},
	{{0,  20,  0,  	9,  13},  " Ship SF",      		" Корабль SF", 			{-2298.9263, 1562.3975, 0.0,		-2479.7502, 1528.0240, 40.0}},
	{{21, 31,  10, 	8,  30},  " Battlefield",  		" Поле битвы", 			{-1140.220336, 1102.304931, 1341.0, -965.192871, 1017.012878, 1358.0}},
	{{0,  20,  0, 	8,  30},  " Farm II",      		" Ферма II", 			{-1051.4025, -1603.5188, 73.0, 		-1131.0819, -1691.7487, 93.0}},
	{{0,  20,  15, 	8,  30},  " Hotel",        		" Отель", 				{2176.863769, -1202.277709, 1023.0, 2256.871582, -1136.185180, 1037.0}},
	{{0,  20,  0, 	8,  30},  " Area 51",      		" Зона 51", 			{333.0, 1882.0, 0.0,  		        198.0, 1793.4939, 18.0}},
	{{0,  20,  1, 	8,  30},  " Meat Factory", 		" Мясокомбинат", 		{966.924255, 2094.856933, 1009.0,   931.812438, 2179.056640, 1019.0}},//10
	{{21, 31,  0,  	8,  15},  " Market",       		" Рынок", 				{562.773010, -2454.934570, 10.0, 	389.802093, -2522.028808, 24.0}},
	{{0,  20,  5, 	8,  30},  " Big House",    		" Большой дом", 		{1298.485839, -840.052490, 1081.0,  1221.176391, -781.939819, 1095.0}},
    {{32, 42,  0, 	10, 30},  " Tropics I",    		" Тропики I", 			{0.0, 0.0, 0.0, 					0.0, 0.0,  0.0}},//Остров ИЛИ от 43 до 52 онлайна
    {{21, 31,  2, 	9,  30},  " Crack factory", 	" Фабрика", 			{2522.309082, -1322.840698, 1023.0, 2582.858154, -1278.323486, 1054.0}},
    {{0,  20,  0, 	6,  27},  " Warehouse LV", 		" Склад LV", 			{2616.7253, 2850.8875, 7.0,         2539.1707, 2803.3655, 27.0}},
    {{0,  20,  3, 	9,  30},  " Police LV",    		" Полиция LV", 			{303.165252, 200.177032, 1001.0,    184.496734, 138.231384, 1011.0}},
    {{32, 42,  0, 	9,  30},  " Assault",      		" Assault", 			{-42.449722, 427.062225, 292.0,     -182.157470, 307.704376, 310.0}},
    {{21, 31,  0, 	9,  15},  " Passage",     		" Проход", 				{573.687255, -2470.955322, 17.0,    726.929016, -2415.105224, 31.0}},
    {{32, 42,  0, 	21,  6},  " Pirates",      		" Пираты", 				{727.111755, -2251.392822, -2.0,    486.150848, -2480.383789, 30.0}},
    {{21, 31,  0, 	21,  12}, " Port SF",      		" Порт SF", 			{-1484.830078, 335.916412, -14.0,   -1341.023193, 442.416900, 21.0}},//20
	{{32, 42,  0, 	23,  5},  " Golf LV",      		" Гольф LV", 			{1128.728271, 2854.695556, 8.0,     1368.400390, 2724.109863, 40.0}},
	{{32, 42,  0, 	13,  7},  " Tropics II",   		" Тропики II", 			{488.606201, -2943.068359, -15.0,   751.065673, -2429.666748, 27.0}},
	{{21, 31,  0, 	9,  14},  " Hill",         		" Холм", 				{522.359191, -2434.013183, 15.0,    677.421447, -2487.570800, 33.0}},
	{{0,  20,  0, 	7,  1},   " Olimpia",      		" Олимпиады", 			{651.433654, -2305.004394, 6.0,     524.308166, -2411.507324, 26.0}},
	{{0,  20,  0, 	7,  27},  " RockWar",      		" RockWar", 			{1204.495483, 2046.219848, 141.0,   1139.617309, 2123.789062, 165.0}},
	{{21, 31,  0, 	8,  38},  " Megapolis",    		" Мегаполис", 			{1345.746826, 240.540039, 294.0,    1492.153564, 107.695213, 310.0}},
	{{32, 42,  0, 	7,  29},  " Village",      		" Деревня", 			{-2150.198486, 1981.518310, -1.0,   -1970.086914, 1853.860839, 32.0}},
	{{21, 31,  0,	8,  38},  " Chinatown",    		" Китайский квартал", 	{-2172.212646, 589.534179, 32.0,    -2244.209716, 722.641357, 70.0}},
	{{21, 31,  0, 	8,  38},  " No name",      		" No name", 		  	{507.309570, -1031.089965, 291.0,   369.996093, -985.859252, 328.0}},
	{{32, 42,  0, 	6,  38},  " Military base",  	" Военная база", 		{38.448444, 1944.425781, 11.0,      319.921325, 1798.687744, 275.0}},//30
	{{32, 42,  0, 	6,  39},  " Station",      		" Станция", 			{1679.563110, -2007.426147, 11.0,   1810.568725, -1878.603881, 30.0}},
	{{21, 31,  0, 	5,  9},   " Snow I Love Snow",  " Я люблю снег", 		{-131.804351, 71.748130, 3.0,       -248.340499, -74.666351, 23.0}},
	{{0,  20,  17,  6,  5},   " Sherman Dam",    	" Дамба Шермана", 		{-963.186767, 1845.407348, 3.0,     -937.446411, 1957.138305, 26.0}},
	{{0,  20,  10,  6,  21},  " Police SF",    		" Полиция SF", 			{212.613967, 106.880416, 997.0,     279.457275, 127.671371, 1012.0}},
	{{0,  20,  0,  	6,  30},  " Train",        		" Поезд", 				{211.9308, 403.2477, 218.0,         146.327774, 290.264831, 233.0}},
	{{21, 31,  0,  	8,  15},  " Ruins",        		" Руины", 				{2141.139892, -823.660400, 357.0,   2029.323852, -934.627258, 395.0}},
	{{21, 31,  0,  	3,  30},  " Maddy",        		" Мэдди", 				{2884.118896, -1554.229736, 170.0,  3008.471923, -1428.393310, 201.0}},
	{{32, 42,  0,  	3,  29},  " Logger",       		" Лесоруб",			 	{-420.0955, -214.3963, 55.0,        -593.530273, -22.563508, 100.0}},
	{{0,  20,  0, 	3,  12},  " IceWorld",     		" Ледяной мир", 		{1348.015258, -1599.201416, 235.0,  1277.477416, -1528.849731, 258.0}},
	{{21, 31,  0,  	7,  5},   " Factory",      		" Фабрика", 			{-2096.340332, -80.408767, 33.0,    -2201.882324, -281.066528, 52.0}},//40
	{{21, 31,  0,  	6,  5},   " Mile",         		" Миля", 				{-1971.477661, -746.035400, 30.0,   -1944.485839, -971.872802, 42.0}},
	{{21, 31,  0, 	6,  11},  " A desert",     		" Пустыня", 			{-77.331275, 1458.049560, 10.0,     110.508148, 1594.974365, 34.0}},
    {{32, 42,  0,  	6,  27},  " Dust",         		" Dust", 				{218.301193, 2105.721679, 221.0,    31.610290, 2227.373779, 245.0}},
    {{32, 42,  0,   6,  27},  " Construction", 		" Стройка", 			{2717.559082, 915.089294, 3.0,      2557.091796, 782.625366, 26.0}},
    {{21, 31,  0,  	7,  9},   " Field",        		" Поле", 				{276.523742, 312.326751, -1.0,      123.037590, 403.681915, 25.0}},
    {{0,  20,  0, 	9,  30},  " Backyard",     		" Задний двор", 		{2303.590332, 82.055564, 24.0,      2334.325439, -18.981695, 45.0}},
	{{0,  20,  0,  	6,  30},  " Pizza in Ghetto", 	" Пицца в гетто", 		{2459.013671, -1964.408569, 10.0,   2363.077880, -1880.420166, 37.0}},
	{{0,  20,  0,  	6,  27},  " Terminus",     		" Станция", 			{-2062.993164, 200.017471, 25.0,    -1957.205688, 94.064453, 50.0}} //48
},
Float:ArenaCamera[MAX_MAPS][14] = //летающая камера в конце матча.  смотрите (stock ArenaMapCamera)
{
	{2175.582275, 1627.424316, 1001.499938, 2176.195312, 1583.307495, 1001.950805, 10000.0,    2179.608154, 1624.517211, 1000.915344, 2181.029052, 1584.565673, 1001.720397, 5000.0},
 	{837.130737, -1110.926391, 28.285779, 932.902648, -1062.087402, 34.945335, 10000.0,        833.121276, -1107.980346, 27.790500, 929.390502, -1065.508056, 33.963474, 9000.0},
    {2231.274414, 1705.992919, 1009.280517, 2230.208984, 1563.965942, 1011.140197, 10000.0,    2232.914062, 1701.587280, 1010.984008, 2231.589355, 1568.755004, 1010.740966, 15000.0},
 	{-112.027671, -106.302612, 4.169498, -4.794435, 85.378120, 23.662597, 10000.0,             -110.061660, -101.707504, 4.028892, -8.867822, 82.622184, 22.761301, 10000.0},
 	{362.256072, 158.444076, 1010.043884, 354.147766, 189.818740, 1011.813049, 5000.0,         364.622009, 162.825454, 1009.590148, 357.416778, 186.183471, 1010.764953, 10000.0},
 	{-2473.841796, 1559.855102, 34.670387, -2323.367431, 1530.371215, 38.612274, 5000.0,       -2470.712646, 1555.967285, 34.365886, -2327.956787, 1532.212524, 37.872810, 7000.0},
 	{-1112.246826, 1020.419616, 1344.432128, -978.922058, 1099.698120, 1353.156860, 10000.0,   -1108.484497, 1023.711914, 1344.360595, -983.020507, 1096.920532, 1352.458740, 10000.0},
 	{-1058.545288, -1613.105712, 85.054916, -1118.623291, -1674.129882, 91.283813, 11000.0,    -1062.658691, -1615.742309, 83.992759, -1114.837280, -1671.157958, 89.929840, 10000.0},
 	{2193.001953, -1139.644165, 1030.947753, 2194.794921, -1195.357421, 1031.737304, 10000.0,  2196.697265, -1142.988647, 1030.548583, 2192.637451, -1190.889282, 1031.120483, 5000.0},
 	{240.132812, 1818.671020, 4.533518, 301.173278, 1814.128173, 7.580432, 10000.0,            244.582702, 1820.951049, 4.526024, 296.667480, 1816.292480, 7.463574, 5000.0},
 	{934.963867, 2113.795410, 1012.781738, 949.359252, 2178.332031, 1014.033569, 10000.0,      936.991271, 2118.345947, 1012.355285, 947.934631, 2173.572509, 1013.471069, 5000.0},
 	{482.018707, -2512.552490, 17.209100, 501.396240, -2457.724365, 23.269357, 10000.0,        483.871978, -2507.908691, 17.205194, 499.164764, -2461.989013, 21.915386, 5000.0},
 	{1282.293945, -784.052795, 1091.134765, 1282.344116, -838.509277, 1091.304931, 10000.0,    1282.366088, -789.049194, 1090.958984, 1277.867919, -836.729492, 1089.964843, 5000.0},
 	{254.247192, -2186.881103, 69.839523, 254.247192, -2186.881103, 69.839523, 18000.0,        258.194702, -2189.647705, 68.511894, 258.194702, -2189.647705, 68.511894, 18000.0},//Остров
 	{2529.435058, -1292.560302, 1035.986450, 2565.777099, -1289.216918, 1036.008422, 10000.0,  2534.403320, -1292.529052, 1035.423950, 2561.230712, -1291.241577, 1035.527465, 5000.0},
 	{2541.924560, 2849.548339, 14.881462, 2615.340332, 2816.088378, 12.891157, 10000.0,        2545.416259, 2845.982666, 14.576963, 2610.759277, 2818.082275, 12.695894, 10000.0},
 	{243.902938, 183.631668, 1003.534179, 230.540069, 139.833114, 1007.353149, 5000.0,         242.159454, 178.959777, 1003.899841, 231.997741, 144.552841, 1006.578918, 10000.0},
 	{-53.051475, 297.723754, 304.415313, -62.646041, 412.396636, 304.636444, 10000.0,          -55.512046, 302.072021, 304.220062, -65.107208, 408.054992, 304.331939, 10000.0},
 	{611.151489, -2433.778320, 27.682476, 663.341430, -2416.404296, 27.959373, 10000.0,        615.516784, -2431.456298, 26.939462, 659.312072, -2419.263671, 27.192876, 10000.0},
 	{704.162292, -2320.963867, 18.977972, 521.811645, -2410.271728, 26.636320, 10000.0,        701.194091, -2324.937744, 18.346849, 525.470336, -2406.964843, 25.812290, 10000.0},
 	{-1349.728149, 355.344940, 9.949817, -1442.894287, 355.093261, 12.113701, 10000.0,         -1354.726440, 355.452301, 10.027938, -1447.874755, 355.066070, 11.672869, 10000.0},
	{1363.425781, 2764.953613, 15.521667, 1129.626464, 2839.630859, 18.612127, 10000.0,        1358.452148, 2765.438476, 15.353730, 1134.168457, 2837.587402, 18.171293, 10000.0},
	{662.374755, -2745.152099, 17.497175, 651.816284, -2582.793701, 10.023596, 10000.0,        659.522888, -2741.117431, 16.730678, 648.728149, -2586.716308, 9.746395, 10000.0},
	{521.730773, -2462.943603, 24.849939, 620.085510, -2436.077880, 30.185886, 10000.0,        526.727294, -2462.848876, 25.010068, 616.600769, -2439.574707, 29.392381, 5000.0},
	{527.627563, -2369.246826, 15.462387, 647.724914, -2368.635742, 17.963073, 10000.0,        530.565368, -2365.425048, 14.134757, 643.033447, -2367.036621, 17.304836, 5000.0},
	{1202.195678, 2050.210205, 153.014587, 1143.619506, 2116.911865, 152.168151, 10000.0,      1198.791137, 2053.851318, 152.624679, 1146.554809, 2112.874023, 151.887374, 10000.0},
	{1347.891967, 192.405166, 302.280273, 1486.606689, 168.460983, 302.608703, 10000.0,        1351.925415, 189.463256, 302.003082, 1481.614624, 168.509307, 302.331512, 10000.0},
	{-2126.074707, 1866.860595, 18.660972, -2122.303466, 1991.380737, 22.865011, 10000.0,      -2124.266845, 1871.508178, 18.298328, -2120.047851, 1986.925659, 22.611532, 10000.0},
	{-2223.489746, 641.524169, 49.861400, -2170.498291, 646.269531, 50.896850, 10000.0,        -2218.495361, 641.290954, 49.884838, -2175.360839, 645.162475, 50.537784, 10000.0},
	{502.764587, -1011.973815, 302.975067, 387.513885, -1000.779846, 314.652709, 10000.0,      497.766021, -1011.983764, 302.855194, 392.296691, -1001.900817, 313.721008, 10000.0},
	{98.315368, 1813.802734, 34.467716, 253.207504, 1925.630126, 28.199733, 10000.0,           102.499000, 1816.513427, 34.081382, 249.174499, 1922.743652, 27.565048, 10000.0},
	{1780.271362, -1984.395385, 27.665086, 1685.565307, -1962.494140, 22.598327, 10000.0,      1778.082153, -1979.927490, 27.169807, 1688.489624, -1958.459594, 22.184738, 10000.0},
	{-189.622131, 25.820526, 6.682484, -196.857299, -51.211700, 13.912197, 10000.0,            -188.562271, 20.940540, 6.432590, -196.358413, -46.258720, 13.444132, 10000.0},
	{-941.320495, 1847.253662, 12.761152, -946.650451, 1953.890014, 16.840118, 10000.0,        -943.862915, 1851.526367, 12.232103, -947.552673, 1948.992431, 16.392707, 10000.0},// 33
	{253.312042, 107.245239, 1004.450073, 246.807815, 130.523605, 1006.034545, 10000.0,        249.086334, 109.879150, 1003.996337, 246.721359, 125.624275, 1005.040039, 10000.0},
	{150.570281, 311.190979, 232.646255, 204.621139, 332.461578, 231.148788, 10000.0,          153.506698, 315.064392, 231.473999, 201.769927, 336.501190, 230.405776, 10000.0},
	{2148.239746, -872.309509, 371.410797, 2055.635742, -822.383361, 365.910797, 10000.0,      2143.762695, -874.397094, 370.637786, 2057.514404, -827.008361, 365.627014, 10000.0},
	{2980.987548, -1551.670288, 191.493118, 3000.561523, -1429.244750, 201.074127, 10000.0,    2976.554199, -1549.564941, 190.538085, 2997.401367, -1433.025756, 200.226669, 10000.0},
	{-474.006896, -211.978622, 91.365829, -460.073364, -49.539710, 74.567298, 10000.0,         -477.927337, -208.964767, 90.626358, -463.571258, -53.097038, 74.235511, 10000.0},
	{1348.483886, -1528.416015, 252.550079, 1279.302978, -1598.718261, 250.864028, 10000.0,    1345.337646, -1532.225708, 251.783584, 1282.512573, -1594.894409, 250.586822, 10000.0},
	{-2099.231445, -175.367401, 47.617313, -2098.884765, -86.248039, 43.453060, 10000.0,       -2103.672607, -173.330841, 46.555152, -2102.869384, -89.255683, 43.175857, 10000.0},
	{-1950.399414, -807.877136, 37.974929, -1961.848632, -915.145751, 37.718223, 10000.0,      -1950.949829, -812.833251, 37.609279, -1960.353271, -910.395324, 37.273818, 10000.0},
	{59.188236, 1570.536132, 22.331878, -30.335710, 1486.095458, 25.159534, 10000.0,           55.415225, 1567.281372, 21.918289, -26.942485, 1489.679565, 24.359510, 10000.0},
	{167.096252, 2216.484375, 233.569564, 28.401611, 2214.875732, 236.418533, 10000.0,         162.345825, 2214.949218, 233.292358, 32.786033, 2212.512939, 235.977706, 10000.0},
	{2619.072021, 844.242492, 13.747384, 2686.208251, 828.543334, 19.616529, 10000.0,          2615.819091, 840.512817, 13.034974, 2681.704833, 826.464538, 18.985404, 10000.0},
	{222.573913, 390.692962, 21.578634, 129.855484, 391.043731, 22.478139, 10000.0,            225.412368, 387.083312, 19.600320, 134.009399, 388.376281, 21.684635, 10000.0},
	{2306.656738, -10.897146, 37.061058, 2307.377197, 81.081687, 36.718261, 10000.0,           2308.667968, -6.375854, 36.345092, 2309.759765, 76.744018, 36.005851, 10000.0},
	{2404.738281, -1885.460205, 16.570159, 2441.915771, -1957.881835, 28.537731, 10000.0,      2406.269775, -1890.219726, 16.538911, 2438.673583, -1954.132934, 27.879491, 10000.0},
	{-1990.397705, 99.281288, 42.720005, -2014.815795, 198.550933, 35.391613, 10000.0,         -1992.179443, 103.889739, 41.953506, -2012.946166, 193.969253, 34.675651, 10000.0}
},
Float:WeaponRange[] =
{
	45.0, // 22 - Colt 45
	45.0, // 23 - Silenced
	45.0, // 24 - Deagle
	50.0, // 25 - Shotgun
	45.0, // 26 - Sawed-off
	50.0, // 27 - Spas
	45.0, // 28 - UZI
	55.0, // 29 - MP5
	100.0, // 30 - AK47
	120.0, // 31 - M4
	45.0, // 32 - Tec9
	110.0, // 33 - Cuntgun
	320.0, // 34 - Sniper
	0.0, // 35 - Rocket launcher
	0.0, // 36 - Heatseeker
	0.0, // 37 - Flamethrower
	85.0  // 38 - Minigun
},
WeaponDamage[13][3] =
{/*
1 - урон в любое место
2 - урон в голову без шлема
3 - урон в голому с шлемом
	 1     2    3*/
    {0,   -2,  -10},// 22
	{5,   3,   -5},//  23
	{23,  18,  8},// 24
	{0,   1,   10},//   25
	{10,  1,   15},//  26
    {10,  1,   15},//  27
	{5,   2,   0},//    28
	{3,   2,   1},//    29
	{5,   2,   1},//    30
	{3,   2,   0},//    31
	{4,   2,   0},//    32
 	{5,   -10, -30},//33 (3 выстрела для снятия шлема -10 | 2 выстрела -30)
  	{0,   -9,  -10}//  34
},
MenuBuy[23][4] =
{/*
1 - ID weapon
2 - кол-во патрон
3 - цена
4 - ID слота
	 1   2    3     4*/
	{22, 30,  248,  0},
	{23, 30,  154,  0},
	{24, 14,  530,  0},
	{25, 24,  620,  1},
	{26, 24,  720,  1},
	{27, 21,  670,  1},
	{28, 100, 930,  2},
	{29, 60,  830,  2},
	{30, 60,  1130, 3},
	{31, 100, 1310, 3},
    {32, 100, 930,  2},
	{33, 10,  1620, 4},
	{34, 20,  1975, 4},
	{16, 2,   420,  5},
	{17, 2,   100,  5},
	{18, 2,   615,  5},
	{0,  1,   850},//АПТЕКА 16
	{0,  1,   1020},//ШЛЕМ
	{0,  1,   1400},//Бомбы
	{0,  1,   1750},
	{0,  1,   920},//Броня 20
	{0,  1,   1275},
	{0,  1,   1600}
},
ScoreKill[8] =//EXP
{//кол-во
	100,//Просто убит
	20,// убито сразу 2-их
	20,// убит в голову
	20,// прилепление мины
	20,// заложка бомбы
	20,// заложка мины
	15,// убит кулаком
	75//  возрождение команды
},
DuelMap[3][3][] =
{
	{"Гольф SF",   "Гольф LS", 			"Warehouse LV"},
	{"no name",    "Спуск на байках", 	"8 трек"},
	{"Гольф SF",   "Гольф LS", 			"Warehouse LV"}
},
DuelText[53][2][] =//{"", ""},
{
	{"duel settings",     "настройки дуэля"},
	{" type duel",        " тип дуэля"},
	{" map",              " карта"},
	{" time of day",      " время суток"},
	{" weather",          " погода"},
	{" weapons", 		  " оружие"},
 	{" health", 		  " здоровье"},
 	{" bulletproof vest", " бронежилет"},
    {" vehicle class",    " класс авто"},
	{" collision car",    " прозрачность авто"},
	{" acceleration",     " ускорение"},//10
	{" nitrous oxide",    " закись азота"},
	{" vehicle health",   " здоровье авто"},
	{" reverse circle",   " обратный круг"},
	{" number of laps",   " количество кругов"},
 	{"~y~off",            "~y~выкл"},
  	{"~y~on",             "~y~вкл"},
   	{"~y~dezmatch",       "~y~дезматч"},
 	{"~y~race",           "~y~гонка"},
  	{"~y~sport",          "~y~спорт"},
  	{"~y~lowrider",       "~y~лоурайдер"},//20
  	{"~y~bikes",          "~y~байки"},
   	{"~y~repair",         "~y~ремонт"},
   	{"~y~full repair",    "~y~полн ремонт"},
    {" vehicle",          " транспорт"},
    {" color I",          " цвет I"},
    {" color II",         " цвет II"},
    {" your bet",         " ваша ставка"},
    {" ready to play",    " готов к игре"},
    {"lap",               "круг"},
    {"end race",          "конец гонки"},//30
    {"~y~no name",        "~y~no name"},
    {"~y~descent on bikes", "~y~спуск на байках"},
    {"~y~8 track", 		  "~y~8 трек"},
    {"~y~golf sf",        "~y~гольф CЃ"},
	{"~y~golf ls",        "~y~гольф ‡C"},
	{"~y~warehouse",      "~y~склад"},
	{"~y~morning",        "~y~утро"},//37
	{"~y~morning II",     "~y~утро II"},
	{"~y~midday",         "~y~полдень"},
	{"~y~evening",        "~y~вечер"},//40
	{"~y~evening II",     "~y~вечер II"},
	{"~y~midnight",       "~y~полночь"},
	{"~y~clear",          "~y~ясная"},//43
	{"~y~sunny",          "~y~солнечная"},
	{"~y~sunny II",       "~y~солнечная II"},
	{"~y~overcast",       "~y~пасмурная"},
	{"~y~overcast II",    "~y~пасмурная II"},
	{"~y~rain",           "~y~дождь"},
	{"~y~foggy",          "~y~туман"},
	{"~y~foggy II",       "~y~туман II"},
	{"~y~storm",          "~y~шторм"},
	{"~y~storm II",       "~y~шторм II"}
},
Float:PositionWeaponID[40][6] =
{/*
1 - ID объекта
2 - Y X X Zoom
3 - ID weapon
     1                   2 				 3*/
	{346.0,    -20.0, 0.0, -40.0, 0.7,   22.0},
	{347.0,    -20.0, -10.0, -45.0, 0.7, 23.0},
	{348.0,    -20.0, -10.0, -40.0, 0.7, 24.0},
	{349.0,    -20.0, -10.0, -40.0, 1.1, 25.0},
	{350.0,    -20.0, -10.0, -40.0, 1.0, 26.0},
	{351.0,    -20.0, -10.0, -40.0, 1.0, 27.0},
	{352.0,    -20.0, -10.0, -45.0, 0.7, 28.0},
	{353.0,    -20.0, 0.0, -45.0, 0.8,   29.0},
	{372.0,    -20.0, -10.0, -45.0, 0.8, 32.0},
	{355.0,    -20.0, -10.0, -40.0, 1.1, 30.0},
	{356.0,    -20.0, -10.0, -40.0, 1.1, 31.0},
	{357.0,    -20.0, -5.0, -40.0, 0.7,  33.0},
	{358.0,    -20.0, -10.0, -40.0, 0.7, 34.0},
	{342.0,    -20.0, -10.0, -40.0, 0.6, 16.0},
	{343.0,    -20.0, -10.0, -40.0, 0.6, 17.0},
	{344.0,    -20.0, -10.0, -40.0, 0.7, 18.0},//15
	{1240.0,   0.0, 0.0, 0.0, 1.0,       0.0},//аптечка
	{1242.0,   0.0, 0.0, 0.0, 1.0,       0.0},//броня
	{19514.0,  -25.0, -90.0, 0.0, 0.8,   0.0},//шлем
	{1654.0,   0.0, 0.0, 190.0, 1.0,     0.0},//бомба
	{19797.0,  0.0, 0.0, 190.0, 1.0,     0.0},//мина
	{11738.0,  -20.0, 0.0, 177.0, 1.0,   0.0},//аптечка ящик
	{2358.0,   -20.0, 0.0, 177.0, 1.0,   0.0},//аммо
	{363.0,    -25.0, 0.0, 180.0, 1.0,   39.0},//Satchel Charge //23
	{359.0,    -25.0, 0.0, 60.0, 1.5,	 35.0},//РПГ
	{361.0,    -25.0, -25.0, 0.0, 2.6,	 37.0},//огнемет
	{362.0,    -25.0, -25.0, 0.0, 2.6,	 38.0},//миниган
	{365.0,    -25.0, 0.0, 0.0, 0.7,	 41.0},//Spraycan
	{366.0,    -25.0, 40.0, 0.0, 1.6,	 42.0},//огнетушитель
	{19555.0,  -30.0, 10.0, 60.0, 1.0,	 0.0},//кулаки
	{331.0,    -25.0, -20.0, 70.0, 0.7,	 1.0},//кастет
	{333.0,    130.0, 30.0, 80.0, 0.8,	 2.0},//клюшка
	{334.0,    -25.0, -50.0, 0.0, 1.0,	 3.0},//дубинка
	{336.0,    -25.0, -50.0, 0.0, 1.6,	 5.0},//бита
	{337.0,    -25.0, -50.0, 50.0, 1.8,  6.0},//лопат
	{339.0,    -25.0, -50.0, 0.0, 1.6,	 8.0},//катана
	{341.0,    -25.0, -20.0, 70.0, 1.7,  9.0},//пила
	{321.0,    -25.0, -20.0, 70.0, 1.3,	 10.0},//Dildo
	{325.0,    -25.0, -20.0, 70.0, 1.7,	 14.0},//цветы
	{326.0,    -25.0, -20.0, 70.0, 0.7,	 15.0}//трость
},
Float:VehicleFree[MAX_VEHICLE][10] =
{// ID car    					X Y Z                   color         wolr  int
    {469.0, -974.3085, 1032.6578, 1348.6160, 0.0000, -1.0, -1.0, 10.0, 7.0, 1.0},//интерьер 10
    {469.0, -1132.2709, 1086.8616, 1349.3489, 180.0000, -1.0, -1.0, 10.0, 7.0, 1.0},//интерьер 10
    {442.0, 844.6296, -1098.1642, 23.9600, -90.0000, 0.0, 0.0, 10.0, 2.0, 1.0},
	{405.0, 927.8389, -1124.3463, 23.8000, 0.0000, 0.0, 0.0, 10.0, 2.0, 1.0},
	{409.0, 923.0518, -1123.2306, 23.7000, 0.0000, 0.0, 0.0, 10.0, 2.0, 1.0},
	{445.0, 933.6266, -1124.2893, 23.7000, 0.0000, 0.0, 0.0, 10.0, 2.0, 1.0},
	{421.0, 938.2234, -1124.0541, 23.7000, 0.0000, 0.0, 0.0, 10.0, 2.0, 1.0},
	{442.0, 911.4471, -1102.3529, 24.1000, 85.0000, 0.0, 0.0, 10.0, 2.0, 1.0},
	{442.0, 929.8153, -1065.7307, 24.1000, 125.0000, 0.0, 0.0, 10.0, 2.0, 1.0},
	{442.0, 929.1385, -1078.5660, 24.0000, 90.0000, 0.0, 0.0, 10.0, 2.0, 1.0},
	{405.0, 922.4297, -1085.2622, 24.1000, 0.0000, 0.0, 0.0, 10.0, 2.0, 1.0},
	{487.0, 816.4881, -1102.8452, 35.0000, -90.0000, 0.0, 0.0, 10.0, 2.0, 1.0},
	{442.0, 839.6332, -1108.5349, 23.9600, -50.0000, 0.0, 0.0, 10.0, 2.0, 1.0},
	{488.0, 816.8942, -1086.7329, 31.3000, -90.0000, 0.0, 0.0, 10.0, 2.0, 1.0},
	{488.0, 815.7275, -1118.8856, 31.3000, -90.0000, 0.0, 0.0, 10.0, 2.0, 1.0},
	{532.0, -82.2844, 101.2743, 4.0000, 158.0000, -1.0, -1.0, 10.0, 4.0, 1.0},
	{478.0, -89.3629, 53.8444, 3.0000, -22.0000, -1.0, -1.0, 10.0, 4.0, 1.0},
	{478.0, -106.0767, 9.2992, 3.0000, 0.0000, -1.0, -1.0, 10.0, 4.0, 1.0},
	{478.0, -111.3056, -17.5605, 3.0000, 32.0000, -1.0, -1.0, 10.0, 4.0, 1.0},
	{478.0, -75.9560, 4.6012, 3.0000, -110.0000, -1.0, -1.0, 10.0, 4.0, 1.0},
    {548.0, -2314.0098, 1544.7064, 20.4000, 90.0000, -1.0, -1.0, 10.0, 6.0, 1.0},
	{532.0, -1113.8727, -1685.1499, 77.1343, -91.0000, -1.0, -1.0, 10.0, 8.0, 1.0},
	{478.0, -1124.4425, -1651.1550, 76.2561, 0.0000, -1.0, -1.0, 10.0, 8.0, 1.0},
	{470.0, 222.0699, 1855.2881, 12.7000, 0.0000, -1.0, -1.0, 10.0, 10.0, 1.0},
	{470.0, 213.9043, 1855.4340, 12.7000, 0.0000, -1.0, -1.0, 10.0, 10.0, 1.0},
	{470.0, 204.8088, 1861.8390, 12.9000, -90.0000, -1.0, -1.0, 10.0, 10.0, 1.0},
	{470.0, 203.8336, 1869.3130, 12.9000, -90.0000, -1.0, -1.0, 10.0, 10.0, 1.0},
	{596.0, -57.2851, 319.4063, 300.0002, 180.0000, -1.0, -1.0, 10.0, 18.0, 1.0},
	{427.0, -62.7196, 277.7066, 300.3597, 900.0000, -1.0, -1.0, 10.0, 18.0, 1.0},
	{596.0, -54.1187, 335.5658, 298.8577, 179.0000, -1.0, -1.0, 10.0, 18.0, 1.0},
	{548.0, -82.6622, 319.7298, 295.9970, 0.0000, -1.0, -1.0, 10.0, 18.0, 1.0},
	{457.0, 1302.8367, 2791.2229, 10.5500, 60.0000, -1.0, -1.0, 10.0, 22.0, 1.0},
	{457.0, 1181.2220, 2813.1431, 10.5500, 349.9969, -1.0, -1.0, 10.0, 22.0, 1.0},
	{457.0, 1225.1970, 2768.8118, 10.5500, 4.0000, -1.0, -1.0, 10.0, 22.0, 1.0},
	{457.0, 1332.8356, 2752.1057, 10.5500, 59.9963, -1.0, -1.0, 10.0, 22.0, 1.0},
	{457.0, 1177.0055, 2729.8208, 10.3751, 0.0000, -1.0, -1.0, 10.0, 22.0, 1.0},
	{454.0, 669.6487, -2666.5737, 0.0000, 0.0000, -1.0, -1.0, 10.0, 26.0, 1.0},
	{452.0, 612.5497, -2573.2717, 0.0000, -173.0000, -1.0, -1.0, 10.0, 23.0, 1.0},
	{452.0, 628.3060, -2589.7107, 0.0000, 163.0000, -1.0, -1.0, 10.0, 23.0, 1.0},
	{453.0, 606.5989, -2525.6636, 0.0000, 57.0000, -1.0, -1.0, 10.0, 23.0, 1.0},
	{452.0, 552.8799, -2681.9988, 0.0000, 86.0000, -1.0, -1.0, 10.0, 23.0, 1.0},
	{452.0, 622.2236, -2775.5859, 0.0000, -21.0000, -1.0, -1.0, 10.0, 23.0, 1.0},
	{452.0, 605.3599, -2790.4136, 0.0000, -17.0000, -1.0, -1.0, 10.0, 23.0, 1.0},
	{487.0, 1475.8461, 168.7080, 296.4000, 90.0000, -1.0, -1.0, 10.0, 27.0, 1.0},
	{482.0, 1458.6885, 177.7338, 296.4000, 25.0000, -1.0, -1.0, 10.0, 27.0, 1.0},
	{490.0, 1456.4773, 169.3454, 296.4000, 0.0000, -1.0, -1.0, 10.0, 27.0, 1.0},
	{482.0, 1457.6630, 159.2410, 296.4000, 144.0000, -1.0, -1.0, 10.0, 27.0, 1.0},
	{490.0, 1362.8422, 162.5689, 296.4000, 0.0000, -1.0, -1.0, 10.0, 27.0, 1.0},
	{490.0, 1362.8422, 179.6299, 296.4000, 0.0000, -1.0, -1.0, 10.0, 27.0, 1.0},
	{431.0, 1370.0151, 162.3548, 296.3000, 0.0000, -1.0, -1.0, 10.0, 27.0, 1.0},
	{431.0, 1370.0151, 178.5488, 296.3000, 0.0000, -1.0, -1.0, 10.0, 27.0, 1.0},
	{470.0, 141.8902, 1926.2758, 18.9000, 90.0000, -1.0, -1.0, 10.0, 31.0, 1.0},
	{470.0, 141.9415, 1933.1382, 19.0000, 90.0000, -1.0, -1.0, 10.0, 31.0, 1.0},
	{433.0, 122.4308, 1899.3619, 18.5000, 3.0000, -1.0, -1.0, 10.0, 31.0, 1.0},
	{432.0, 133.2649, 1837.1246, 17.5000, 0.0000, -1.0, -1.0, 10.0, 31.0, 1.0},
	{432.0, 114.5855, 1850.4738, 17.5000, 0.0000, -1.0, -1.0, 10.0, 31.0, 1.0},
	{432.0, 114.5855, 1836.1599, 17.5000, 0.0000, -1.0, -1.0, 10.0, 31.0, 1.0},
	{432.0, 133.2649, 1850.6960, 17.5000, 0.0000, -1.0, -1.0, 10.0, 31.0, 1.0},
	{519.0, 308.3109, 1916.5667, 18.5000, 180.0000, -1.0, -1.0, 10.0, 31.0, 1.0},
	{519.0, 308.6361, 1867.8601, 18.5000, 180.0000, -1.0, -1.0, 10.0, 31.0, 1.0},
	{529.0, 2053.5044, -846.5337, 359.1000, 90.0000, -1.0, -1.0, 10.0, 37.0, 1.0},
	{413.0, 2053.9246, -852.1035, 359.5000, 270.0000, -1.0, -1.0, 10.0, 37.0, 1.0},
	{530.0, 2086.9807, -902.6345, 360.7000, 140.0000, -1.0, -1.0, 10.0, 37.0, 1.0},
	{530.0, 2076.8630, -913.3816, 360.7000, 49.9988, -1.0, -1.0, 10.0, 37.0, 1.0},
	{548.0, -1954.7400, -736.7770, 37.6050, 220.0000, -1.0, -1.0, 10.0, 42.0, 1.0},
	{417.0, -1953.9750, -980.9060, 35.9410, 312.0000, -1.0, -1.0, 10.0, 42.0, 1.0},
	{486.0, 2688.0000, 901.0000, 10.3000, 173.9960, -1.0, -1.0, 10.0, 45.0, 1.0},
	{524.0, 2617.9028, 836.0092, 6.4000, 194.0000, -1.0, -1.0, 10.0, 45.0, 1.0},
	{455.0, 2677.5757, 870.1696, 11.5000, 0.0000, -1.0, -1.0, 10.0, 45.0, 1.0},
	{450.0, 2706.9639, 823.5313, 11.0000, 0.0000, -1.0, -1.0, 10.0, 45.0, 1.0},
	{515.0, 2708.2173, 834.6874, 10.8000, 350.0000, -1.0, -1.0, 10.0, 45.0, 1.0},
	{552.0, 2654.3000, 877.8000, 5.9000, 0.0000, -1.0, -1.0, 10.0, 45.0, 1.0},
	{440.0, 2619.0256, 807.9631, 11.2000, 270.0000, -1.0, -1.0, 10.0, 45.0, 1.0},
	{486.0, 2706.8999, 798.5000, 11.2000, 143.7460, -1.0, -1.0, 10.0, 45.0, 1.0},
	{478.0, 148.2944, 322.7122, 1.4340, 270.0000, -1.0, -1.0, 10.0, 46.0, 1.0},
	{437.0, 2419.1001, -1913.1000, 13.6000, 0.0000, -1.0, -1.0, 10.0, 48.0, 1.0},
	{439.0, 2402.7000, -1927.6000, 13.4000, 0.0000, -1.0, -1.0, 10.0, 48.0, 1.0},
	{548.0, 2382.4004, -1948.5996, 22.9000, 0.0000, -1.0, -1.0, 10.0, 48.0, 1.0},
	{515.0, 2412.8000, -1921.3000, 14.5000, 346.0000, -1.0, -1.0, 10.0, 48.0, 1.0},
	{584.0, 2411.9949, -1931.3455, 14.5885, 0.0000, -1.0, -1.0, 10.0, 48.0, 1.0},
	{414.0, 2373.8000, -1926.3000, 13.5000, 0.0000, -1.0, -1.0, 10.0, 48.0, 1.0},
	{402.0, -2632.3513, -35.0928, 4.0000, 180.0000, -1.0, -1.0, 480.0, 202.0, 0.0},//Free Mode
	{415.0, -2628.1995, -34.9324, 4.0000, 180.0000, -1.0, -1.0, 480.0, 202.0, 0.0},
	{451.0, -2624.2239, -35.1356, 4.0000, 180.0000, -1.0, -1.0, 480.0, 202.0, 0.0},
	{411.0, -2617.0532, -55.0320, 4.0000, 0.0000, -1.0, -1.0, 480.0, 202.0, 0.0},
	{541.0, -2623.5229, -54.5576, 4.0000, 0.0000, -1.0, -1.0, 480.0, 202.0, 0.0},
	{477.0, -2643.5137, -55.1311, 4.0000, 0.0000, -1.0, -1.0, 480.0, 202.0, 0.0},
	{482.0, -2676.4863, -22.3525, 4.0000, 180.0000, -1.0, -1.0, 480.0, 202.0, 0.0},
	{489.0, -2693.0439, -22.5047, 4.0000, 180.0000, -1.0, -1.0, 480.0, 202.0, 0.0},
	{494.0, -2663.3467, -54.7123, 4.0000, 0.0000, -1.0, -1.0, 480.0, 202.0, 0.0},
	{495.0, -2688.3076, -22.3440, 4.0000, 180.0000, -1.0, -1.0, 480.0, 202.0, 0.0},
	{496.0, -2689.8311, -54.9805, 4.0000, 0.0000, -1.0, -1.0, 480.0, 202.0, 0.0},
	{502.0, -2676.5735, -54.8752, 4.0000, 0.0000, -1.0, -1.0, 480.0, 202.0, 0.0},
	{503.0, -2669.9966, -54.9554, 4.0000, 0.0000, -1.0, -1.0, 480.0, 202.0, 0.0},
	{506.0, -2683.2651, -54.6355, 4.0000, 0.0000, -1.0, -1.0, 480.0, 202.0, 0.0},
	{558.0, -2656.6873, -54.4772, 4.0000, 0.0000, -1.0, -1.0, 480.0, 202.0, 0.0},
	{559.0, -2664.0264, -34.8671, 4.0000, 180.0000, -1.0, -1.0, 480.0, 202.0, 0.0},
	{560.0, -2668.1885, -34.9233, 4.0000, 180.0000, -1.0, -1.0, 480.0, 202.0, 0.0},
	{562.0, -2672.7009, -34.7610, 4.0000, 180.0000, -1.0, -1.0, 480.0, 202.0, 0.0},
	{565.0, -2650.1797, -54.6783, 4.0000, 0.0000, -1.0, -1.0, 480.0, 202.0, 0.0},
	{566.0, -2616.8530, -34.6853, 4.0000, 0.0000, -1.0, -1.0, 480.0, 202.0, 0.0},
	{579.0, -2682.7446, -22.8357, 4.0000, 180.0000, -1.0, -1.0, 480.0, 202.0, 0.0},
	{587.0, -2630.1965, -54.6713, 4.0000, 0.0000, -1.0, -1.0, 480.0, 202.0, 0.0},
	{602.0, -2636.8044, -54.7051, 4.0000, 0.0000, -1.0, -1.0, 480.0, 202.0, 0.0},
	{603.0, -2619.3909, -22.1553, 4.0000, 180.0000, -1.0, -1.0, 480.0, 202.0, 0.0},
	{461.0, -2616.8838, -26.3433, 3.8000, 111.0000, -1.0, -1.0, 480.0, 202.0, 0.0},
	{521.0, -2616.8250, -27.9838, 3.8000, 103.0000, -1.0, -1.0, 480.0, 202.0, 0.0},
	{522.0, -2616.6501, -29.4388, 3.8000, 103.0000, -1.0, -1.0, 480.0, 202.0, 0.0},
	{581.0, -2616.6724, -30.7914, 3.8000, 94.0000, -1.0, -1.0, 480.0, 202.0, 0.0},
	{481.0, -2694.5208, -36.6895, 3.8330, 180.0000, -1.0, -1.0, 480.0, 202.0, 0.0},
	{510.0, -2694.5315, -31.4679, 3.9300, 180.0000, -1.0, -1.0, 480.0, 202.0, 0.0},
	{481.0, -2694.5313, -34.0191, 3.8330, 180.0000, -1.0, -1.0, 480.0, 202.0, 0.0},
	{446.0, -648.6968, 877.2410, -0.5781, 228.1188, 1.0, 36.0, 480.0, 202.0, 0.0},
	{493.0, -648.4504, 866.8524, -0.1323, 226.9326, -1.0, -1.0, 480.0, 202.0, 0.0}
},
Float:FreeModePos[8][4] =
{
	{-2654.9063, -32.1489, 6.1328, 271.0473},
	{-2654.7568, -29.7615, 6.1328, 269.4806},
	{-2654.7319, -26.0860, 6.1328, 270.1073},
	{-2650.2168, -24.1088, 6.1328, 179.8665},
	{-2646.9353, -24.2561, 6.1328, 179.5532},
	{-2642.8469, -27.2420, 6.1328, 88.6857},
	{-2643.1614, -30.2944, 6.1328, 90.5657},
	{-2642.8928, -32.1390, 6.1328, 90.2523}
},
Float:DuelCameraRace[3][7] =
{
	{-330.490386, 1529.565307, 85.111091, -326.953369, 1526.098999, 84.422203, 0.0},
 	{-2393.097900, -1949.473144, 314.158935, -2388.311523, -1948.264404, 313.365417, 0.0},
  	{-1315.800292, -136.818298, 1068.958618, -1319.953247, -139.579742, 1068.601196, 7.0}
},
Float:DuelRacePoint1[70][5] =
{
 	{2.0, -299.1963, 1470.1817, 74.7947, 12.0},
	{0.0, -306.0000, 1395.0000, 72.3076, 15.0},
	{0.0, -372.0000, 1462.0000, 62.4758, 15.0},
	{0.0, -327.0000, 1315.0000, 49.2645, 15.0},
	{0.0, -433.0374, 1442.7271, 33.9973, 20.0},
	{2.0, -455.0000, 1583.0000, 36.2925, 15.0},
	{0.0, -384.1056, 1778.3897, 39.0259, 15.0},
	{0.0, -402.0000, 1915.0000, 58.0482, 18.0},
	{0.0, -450.7868, 1758.5870, 72.0448, 18.0},
	{0.0, -475.6628, 1952.2868, 80.3155, 15.0},
	{0.0, -387.4317, 2077.3305, 61.0651, 16.0},
	{0.0, -515.7555, 1984.3278, 60.3564, 21.0},
	{2.0, -697.4780, 2062.8862, 60.3828, 18.0},
	{0.0, -882.1966, 1985.6986, 60.2104, 13.0},
	{0.0, -860.1492, 1811.8593, 60.1810, 15.0},
	{0.0, -1026.0678, 1855.0444, 56.0424, 15.0},
	{2.0, -1177.5000, 1798.3404, 40.4250, 15.0},
	{0.0, -1306.5443, 1853.2537, 38.4586, 15.0},
	{2.0, -1513.5505, 1843.5257, 30.1172, 12.0},
	{0.0, -1730.0361, 1821.6330, 23.9697, 15.0},
	{2.0, -1799.0162, 1975.2341, 13.4613, 15.0},
	{2.0, -1849.5113, 2183.5495, 6.1683, 15.0},
	{0.0, -1990.7658, 2265.3425, 13.3395, 18.0},
	{2.0, -2001.7874, 2412.2250, 33.5569, 15.0},
	{2.0, -1867.7291, 2545.6987, 49.2824, 15.0},
	{0.0, -1813.4440, 2681.7282, 51.4593, 20.0},
	{2.0, -1918.7669, 2614.8278, 47.7758, 13.0},
	{2.0, -2087.8049, 2652.8603, 52.4302, 13.0},
	{2.0, -2338.1020, 2676.3442, 57.7170, 12.0},
	{2.0, -2698.2724, 2654.8637, 86.6060, 12.0},
	{2.0, -2765.1938, 2330.9729, 67.4145, 12.0},
	{2.0, -2681.3452, 2117.0664, 55.8125, 24.0},
    {2.0, -2681.5857, 1863.6700, 67.3092, 24.0},
    {2.0, -2681.0000, 1552.0000, 57.4799, 24.0},
	{0.0, -2675.8381, 1224.6105, 55.6296, 30.0},
    {2.0, -2748.3508, 1168.8604, 52.1266, 14.0},
    {0.0, -2722.1564, 1088.8739, 46.4734, 16.0},
    {0.0, -2571.7541, 1235.7587, 35.0156, 15.0},
    {0.0, -2464.9841, 1209.9346, 35.0859, 18.0},
    {2.0, -2540.7553, 1190.0885, 43.5516, 15.0},
    {0.0, -2667.1237, 1200.4815, 55.4296, 30.0},
    {2.0, -2681.0000, 1552.0000, 57.4799, 24.0},
    {2.0, -2681.5857, 1863.6700, 67.3092, 24.0},
    {2.0, -2681.3452, 2117.0664, 55.8125, 24.0},
    {0.0, -2736.5686, 2352.0595, 72.2334, 16.0},
    {2.0, -2708.9560, 2534.3784, 76.8502, 16.0},
    {2.0, -2279.6147, 2639.8237, 55.4296, 14.0},
    {2.0, -1939.4281, 2462.0131, 54.3960, 14.0},
    {2.0, -1787.7297, 2189.1418, 16.3633, 11.0},
    {2.0, -1602.8702, 1977.5104, 18.3900, 20.0},
    {0.0, -1524.6655, 1843.0633, 29.4495, 30.0},
    {2.0, -1317.8974, 1856.7791, 38.0548, 15.0},
    {0.0, -1181.3681, 1798.3696, 40.6379, 15.0},
    {2.0, -1038.4843, 1850.8154, 49.5671, 15.0},
    {0.0, -922.4205, 1792.9669, 60.1846, 15.0},
    {2.0, -860.3233, 2004.2102, 60.3818, 18.0},
    {2.0, -697.1687, 2062.7807, 60.3828, 18.0},
    {0.0, -518.3169, 1985.1567, 60.3749, 20.0},
    {0.0, -390.2578, 2080.1130, 61.1885, 15.0},
    {0.0, -478.6968, 1946.3354, 82.3826, 15.0},
    {0.0, -452.2933, 1758.6844, 72.2515, 18.0},
    {0.0, -409.9732, 1918.1944, 57.7701, 15.0},
    {2.0, -379.8805, 1789.4237, 47.5153, 15.0},
    {2.0, -436.1382, 1643.3916, 35.7263, 20.0},
    {0.0, -433.0374, 1442.7271, 33.9973, 20.0},
    {0.0, -326.0733, 1316.7326, 47.0385, 15.0},
    {0.0, -371.4333, 1462.7773, 62.5781, 15.0},
    {0.0, -307.2440, 1395.3231, 72.2949, 15.0},
    {1.0, -302.3333, 1519.1903, 75.3593, 15.0},
    {1.0, -302.3333, 1519.1903, 75.3593, 15.0}
},
Float: DuelRacePoint2[25][5] =
{
    {0.0, -2343.0864, -1941.1750, 291.4063, 10.0},
    {0.0, -2231.8603, -1923.9171, 239.8336, 3.0},
    {0.0, -2198.6093, -1913.6127, 237.1679, 3.0},
    {0.0, -2168.1086, -1896.2004, 234.4723, 3.0},
    {0.0, -2172.1032, -1856.3549, 221.4621, 3.0},
    {0.0, -2166.6806, -1810.4973, 215.9486, 3.0},
    {0.0, -2130.8872, -1778.8479, 205.8979, 8.0},
    {3.0, -2100.5820, -1744.6080, 195.3328, 5.0},
    {0.0, -2060.9077, -1639.1613, 170.9674, 18.0},
    {0.0, -2020.7791, -1540.3308, 122.5225, 15.0},
    {0.0, -2060.4274, -1450.4483, 99.6776, 15.0},
    {0.0, -1988.8784, -1509.0285, 80.0351, 28.0},
	{0.0, -2003.7287, -1702.1539, 82.1641, 14.0},
    {0.0, -2101.6501, -1888.4577, 105.3177, 14.0},
    {0.0, -2157.9555, -2027.8399, 93.2630, 8.0},
    {0.0, -2255.1750, -2132.5041, 56.2658, 8.0},
	{1.0, -2376.0366, -2196.2639, 33.3381, 5.0},
	{1.0, -2376.0366, -2196.2639, 33.3381, 5.0},
	{0.0, -2133.2587, -1919.2913, 116.1651, 4.5},
	{0.0, -2254.1689, -2072.3781, 120.4677, 4.5},
	{0.0, -2456.7441, -2074.9196, 126.5000, 4.5},
	{0.0, -2644.9013, -1728.1320, 259.1964, 7.0},
	{0.0, -2579.5092, -1831.5733, 270.3999, 4.4},
	{1.0, -2446.7724, -1918.0979, 303.2460, 5.0},
	{1.0, -2446.7724, -1918.0979, 303.2460, 5.0}
},
Float:DuelRacePoint3[5][5] =
{
    {2.0, -1398.1737, -198.6464, 1043.1165, 12.0},
    {2.0, -1522.2788, -169.5174, 1050.6771, 12.0},
    {2.0, -1399.7988, -232.8788, 1051.0270, 8.0},
    {2.0, -1265.4842, -191.0280, 1050.6634, 12.0},
    {2.0, -1398.1737, -198.6464, 1043.1165, 12.0}
},
Float:DuelPosRace[3][16] =
{
	{-299.5891, 1511.3252, 75.1910, 183.3115, -305.3356, 1510.9932, 75.1910, 183.3114, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
	{-2388.0854, -1939.6888, 303.4167, 264.1679, -2387.7825, -1935.7076, 303.6674, 267.4391, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},

	{-1398.1980, -237.1643, 1043.1602, 8.2731, -1392.5317, -236.6636, 1043.1595, 9.5012, -1396.6141, -245.8794, 1043.2585, 8.0862, -1391.1549, -245.4440, 1043.3093, 8.9570}
},
Float:DuelZona[3][6] =
{
	{-2712.9194, -230.7304, 4.0, -2791.1833, -273.6823, 13.0},
    {787.3384, -1192.3970, 10.0, 724.6735, -1309.7029, 32.0},
    {2616.7253, 2850.8875, 7.0, 2539.1707, 2803.3655, 27.0}
},
ClassVehicleDuel[3][24] =
{// первое число это количество транспорта
	{23,  402, 411, 415, 429, 451, 475, 477, 494, 496, 502, 503, 504, 506, 541, 558, 559, 560, 562, 565, 587, 589, 602, 603},//Спорт
	{7,   412, 534, 535, 536, 566, 567, 576},//Лоурайдер
	{14,  448, 461, 462, 463, 468, 471, 481, 509, 510, 521, 522, 523, 581, 586}//Мото
},
RoomAuto[197] =
{
	400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440,
	441, 442, 443, 444, 445, 446, 447, 448, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485,
	486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528,
	529, 530, 531, 532, 533, 534, 535, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 573, 574, 575,
	576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 609
},
WheelCarId[18] =
{
	1082, 1085, 1096, 1097, 1098,
	1077, 1083, 1078, 1076, 1084,
	1025,
	1079, 1075, 1074, 1081, 1080, 1073
},
InteractionsNumber[5][95] =//5502
{//первое число это количество
 	{33, 	19006, 19007, 19008, 19009, 19010, 19011, 19012, 19013, 19014, 19015, 19016, 19017, 19018, 19019, 19020, 19021, 19022, 19023, 19024, 19025, 19026, 19027, 19028, 19029, 19030, 19031, 19032, 19033, 19034, 19035, 19138, 19139, 19140},
    {94,	18891, 18892, 18893, 18894, 18895, 18896, 18897, 18898, 18899, 18900, 18901, 18902, 18903, 18904, 18905, 18951, 18950, 18949, 18948, 18947, 18946, 18945, 18944, 19098, 19097, 19096, 18962, 19095, 18970, 18973, 18972, 18971, 19099, 19100, 18636, 18939, 18941, 18940, 18942, 18943, 18955, 18956, 18957, 18958, 18959, 19093, 19160, 18926, 18927, 18928, 18929, 18930, 18931, 18932, 18933,18934, 18935,19528,18921,18922, 18923, 18924, 18640,
	19274,  18969, 18968, 18967, 19101, 19102, 19103, 19104, 19105, 19106, 19107, 19108, 19109, 19110, 19111, 19112, 19113, 19114, 19115, 19116, 19117, 19118, 19119, 19120, 18936, 18937, 18938, 18953, 18954, 18964, 18966},
	{14, 	18911, 18912, 18913, 18914, 18915, 18916, 18917, 18918, 18919, 18920, 19036, 19037, 19038, 11704},//19801
 	{6, 	18643, 19080, 19081, 19082, 19083, 19084},
 	{5, 	19078, 19094, 19137, 19591, 19163}
},
Float:PositionLines[2][15] =
{
	{141.0, 155.5, 170.0, 184.5, 199.0, 213.5, 140.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},//меню взаимодействий
    {149.0, 164.0, 178.0, 192.0, 206.0, 220.0, 234.0, 248.0, 262.0, 276.0, 290.0, 304.0, 318.0, 332.0, 346.0}//duel
},
SkinChoice[2][13] =
{
	{285, 284, 280, 281, 166, 165, 283, 288, 282, 286, 306, 307, 309},
	{124, 126, 292, 122, 123, 109, 108, 114, 28, 30, 192, 195, 65}
},
LevelScore[MAX_LEVEL][2] =
{/*/
1 кол во EXP для открытие след ранга
2 ID TextDrawInfo
	 1		 	2*/
	{150,    	-1},//0
	{2050,   	22},//1 	откроется стиль боя
	{5600,   	36},//2 	смешанный бой
	{10100,  	105},//3 	откроется лазер, быстрая закупка
	{15020,  	25},//4 	откроется банданы
	{20110,  	23},//5 	открываются очки
	{32110,  	-1},//6
	{47110,  	24},//7 	откроются головные уборы
	{63110,  	33},//8 	откроется прочие
	{96110,	 	35},//9 	откроется mega jump
	{130050, 	34},//10 	откроется оружие на теле
	{180550, 	-1},//11
	{248005, 	-1},//12
	{299005, 	-1},//13
	{364600, 	-1},//14
    {420800, 	-1},//15
    {490080, 	-1},//16
    {559700, 	-1},//17
    {670600, 	-1},//18
    {790000, 	-1}//19
},
TextDrawInfo[109][2][] =//{"", ""}, 5502
{
	{"headshot bonus  %d",    	"выстрел в голову  %d"},
	{"multi kill  %d",        	"мульти убийство  %d"},
	{"no",                    	"нет"},
	{"yes",                   	"да"},
	{"Interaction menu",      	"Меню взаимодействия"},
	{" medical kit",          	" аптечка"},
	{" bulletproof vest",     	" бронежилет"},
	{" explosive device",     	" взрывное устройства"},
	{" masking",              	" Маскировка"},
	{" inventory",            	" Инвентарь"},
	{" commit suicide",       	" Легкий путь"},
	{" bulletproof vest",     	" бронежилет"},
    {" standard",             	" стандарт"},
    {" heavy",                	" тяжелый"},
    {" superheavy",           	" сверхтяжелый"},
    {" remove body armor",    	" снять бронежилет"},
    {" explosive device",     	" взрывное устройство"},
	{" dynamite",             	" динамит"},
	{" sticky dynamite",      	" липкий динамит"},
	{" land mina",            	" Наземная мина"},
	{" remov",             	  	" убрать"},
	{" inventory",            	" инвентарь"},
	{" style battle",         	" стиль боя"},
	{" glasses",              	" очки"},
	{" headgear",             	" головные уборы"},//24
	{" bandana/mask",         	" банданы/маски"},
	{" laser sight",          	" лазерный прицел"},
	{"~r~~h~red",             	"~r~~h~красный"},
	{"~b~~h~blue",            	"~b~~h~синий"},
	{"~p~~h~pink",            	"~p~~h~розовый"},
	{"~y~orange",             	"~y~оранжевый"},
	{"~g~~h~green",           	"~g~~h~зеленый"},
	{"~y~~h~yellow",          	"~y~~h~желтый"},
	{" other",                	" прочие"},//33
	{" weapons on body",      	" оружие на теле"},//34
	{" mega jump",            	" мега прыжок"},
	{" mixed fight",          	" смешанный бой"},
	{"fist kill  %d",         	"первое убийство  %d"}, //37
	{"_",                     	"_"},
	{" ~y~free mode",         	" ~y~Свободный режим"},
	{"off",                   	"выкл"},//40
	{"on",                    	"вкл"},
	{"closed",                	"закрыть"},
	{"action",                	"действие"},//43
	{" passive mode",         	"пассивный режим"},
	{" spawn vehicle",        	"Coџљa¦© aў¦oЇo—њћ©"},
	{" spawn jet pack",       	"Coџљa¦© pa®e‰"},
	{"use to control arrows  ~g~~h~~h~Num Lock~w~, choose: ~g~~h~~h~~k~~PED_SPRINT~~w~, back: ~g~~h~~h~~k~~SNEAK_ABOUT~", "Управление кнопками ~g~~h~~h~Num Lock~w~, Выбрать: ~g~~h~~h~~k~~PED_SPRINT~~w~, Назад: ~g~~h~~h~~k~~SNEAK_ABOUT~"},
	{"Open Shop~n~~k~~SNEAK_ABOUT~", "Нажмите~n~~k~~SNEAK_ABOUT~"},
	{"select class",         	"выберите класс"},//49
	{"select skin",          	"выберите скин"},
	{"team I",               	"Команда I"},
	{"team II",              	"Команда II"},
	{"free mode",           	"своб режим"},
	{"spawn",                	"респаун"},
	{"time",                 	"время"},
	{" your team",           	" ваша команда"},
	{" opponents",           	" противник"},
	{" passive",             	" Пассив"},
	{"~r~~h~off",            	"~r~~h~выкл"},
	{"~g~~h~~h~on",          	"~g~~h~~h~вкл"},//60
	{" speed",               	" скорость:"},
	{" duel",                	" дуэль"},
 	{" prison",              	" тюрьма"},
 	{" damage",              	" повреждение"},
 	{"draw~n~%d - %d",       	"ничья~n~%d - %d"},
	{"your team lost~n~%d - %d","ваша команда проиграла~n~%d - %d"},
	{"your team won~n~%d - %d", "ваша команда выиграла~n~%d - %d"},
	{"Team Revival  %d",     	"Помощь возрождение  %d"},//68
	{" replay",              	" переиграть"},
	{"vote per the next map", 	"Выберете новую карту"},//70
	{" Free mode",           	" Свободный Режим"}, //71
	{"use to control  ~g~~h~~h~~k~~GO_FORWARD~-~k~~GO_BACK~ ~k~~GO_LEFT~-~k~~GO_RIGHT~  ~w~~h~start  (%s)", "управление клавишами: ~g~~h~~h~~k~~GO_FORWARD~-~k~~GO_BACK~ ~k~~GO_LEFT~-~k~~GO_RIGHT~  ~w~~h~старт  (%s)"},
	{"like  ~g~~h~~k~~PED_SPRINT~   ~w~~h~dislike  ~g~~h~~k~~PED_JUMPING~   ~w~~h~exit: %s", "Лайк  ~g~~h~~k~~PED_SPRINT~   ~w~~h~Дизлайк  ~g~~h~~k~~PED_JUMPING~   ~w~~h~exit: %s"},
	{"achievement unlocked", 	"открыто достижение"},//74
 	{"_",                    	"Медицинская аптечка восстанавливает здоровье."},//5540 75
 	{"_",                    	"Надеть снять бронежилет."},
 	{"_",                    	"Установка наземных, липких динамитов для уничтожения противников."},
 	{"_",                    	"Маскировка, выдает вас за вражескую команду."},
 	{"_",                    	"Специализации и предметы."},
 	{"_",                    	"Это легкий путь"},
 	{"_",                   	"Стандартный бронежилет он прячется под одеждой и с легкостью защищает вас."},//81
    {"_",                    	"Бронежилет с легкими пластинами спереди и сзади."},
    {"_",                    	"Бронежилет с жесткими пластинами спереди и сзади."},
    {"_",                    	"Вы можете снять уже одетый бронежилет.~n~Он останется у вас если он выглядит наа 100%"},
    {"_",                    	"Динамит, вы можете разместить в любом месте.~n~Время взрыва 10 секунд.~n~Радиус 30 метров."},//84
    {"_",                    	"Липкий динамит, крепиться на противника и самостоятельно уничтожается.~n~Время взрыва 5 секунд."},//6
    {"_",                    	"Наземная мина, взрывается при воздействии цели."},
    {"select",              	"выбирать"},
    {"cancel",               	"отменить"},//89
    {"health",              	"здоровье"},
    {"armor",                	"броня"},
    {"weapon",               	"оружие"},//92
    {" open top",            	" открыть топ"},
    {"no text1  %d", 		 	"закладка бомбы  %d"},//94
    {"no text2  %d", 		 	"минирование площади  %d"},
    {"no text3  %d", 		 	"минирование игрока  %d"},
    {"no text4  %d", 		 	"контроль над точкой  %d"},
    {"lobby         name maps", "лобби         название карты"},
    {"players",              	"игроки"},//99
    {"kills",                	"У"},
	{"deaths",               	"С"},
 	{"score",                	"счет"},
 	{"new subject in inventory","новый предмет в инвентаре"},
  	{"new level  %d",        	"Новый ранг  %d"},
  	{"laser sight, quick buy",  "лазерный прицел, быстрая закупка"},
  	{"name",                 	"ник"},
  	{"{61dd61}Вкл{FFFFFF}",  	"_"},
  	{"{f44747}Выкл{FFFFFF}", 	"_"}//108
},//{"", ""},
InvalidWords[27][] =
{
	"http", ".ru", ".com", ".ua", ".at.ua", ".1", ".46", ".3dn.ru", ".my1.ru", ".clan.su", ".moy.su", ".do.am", ".ucoz", ":7779", ":7777", "5.", ":7792", ":7761", ":7877", ":7976", ".127", ".168", ".176", ".32", ".39", "vk.com", "vk."
},
VehicleName[212][] =
{
	"Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel", "Dumper", "Firetruck", "Trashmaster", "Stretch", "Manana", "Infernus", "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance",
	"Leviathan", "Moonbeam", "Esperanto", "Taxi", "Washington", "Bobcat", "Mr Whoopee", "BF Injection", "Hunter", "Premier", "Enforcer", "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks",
	"Hotknife", "Trailer 1", "Previon", "Coach", "Cabbie", "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow", "Pizzaboy", "Tram", "Trailer 2", "Turismo",
	"Speeder", "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair", "Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic", "Sanchez", "Sparrow",
	"Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350", "Walton", "Regina", "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper", "Rancher",
	"FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick", "Boxville", "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B", "Bloodring Banger",
	"Rancher", "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropdust", "Stunt", "Tanker", "Roadtrain", "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000",
	"Cement Truck", "Tow Truck", "Fortune", "Cadrona", "FBI Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan", "Blade", "Freight", "Streak", "Vortex", "Vincent", "Bullet", "Clover",
	"Sadler", "Firetruck LA", "Hustler", "Intruder", "Primo", "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster A", "Monster B", "Uranus", "Jester", "Sultan", "Stratum", "Elegy",
	"Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito", "Freight Flat", "Streak Carriage", "Kart", "Mower", "Duneride", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30", "Huntley", "Stafford", "BF-400",
	"Newsvan", "Tug", "Trailer 3", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club", "Freight Carriage", "Trailer 3", "Andromada", "Dodo", "RC Cam", "Launch", "Police Car (LSPD)", "Police Car (SFPD)", "Police Car (LVPD)",
	"Police Ranger", "Picador", "S.W.A.T. Van", "Alpha", "Phoenix", "Glendale", "Sadler", "Luggage Trailer A", "Luggage Trailer B", "Stair Trailer", "Boxville", "Farm Plow", "Utility Trailer"
},
AchievementText[MAX_ADVANCE][6][] =
{/*
XX - 1 - отвечает за скрытность достижения (0 открыто | 1 скрыто) | 2 - сколько раз нужно выполнить задание для получение достижения

    название TD ENG                     название TD RUS                      картинка                 XX          текст        							текст 2*/
	{"_",                              "~n~~n~Јo¦pa¤e®o", 					"LD_TATT:5cross3", 		"1, 1", 	"Потрачено", 						"Ваша команда проиграла"},
	{"~n~flawless~n~victory",          "~n~—eџyЈpe¤®a¬~n~Јo—eљa", 			"LD_TATT:9homby",       "0, 1", 	"Все чисто!", 						"Безупречная победа в командном режиме"},
	{"~n~Run Like~n~The Wind",         "~n~~n~Ђeџ o™ћ¬љkњ", 				"LD_TATT:6clown",       "0, 1", 	"Без оглядки", 						"Выжить с наградой за вашу голову"},
    {"_",             				   "_", 								"_", 		     		"0, 1", 	"_", 								"_"},	
	{"~n~transporter~n~flamingo",      "~n~Јepeўoџ¤њk~n~ЃћaЇњ®™o", 			"LD_TATT:5cross3", 	    "1, 1", 	"Перевозчик фламинго", 				"Покрасить автомобиль в розовый цвет"},
	{"~n~I Want to~n~Get Away",        "~n~• Јpoc¦o~n~xo¤y c—e›a¦©", 		"LD_TATT:9rasta",       "1, 1", 	"Я просто хочу сбежать отсюда", 	"Выйти за пределы карты"},
    {"~n~~n~Live a Little",            "~n~Oљњ® paџ~n~›њўeЇ", 				"LD_OTB2:Ric3",         "0, 1", 	"Один раз живем", 					"Создать свою первую банду"},
    {"~n~~n~Subversive",               "ЊoљpЁў®a¬~n~љe¬¦eћ©®oc¦©", 			"LD_TATT:6crown",       "0, 1", 	"Подрывная деятельность", 			"Подорвать игрока с помощью липкой мины"},
    {"~n~Masked~n~Villain",            "~n~ckpЁ¦Ёќ~n~џћoљeќ", 				"LD_TATT:12bndit",      "1, 1", 	"Замаскированный злодей", 			"Использовать свою первую маску"},
    {"~n~~n~Sadist",                   "~n~~n~caљњc¦", 						"LD_TATT:12myfac",      "0, 1", 	"Садист", 							"Убить 100 врагов"},
	{"~n~Deadly~n~confetti",           "~n~CЇep¦eћ©®oe~n~ko®Ѓe¦¦њ", 		"LD_TATT:4rip",         "1, 2", 	"Смертельное конфетти", 			"Подарвать врага при помощи наземной мины"},
    {"_",            				   "_", 								"_",               		"0, 1", 	"_", 								"_"},
    {"You~n~willstay~n~here",          "Џ‘~n~OCЏAмEЋ’C•~n~ЏYЏ", 			"LD_TATT:12dager",      "0, 1", 	"Ты останешься тут", 				"Победить в перестрельном дуэле"},
    {"~n~~n~First racer",              "~n~Јepў‘ќ~n~™o®Ўњk", 				"LD_TATT:9rasta",       "0, 1", 	"Первый гонщик", 					"Финишировать первым в гоночном дуэли"},
    {"~n~Faithful~n~pirate",           "~n~Јpeљa®®‘ќ~n~Јњpa¦", 				"LD_TATT:12myfac",      "0, 1", 	"Преданный пират", 					"Сыграть полный матч на карте 'PIRATES'"},
    {"~n~~n~Man of Iron",              "~n~„eћeџ®‘ќ~n~¤eћoўek", 			"LD_TATT:5cross3",      "0, 1", 	"Железный человек",			 		"Убить своего противника первым"},
    {"No One Can~n~Hear~n~You Scream", "®њk¦o~n~®e ycћЁҐњ¦~n~¦ўoњx kpњkoў", "LD_TATT:5cross2", 		"1, 20", 	"Никто не услышит твоих криков", 	"Убить 20 противников в ближнем бою"},
    {"~n~~n~tonus",                    "~n~~n~¦o®yc", 						"LD_TATT:10weed",       "0, 25", 	"Тонус", 							"Использовать 25 аптечек"},
    {"~n~durable~n~protection",        "~n~Јpo¤®a¬~n~џaЎњ¦a", 				"LD_TATT:6africa",      "1, 1", 	"Прочная защита", 					"Надеть сверхтяжелый бронежилет"},
	{"~n~ўce eЉe~n~ў c¦po«",           "~n~ўce eЉe~n~ў c¦po«", 				"LD_TATT:5cross3",      "0, 1", 	"Всё ещё в строю", 					"Восстановить горящую машину на гонках"},
	{"~n~Residents~n~San Andreas",     "~n~›њ¦eћ©~n~San Andreas", 			"LD_TATT:10ls3",        "0, 1", 	"Житель San Andreas", 				"Посетить сервер TDM Zones"}

},//{"",     "", "LD_TATT:",            "0, 1", "", ""},
WeaponsHis[18] = {3, 4, 5, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 41, 42};
new ServerCheck[2], ServerGate[4], ChangeMapAccount[21], AdditionalReset[21];
forward TimeTimer();
forward KickTime(playerid);
forward OnPlayerLogin(playerid, line);
forward OnPlayerForAll(playerid, line, test, test0);
forward GangPublic(playerid, line, test);
main() { }

public OnVehicleDeath(vehicleid, killerid)
{
	if(TuningVehicle[vehicleid][2] != 1) return 1;
	TuningVehicle[vehicleid][2] = 0;
	DestroyDynamicObject(TuningVehicle[vehicleid][0]);
	return DestroyDynamicObject(TuningVehicle[vehicleid][1]);
}
public OnVehicleSpawn(vehicleid)
{
    if(TuningVehicle[vehicleid][2] != 1) return 1;
	TuningVehicle[vehicleid][2] = 0;
	DestroyDynamicObject(TuningVehicle[vehicleid][0]);
	return DestroyDynamicObject(TuningVehicle[vehicleid][1]);
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if(PlayerCheatCheck[playerid] == 0 && (newstate == 2 && oldstate == 3) || (newstate == 3 && oldstate == 2)) return PlayerCheat(playerid, "флуд смены мест #1", "Использование Чит Программ [{FF0000}Код: #1{CD853F}]");
    if(PlayerInfo[playerid][pFreeMode] == 0 && DuelCheck[playerid][12] == 0 && (newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)) return RemovePlayerFromVehicleZS(playerid);
    if(2 <= oldstate <= 3)
    {
		new Float:vel[3];
		GetPlayerVelocity(playerid, vel[0], vel[1], vel[2]);
		SpeedVer[playerid] = floatround(VectorSize(vel[0], vel[1], 0.0) * 179.28625);
		SpeedVerTime[playerid] = gettime() + 2;
	}
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
		AutoTpCheck[playerid][0] = 1;
		if(PlayerInfo[playerid][pFreeMode] == 1 && DuelCheck[playerid][12] == 0)
		{
			if(PlayerInfo[playerid][pInfoText][4] == 0 && SpeedCheck[playerid] == 0)
			{
				SpeedCheck[playerid] = 1;
				new lang = PlayerInfo[playerid][pRussifier][1];
				TextDrawShowForPlayer(playerid, ArenaInfo[playerid][0]);
				TextDrawShowForPlayer(playerid, ArenaInfo[playerid][10]);
				TextDrawSetString(ArenaInfo[playerid][0], TextDrawInfo[61][lang]);
			}
			new lang = PlayerInfo[playerid][pRussifier][1];
			if(PlayerInfo[playerid][pPassive] == 1) TextDrawSetString(ArenaInfo[playerid][11], TextDrawInfo[59][lang]);
		}
		return 1;
	}
	if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{
		if(DuelCheck[playerid][12] == 0 && oldstate == PLAYER_STATE_DRIVER)
		{
			EnterVehicle[playerid][0] = 0;
			EnterVehicle[playerid][1] = 0;
		}
		AutoTpCheck[playerid][0] = 0;
		AutoTpCheck[playerid][1] = gettime() + 1;
		if(RemoveVehicle[playerid] != 0) RemoveVehicle[playerid] = 0;
		if(PutVehicle[playerid][1] != 0) PutVehicle[playerid][1] = 0;
		if(DuelCheck[playerid][12] >= 1 && DuelCheck[playerid][23] == 0 && oldstate == PLAYER_STATE_DRIVER)
		{
			if(DuelCheck[playerid][7] == 3 && DuelCheck[playerid][13] == 4) SetPlayerHealth(playerid, 0.0);
			else PutPlayerInVehicle(playerid, DuelCheck[playerid][15], 0);
		}
		if(PlayerInfo[playerid][pFreeMode] == 1)
		{
			if(SpeedCheck[playerid] == 1)
			{
				SpeedCheck[playerid] = 0;
				TextDrawHideForPlayer(playerid, ArenaInfo[playerid][0]);
				TextDrawHideForPlayer(playerid, ArenaInfo[playerid][10]);
			}
			new lang = PlayerInfo[playerid][pRussifier][1];
			if(PlayerInfo[playerid][pPassive] == 1) TextDrawSetString(ArenaInfo[playerid][11], TextDrawInfo[60][lang]);
		}
		return GetPlayerPos(playerid, PosBreik[playerid][0], PosBreik[playerid][1], PosBreik[playerid][2]);
	}
    return 1;
}

stock GetPlayerSpeed(playerid, Float:value = 213.3)
{
    new Float: Pos[4];
    if(IsPlayerInAnyVehicle(playerid)) GetVehicleVelocity(GetPlayerVehicleID(playerid), Pos[0], Pos[1], Pos[2]);
	else GetPlayerVelocity(playerid, Pos[0], Pos[1], Pos[2]);
	Pos[3] = floatsqroot(floatpower(floatabs(Pos[0]), 2.0)+floatpower(floatabs(Pos[1]), 2.0)+floatpower(floatabs(Pos[2]), 2.0))*value;
	return floatround(Pos[3]);
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(vehicleid != EnterVehicle[playerid][0])
	{
	    new model, tmpPrm1, tmpPrm2;
	    model = GetVehicleModel(vehicleid) - 417;
	    GetVehicleParamsEx(vehicleid, tmpPrm2, tmpPrm2, tmpPrm2, tmpPrm1, tmpPrm2, tmpPrm2, tmpPrm2);
	    if(ispassenger == 0 || tmpPrm1 != 1)
		{
			EnterVehicle[playerid][0] = vehicleid;
			if(13 <= model <= 178 && VType[model] == 3) EnterVehicle[playerid][1] = 0;
			else EnterVehicle[playerid][1] = gettime() + 2;
		}
	}
    if(FrozenCheck[playerid] == 1) return ClearAnimations(playerid);
	if(AutoTpCheck[playerid][0] == 1 && PlayerCheatCheck[playerid] == 0 && DuelCheck[playerid][13] != 3)
	{
		SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
		return PlayerCheat(playerid, "CarAirSlap #1.3", "Использование Чит Программ [{FF0000}Код: #1.3{CD853F}]");
	}
	return 1;
}
public OnPlayerExitVehicle(playerid, vehicleid)
{
    if(DuelCheck[playerid][12] >= 1 && Pause[playerid][1] <= 3 && DuelCheck[playerid][23] == 0) return PutPlayerInVehicle(playerid, DuelCheck[playerid][15], 0);
	switch(GetVehicleModel(vehicleid))
	{
		case 417, 447, 487, 425, 460, 469, 476, 488, 497, 511, 512, 513, 519, 520, 548, 553, 563, 577, 592, 593: return GivePlayerWeaponZS(playerid, 46, 1);
	}
    return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
	if((Spawned[playerid] == false || Spawned[damagedid] == false) || (PlayerInfo[playerid][pFreeMode] != PlayerInfo[damagedid][pFreeMode] && DuelCheck[playerid][12] == 0)) return 1;
	if(SpawnCheck[playerid][3] >= 1) return GameTextForPlayerZS(playerid, "~n~~w~You ~r~Spawn kill", "~n~y ўac ~r~Spawn kill", 2000, 4);
	if(SpawnCheck[damagedid][3] >= 1) return GameTextForPlayerZS(playerid, "~n~~w~The player ~r~Spawn kill", "~n~~w~y њ™poka ~r~Spawn kill", 2000, 4);
	if(Pause[damagedid][1] >= 3 || Pause[playerid][1] >= 3) return GameTextForPlayerZS(playerid, "~n~~w~The player is ~g~paused", "~n~~w~њ™pok ®a ~g~Јayџe", 2000, 4);

	if(ChoiceTeamCheck[playerid][2] == ChoiceTeamCheck[damagedid][2] && PlayerInfo[playerid][pFreeMode] == 0 && DuelCheck[playerid][12] == 0) return GameTextForPlayerZS(playerid, "~n~~w~not shoot ~r~your team", "~n~~w~®e c¦peћ¬ќ¦e ў ~r~cўo« koЇa®љy", 2000, 4);
	if(PlayerInfo[playerid][pPassive] == 1 && DuelCheck[playerid][12] == 0) return GameTextForPlayerZS(playerid, "~n~~w~You are in ~r~passive ~w~mode", "~n~~w~ўЁ ®axoљњ¦ec© ў ~r~Јaccњў®oЇ pe›њЇe", 2000, 4);
	if(PlayerInfo[damagedid][pPassive] == 1 && DuelCheck[damagedid][12] == 0) return GameTextForPlayerZS(playerid, "~n~~w~The player are in ~r~passive mode", "~n~~w~њ™pok ®axoљњ¦c¬ ў ~r~Јaccњў®oЇ pe›њЇe", 2000, 4);
	new damag;
	if(Armour[damagedid][0] == 0)
	{
	    damag = Health[damagedid];
	    if(Health[damagedid] >= 0) HealthCheck[damagedid][0] = 5;
	    if(bodypart == 9 && weaponid >= 22 && weaponid <= 34)
	    {
	        if(Armour[damagedid][4] == 0)
        	{
      			Health[damagedid] -= floatround(amount - WeaponDamage[weaponid - 22][1]);
      			SetPlayerHealth(damagedid, Health[damagedid]);
        	}
        	else
        	{
      			Armour[damagedid][4] -= floatround(amount - WeaponDamage[weaponid - 22][2]);
  				if(Armour[damagedid][4] <= 0)
			  	{
			  	    Armour[damagedid][4] = 0;
				  	RemovePlayerAttachedObject(damagedid, 6);
	  			}
  			}
		}
		else
		{
		    switch(weaponid)
  			{
  			    case 23..24, 26..32:
  			    {
  			        if(floatround(amount) >= 1 && floatround(amount) <= 4) Health[damagedid] -= floatround(amount);
			  		else
			  		{
			  			Health[damagedid] -= floatround(amount - WeaponDamage[weaponid - 22][0]);
            			SetPlayerHealth(damagedid, Health[damagedid]);
					}
  			    }
  			    default: Health[damagedid] -= floatround(amount);
  			}
		}
		switch(bodypart)
		{
	  		case 3: KillsCheck[damagedid][5] = 1;//Грудь
	  		case 4: KillsCheck[damagedid][4] = 1;//Пах
	  		case 5: KillsCheck[damagedid][7] = 1;//Левая Рука
	  		case 6: KillsCheck[damagedid][8] = 1;//Правая Рука
	  		case 7: KillsCheck[damagedid][2] = 1;//Левая Нога
	  		case 8: KillsCheck[damagedid][3] = 1;//Правая Нога
	  		case 9: KillsCheck[damagedid][6] = 1;//Голова
		}
		if(bodypart >= 3 && bodypart <= 9) KillsCheck[damagedid][9] = gettime() + 8;
		if(KillsCheck[damagedid][10] != bodypart) KillsCheck[damagedid][10] = bodypart;//5511 5528
        if(Health[damagedid] <= 89)
		{
			RegistrationHealth[damagedid][0] = 10;
			RegistrationHealth[damagedid][1] += floatround(amount);
  		}
		if(PlayerInfo[damagedid][pAchievements][15] == 0) SetPVarInt(damagedid, "AchievementsCH[15]", gettime() + 1);
        if(PlayerInfo[playerid][pAchievements][15] == 0 && GetPVarInt(playerid, "AchievementsCH[15]") >= gettime()) SetPVarInt(playerid, "Achievements[15]", GetPVarInt(playerid, "Achievements[15]") + floatround(amount));
	}
	else // Если есть броня то снимается она с 0 оружия и выше
	{
 		damag = Armour[damagedid][0];
        Armour[damagedid][2] = 5;
        switch(Armour[damagedid][1])
        {
			case 1: Armour[damagedid][0] -= floatround(amount);
			case 2:
	   		{
	  			if(weaponid >= 22 && weaponid <= 34)
	  			{
	  				Armour[damagedid][0] -= floatround(amount - 3);
	  				SetPlayerArmour(damagedid, Armour[damagedid][0]);
	  			}
	  			else Armour[damagedid][0] -= floatround(amount);
	   		}
	   		case 3:
	   		{
	   		    if(weaponid >= 22 && weaponid <= 34)
	  			{
	  				Armour[damagedid][0] -= floatround(amount - 7);
	  				SetPlayerArmour(damagedid, Armour[damagedid][0]);
	  			}
	  			else Armour[damagedid][0] -= floatround(amount);
	   		}
		}
		if(Armour[damagedid][0] <= 0)
		{
			Armour[damagedid][0] = 0;
			Armour[damagedid][1] = 0;
			RemovePlayerAttachedObject(damagedid, 9);
		}
	}
	if(InteractionCheck[playerid][0] == 2 && weaponid == 0 && PlayerInfo[playerid][pFreeMode] == 0 && InteractionCheck[damagedid][0] == 0)
	{
		new string[85];
        InteractionCheck[playerid][0] = 0;
        RemovePlayerAttachedObject(playerid, 7);
		InteractionCheck[damagedid][0] = 2;
        InteractionCheck[damagedid][1] = 5;
        InteractionCheck[damagedid][10] = playerid;
        InteractionCheck[playerid][11] = damagedid;
        KillInfoPlayer(playerid, -1, 0, 96, ScoreKill[3]);
        if(PlayerInfo[playerid][pBonus][2] >= 1) SetPlayerAttachedObjectZS(playerid, InteractionsNumber[0][PlayerInfo[playerid][pBonus][2]]);
        SetPlayerAttachedObject(damagedid, 7, 1654, 1, 0, -0.2, 0, 0, 0, 0);
		format(string, sizeof(string), "Липкий Динамит был прилеплен на игрока: {4FDF24}%s{FFFFFF}.", PlayerName[damagedid]);
		SendClientMessage(playerid, 0xFFFFFFFF, string);
	}
    if(PlayerInfo[playerid][pInfoText][1] >= 1 && SkillsWeapon[playerid][0] == 0)
    {
    	new string[20], ping[8] = "_", slot, lang = PlayerInfo[playerid][pRussifier][1];
	    DamageTime[playerid][0] = 3;
        if(bodypart == 9 && weaponid >= 22 && weaponid <= 34 && Armour[damagedid][4] != 0) slot = floatround(amount - WeaponDamage[weaponid - 22][2]);
		else
		{
			if(Armour[damagedid][0] == 0) slot = damag - Health[damagedid];
			else slot = damag - Armour[damagedid][0];
		}
	    if(PlayerInfo[playerid][pInfoText][1] == 2) format(ping, sizeof(ping), " P:%d", GetPlayerPing(damagedid));
	    format(string, sizeof(string), "~g~~h~~h~%d%s", slot, ping);
	    if(AchievementsCheck[playerid][0] != 0)
	    {
	        DamageTime[playerid][1] = 2;
			TextDrawShowForPlayer(playerid, ArenaInfo[playerid][3]);
			TextDrawShowForPlayer(playerid, ArenaInfo[playerid][13]);
			TextDrawSetString(ArenaInfo[playerid][3], TextDrawInfo[64][lang]);
			return TextDrawSetString(ArenaInfo[playerid][13], string);
	    }
    	if(DuelCheck[playerid][3] == 0)
    	{
    	    if(PlayerInfo[playerid][pFreeMode] == 0)
    	    {
    	        if(PlayerInfo[playerid][pInfoText][0] == 0)
    	        {
    	            DamageTime[playerid][1] = 2;
					TextDrawShowForPlayer(playerid, ArenaInfo[playerid][3]);
					TextDrawShowForPlayer(playerid, ArenaInfo[playerid][13]);
					TextDrawSetString(ArenaInfo[playerid][3], TextDrawInfo[64][lang]);
					TextDrawSetString(ArenaInfo[playerid][13], string);
    	        }
    	        else
    	        {
	    	        DamageTime[playerid][1] = 1;
			    	TextDrawShowForPlayer(playerid, ArenaInfo[playerid][0]);
			    	TextDrawShowForPlayer(playerid, ArenaInfo[playerid][10]);
					TextDrawSetString(ArenaInfo[playerid][0], TextDrawInfo[64][lang]);
					TextDrawSetString(ArenaInfo[playerid][10], string);
    	        }
    	    }
    	    else
    	    {
    	        if(IsPlayerInAnyVehicle(playerid))
    	        {
    	            DamageTime[playerid][1] = 3;
      				TextDrawShowForPlayer(playerid, ArenaInfo[playerid][1]);
	        		TextDrawShowForPlayer(playerid, ArenaInfo[playerid][11]);
	        		TextDrawSetString(ArenaInfo[playerid][1], TextDrawInfo[64][lang]);
	        		TextDrawSetString(ArenaInfo[playerid][11], string);
    	        }
    	        else
    	        {
    	            DamageTime[playerid][1] = 1;
			    	TextDrawShowForPlayer(playerid, ArenaInfo[playerid][0]);
			    	TextDrawShowForPlayer(playerid, ArenaInfo[playerid][10]);
					TextDrawSetString(ArenaInfo[playerid][0], TextDrawInfo[64][lang]);
					TextDrawSetString(ArenaInfo[playerid][10], string);
    	        }
    	    }
    	}
    	else
    	{
	    	DamageTime[playerid][1] = 3;
	        TextDrawShowForPlayer(playerid, ArenaInfo[playerid][1]);
	        TextDrawShowForPlayer(playerid, ArenaInfo[playerid][11]);
	        TextDrawSetString(ArenaInfo[playerid][1], TextDrawInfo[64][lang]);
	        TextDrawSetString(ArenaInfo[playerid][11], string);
    	}
	}
    return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
    if(Spawned[playerid] == false || SpawnCheck[playerid][3] >= 1 || GmTestCheck[playerid][2] != 0 || (DuelCheck[playerid][12] == 0 && PlayerInfo[playerid][pPassive] == 1)) return 1;
	if(KillsCheck[playerid][10] != weaponid && issuerid == INVALID_PLAYER_ID) KillsCheck[playerid][10] = weaponid;//5511
	switch(weaponid)
	{
	    case 37, 50:
	    {
		    new Float: health;
			if(Armour[playerid][0] == 0)
			{
			    if(Health[playerid] >= 0) HealthCheck[playerid][0] = 5;
				GetPlayerHealth(playerid, health);//не будет вызовов когда включен GM
				Health[playerid] = floatround(health);
			}
			else
			{
			    if(Armour[playerid][0] >= 0) Armour[playerid][2] = 5;
				GetPlayerArmour(playerid, health);//не будет вызовов когда включен GM
				Armour[playerid][0] = floatround(health);
			}
	    }
	    case 49, 51:
	    {
	    	if(Armour[playerid][0] == 0)
			{
			    if(Health[playerid] >= 0) HealthCheck[playerid][0] = 5;
				Health[playerid] -= floatround(amount);
   			}
			else
			{
			    if(Armour[playerid][0] >= 0) Armour[playerid][2] = 5;
				Armour[playerid][0] -= floatround(amount);
   			}
			if(weaponid == 51) SetPlayerDrunkLevel(playerid, 2250);
	    }
	    case 53, 54:
		{
		    if(Health[playerid] >= 0) HealthCheck[playerid][0] = 5;
			Health[playerid] -= floatround(amount);
  		}
	}
	if(Health[playerid] <= 89 && Armour[playerid][0] == 0 && issuerid == INVALID_PLAYER_ID)
	{
		RegistrationHealth[playerid][0] = 10;
		RegistrationHealth[playerid][1] += floatround(amount);
 	}
	if(issuerid != INVALID_PLAYER_ID && PlayerInfo[issuerid][pAimingX][0] >= 1)
	{
		AimingCheck[issuerid][1] = 3;
		if(Health[playerid]-amount < 20.0)
		{
			AimingCheck[issuerid][0] = 1;
			if(PlayerInfo[issuerid][pAimingX][0] == 1)
			{
				if(weaponid == 34) TextDrawSetString(Aiming[issuerid][1], AimingTextR);
				else TextDrawSetString(Aiming[issuerid][0], AimingTextR);
			}
			else
			{
				if(weaponid == 51 || weaponid == 34)
				{
					if(weaponid == 51) AimingCheck[issuerid][0] = 0;
					TextDrawSetString(Aiming[issuerid][1], AimingTextR);
					TextDrawShowForPlayer(issuerid, Aiming[issuerid][1]);
				}
				else
				{
					TextDrawSetString(Aiming[issuerid][0], AimingTextR);
					TextDrawShowForPlayer(issuerid, Aiming[issuerid][0]);
				}
			}
		}
		if(PlayerInfo[issuerid][pAimingX][0] == 1 && (weaponid < 22 || weaponid > 34))
		{
			if(weaponid == 51)
			{
				AimingCheck[issuerid][0] = 0;
				TextDrawShowForPlayer(issuerid, Aiming[issuerid][1]);
			}
			else
			{
				AimingCheck[issuerid][0] = 1;
				TextDrawShowForPlayer(issuerid, Aiming[issuerid][0]);
			}
		}
	}
	return 1;
}

public OnPlayerClickMap(playerid, Float: fX, Float: fY, Float: fZ)
{
    if(ProtectionFlooding[playerid][4] >= 13 && PlayerCheatCheck[playerid] == 0) return IsProtectionFlooding(playerid, "ClickMap", "2.4");
	else
	{
	    ProtectionFlooding[playerid][4] += 1;
	    if(ProtectionFlooding[playerid][4] >= 8) GameTextForPlayerZS(playerid, "~n~~r~Warning~n~flood", "~r~®e Ѓћyљњ¦e", 2000, 4, 1085);
	}
    if(ServerConfig[3] == 0 && (PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pVip] >= 3) && PlayerInfo[playerid][pPrison] == 0 && PlayerInfo[playerid][pFreeze] == 0 && PlayerInfo[playerid][pFreeMode] == 1 && DuelCheck[playerid][12] == 0)
    {
        if(IsPlayerInAnyVehicle(playerid)) SetVehiclePosZS(playerid, fX, fY, fZ + 10.0);
		else SetPlayerPosZS(playerid, fX, fY, fZ + 5.0, 0.0, 0, 202);
		GameTextForPlayerZS(playerid, "~n~~w~teleport to marker", "~n~~w~¦eћeЈop¦ Јo Їapkepy", 2000, 4);
    }
    return 1;
}

stock PlayerText:InteractionPosition(playerid, Float:y, Float:x = 141.0, Float:xx = 140.0, color = 0xFFFFFFAA)
{
	new PlayerText:TextDraw = CreatePlayerTextDraw(playerid, x, y, "_");
	PlayerTextDrawLetterSize(playerid, TextDraw, 0.25, 1.0);
	PlayerTextDrawUseBox(playerid, TextDraw, 1);
	PlayerTextDrawBoxColor(playerid, TextDraw, color);
	PlayerTextDrawTextSize(playerid, TextDraw, xx, 0.0);
	PlayerTextDrawShow(playerid, TextDraw);
	return TextDraw;
}
	
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    /*new strr[50];
	format(strr, sizeof(strr), "newkeys: %d | oldkeys: %d", newkeys, oldkeys);
	SendClientMessage(playerid, 0xFFFFFFFF, strr);*/
	if(newkeys != 1152 && Revival[playerid][3] != 0) Revival[playerid][3] = 0;
	if(PlayerInfo[playerid][pAimingX][0] >= 1 >= 1 && AimingCheck[playerid][0] == 1 && (newkeys & 128 || newkeys & 0 || oldkeys & 132))
	{
		AimingCheck[playerid][0] = 0;
		AimingCheck[playerid][1] = 0;
		AimingCheck[playerid][2] = GetTickCount()+300;//Меньшее значение иногда вызывает залипание маркера. Большое значение вызывает задержку появление маркера
		TextDrawHideForPlayer(playerid, Aiming[playerid][0]);
		TextDrawHideForPlayer(playerid, Aiming[playerid][1]);
		TextDrawSetString(Aiming[playerid][0], AimingText);
		TextDrawSetString(Aiming[playerid][1], AimingText);
	}
	switch(newkeys)
	{
	    case KEY_CTRL_BACK://Главное меню на H
	    {
			if(ProtectionFlooding[playerid][0] >= 25 && PlayerCheatCheck[playerid] == 0) return IsProtectionFlooding(playerid, "клавишей H", "3.0");
			else
			{
				ProtectionFlooding[playerid][0] += 1;
				if(ProtectionFlooding[playerid][0] >= 20) GameTextForPlayerZS(playerid, "~n~~r~Warning~n~flood", "~r~®e Ѓћyљњ¦e", 2000, 4, 1085);
			}
	        if(ChoiceItemsCheck[playerid][0] == 0 && PlayerInfo[playerid][pPrison] == 0 && GetPlayerState(playerid) == 1 && Spawned[playerid] == true && DuelCheck[playerid][12] == 0) SetDialogResponse(playerid, 1);
	        return 1;
		}
		case KEY_LOOK_BEHIND:
		{
			if(ProtectionFlooding[playerid][0] >= 25 && PlayerCheatCheck[playerid] == 0) return IsProtectionFlooding(playerid, "клавишей 2", "3.0");
			else
			{
				ProtectionFlooding[playerid][0] += 1;
				if(ProtectionFlooding[playerid][0] >= 20) GameTextForPlayerZS(playerid, "~n~~r~Warning~n~flood", "~r~®e Ѓћyљњ¦e", 2000, 4, 1085);
			}
			if(Spawned[playerid] == true && DuelCheck[playerid][12] == 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return SetDialogResponse(playerid, 13);
			return 1;
		}
		case 65410, 130: if(ServerConfig[0] == 1) return SetPlayerArmedWeapon(playerid, 0);//frozen создать переменную, включить анимацию и заморозить игрока на несколько секунд
		case KEY_WALK://Меню закупок
		{
			if(ProtectionFlooding[playerid][0] >= 50 && PlayerCheatCheck[playerid] == 0) return IsProtectionFlooding(playerid, "клавишей Alt", "3.0");
			else
			{
				ProtectionFlooding[playerid][0] += 1;
				if(ProtectionFlooding[playerid][0] >= 45) GameTextForPlayerZS(playerid, "~n~~r~Warning~n~flood", "~r~®e Ѓћyљњ¦e", 2000, 4, 1085);
			}
			if(ChoiceItemsCheck[playerid][0] == 1 && DuelCheck[playerid][12] == 0)//5505
		    {
		        switch(ChoiceItemsCheck[playerid][1])//5540
		        {
		            case 2, 3, 4:
		            {
		    			if(ChoiceItemsCheck[playerid][4] != 0)
						{
							if(ChoiceItemsCheck[playerid][4] == 1) ClearAnimations(playerid);
							if(ChoiceItemsCheck[playerid][4] == -1)
							{
								new string[56+38], str[38];
		 						format(str, sizeof(str), "%d,%d,%d,%d,%d,%d,%d,%d,%d", PlayerInfo[playerid][pBonus][0], PlayerInfo[playerid][pBonus][1], PlayerInfo[playerid][pBonus][2], PlayerInfo[playerid][pBonus][3], PlayerInfo[playerid][pBonus][4], PlayerInfo[playerid][pBonus][5], PlayerInfo[playerid][pBonus][6], PlayerInfo[playerid][pBonus][7], PlayerInfo[playerid][pBonus][8]);
								mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `bonus`='%s' WHERE `id`='%d'", str, PlayerInfo[playerid][pRoomAccount]);
					 			mysql_tquery(MysqlConnectID, string);
					 		}
		 				}
		    			ChoiceItemsCheck[playerid][4] = 0;
		    			ChoiceItemsCheck[playerid][5] = 0;
		    			ChoiceItemsCheck[playerid][2] = ChoiceItemsCheck[playerid][3];
		    			PlayerTextDrawDestroy(playerid, ChoiceItemsPosi[playerid]);
		    			ChoiceItemsPosi[playerid] = InteractionPosition(playerid, PositionLines[0][ChoiceItemsCheck[playerid][3] - 1]);
		    			TextDrawSetString(ChoiceItems[playerid][8], TextDrawInfo[74 + ChoiceItemsCheck[playerid][3]][1]);
		    			new string[13], lang = PlayerInfo[playerid][pRussifier][1];
			        	TextDrawSetString(ChoiceItems[playerid][15], TextDrawInfo[4][lang]);
			        	TextDrawSetString(DuelInfo[playerid][14], TextDrawInfo[47][lang]);
			        	if(PlayerInfo[playerid][pFreeMode] == 0)
			        	{
			        	    ChoiceItemsCheck[playerid][1] = 1;
							if(PlayerInfo[playerid][pInteraction][0] != 0)
			                {
			                    format(string, sizeof(string), "%s: %d", TextDrawInfo[3][lang], PlayerInfo[playerid][pInteraction][0]);
			                    TextDrawSetStringZS(ChoiceItems[playerid][2], ChoiceItems[playerid][9], TextDrawInfo[5][lang], string);
			                }
							else TextDrawSetStringZS(ChoiceItems[playerid][2], ChoiceItems[playerid][9], TextDrawInfo[5][lang], TextDrawInfo[2][lang]);
							TextDrawSetStringZS(ChoiceItems[playerid][3], ChoiceItems[playerid][10], TextDrawInfo[6][lang], "_");
							TextDrawSetStringZS(ChoiceItems[playerid][4], ChoiceItems[playerid][11], TextDrawInfo[7][lang], "_");
							if(PlayerInfo[playerid][pInteraction][1] != 0)
							{
							    format(string, sizeof(string), "%s: %d", TextDrawInfo[3][lang], PlayerInfo[playerid][pInteraction][1]);
							    TextDrawSetStringZS(ChoiceItems[playerid][5], ChoiceItems[playerid][12], TextDrawInfo[8][lang], string);
							}
							else TextDrawSetStringZS(ChoiceItems[playerid][5], ChoiceItems[playerid][12], TextDrawInfo[8][lang], TextDrawInfo[2][lang]);
							TextDrawSetStringZS(ChoiceItems[playerid][6], ChoiceItems[playerid][13], TextDrawInfo[9][lang], "_");
							TextDrawSetStringZS(ChoiceItems[playerid][7], ChoiceItems[playerid][14], TextDrawInfo[10][lang], "$100");
				 		}
				 		else
				 		{
				 		    ChoiceItemsCheck[playerid][1] = 5;
				            TextDrawSetStringZS(ChoiceItems[playerid][2], ChoiceItems[playerid][9], TextDrawInfo[43][lang], "_");
			                if(PlayerInfo[playerid][pPassive] == 0) TextDrawSetStringZS(ChoiceItems[playerid][3], ChoiceItems[playerid][10], TextDrawInfo[44][lang],  TextDrawInfo[40][lang]);
			                else TextDrawSetStringZS(ChoiceItems[playerid][3], ChoiceItems[playerid][10], TextDrawInfo[44][lang],  TextDrawInfo[41][lang]);
			                TextDrawSetStringZS(ChoiceItems[playerid][4], ChoiceItems[playerid][11], TextDrawInfo[45][lang], "_");
			                TextDrawSetStringZS(ChoiceItems[playerid][5], ChoiceItems[playerid][12], TextDrawInfo[46][lang], "_");
			                TextDrawSetStringZS(ChoiceItems[playerid][6], ChoiceItems[playerid][13], TextDrawInfo[9][lang], "_");
			                TextDrawSetStringZS(ChoiceItems[playerid][7], ChoiceItems[playerid][14], TextDrawInfo[10][lang], "$100");
				 		}
				 		return 1;
	       			}
	       			default: SetDialogResponse(playerid, 0, 1);
		        }
		        return 1;
		 	}
		 	if(PlayerInfo[playerid][pFreeMode] == 0 && PlayerInfo[playerid][pPrison] == 0 && DuelCheck[playerid][12] == 0 && Spawned[playerid] == true)
	   		{
	   		    if(MenuProcurementTime[playerid] != 0 && MenuProcurementTime[playerid] > gettime())
	   		    {
	   		        if(PlayerInfo[playerid][pInfoText][5] == 0) ShowModelSelectionMenu(playerid, 0, 2);
					else ShowModelSelectionMenu(playerid, 257);
	   		    }
	   		    else PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	   		}
	   		return 1;
		}
		case KEY_NO://Закупка патрон
		{
			if(ProtectionFlooding[playerid][0] >= 35 && PlayerCheatCheck[playerid] == 0) return IsProtectionFlooding(playerid, "клавишей N", "3.0");
			else
			{
				ProtectionFlooding[playerid][0] += 1;
				if(ProtectionFlooding[playerid][0] >= 30) GameTextForPlayerZS(playerid, "~n~~r~Warning~n~flood", "~r~®e Ѓћyљњ¦e", 2000, 4, 1085);
			}
		 	if(PlayerInfo[playerid][pFreeMode] == 0 && PlayerInfo[playerid][pPrison] == 0 && DuelCheck[playerid][12] == 0 && Spawned[playerid] == true && GetPlayerWeapon(playerid) != 0)
	        {
	           	if(MenuProcurementTime[playerid] == 0) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Время для закупки вышло. Попробуйте после следующего респауна.", 1085);
				new weaponid = GetPlayerWeapon(playerid);
				switch(weaponid)
	            {
	                case 22..24:
	                {
		                if(GetPlayerAmmo(playerid) >= 106) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже закупили максимальное количество патрон к данному оружию!", 1085);
						if(PlayerInfo[playerid][pMoney] < 25) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки патрон к данному оружию!", 1085);
						SetPlayerAmmoZS(playerid, weaponid, 20);
						MoneyInfoCall(playerid, 25, 1);
						PlayerPlaySound(playerid, 33401, 0.0, 0.0, 0.0);
					   	GameTextForPlayerZS(playerid, "~g~+20 Ammo", "~g~+20 Њa¦po®", 3000, 1);
	                }
	                case 25..27:
	                {
		                if(GetPlayerAmmo(playerid) >= 110) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже закупили максимальное количество патрон к данному оружию!", 1085);
						if(PlayerInfo[playerid][pMoney] < 70) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки патрон к данному оружию!", 1085);
						SetPlayerAmmoZS(playerid, weaponid, 10);
						MoneyInfoCall(playerid, 70, 1);
						PlayerPlaySound(playerid, 33401, 0.0, 0.0, 0.0);
						GameTextForPlayerZS(playerid, "~g~+10 Ammo", "~g~+10 Њa¦po®", 3000, 1);
	                }
	                case 28..29, 32:
	                {
		                if(GetPlayerAmmo(playerid) >= 200) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже закупили максимальное количество патрон к данному оружию!", 1085);
						if(PlayerInfo[playerid][pMoney] < 40) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки патрон к данному оружию!", 1085);
						SetPlayerAmmoZS(playerid, weaponid, 30);
						MoneyInfoCall(playerid, 40, 1);
						PlayerPlaySound(playerid, 33401, 0.0, 0.0, 0.0);
						GameTextForPlayerZS(playerid, "~g~+30 Ammo", "~g~+30 Њa¦po®", 3000, 1);
	                }
	                case 30..31:
	                {
		                if(GetPlayerAmmo(playerid) >= 200) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже закупили максимальное количество патрон к данному оружию!", 1085);
						if(PlayerInfo[playerid][pMoney] < 40) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки патрон к данному оружию!", 1085);
						SetPlayerAmmoZS(playerid, weaponid, 15);
						MoneyInfoCall(playerid, 40, 1);
						PlayerPlaySound(playerid, 33401, 0.0, 0.0, 0.0);
						GameTextForPlayerZS(playerid, "~g~+15 Ammo", "~g~+15 Њa¦po®", 3000, 1);
	                }
	                case 33, 34:
	                {
		                if(GetPlayerAmmo(playerid) >= 100) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже закупили максимальное количество патрон к данному оружию!", 1085);
						if(PlayerInfo[playerid][pMoney] < 90) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки патрон к данному оружию!", 1085);
						SetPlayerAmmoZS(playerid, weaponid, 10);
						MoneyInfoCall(playerid, 90, 1);
						PlayerPlaySound(playerid, 33401, 0.0, 0.0, 0.0);
						GameTextForPlayerZS(playerid, "~g~+10 Ammo", "~g~+10 Њa¦po®", 3000, 1);
	                }
	            }
	            return 1;
	 		}
	 		if(DuelCheck[playerid][12] >= 1)
			{
				switch(DuelCheck[playerid][3])
		    	{
		    	    case 1: if(DuelCheck[playerid][12] >= 10) return ShowPlayerDialogZS(playerid, 120, DIALOG_STYLE_MSGBOX, "Выход с дуэля", "{FFFFFF}Вы действительно хотите покинуть дуэль?\nС вас будет снято: {4FDF24}$300{FFFFFF}.", "Выйти", "Отмена");
		    	    case 2: if(DuelCheck[playerid][12] >= 1 && DuelCheck[playerid][13] == 4 && DuelCheck[playerid][24] == 0 && Observation[playerid][1] == 0) return ShowPlayerDialogZS(playerid, 120, DIALOG_STYLE_MSGBOX, "Выход с дуэля", "{FFFFFF}Вы действительно хотите покинуть гоночный дуэль?\nС вас будет снято: {4FDF24}$700{FFFFFF}.", "Выйти", "Отмена");
		    	}
		    	return 1;
			}
			return 1;
		}
	    case KEY_JUMP:
		{
		    if(DuelCheck[playerid][13] == 5 && DuelCheck[playerid][11] == 0 && DuelCheck[playerid][12] <= 17)
	        {
	            DuelCheck[playerid][11] = 1;
	            if(DuelCheck[playerid][23] == 2)
	            {
	                new slot[2];
	                slot[0] = playerid;
	                slot[1] = DuelCheck[playerid][0];
	                for(new x; x < 2; x ++)
	                {
	                	TextDrawColor(DuelInfo[slot[x]][33], 0xFF0000FF);
	                	TextDrawBackgroundColor(DuelInfo[slot[x]][33], 0xFF0000FF);
	                	TextDrawSetString(DuelInfo[slot[x]][33], "-");
	                	TextDrawShowForPlayer(slot[x], DuelInfo[slot[x]][33]);
	                }
	            }
	            else
	            {
	                new slot[2];
	                slot[0] = playerid;
	                slot[1] = DuelCheck[playerid][0];
	                for(new x; x < 2; x ++)
	                {
	                	TextDrawColor(DuelInfo[slot[x]][45], 0xFF0000FF);
	                	TextDrawBackgroundColor(DuelInfo[slot[x]][45], 0xFF0000FF);
	                	TextDrawSetString(DuelInfo[slot[x]][45], "-");
	                	TextDrawShowForPlayer(slot[x], DuelInfo[slot[x]][45]);
	                }
	            }
	            new string[39];
	            mysql_format(MysqlConnectID, string, sizeof(string), "SELECT * FROM race WHERE id=%d", DuelCheck[playerid][4]);
			    return mysql_tquery(MysqlConnectID, string, "OnPlayerForAll", "iii", playerid, 5, 1);
	        }
			if(PlayerInfo[playerid][pBonus][7] == 1 && PlayerInfo[playerid][pPrison] == 0 && DuelCheck[playerid][3] == 0 && !IsPlayerInRangeOfPoint(playerid, 7.0, 1750.8453, -1898.9989, 20.9523))
		    {
	        	new Float: Pos[3];
	        	GetPlayerVelocity(playerid, Pos[0], Pos[1], Pos[2]);
	        	if(Pos[2] == 0.0) SetPlayerVelocityZS(playerid, Pos[0], Pos[1], 3.0);
		 	}
	        return 1;
	    }
	    case KEY_SECONDARY_ATTACK:
	    {
	    	if(ProtectionFlooding[playerid][0] >= 45 && PlayerCheatCheck[playerid] == 0) return IsProtectionFlooding(playerid, "клавишей Enter", "3.0");
			else
			{
				ProtectionFlooding[playerid][0] += 1;
				if(ProtectionFlooding[playerid][0] >= 40) GameTextForPlayerZS(playerid, "~n~~r~Warning~n~flood", "~r~®e Ѓћyљњ¦e", 2000, 4, 1085);
			}
			return 1;
	    }
	    /*if((newkeys & KEY_SECONDARY_ATTACK) && (newkeys & KEY_DOWN) && PlayerInfo[playerid][pBonus][8] == 1 && DuelCheck[playerid][12] == 0)
		{
			switch(random(5))
	        {
				case 0: SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
				case 1: SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
				case 2: SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
				case 3: SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
				case 4: SetPlayerFightingStyle(playerid, FIGHT_STYLE_ELBOW);
			}
			return 1;
		}*/
		case KEY_ANALOG_LEFT://NUM 4
	 	{
			if(ProtectionFlooding[playerid][0] >= 55 && PlayerCheatCheck[playerid] == 0) return IsProtectionFlooding(playerid, "клавишей NUM 4", "3.0");
			else
			{
				ProtectionFlooding[playerid][0] += 1;
				if(ProtectionFlooding[playerid][0] >= 50) GameTextForPlayerZS(playerid, "~n~~r~Warning~n~flood", "~r~®e Ѓћyљњ¦e", 2000, 4, 1085);
			}
			if(DuelCheck[playerid][12] == 0 && ChoiceItemsCheck[playerid][0] == 0 && (PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pVip] == 3)) return SetDialogResponse(playerid, 7);
		    if(ChoiceItemsCheck[playerid][0] == 1)
		    {
		        new lang = PlayerInfo[playerid][pRussifier][1];
		        switch(ChoiceItemsCheck[playerid][1])//5519 5540
			 	{
			 	    case 1, 5://Главное М + Меню Своб Режима
			 	    {
	                    ChoiceItemsCheck[playerid][2] -= 1;
		                if(ChoiceItemsCheck[playerid][2] <= 0) ChoiceItemsCheck[playerid][2] = 6;
	            		PlayerTextDrawDestroy(playerid, ChoiceItemsPosi[playerid]);
	            		ChoiceItemsPosi[playerid] = InteractionPosition(playerid, PositionLines[0][ChoiceItemsCheck[playerid][2] - 1]);
	            		TextDrawSetString(ChoiceItems[playerid][8], TextDrawInfo[74 + ChoiceItemsCheck[playerid][2]][1]);
			 	    }
			 	    case 2:
			 	    {
	                    ChoiceItemsCheck[playerid][2] -= 1;
		            	if(Armour[playerid][0] == 0 && ChoiceItemsCheck[playerid][2] <= 0) ChoiceItemsCheck[playerid][2] = 3;
						else if(ChoiceItemsCheck[playerid][2] <= 0) ChoiceItemsCheck[playerid][2] = 4;
						PlayerTextDrawDestroy(playerid, ChoiceItemsPosi[playerid]);
	            		ChoiceItemsPosi[playerid] = InteractionPosition(playerid, PositionLines[0][ChoiceItemsCheck[playerid][2] - 1]);
	            		TextDrawSetString(ChoiceItems[playerid][8], TextDrawInfo[80 + ChoiceItemsCheck[playerid][2]][1]);
					}
			 	    case 3:
			 	    {
	                    ChoiceItemsCheck[playerid][2] -= 1;
		                if(ChoiceItemsCheck[playerid][2] <= 0) ChoiceItemsCheck[playerid][2] = 3;
		                PlayerTextDrawDestroy(playerid, ChoiceItemsPosi[playerid]);
	            		ChoiceItemsPosi[playerid] = InteractionPosition(playerid, PositionLines[0][ChoiceItemsCheck[playerid][2] - 1]);
	            		TextDrawSetString(ChoiceItems[playerid][8], TextDrawInfo[84 + ChoiceItemsCheck[playerid][2]][1]);
			 	    }
			 	    case 4:
			 	    {
			 	        switch(ChoiceItemsCheck[playerid][4])
	            		{
	            		    case 1:
	            		    {
	            		    	PlayerInfo[playerid][pBonus][6] += 1;
			    		        switch(PlayerInfo[playerid][pBonus][6])
			    		        {
					    		    case 1:
									{
	                                    SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);
										ApplyAnimation(playerid, "FIGHT_E", "FIGHTKICK_B", 4.1, 0, 1, 1, 1, 0);
	 							    }
	 							    case 2:
	 							    {
	 							        SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
										ApplyAnimation(playerid, "PED", "FIGHTA_2", 4.1, 0, 1, 1, 1, 0);
	 							    }
			    		    		case 3:
									{
										SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
										ApplyAnimation(playerid, "FIGHT_B", "FIGHTB_2", 4.1, 0, 1, 1, 1, 0);
	 							    }
	  		    					case 4:
									{
										SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
										ApplyAnimation(playerid, "FIGHT_C", "FIGHTC_3", 4.1, 0, 1, 1, 1, 0);
	        						}
					    		    case 5:
									{
										SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
										ApplyAnimation(playerid, "FIGHT_D", "FIGHTD_1", 4.1, 0, 1, 1, 1, 0);
	 								}
	  		    					case 6:
									{
										SetPlayerFightingStyle(playerid, FIGHT_STYLE_ELBOW);
										ApplyAnimation(playerid, "PED", "GUN_BUTT", 4.1, 0, 1, 1, 1, 0);
	 								}
	   								case 7:
									{
					    				PlayerInfo[playerid][pBonus][6] = 1;
										SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
										ApplyAnimation(playerid, "PED", "FIGHTA_2", 4.1, 0, 1, 1, 1, 0);
		 							}
	   							}
					    		new string[3];
							    format(string, sizeof(string), "%d", PlayerInfo[playerid][pBonus][6]);
								TextDrawSetString(ChoiceItems[playerid][9], string);
								return 1;
	            		    }
	            		    case 2:
	            		    {
	            		        new string[4];
	            		        PlayerInfo[playerid][pBonus][2] -= 1;
	            		        if(PlayerInfo[playerid][pBonus][2] <= -1) PlayerInfo[playerid][pBonus][2] = InteractionsNumber[0][0];
	                            if(PlayerInfo[playerid][pBonus][2] <= 0)
	                            {
	                            	PlayerInfo[playerid][pBonus][2] = 0;
									RemovePlayerAttachedObject(playerid, 7);
									TextDrawHideForPlayer(playerid, Glasses[playerid]);
									TextDrawSetString(ChoiceItems[playerid][10], TextDrawInfo[40][lang]);
								}
	                            else
	                            {
									format(string, sizeof(string), "%d", PlayerInfo[playerid][pBonus][2]);
									TextDrawSetString(ChoiceItems[playerid][10], string);
									if(PlayerInfo[playerid][pInfoText][6] == 0) TextDrawHideForPlayer(playerid, Glasses[playerid]);
									SetPlayerAttachedObjectZS(playerid, InteractionsNumber[0][PlayerInfo[playerid][pBonus][2]]);
								}
	       						switch(InteractionsNumber[2][PlayerInfo[playerid][pBonus][1]])
								{
									case 19036..19038, 11704:
									{
										if(IsPlayerAttachedObjectSlotUsed(playerid, 5)) RemovePlayerAttachedObject(playerid, 5);
										if(!IsPlayerAttachedObjectSlotUsed(playerid, 5) && PlayerInfo[playerid][pBonus][2] == 0 && PlayerInfo[playerid][pBonus][1] >= 1) SetPlayerAttachedObjectZS(playerid, InteractionsNumber[2][PlayerInfo[playerid][pBonus][1]]);
									}
								}
								return 1;
	            		    }
	            		    case 3:
	            		    {
	            		        new string[4];
	            		        PlayerInfo[playerid][pBonus][3] -= 1;
	            		        if(PlayerInfo[playerid][pBonus][3] <= -1) PlayerInfo[playerid][pBonus][3] = InteractionsNumber[1][0];
	            		    	if(PlayerInfo[playerid][pBonus][3] <= 0)
	            		    	{
	            		    		PlayerInfo[playerid][pBonus][3] = 0;
	            		    		TextDrawSetString(ChoiceItems[playerid][11], TextDrawInfo[40][lang]);
									RemovePlayerAttachedObject(playerid, 6);
		  						}
								else
								{
									format(string, sizeof(string), "%d", PlayerInfo[playerid][pBonus][3]);
									TextDrawSetString(ChoiceItems[playerid][11], string);
									SetPlayerAttachedObjectZS(playerid, InteractionsNumber[1][PlayerInfo[playerid][pBonus][3]]);
								}
								return 1;
	            		    }
	            		    case 4:
	            		    {
	            		        new string[4];
	            		    	PlayerInfo[playerid][pBonus][1] -= 1;
	            		        if(PlayerInfo[playerid][pBonus][1] <= -1) PlayerInfo[playerid][pBonus][1] = InteractionsNumber[2][0];
	            		    	if(PlayerInfo[playerid][pBonus][1] <= 0)
	            		    	{
	           		    			PlayerInfo[playerid][pBonus][1] = 0;
								    RemovePlayerAttachedObject(playerid, 5);
								    TextDrawSetString(ChoiceItems[playerid][12], TextDrawInfo[40][lang]);
		  						}
		  						else
		  						{
		  							format(string, sizeof(string), "%d", PlayerInfo[playerid][pBonus][1]);
									TextDrawSetString(ChoiceItems[playerid][12], string);
									SetPlayerAttachedObjectZS(playerid, InteractionsNumber[2][PlayerInfo[playerid][pBonus][1]]);
								}
		   						switch(InteractionsNumber[2][PlayerInfo[playerid][pBonus][1]])
								{
								    case 19036..19038, 11704: if(IsPlayerAttachedObjectSlotUsed(playerid, 7)) RemovePlayerAttachedObject(playerid, 7);
									default: if(!IsPlayerAttachedObjectSlotUsed(playerid, 7) && PlayerInfo[playerid][pBonus][2] >= 1) SetPlayerAttachedObjectZS(playerid, InteractionsNumber[0][PlayerInfo[playerid][pBonus][2]]);
		   						}
								return 1;
	            		    }
	            		    case 5://5502
	            		    {
	            		        PlayerInfo[playerid][pBonus][0] -= 1;
	            		        if(PlayerInfo[playerid][pBonus][0] <= -1) PlayerInfo[playerid][pBonus][0] = InteractionsNumber[3][0];
	            		    	if(PlayerInfo[playerid][pBonus][0] <= 0)
	            		    	{
	           		    			PlayerInfo[playerid][pBonus][0] = 0;
								    RemovePlayerAttachedObject(playerid, 4);
								    TextDrawSetString(ChoiceItems[playerid][13], TextDrawInfo[40][lang]);
		  						}
		  						else
		  						{
		  							RemovePlayerAttachedObject(playerid, 4);
		  							TextDrawSetString(ChoiceItems[playerid][13], TextDrawInfo[26+PlayerInfo[playerid][pBonus][0]][lang]);
			 					}
								return 1;
	            		    }
	            		    case 6:
	            		    {
	            		        new string[4];
	            		        PlayerInfo[playerid][pBonus][4] -= 1;
	            		        if(PlayerInfo[playerid][pBonus][4] <= -1) PlayerInfo[playerid][pBonus][4] = InteractionsNumber[4][0];
	            		    	if(PlayerInfo[playerid][pBonus][4] <= 0)
	            		    	{
	           		    			PlayerInfo[playerid][pBonus][4] = 0;
								    RemovePlayerAttachedObject(playerid, 8);
								    TextDrawSetString(ChoiceItems[playerid][14], TextDrawInfo[40][lang]);
		  						}
		  						else
		  						{
	            		        	format(string, sizeof(string), "%d", PlayerInfo[playerid][pBonus][4]);
									TextDrawSetString(ChoiceItems[playerid][14], string);
									SetPlayerAttachedObjectZS(playerid, InteractionsNumber[4][PlayerInfo[playerid][pBonus][4]]);
								}
								return 1;
	            		    }
				  			default:
	            		    {
	            				ChoiceItemsCheck[playerid][2] -= 1;
	            				switch(ChoiceItemsCheck[playerid][2])
	            				{
	            				    case 0: SetDialogResponse(playerid, 0, 3, 1);
	            				    case 6: SetDialogResponse(playerid, 0, 2, 2);
	            				    default:
									{
									    PlayerTextDrawDestroy(playerid, ChoiceItemsPosi[playerid]);
										if(ChoiceItemsCheck[playerid][2] >= 7) ChoiceItemsPosi[playerid] = InteractionPosition(playerid, PositionLines[0][ChoiceItemsCheck[playerid][2] - 7]);
										else ChoiceItemsPosi[playerid] = InteractionPosition(playerid, PositionLines[0][ChoiceItemsCheck[playerid][2] - 1]);
									}
								}
	            		    }
		 				}
			 	    }
			 	}
			 	return 1;
		    }
			return 1;
		}
		case KEY_ANALOG_RIGHT://NUM 6
		{
		    if(ProtectionFlooding[playerid][0] >= 55 && PlayerCheatCheck[playerid] == 0) return IsProtectionFlooding(playerid, "клавишей NUM 6", "3.0");
			else
			{
				ProtectionFlooding[playerid][0] += 1;
				if(ProtectionFlooding[playerid][0] >= 50) GameTextForPlayerZS(playerid, "~n~~r~Warning~n~flood", "~r~®e Ѓћyљњ¦e", 2000, 4, 1085);
			}
		    if(ChoiceItemsCheck[playerid][0] == 1)
		    {
				new lang = PlayerInfo[playerid][pRussifier][1];//5540
		        switch(ChoiceItemsCheck[playerid][1])
			 	{
			 	    case 1, 5://Главное М + Меню Своб Режима
			 	    {
	    				ChoiceItemsCheck[playerid][2] += 1;
	            		if(ChoiceItemsCheck[playerid][2] >= 7) ChoiceItemsCheck[playerid][2] = 1;
	            		PlayerTextDrawDestroy(playerid, ChoiceItemsPosi[playerid]);
	            		ChoiceItemsPosi[playerid] = InteractionPosition(playerid, PositionLines[0][ChoiceItemsCheck[playerid][2] - 1]);
	            		TextDrawSetString(ChoiceItems[playerid][8], TextDrawInfo[74 + ChoiceItemsCheck[playerid][2]][1]);
		 			}
			 	    case 2:
			 	    {
			 	        ChoiceItemsCheck[playerid][2] += 1;
		            	if(Armour[playerid][0] == 0 && ChoiceItemsCheck[playerid][2] >= 4) ChoiceItemsCheck[playerid][2] = 1;
						else if(ChoiceItemsCheck[playerid][2] >= 5) ChoiceItemsCheck[playerid][2] = 1;
						PlayerTextDrawDestroy(playerid, ChoiceItemsPosi[playerid]);
	            		ChoiceItemsPosi[playerid] = InteractionPosition(playerid, PositionLines[0][ChoiceItemsCheck[playerid][2] - 1]);
				 	    TextDrawSetString(ChoiceItems[playerid][8], TextDrawInfo[80 + ChoiceItemsCheck[playerid][2]][1]);
					}
			 	    case 3:
			 	    {
			 	        ChoiceItemsCheck[playerid][2] += 1;
		                if(ChoiceItemsCheck[playerid][2] >= 4) ChoiceItemsCheck[playerid][2] = 1;
		                PlayerTextDrawDestroy(playerid, ChoiceItemsPosi[playerid]);
	            		ChoiceItemsPosi[playerid] = InteractionPosition(playerid, PositionLines[0][ChoiceItemsCheck[playerid][2] - 1]);
	            		TextDrawSetString(ChoiceItems[playerid][8], TextDrawInfo[84 + ChoiceItemsCheck[playerid][2]][1]);
			 	    }
			 	    case 4:
			 	    {
	            		switch(ChoiceItemsCheck[playerid][4])
	            		{
	            		    case 1:
	            		    {
	            		    	PlayerInfo[playerid][pBonus][6] += 1;
			    		        switch(PlayerInfo[playerid][pBonus][6])
			    		        {
					    		    case 1:
									{
	                                    SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);
										ApplyAnimation(playerid, "FIGHT_E", "FIGHTKICK_B", 4.1, 0, 1, 1, 1, 0);
	 							    }
	 							    case 2:
	 							    {
	 							        SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
										ApplyAnimation(playerid, "PED", "FIGHTA_2", 4.1, 0, 1, 1, 1, 0);
	 							    }
			    		    		case 3:
									{
										SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
										ApplyAnimation(playerid, "FIGHT_B", "FIGHTB_2", 4.1, 0, 1, 1, 1, 0);
	 							    }
	  		    					case 4:
									{
										SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
										ApplyAnimation(playerid, "FIGHT_C", "FIGHTC_3", 4.1, 0, 1, 1, 1, 0);
	        						}
					    		    case 5:
									{
										SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
										ApplyAnimation(playerid, "FIGHT_D", "FIGHTD_1", 4.1, 0, 1, 1, 1, 0);
	 								}
	  		    					case 6:
									{
										SetPlayerFightingStyle(playerid, FIGHT_STYLE_ELBOW);
										ApplyAnimation(playerid, "PED", "GUN_BUTT", 4.1, 0, 1, 1, 1, 0);
	 								}
	   								case 7:
									{
					    				PlayerInfo[playerid][pBonus][6] = 1;
										SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
										ApplyAnimation(playerid, "PED", "FIGHTA_2", 4.1, 0, 1, 1, 1, 0);
		 							}
	   							}
					    		new string[4];
							    format(string, sizeof(string), "%d", PlayerInfo[playerid][pBonus][6]);
								TextDrawSetString(ChoiceItems[playerid][9], string);
								return 1;
	            		    }
	            		    case 2:
	            		    {
	            		        new string[4];
	            		        PlayerInfo[playerid][pBonus][2] += 1;
	                            if(PlayerInfo[playerid][pBonus][2] > InteractionsNumber[0][0])
	                            {
	                            	PlayerInfo[playerid][pBonus][2] = 0;
									RemovePlayerAttachedObject(playerid, 7);
									TextDrawHideForPlayer(playerid, Glasses[playerid]);
									TextDrawSetString(ChoiceItems[playerid][10], TextDrawInfo[40][lang]);
								}
								else
	                            {
									format(string, sizeof(string), "%d", PlayerInfo[playerid][pBonus][2]);
									TextDrawSetString(ChoiceItems[playerid][10], string);
									if(PlayerInfo[playerid][pInfoText][6] == 0) TextDrawHideForPlayer(playerid, Glasses[playerid]);
									SetPlayerAttachedObjectZS(playerid, InteractionsNumber[0][PlayerInfo[playerid][pBonus][2]]);
								}
								switch(InteractionsNumber[2][PlayerInfo[playerid][pBonus][1]])
								{
									case 19036..19038, 11704:
									{
										if(IsPlayerAttachedObjectSlotUsed(playerid, 5)) RemovePlayerAttachedObject(playerid, 5);
										if(!IsPlayerAttachedObjectSlotUsed(playerid, 5) && PlayerInfo[playerid][pBonus][2] == 0 && PlayerInfo[playerid][pBonus][1] >= 1) SetPlayerAttachedObjectZS(playerid, InteractionsNumber[2][PlayerInfo[playerid][pBonus][1]]);
									}
								}
								return 1;
	            		    }
	            		    case 3:
	            		    {
	            		        new string[4];
	            		        PlayerInfo[playerid][pBonus][3] += 1;
	            		        if(PlayerInfo[playerid][pBonus][3] > InteractionsNumber[1][0])
	                            {
	            		            PlayerInfo[playerid][pBonus][3] = 0;
									RemovePlayerAttachedObject(playerid, 6);
									TextDrawSetString(ChoiceItems[playerid][11], TextDrawInfo[40][lang]);
						  		}
								else
								{
									format(string, sizeof(string), "%d", PlayerInfo[playerid][pBonus][3]);
									TextDrawSetString(ChoiceItems[playerid][11], string);
									SetPlayerAttachedObjectZS(playerid, InteractionsNumber[1][PlayerInfo[playerid][pBonus][3]]);
								}
								return 1;
	            		    }
	            		    case 4:
	            		    {
	            		        new string[4];
	                            PlayerInfo[playerid][pBonus][1] += 1;
								if(PlayerInfo[playerid][pBonus][1] > InteractionsNumber[2][0])
	                            {
								    PlayerInfo[playerid][pBonus][1] = 0;
								    RemovePlayerAttachedObject(playerid, 5);
								    TextDrawSetString(ChoiceItems[playerid][12], TextDrawInfo[40][lang]);
								}
								else
								{
									format(string, sizeof(string), "%d", PlayerInfo[playerid][pBonus][1]);
									TextDrawSetString(ChoiceItems[playerid][12], string);
									SetPlayerAttachedObjectZS(playerid, InteractionsNumber[2][PlayerInfo[playerid][pBonus][1]]);
								}
		   						switch(InteractionsNumber[2][PlayerInfo[playerid][pBonus][1]])
								{
								    case 19036..19038, 11704: if(IsPlayerAttachedObjectSlotUsed(playerid, 7)) RemovePlayerAttachedObject(playerid, 7);
									default: if(!IsPlayerAttachedObjectSlotUsed(playerid, 7) && PlayerInfo[playerid][pBonus][2] >= 1) SetPlayerAttachedObjectZS(playerid, InteractionsNumber[0][PlayerInfo[playerid][pBonus][2]]);
		   						}
								return 1;
	            		    }
	            		    case 5://5502
	            		    {
	            		        PlayerInfo[playerid][pBonus][0] += 1;
								if(PlayerInfo[playerid][pBonus][0] > InteractionsNumber[3][0])
	                            {
								    PlayerInfo[playerid][pBonus][0] = 0;
								    RemovePlayerAttachedObject(playerid, 4);
								    TextDrawSetString(ChoiceItems[playerid][13], TextDrawInfo[40][lang]);
								}
								else
								{
									RemovePlayerAttachedObject(playerid, 4);
									TextDrawSetString(ChoiceItems[playerid][13], TextDrawInfo[26+PlayerInfo[playerid][pBonus][0]][lang]);
								}
								return 1;
	            		    }
	            		    case 6:
	            		    {
	            		        new string[4];
	            		        PlayerInfo[playerid][pBonus][4] += 1;
								if(PlayerInfo[playerid][pBonus][4] > InteractionsNumber[4][0])
	                            {
								    PlayerInfo[playerid][pBonus][4] = 0;
								    RemovePlayerAttachedObject(playerid, 8);
								    TextDrawSetString(ChoiceItems[playerid][14], TextDrawInfo[40][lang]);
								}
								else
								{
		 							format(string, sizeof(string), "%d", PlayerInfo[playerid][pBonus][4]);
									TextDrawSetString(ChoiceItems[playerid][14], string);
									SetPlayerAttachedObjectZS(playerid, InteractionsNumber[4][PlayerInfo[playerid][pBonus][4]]);
								}
								return 1;
	            		    }
	            		    default:
	            		    {
	            				ChoiceItemsCheck[playerid][2] += 1;
	            				switch(ChoiceItemsCheck[playerid][2])
	            				{
	            				    case 7: SetDialogResponse(playerid, 0, 3);
	            				    case 10: SetDialogResponse(playerid, 0, 2);
	            				    default:
									{
									    PlayerTextDrawDestroy(playerid, ChoiceItemsPosi[playerid]);
										if(ChoiceItemsCheck[playerid][2] >= 7) ChoiceItemsPosi[playerid] = InteractionPosition(playerid, PositionLines[0][ChoiceItemsCheck[playerid][2] - 7]);
										else ChoiceItemsPosi[playerid] = InteractionPosition(playerid, PositionLines[0][ChoiceItemsCheck[playerid][2] - 1]);
									}
								}
	            		    }
	            		}
			 	    }
			 	}
			 	return 1;
		    }
		    /*if(PlayerInfo[playerid][pBonus][10] >= 1 && PlayerInfo[playerid][pFreeMode] == 0 && PlayerInfo[playerid][pPrison] == 0 && Spawned[playerid] == true && DuelCheck[playerid][12] == 0)
	  		{
		        if(PlayerInfo[playerid][pBonus][11] != 0)
	   			{
	   			    new string[54];
		        	format(string, sizeof(string), "Мега пулу может быть использовать только через: %s", Convert(PlayerInfo[playerid][pBonus][11] - gettime()));
	        	    return SendClientMessageZS(playerid, COLOR_RED, string);
	   			}
	            if(MegaBullet[playerid] == 0)
		    	{
	 	    		MegaBullet[playerid] = 5;
	 	    		GameTextForPlayerZS(playerid, "~n~~g~mega bullet On", "~n~~g~Їe™a Јyћ¬ ўkћ", 2000, 4);
		    	}
		    	else
		    	{
	 	    		if(MegaBullet[playerid] != 5) PlayerInfo[playerid][pBonus][11] = gettime() + 600;
	 	    		MegaBullet[playerid] = 0;
	 	    		GameTextForPlayerZS(playerid, "~n~~g~mega bullet ~r~Off", "~n~~g~Їe™a Јyћ¬ ~r~ўЁk", 2000, 4);
		    	}
	   			return 1;
		    }*/
			return 1;//5513
		}
	 	case KEY_SPRINT:// Shift
		{
		    if(Observation[playerid][1] == 1 && PlayerInfo[playerid][pAdmin] >= 2)
		    {
		        Observation[playerid][1] = 0;
		        Observation[playerid][2] = 0;
				SetCameraBehindPlayer(playerid);
		        TogglePlayerSpectatingZS(playerid, 0);
		        Observation[playerid][0] = MAX_PLAYERS;
		        TextDrawHideForPlayer(playerid, MenuProcurementIcon[playerid][1]);
		    	TextDrawHideForPlayer(playerid, ArenaInfo[playerid][0]);
	    		TextDrawHideForPlayer(playerid, ArenaInfo[playerid][1]);
	    		TextDrawHideForPlayer(playerid, ArenaInfo[playerid][2]);
	    		return TextDrawHideForPlayer(playerid, ArenaInfo[playerid][3]);
			}
			if(DuelCheck[playerid][13] == 4 && Observation[playerid][1] == 2) return PlayerSpectateVehicle(playerid, DuelCheck[DuelCheck[playerid][0]][15]);
	        if(DuelCheck[playerid][13] == 5 && DuelCheck[playerid][11] == 0 && DuelCheck[playerid][12] <= 17)
	        {
	            DuelCheck[playerid][11] = 1;
	            if(DuelCheck[playerid][23] == 2)
	            {
	                new slot[2];
	                slot[0] = playerid;
	                slot[1] = DuelCheck[playerid][0];
	                for(new x; x < 2; x ++)
	                {
	                	TextDrawColor(DuelInfo[slot[x]][33], 0x4FDF24FF);
	                	TextDrawBackgroundColor(DuelInfo[slot[x]][33], 0x4FDF24FF);
	                	TextDrawSetString(DuelInfo[slot[x]][33], "+");
	                	TextDrawShowForPlayer(slot[x], DuelInfo[slot[x]][33]);
	                }
	            }
	            else
	            {
	                new slot[2];
	                slot[0] = playerid;
	                slot[1] = DuelCheck[playerid][0];
	                for(new x; x < 2; x ++)
	                {
	                	TextDrawColor(DuelInfo[slot[x]][45], 0x4FDF24FF);
	                	TextDrawBackgroundColor(DuelInfo[slot[x]][45], 0x4FDF24FF);
	                	TextDrawSetString(DuelInfo[slot[x]][45], "+");
	                	TextDrawShowForPlayer(slot[x], DuelInfo[slot[x]][45]);
	                }
	            }
	            new string[39];
	            mysql_format(MysqlConnectID, string, sizeof(string), "SELECT * FROM race WHERE `id`='%d'", DuelCheck[playerid][4]);
			    return mysql_tquery(MysqlConnectID, string, "OnPlayerForAll", "iii", playerid, 5, 0);
	        }
			if(ChoiceItemsCheck[playerid][0] == 1)
		    {
		        new lang = PlayerInfo[playerid][pRussifier][1];
		        switch(ChoiceItemsCheck[playerid][1])
		        {
		            case 1:
		            {
		            	switch(ChoiceItemsCheck[playerid][2])
		            	{
		            	    case 1:
		            	    {
		            	    	if(PlayerInfo[playerid][pInteraction][0] == 0 || RegistrationHealth[playerid][2] == 1) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	         					if(Health[playerid] <= 89)
			            		{
									RegistrationHealth[playerid][0] = 1;
				                    RegistrationHealth[playerid][1] = 4;
				                    RegistrationHealth[playerid][2] = 1;
									if(PlayerInfo[playerid][pInteraction][0] >= 1) PlayerInfo[playerid][pInteraction][0] -= 1;
									new string[89];
									AchievementsInfo(17, playerid);
									ApplyAnimation(playerid, "PED", "GUM_EAT", 4.1, 0, 1, 1, 0, 5350);
									SendClientMessageZS(playerid, 0xFFFFFFFF, "Вы успешно использовали Медицинскую аптечку.", 1138);
									if(PlayerInfo[playerid][pInteraction][0] != 0)
									{
									    format(string, sizeof(string), "%s: %d", TextDrawInfo[3][lang], PlayerInfo[playerid][pInteraction][0]);
									    TextDrawSetString(ChoiceItems[playerid][9], string);
									}
									else TextDrawSetString(ChoiceItems[playerid][9], TextDrawInfo[2][lang]);
	 							}
	        					else SendClientMessageZS(playerid, COLOR_RED, "В данный момент вы не нуждаетесь в лечении.", 1085);
		            	    }
		            	    case 2://5540
		            	    {
		            	        new string[13];
		            	        ChoiceItemsCheck[playerid][3] = ChoiceItemsCheck[playerid][2];
		            	    	ChoiceItemsCheck[playerid][1] = 2;
		            	        ChoiceItemsCheck[playerid][2] = 1;
		            	        PlayerTextDrawDestroy(playerid, ChoiceItemsPosi[playerid]);
	            				ChoiceItemsPosi[playerid] = InteractionPosition(playerid, PositionLines[0][0]);
		            	        TextDrawSetString(ChoiceItems[playerid][15], TextDrawInfo[11][lang]);
	            				TextDrawSetString(ChoiceItems[playerid][8], TextDrawInfo[81][1]);
								if(PlayerInfo[playerid][pInteraction][4] != 0)
								{
								    format(string, sizeof(string), "%s: %d", TextDrawInfo[3][lang], PlayerInfo[playerid][pInteraction][4]);
								    TextDrawSetStringZS(ChoiceItems[playerid][2], ChoiceItems[playerid][9], TextDrawInfo[12][lang], string);
								}
								else TextDrawSetStringZS(ChoiceItems[playerid][2], ChoiceItems[playerid][9], TextDrawInfo[12][lang], TextDrawInfo[2][lang]);
								if(PlayerInfo[playerid][pInteraction][5] != 0)
								{
								    format(string, sizeof(string), "%s: %d", TextDrawInfo[3][lang], PlayerInfo[playerid][pInteraction][5]);
								    TextDrawSetStringZS(ChoiceItems[playerid][3], ChoiceItems[playerid][10], TextDrawInfo[13][lang], string);
								}
								else TextDrawSetStringZS(ChoiceItems[playerid][3], ChoiceItems[playerid][10], TextDrawInfo[13][lang], TextDrawInfo[2][lang]);
								if(PlayerInfo[playerid][pInteraction][6] != 0)
								{
								    format(string, sizeof(string), "%s: %d", TextDrawInfo[3][lang], PlayerInfo[playerid][pInteraction][6]);
								    TextDrawSetStringZS(ChoiceItems[playerid][4], ChoiceItems[playerid][11], TextDrawInfo[14][lang], string);
								}
								else TextDrawSetStringZS(ChoiceItems[playerid][4], ChoiceItems[playerid][11], TextDrawInfo[14][lang], TextDrawInfo[2][lang]);
								if(Armour[playerid][0] != 0) TextDrawSetStringZS(ChoiceItems[playerid][5], ChoiceItems[playerid][12], TextDrawInfo[15][lang], "_");
								else TextDrawSetStringZS(ChoiceItems[playerid][5], ChoiceItems[playerid][12], "_", "_");
								TextDrawSetStringZS(ChoiceItems[playerid][6], ChoiceItems[playerid][13], "_", "_");
								return TextDrawSetStringZS(ChoiceItems[playerid][7], ChoiceItems[playerid][14], "_", "_");
		            	    }
		            	    case 3:
		            	    {
								new string[13];
		            	        ChoiceItemsCheck[playerid][3] = ChoiceItemsCheck[playerid][2];
		            	    	ChoiceItemsCheck[playerid][1] = 3;
		            	        ChoiceItemsCheck[playerid][2] = 1;
		            	        PlayerTextDrawDestroy(playerid, ChoiceItemsPosi[playerid]);
	            				ChoiceItemsPosi[playerid] = InteractionPosition(playerid, PositionLines[0][0]);
		            	        TextDrawSetString(ChoiceItems[playerid][15], TextDrawInfo[16][lang]);
		            	        TextDrawSetString(ChoiceItems[playerid][8], TextDrawInfo[85][lang]);
	         	                if(PlayerInfo[playerid][pInteraction][2] == 0)
								{
	 		    					TextDrawSetStringZS(ChoiceItems[playerid][2], ChoiceItems[playerid][9], TextDrawInfo[17][lang], TextDrawInfo[2][lang]);
	 		    					if(InteractionCheck[playerid][0] == 2) TextDrawSetStringZS(ChoiceItems[playerid][3], ChoiceItems[playerid][10], TextDrawInfo[18][lang], TextDrawInfo[20][lang]);
	 		    					else TextDrawSetStringZS(ChoiceItems[playerid][3], ChoiceItems[playerid][10], TextDrawInfo[18][lang], TextDrawInfo[2][lang]);
				  				}
						  		else
						  		{
						  		    format(string, sizeof(string), "%s: %d", TextDrawInfo[3][lang], PlayerInfo[playerid][pInteraction][2]);
		  		    				TextDrawSetStringZS(ChoiceItems[playerid][2], ChoiceItems[playerid][9], TextDrawInfo[17][lang], string);
									if(InteractionCheck[playerid][0] != 2)
									{
									    format(string, sizeof(string), "%s: %d", TextDrawInfo[3][lang], PlayerInfo[playerid][pInteraction][2]);
									    TextDrawSetStringZS(ChoiceItems[playerid][3], ChoiceItems[playerid][10], TextDrawInfo[18][lang], string);
									}
									else TextDrawSetStringZS(ChoiceItems[playerid][3], ChoiceItems[playerid][10], TextDrawInfo[18][lang], TextDrawInfo[20][lang]);
								}
						  		if(PlayerInfo[playerid][pInteraction][3] != 0)
						  		{
						  		    format(string, sizeof(string), "%s: %d", TextDrawInfo[3][lang], PlayerInfo[playerid][pInteraction][3]);
						  		    TextDrawSetStringZS(ChoiceItems[playerid][4], ChoiceItems[playerid][11], TextDrawInfo[19][lang], string);
						  		}
						  		else TextDrawSetStringZS(ChoiceItems[playerid][4], ChoiceItems[playerid][11], TextDrawInfo[19][lang],TextDrawInfo[2][lang]);
								TextDrawSetStringZS(ChoiceItems[playerid][5], ChoiceItems[playerid][12], "_", "_");
								TextDrawSetStringZS(ChoiceItems[playerid][6], ChoiceItems[playerid][13], "_", "_");
								return TextDrawSetStringZS(ChoiceItems[playerid][7], ChoiceItems[playerid][14], "_", "_");
		            	    }
		            	    case 4:
		            	    {
		            	    	if(PlayerInfo[playerid][pInteraction][1] == 0) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				    	        PlayerInfo[playerid][pInteraction][1] -= 1;
	  						    SendClientMessageZS(playerid, 0xFFFFFFFF, "Вы успешно использовали Маскировку.", 1138);
								if(PlayerInfo[playerid][pInteraction][1] != 0)
								{
								    new string[13];
								    format(string, sizeof(string), "%s: %d", TextDrawInfo[3][lang], PlayerInfo[playerid][pInteraction][1]);
								    TextDrawSetStringZS(ChoiceItems[playerid][5], ChoiceItems[playerid][12], TextDrawInfo[8][lang], string);
								}
								else TextDrawSetStringZS(ChoiceItems[playerid][5], ChoiceItems[playerid][12], TextDrawInfo[8][lang], TextDrawInfo[2][lang]);
		            	    }
		            	    case 5: return SetDialogResponse(playerid, 0, 2, 1);
		            	    case 6:
		            	    {
	                            KillsCheck[playerid][10] = 60;
								SetPlayerHealth(playerid, 0.0);
								return SetDialogResponse(playerid, 0, 1);
		            	    }
		            	}
		            	new string[61+22], str[22];
						format(str, sizeof(str), "%d,%d,%d,%d,%d,%d,%d", PlayerInfo[playerid][pInteraction][0], PlayerInfo[playerid][pInteraction][1], PlayerInfo[playerid][pInteraction][2], PlayerInfo[playerid][pInteraction][3], PlayerInfo[playerid][pInteraction][4], PlayerInfo[playerid][pInteraction][5], PlayerInfo[playerid][pInteraction][6]);
						mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `interaction`='%s' WHERE `id`='%d'", str, PlayerInfo[playerid][pRoomAccount]);
						return mysql_tquery(MysqlConnectID, string);
		            }
		            case 2:
		            {
		            	switch(ChoiceItemsCheck[playerid][2])
		            	{
		            	    case 1:
		            	    {
		            	    	if(PlayerInfo[playerid][pInteraction][4] == 0) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		            	    	if(Armour[playerid][0] >= 100) return SendClientMessageZS(playerid, COLOR_RED, "На вас уже одет бронижилет!", 1085);
								switch(Armour[playerid][1])
		            	    	{
		            	    	    case 2: return SendClientMessageZS(playerid, COLOR_RED, "На вас уже одет Тяжелый бронижилет!", 1085);
		            	    	    case 3: return SendClientMessageZS(playerid, COLOR_RED, "На вас уже одет Сверхтяжелы бронижилет!", 1085);
		            	    	}
								Armour[playerid][0] += 34;
								Armour[playerid][1] = 1;
								Armour[playerid][2] = 6;
								if(PlayerInfo[playerid][pInteraction][4] >= 1) PlayerInfo[playerid][pInteraction][4] -= 1;
								if(Armour[playerid][0] >= 101) Armour[playerid][0] = 100;
								SetPlayerArmour(playerid, Armour[playerid][0]);
								SetPlayerAttachedObjectZS(playerid, 19515);
								SendClientMessageZS(playerid, 0xFFFFFFFF, "Вы успешно одели {10F441}Стандартный {FFFFFF}бронежилет.", 1138);
								if(PlayerInfo[playerid][pInteraction][4] != 0)
								{
								    new string[20];
								    format(string, sizeof(string), "%s: %d", TextDrawInfo[3][lang], PlayerInfo[playerid][pInteraction][4]);
								    TextDrawSetStringZS(ChoiceItems[playerid][2], ChoiceItems[playerid][9], TextDrawInfo[12][lang], string);
								}
								else TextDrawSetStringZS(ChoiceItems[playerid][2], ChoiceItems[playerid][9], TextDrawInfo[12][lang], TextDrawInfo[2][lang]);
								TextDrawSetString(ChoiceItems[playerid][5], TextDrawInfo[15][lang]);
		            	    }
		            	    case 2:
		            	    {
		            	    	if(PlayerInfo[playerid][pInteraction][5] == 0) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		            	    	if(Armour[playerid][0] >= 100) return SendClientMessageZS(playerid, COLOR_RED, "На вас уже одет бронижилет!", 1085);
								switch(Armour[playerid][1])
		            	    	{
		            	    	    case 1: return SendClientMessageZS(playerid, COLOR_RED, "На вас уже одет Стандартный бронижилет!", 1085);
		            	    	    case 3: return SendClientMessageZS(playerid, COLOR_RED, "На вас уже одет Сверхтяжелы бронижилет!", 1085);
		            	    	}
								Armour[playerid][0] += 34;
	                            Armour[playerid][1] = 2;
	                            Armour[playerid][2] = 6;
	                            if(PlayerInfo[playerid][pInteraction][5] >= 1) PlayerInfo[playerid][pInteraction][5] -= 1;
								if(Armour[playerid][0] >= 101) Armour[playerid][0] = 100;
								SetPlayerArmour(playerid, Armour[playerid][0]);
								SetPlayerAttachedObjectZS(playerid, 19515);
								SendClientMessageZS(playerid, 0xFFFFFFFF, "Вы успешно одели {10F441}Тяжелый {FFFFFF}бронежилет.", 1138);
								if(PlayerInfo[playerid][pInteraction][5] != 0)
								{
								    new string[20];
								    format(string, sizeof(string), "%s: %d", TextDrawInfo[3][lang], PlayerInfo[playerid][pInteraction][5]);
								    TextDrawSetStringZS(ChoiceItems[playerid][3], ChoiceItems[playerid][10], TextDrawInfo[13][lang], string);
								}
								else TextDrawSetStringZS(ChoiceItems[playerid][3], ChoiceItems[playerid][10], TextDrawInfo[13][lang], TextDrawInfo[2][lang]);
								TextDrawSetString(ChoiceItems[playerid][5], TextDrawInfo[15][lang]);
		            	    }
		            	    case 3:
		            	    {
		            	    	if(PlayerInfo[playerid][pInteraction][6] == 0) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		            	    	if(Armour[playerid][0] >= 100) return SendClientMessageZS(playerid, COLOR_RED, "На вас уже одет бронижилет!", 1085);
		            	    	switch(Armour[playerid][1])
		            	    	{
		            	    	    case 1: return SendClientMessageZS(playerid, COLOR_RED, "На вас уже одет Стандартный бронижилет!", 1085);
		            	    	    case 2: return SendClientMessageZS(playerid, COLOR_RED, "На вас уже одет Тяжелый бронижилет!", 1085);
		            	    	}
								Armour[playerid][0] += 34;
	                            Armour[playerid][1] = 3;
	                            Armour[playerid][2] = 6;
	                            if(PlayerInfo[playerid][pInteraction][6] >= 1) PlayerInfo[playerid][pInteraction][6] -= 1;
								if(Armour[playerid][0] >= 101) Armour[playerid][0] = 100;
								SetPlayerArmour(playerid, Armour[playerid][0]);
								AchievementsInfo(18, playerid);
								SetPlayerAttachedObjectZS(playerid, 19515);
								SendClientMessageZS(playerid, 0xFFFFFFFF, "Вы успешно одели {10F441}Сверхтяжелый {FFFFFF}бронежилет.", 1138);
								if(PlayerInfo[playerid][pInteraction][6] != 0)
								{
								    new string[20];
								    format(string, sizeof(string), "%s: %d", TextDrawInfo[3][lang], PlayerInfo[playerid][pInteraction][6]);
								    TextDrawSetStringZS(ChoiceItems[playerid][4], ChoiceItems[playerid][11], TextDrawInfo[14][lang], string);
								}
								else TextDrawSetStringZS(ChoiceItems[playerid][4], ChoiceItems[playerid][11], TextDrawInfo[14][lang], TextDrawInfo[2][lang]);
								TextDrawSetString(ChoiceItems[playerid][5], TextDrawInfo[15][lang]);
		            	    }
		            	    case 4:
		            	    {
	                            if(Armour[playerid][0] == 0) return SendClientMessageZS(playerid, COLOR_RED, "На вас нету бронежилета!", 1085);
								new string[20];
								new slot = PlayerInfo[playerid][pInteraction][Armour[playerid][1] + 3];
								if(Armour[playerid][0] >= 24 || Armour[playerid][0] >= 68 || Armour[playerid][0] >= 99)
		   						{
								    switch(Armour[playerid][0])
								    {
										case 24..34: PlayerInfo[playerid][pInteraction][Armour[playerid][1] + 3] += 1;
	   									case 45..68: PlayerInfo[playerid][pInteraction][Armour[playerid][1] + 3] += 2;
	   									case 79..100: PlayerInfo[playerid][pInteraction][Armour[playerid][1] + 3] += 3;
								    }
								}
								Armour[playerid][0] = 0;
	                            Armour[playerid][1] = 0;
	                            Armour[playerid][2] = 6;
	                            ChoiceItemsCheck[playerid][2] = 3;
								SetPlayerArmour(playerid, 0.0);
								RemovePlayerAttachedObject(playerid, 9);
								SendClientMessageZS(playerid, 0xFFFFFFFF, "Вы успешно сняли {10F441}Бронежилет{FFFFFF}.", 1138);
								if(lang == 1) TextDrawSetString(ChoiceItems[playerid][8], TextDrawInfo[83][lang]);
								if(PlayerInfo[playerid][pInteraction][4] != 0)
								{
								    format(string, sizeof(string), "%s: %d", TextDrawInfo[3][lang], PlayerInfo[playerid][pInteraction][4]);
								    TextDrawSetStringZS(ChoiceItems[playerid][2], ChoiceItems[playerid][9], TextDrawInfo[12][lang], string);
								}
								else TextDrawSetStringZS(ChoiceItems[playerid][2], ChoiceItems[playerid][9], TextDrawInfo[12][lang], TextDrawInfo[2][lang]);
								if(PlayerInfo[playerid][pInteraction][5] != 0)
								{
								    format(string, sizeof(string), "%s: %d", TextDrawInfo[3][lang], PlayerInfo[playerid][pInteraction][5]);
								    TextDrawSetStringZS(ChoiceItems[playerid][3], ChoiceItems[playerid][10], TextDrawInfo[13][lang], string);
								}
								else TextDrawSetStringZS(ChoiceItems[playerid][3], ChoiceItems[playerid][10], TextDrawInfo[13][lang], TextDrawInfo[2][lang]);
								if(PlayerInfo[playerid][pInteraction][6] != 0)
								{
								    format(string, sizeof(string), "%s: %d", TextDrawInfo[3][lang], PlayerInfo[playerid][pInteraction][6]);
								    TextDrawSetStringZS(ChoiceItems[playerid][4], ChoiceItems[playerid][11], TextDrawInfo[14][lang], string);
								}
								else TextDrawSetStringZS(ChoiceItems[playerid][4], ChoiceItems[playerid][11], TextDrawInfo[14][lang], TextDrawInfo[2][lang]);
								PlayerTextDrawDestroy(playerid, ChoiceItemsPosi[playerid]);
	            				ChoiceItemsPosi[playerid] = InteractionPosition(playerid, PositionLines[0][2]);
								TextDrawSetStringZS(ChoiceItems[playerid][5], ChoiceItems[playerid][12], "_", "_");
								TextDrawSetStringZS(ChoiceItems[playerid][6], ChoiceItems[playerid][13], "_", "_");
								TextDrawSetStringZS(ChoiceItems[playerid][7], ChoiceItems[playerid][14], "_", "_");
								if(slot == PlayerInfo[playerid][pInteraction][Armour[playerid][1] + 3]) return 1;
		            	    }
		            	}
		            	new string[61+22], str[22];
						format(str, sizeof(str), "%d,%d,%d,%d,%d,%d,%d", PlayerInfo[playerid][pInteraction][0], PlayerInfo[playerid][pInteraction][1], PlayerInfo[playerid][pInteraction][2], PlayerInfo[playerid][pInteraction][3], PlayerInfo[playerid][pInteraction][4], PlayerInfo[playerid][pInteraction][5], PlayerInfo[playerid][pInteraction][6]);
						mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `interaction`='%s' WHERE `id`='%d'", str, PlayerInfo[playerid][pRoomAccount]);
						return mysql_tquery(MysqlConnectID, string);
		            }
		            case 3:
		            {
		                switch(ChoiceItemsCheck[playerid][2])
		            	{
		            	    case 1:
		            	    {
		            	        if(PlayerInfo[playerid][pInteraction][2] == 0) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	                            if(InteractionCheck[playerid][9] != 0 || InteractionCheck[playerid][0] == 2) return SendClientMessageZS(playerid, COLOR_RED, "В данный момент вы не можете выполнить данное действие.", 1085);
								if(PlayerInfo[playerid][pInteraction][2] >= 1) PlayerInfo[playerid][pInteraction][2] -= 1;
	                            InteractionCheck[playerid][0] = 1;
	                            InteractionCheck[playerid][1] = 11;
	                            KillInfoPlayer(playerid, -1, 0, 94, ScoreKill[4]);
								ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
								GetPlayerPos(playerid, InteractionPos[playerid][0], InteractionPos[playerid][1], InteractionPos[playerid][2]);
								InteractionCheck[playerid][9] = CreateDynamicObject(1654, InteractionPos[playerid][0], InteractionPos[playerid][1], InteractionPos[playerid][2] - 1.0, -90.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
								InteractionText[playerid][3] = Create3DTextLabel("Бомба\n{FFFFFF}Взорвется через {4FDF24}10 {FFFFFF}секунд", 0xFF0000FF, InteractionPos[playerid][0], InteractionPos[playerid][1], InteractionPos[playerid][2] - 0.7, 10.0, GetPlayerVirtualWorld(playerid), 1);
								SendClientMessageZS(playerid, 0xFFFFFFFF, "Вы заложили {10F441}Динамит{FFFFFF}, будет активирован через {10F441}10 {FFFFFF}секунд.", 1138);
								if(PlayerInfo[playerid][pInteraction][2] == 0)
				   	            {
				   					TextDrawSetString(ChoiceItems[playerid][9], TextDrawInfo[2][lang]);
								   	TextDrawSetString(ChoiceItems[playerid][10], TextDrawInfo[2][lang]);
	 						    }
	 						    else
				   	            {
				   	                new string[20];
					   				format(string, sizeof(string), "%s: %d", TextDrawInfo[3][lang], PlayerInfo[playerid][pInteraction][2]);
		  		    				TextDrawSetString(ChoiceItems[playerid][9], string);
		  		    				TextDrawSetString(ChoiceItems[playerid][10], string);
		   						}
		            	    }
		            	    case 2:
		            	    {
		            	        new string[20];
		            	        if(InteractionCheck[playerid][0] == 2)
		            	        {
		            	            PlayerInfo[playerid][pInteraction][2] += 1;
		            	            InteractionCheck[playerid][0] = 0;
		            	            RemovePlayerAttachedObject(playerid, 7);
	                                if(PlayerInfo[playerid][pBonus][2] >= 1) SetPlayerAttachedObjectZS(playerid, InteractionsNumber[0][PlayerInfo[playerid][pBonus][2]]);
					   	            format(string, sizeof(string), "%s: %d", TextDrawInfo[3][lang], PlayerInfo[playerid][pInteraction][2]);
		  		    				TextDrawSetString(ChoiceItems[playerid][9], string);
		  		    				TextDrawSetString(ChoiceItems[playerid][10], string);
		            	        }
		            	        else
		            	        {
			            	        if(PlayerInfo[playerid][pInteraction][2] == 0) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				    				if(InteractionCheck[playerid][0] >= 1 || InteractionCheck[playerid][11] != -1) return SendClientMessageZS(playerid, COLOR_RED, "В данный момент вы не можете выполнить данное действие.", 1085);
		                            if(PlayerInfo[playerid][pInteraction][2] >= 1) PlayerInfo[playerid][pInteraction][2] -= 1;
									InteractionCheck[playerid][0] = 2;
									SetPlayerAttachedObject(playerid, 7, 1654, 5, 0.1, 0, 0, 0, 0, 0);
									SendClientMessageZS(playerid, 0xFFFFFFFF, "Для использование {10F441}Липкого Динамита{FFFFFF}, прилепите её к врагу.", 1138);
									if(PlayerInfo[playerid][pInteraction][2] != 0)
			   					    {
			   					        format(string, sizeof(string), "%s: %d", TextDrawInfo[3][lang], PlayerInfo[playerid][pInteraction][2]);
			  		    				TextDrawSetString(ChoiceItems[playerid][9], string);
			  		    				TextDrawSetString(ChoiceItems[playerid][10], string);
			   						}
			   						else TextDrawSetString(ChoiceItems[playerid][9], TextDrawInfo[2][lang]);
		 						    TextDrawSetString(ChoiceItems[playerid][10], TextDrawInfo[20][lang]);
	 						    }
		            	    }
		            	    case 3:
		            	    {
		            	        if(PlayerInfo[playerid][pInteraction][3] == 0) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	       						if(InteractionCheck[playerid][1] >= 1 || InteractionCheck[playerid][0] == 2) return SendClientMessageZS(playerid, COLOR_RED, "Пожалуйста подождите пока преведущая Наземная мина активируется.", 1085);
	                            new slot, Float:Pos[3];
								for(new z = 2; z < 5; z ++)
	       						{
	             					if(!IsValidDynamicObject(InteractionCheck[playerid][z])) continue;
	                 				GetDynamicObjectPos(InteractionCheck[playerid][z], Pos[0], Pos[1], Pos[2]);
	                    			if(IsPlayerInRangeOfPoint(playerid, 1.1, Pos[0], Pos[1], Pos[2]))
									{
										slot = 1;
										break;
									}
	            				}
	            				if(slot == 1) return SendClientMessageZS(playerid, COLOR_RED, "В этом месте вы не может заложить Наземную мину!", 1085);
								if(PlayerInfo[playerid][pInteraction][3] >= 1) PlayerInfo[playerid][pInteraction][3] -= 1;
								InteractionCheck[playerid][0] = 3;
								InteractionCheck[playerid][1] = 6;
								KillInfoPlayer(playerid, -1, 0, 95, ScoreKill[5]);
								ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
								GetPlayerPos(playerid, InteractionPos[playerid][0], InteractionPos[playerid][1], InteractionPos[playerid][2]);
	                            for(new x = 2; x < 5; x ++)
	                            {
									if(!IsValidDynamicObject(InteractionCheck[playerid][x]))
									{
									    InteractionCheck[playerid][5] = x;
										InteractionCheck[playerid][x] = CreateDynamicObject(19797, InteractionPos[playerid][0], InteractionPos[playerid][1], InteractionPos[playerid][2] - 1.0, -90.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
										InteractionText[playerid][x - 2] = Create3DTextLabel("M", 0xFFFFFFFF, InteractionPos[playerid][0], InteractionPos[playerid][1], InteractionPos[playerid][2] - 0.9, 2.0, GetPlayerVirtualWorld(playerid), 1);
										break;
									}
									if(x == 4)
									{
									    if(InteractionCheck[playerid][5] >= 4) InteractionCheck[playerid][5] = 2;
									    else InteractionCheck[playerid][5] += 1;
									    DestroyDynamicObject(InteractionCheck[playerid][InteractionCheck[playerid][5]]);
									    DestroyPickup(InteractionCheck[playerid][InteractionCheck[playerid][5] + 4]);
									    Delete3DTextLabel(InteractionText[playerid][InteractionCheck[playerid][5] - 2]);
									    InteractionCheck[playerid][InteractionCheck[playerid][5]] = CreateDynamicObject(19797, InteractionPos[playerid][0], InteractionPos[playerid][1], InteractionPos[playerid][2] - 1.0, -90.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
										InteractionText[playerid][InteractionCheck[playerid][5] - 2] = Create3DTextLabel("M", 0xFFFFFFFF, InteractionPos[playerid][0], InteractionPos[playerid][1], InteractionPos[playerid][2] - 0.9, 2.0, GetPlayerVirtualWorld(playerid), 1);
									}
		   						}
								SendClientMessageZS(playerid, 0xFFFFFFFF, "Вы успешно заложили {10F441}Наземную мину{FFFFFF}, мина будет активирована через {10F441}5 {FFFFFF}секунд.", 1138);
							    if(PlayerInfo[playerid][pInteraction][3] != 0)
						  		{
						  		    new string[20];
						  		    format(string, sizeof(string), "%s: %d", TextDrawInfo[3][lang], PlayerInfo[playerid][pInteraction][3]);
						  		    TextDrawSetString(ChoiceItems[playerid][11], string);
						  		}
						  		else TextDrawSetString(ChoiceItems[playerid][11], TextDrawInfo[2][lang]);
		            	    }
		            	}
		            	new string[61+22], str[22];
						format(str, sizeof(str), "%d,%d,%d,%d,%d,%d,%d", PlayerInfo[playerid][pInteraction][0], PlayerInfo[playerid][pInteraction][1], PlayerInfo[playerid][pInteraction][2], PlayerInfo[playerid][pInteraction][3], PlayerInfo[playerid][pInteraction][4], PlayerInfo[playerid][pInteraction][5], PlayerInfo[playerid][pInteraction][6]);
						mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `interaction`='%s' WHERE `id`='%d'", str, PlayerInfo[playerid][pRoomAccount]);
	 					return mysql_tquery(MysqlConnectID, string);
		            }
		            case 4:
		            {
	                    switch(ChoiceItemsCheck[playerid][2])
		            	{
		            	    case 1:
							{
				                if(PlayerInfo[playerid][pLevel][1] < LevelScore[1][0]) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				                if(ChoiceItemsCheck[playerid][4] != 0)
								{
								    ClearAnimations(playerid);
									ChoiceItemsCheck[playerid][4] = -1;
		   						}
	                            else ChoiceItemsCheck[playerid][4] = 1;
							}
							case 2:
							{
								if(PlayerInfo[playerid][pLevel][1] < LevelScore[5][0]) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
								if(ChoiceItemsCheck[playerid][4] == 0) ChoiceItemsCheck[playerid][4] = 2;
	                            else ChoiceItemsCheck[playerid][4] = -1;
							}
							case 3:
							{
							    if(PlayerInfo[playerid][pLevel][1] < LevelScore[7][0]) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
								if(ChoiceItemsCheck[playerid][4] == 0) ChoiceItemsCheck[playerid][4] = 3;
	                            else ChoiceItemsCheck[playerid][4] = -1;
							}
							case 4:
							{
							    if(PlayerInfo[playerid][pLevel][1] < LevelScore[4][0]) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
								if(ChoiceItemsCheck[playerid][4] == 0) ChoiceItemsCheck[playerid][4] = 4;
	                            else ChoiceItemsCheck[playerid][4] = -1;
							}
							case 5:
							{
							    if(PlayerInfo[playerid][pLevel][1] < LevelScore[3][0]) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
								if(ChoiceItemsCheck[playerid][4] == 0) ChoiceItemsCheck[playerid][4] = 5;
	                            else ChoiceItemsCheck[playerid][4] = -1;
							}
							case 6:
							{
							    if(PlayerInfo[playerid][pLevel][1] < LevelScore[8][0]) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
								if(ChoiceItemsCheck[playerid][4] == 0) ChoiceItemsCheck[playerid][4] = 6;
	                            else ChoiceItemsCheck[playerid][4] = -1;
							}
							case 7:
							{
							    if(PlayerInfo[playerid][pLevel][1] < LevelScore[10][0]) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	     	                    if(PlayerInfo[playerid][pBonus][5] == 0)
								{
								    PlayerInfo[playerid][pBonus][5] = 1;
								    TextDrawSetString(ChoiceItems[playerid][9], TextDrawInfo[41][lang]);
								}
								else
								{
								    PlayerInfo[playerid][pBonus][5] = 0;
								    RemovePlayerAttachedObject(playerid, 0);
						            RemovePlayerAttachedObject(playerid, 1);
						            RemovePlayerAttachedObject(playerid, 2);
						            RemovePlayerAttachedObject(playerid, 3);
								    TextDrawSetString(ChoiceItems[playerid][9], TextDrawInfo[40][lang]);
								}
								ChoiceItemsCheck[playerid][4] = -1;
							}
							case 8:
							{
							    if(PlayerInfo[playerid][pLevel][1] < LevelScore[2][0]) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
							    if(PlayerInfo[playerid][pBonus][8] == 0)
							    {
							        PlayerInfo[playerid][pBonus][8] = 1;
							        TextDrawSetString(ChoiceItems[playerid][10], TextDrawInfo[41][lang]);
							    }
							    else
							    {
							        PlayerInfo[playerid][pBonus][8] = 0;
							        TextDrawSetString(ChoiceItems[playerid][10], TextDrawInfo[40][lang]);
							    }
							    ChoiceItemsCheck[playerid][4] = -1;
							}
							case 9:
							{
							    if(PlayerInfo[playerid][pLevel][1] < LevelScore[9][0]) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
							    if(PlayerInfo[playerid][pBonus][7] == 0)
								{
								    PlayerInfo[playerid][pBonus][7] = 1;
									TextDrawSetString(ChoiceItems[playerid][11], TextDrawInfo[41][lang]);
		   						}
	                            else
								{
								    PlayerInfo[playerid][pBonus][7] = 0;
									TextDrawSetString(ChoiceItems[playerid][11], TextDrawInfo[40][lang]);
		                        }
		                        ChoiceItemsCheck[playerid][4] = -1;
							}
						}
						if(ChoiceItemsCheck[playerid][2] <= 6)
						{
							PlayerTextDrawDestroy(playerid, ChoiceItemsPosi[playerid]);
							if(ChoiceItemsCheck[playerid][4] == -1) ChoiceItemsPosi[playerid] = InteractionPosition(playerid, PositionLines[0][ChoiceItemsCheck[playerid][2]-1]);
							else ChoiceItemsPosi[playerid] = InteractionPosition(playerid, PositionLines[0][ChoiceItemsCheck[playerid][2]-1], 141.0, 140.0, 0x90EE90AA);
						}
						if(ChoiceItemsCheck[playerid][4] == -1)
						{
							new string[56+38], str[38];
	 						format(str, sizeof(str), "%d,%d,%d,%d,%d,%d,%d,%d,%d", PlayerInfo[playerid][pBonus][0], PlayerInfo[playerid][pBonus][1], PlayerInfo[playerid][pBonus][2], PlayerInfo[playerid][pBonus][3], PlayerInfo[playerid][pBonus][4], PlayerInfo[playerid][pBonus][5], PlayerInfo[playerid][pBonus][6], PlayerInfo[playerid][pBonus][7], PlayerInfo[playerid][pBonus][8]);
							mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `bonus`='%s' WHERE `id`='%d'", str, PlayerInfo[playerid][pRoomAccount]);
				 			mysql_tquery(MysqlConnectID, string);
				 			ChoiceItemsCheck[playerid][4] = 0;
				 		}
				 		return 1;
		            }
					case 5://5519
					{
					    switch(ChoiceItemsCheck[playerid][2])
		            	{
		            	    case 1:
							{
							    /*ChoiceItemsCheck[playerid][3] = ChoiceItemsCheck[playerid][2];
							    ChoiceItemsCheck[playerid][1] = 6;
		            	        ChoiceItemsCheck[playerid][2] = 1;
		            	        PlayerTextDrawDestroy(playerid, ChoiceItemsPosi[playerid]);
	            				ChoiceItemsPosi[playerid] = InteractionPosition(playerid, PositionLines[0][0]);
	            				if(PlayerInfo[playerid][pRussifier][1] == 0)
								{
									TextDrawSetString(ChoiceItems[playerid][15], "1/2");

								    TextDrawSetStringZS(ChoiceItems[playerid][2], ChoiceItems[playerid][9], "_", "_");
							        TextDrawSetStringZS(ChoiceItems[playerid][3], ChoiceItems[playerid][10], "_", "_");
							        TextDrawSetStringZS(ChoiceItems[playerid][4], ChoiceItems[playerid][11], "_", "_");
								    TextDrawSetStringZS(ChoiceItems[playerid][5], ChoiceItems[playerid][12], "_", "_");
				       				TextDrawSetStringZS(ChoiceItems[playerid][6], ChoiceItems[playerid][13], "_", "_");
				        			TextDrawSetStringZS(ChoiceItems[playerid][7], ChoiceItems[playerid][14], "_", "_");
			   					}*/
		            	        return 1;
					  		}
					  		case 2:
					  		{
					  		    if(PlayerInfo[playerid][pVip] == 2) return SendClientMessageZS(playerid, COLOR_RED, "Пассивный режим доступен только с третьего уровня VIP!", 1085);
	                            PassiveCheck[playerid] = 7;
								if(PlayerInfo[playerid][pPassive] == 0)
								{
									TextDrawShowForPlayer(playerid, ArenaInfo[playerid][1]);
									TextDrawShowForPlayer(playerid, ArenaInfo[playerid][11]);
									TextDrawSetString(ArenaInfo[playerid][1], TextDrawInfo[58][lang]);
		   						}
							  	return 1;
					  		}
					  		case 3:
							{
							    if(/*GetPlayerVirtualWorld(playerid) != 202 || */PlayerInfo[playerid][pFreeMode] != 1 || GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, COLOR_RED, "Создавать автомобили можно только в Свободном режиме!");
					        	SetDialogResponse(playerid, 0, 1);
					        	return ShowModelSelectionMenu(playerid, 2, 1);
							}
							case 4:
							{
							    if(PlayerInfo[playerid][pVip] == 2) return SendClientMessageZS(playerid, COLOR_RED, "Реактивный ранец доступен только с третьего уровня VIP!", 1085);
							    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
							    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
					        	return SetDialogResponse(playerid, 0, 1);
							}
							case 5: return SetDialogResponse(playerid, 0, 2, 1);
							case 6:
		  					{
	                            KillsCheck[playerid][10] = 60;
								SetPlayerHealth(playerid, 0.0);
								return SetDialogResponse(playerid, 0, 1);
							}
						}
					}
			 	}
	  		}
			return 1;
		}
		case KEY_YES:
	 	{
			if(ProtectionFlooding[playerid][0] >= 45 && PlayerCheatCheck[playerid] == 0) return IsProtectionFlooding(playerid, "клавишей Y", "3.0");
			else
			{
				ProtectionFlooding[playerid][0] += 1;
				if(ProtectionFlooding[playerid][0] >= 40) GameTextForPlayerZS(playerid, "~n~~r~Warning~n~flood", "~r~®e Ѓћyљњ¦e", 2000, 4, 1085);
			}
			if(PlayerInfo[playerid][pPrison] != 0 || DuelCheck[playerid][12] != 0 || Spawned[playerid] != true) return 1;
			if(PlayerInfo[playerid][pInfoText][12] == 1 && PlayerInfo[playerid][pFreeMode] == 0) return SetDialogResponse(playerid, 10);
			if(ChoiceItemsCheck[playerid][0] == 0)//
			{
			    ChoiceItemsCheck[playerid][0] = 1;
			    ChoiceItemsCheck[playerid][2] = 1; //= номер строки списка
			    ChoiceItemsCheck[playerid][3] = 0;
			    ChoiceItemsCheck[playerid][4] = 0;
			    ChoiceItemsCheck[playerid][5] = 0;
	        	TextDrawShowForPlayer(playerid, ChoiceItems[playerid][0]);
	        	TextDrawShowForPlayer(playerid, ChoiceItems[playerid][1]);
	        	TextDrawShowForPlayer(playerid, ChoiceItems[playerid][2]);
	        	TextDrawShowForPlayer(playerid, ChoiceItems[playerid][3]);
	        	TextDrawShowForPlayer(playerid, ChoiceItems[playerid][4]);
	        	TextDrawShowForPlayer(playerid, ChoiceItems[playerid][5]);
	        	TextDrawShowForPlayer(playerid, ChoiceItems[playerid][6]);
	        	TextDrawShowForPlayer(playerid, ChoiceItems[playerid][7]);
	        	TextDrawShowForPlayer(playerid, ChoiceItems[playerid][9]);
	        	TextDrawShowForPlayer(playerid, ChoiceItems[playerid][10]);
	        	TextDrawShowForPlayer(playerid, ChoiceItems[playerid][11]);
	        	TextDrawShowForPlayer(playerid, ChoiceItems[playerid][12]);
	        	TextDrawShowForPlayer(playerid, ChoiceItems[playerid][13]);
	        	TextDrawShowForPlayer(playerid, ChoiceItems[playerid][14]);
	        	TextDrawShowForPlayer(playerid, ChoiceItems[playerid][15]);
	        	TextDrawShowForPlayer(playerid, DuelInfo[playerid][14]);
	        	TextDrawShowForPlayer(playerid, DuelInfo[playerid][34]);
	        	if(PlayerInfo[playerid][pInfoText][0] == 0)
				{
					TextDrawHideForPlayer(playerid, ArenaInfo[playerid][0]);
					TextDrawHideForPlayer(playerid, ArenaInfo[playerid][10]);
	   			}
	        	ChoiceItemsPosi[playerid] = InteractionPosition(playerid, PositionLines[0][0]);
	        	new string[12], lang = PlayerInfo[playerid][pRussifier][1];
	        	TextDrawSetString(ChoiceItems[playerid][15], TextDrawInfo[4][lang]);
	        	TextDrawSetString(DuelInfo[playerid][14], TextDrawInfo[47][lang]);
	        	if(PlayerInfo[playerid][pFreeMode] == 0)
	        	{
	        	    ChoiceItemsCheck[playerid][1] = 1;
	                if(PlayerInfo[playerid][pInteraction][0] != 0)
	                {
	                    format(string, sizeof(string), "%s: %d", TextDrawInfo[3][lang], PlayerInfo[playerid][pInteraction][0]);
	                    TextDrawSetStringZS(ChoiceItems[playerid][2], ChoiceItems[playerid][9], TextDrawInfo[5][lang], string);
	                }
					else TextDrawSetStringZS(ChoiceItems[playerid][2], ChoiceItems[playerid][9], TextDrawInfo[5][lang], TextDrawInfo[2][lang]);
					TextDrawSetStringZS(ChoiceItems[playerid][3], ChoiceItems[playerid][10], TextDrawInfo[6][lang], "_");
					TextDrawSetStringZS(ChoiceItems[playerid][4], ChoiceItems[playerid][11], TextDrawInfo[7][lang], "_");
					if(PlayerInfo[playerid][pInteraction][1] != 0)
					{
					    format(string, sizeof(string), "%s: %d", TextDrawInfo[3][lang], PlayerInfo[playerid][pInteraction][1]);
					    TextDrawSetStringZS(ChoiceItems[playerid][5], ChoiceItems[playerid][12], TextDrawInfo[8][lang], string);
					}
					else TextDrawSetStringZS(ChoiceItems[playerid][5], ChoiceItems[playerid][12], TextDrawInfo[8][lang], TextDrawInfo[2][lang]);
					TextDrawSetStringZS(ChoiceItems[playerid][6], ChoiceItems[playerid][13], TextDrawInfo[9][lang], "_");
					TextDrawSetStringZS(ChoiceItems[playerid][7], ChoiceItems[playerid][14], TextDrawInfo[10][lang], "$100");
					if(lang == 1)
					{
						TextDrawShowForPlayer(playerid, ChoiceItems[playerid][8]);
						TextDrawSetString(ChoiceItems[playerid][8], TextDrawInfo[75][1]);//5540
					}
		 		}
		 		else
		 		{
		 		    ChoiceItemsCheck[playerid][1] = 5;
		            TextDrawSetStringZS(ChoiceItems[playerid][2], ChoiceItems[playerid][9], TextDrawInfo[43][lang], "_");
	                if(PlayerInfo[playerid][pPassive] == 0) TextDrawSetStringZS(ChoiceItems[playerid][3], ChoiceItems[playerid][10], TextDrawInfo[44][lang],  TextDrawInfo[40][lang]);
	                else TextDrawSetStringZS(ChoiceItems[playerid][3], ChoiceItems[playerid][10], TextDrawInfo[44][lang],  TextDrawInfo[41][lang]);
	                TextDrawSetStringZS(ChoiceItems[playerid][4], ChoiceItems[playerid][11], TextDrawInfo[45][lang], "_");
	                TextDrawSetStringZS(ChoiceItems[playerid][5], ChoiceItems[playerid][12], TextDrawInfo[46][lang], "_");
	                TextDrawSetStringZS(ChoiceItems[playerid][6], ChoiceItems[playerid][13], TextDrawInfo[9][lang], "_");
	                TextDrawSetStringZS(ChoiceItems[playerid][7], ChoiceItems[playerid][14], TextDrawInfo[10][lang], "$100");
		 		}
			}
			else SetDialogResponse(playerid, 0, 1);
			return 1;
		}//5511
	    case 1152:
	    {
	        if(Revival[playerid][3] == 0 && PlayerInfo[playerid][pFreeMode] == 0 && PlayerInfo[playerid][pClassWeapons][4] == 1 && (PlayerInfo[playerid][pClassWeapons][0] == 2 || PlayerInfo[playerid][pClassWeapons][1] == 2) && PlayerInfo[playerid][pPrison] == 0 && DuelCheck[playerid][12] == 0 && Spawned[playerid] == true)
	        {
				new Float:Pos[3];
				GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]); //Мыш 2 + L-ALT
				foreach(new i:Player)
		  		{
					if(IsPlayerInRangeOfPoint(i, 1.5, Pos[0], Pos[1], Pos[2]) && i != playerid && Revival[i][1] == 0 && Revival[i][2] == 0 && Spawned[i] == false && KillsCheck[i][0] >= 2 && KillsCheck[i][0] <= 6 && Revival[i][0] != MAX_PLAYERS && ChoiceTeamCheck[playerid][2] == ChoiceTeamCheck[i][2] && GetPlayerWeapon(playerid) == 0 && GetPlayerAnimationIndex(playerid) == 1159)
					{
					    Revival[playerid][3] = 3;
					    Revival[playerid][4] = i;
					}
				}
			}
			return 1;//128 1152
	    }
		case 4:
	    {
	        if(DuelCheck[playerid][12] >= 1 && DuelCheck[playerid][13] == 4 && DuelCheck[playerid][22] == 0)
	        {
				SetPVarInt(playerid, "DuellCheck[0]", GetPVarInt(playerid, "DuellCheck[0]") + 1);
				SetPVarInt(playerid, "DuellCheck[1]", gettime() + 3);
				switch(GetPVarInt(playerid, "DuellCheck[0]"))
		  		{
		  		    case 3:
		  		    {
		  		    	TextDrawShowForPlayer(playerid, ArenaInfo[playerid][4]);
						TextDrawShowForPlayer(playerid, ArenaInfo[playerid][5]);
						TextDrawShowForPlayer(playerid, ArenaInfo[playerid][6]);
						if(PlayerInfo[playerid][pRussifier][1] == 0) TextDrawSetString(ArenaInfo[playerid][5], "respawning");
						else TextDrawSetString(ArenaInfo[playerid][5], "ўoџpo›љe®њe");
						TextDrawTextSize(ArenaInfo[playerid][7], 24.000000, 8.000000);
						TextDrawShowForPlayer(playerid, ArenaInfo[playerid][7]);
		  		    }
		  		    case 4:
		  		    {
		                TextDrawHideForPlayer(playerid, ArenaInfo[playerid][7]);
		                TextDrawTextSize(ArenaInfo[playerid][7], 48.000000, 8.000000);
		                TextDrawShowForPlayer(playerid, ArenaInfo[playerid][7]);
		  		    }
		  		    case 5:
		  		    {
		                TextDrawHideForPlayer(playerid, ArenaInfo[playerid][7]);
		                TextDrawTextSize(ArenaInfo[playerid][7], 72.000000, 8.000000);
		                TextDrawShowForPlayer(playerid, ArenaInfo[playerid][7]);
		  		    }
		  		    case 6:
		  		    {
		                TextDrawHideForPlayer(playerid, ArenaInfo[playerid][7]);
		                TextDrawTextSize(ArenaInfo[playerid][7], 97.000000, 8.000000);
		                TextDrawShowForPlayer(playerid, ArenaInfo[playerid][7]);
		  		    }
		  		    case 7:
		  		    {
		  		        new Float: health;
	     				GetVehicleHealth(DuelCheck[playerid][15], health);
		  		        DeletePVar(playerid, "DuellCheck[0]");
		  		        DeletePVar(playerid, "DuellCheck[1]");
		                PosBreik[playerid][0] = PossSave[playerid][0];
						PosBreik[playerid][1] = PossSave[playerid][1];
						PosBreik[playerid][2] = PossSave[playerid][2];
		    			if(DuelCheck[playerid][15] != 0) DestroyVehicle(DuelCheck[playerid][15]);
		    			DuelCheck[playerid][15] = CreateVehicle(ClassVehicleDuel[DuelCheck[playerid][7]-1][DuelCheck[playerid][16]], PossSave[playerid][0], PossSave[playerid][1], PossSave[playerid][2], PossSave[playerid][3], DuelCheck[playerid][17], DuelCheck[playerid][18], -1);
						SetVehicleVirtualWorld(DuelCheck[playerid][15], DuelCheck[playerid][25]);
						LinkVehicleToInterior(DuelCheck[playerid][15], floatround(DuelCameraRace[DuelCheck[playerid][4] - 1][6]));
		    			SetVehicleNumberPlate(DuelCheck[playerid][15], "_");
						PutPlayerInVehicle(playerid, DuelCheck[playerid][15], 0);
						DisableRemoteVehicleCollisions(playerid, DuelCheck[playerid][8]);
						if(DuelCheck[playerid][10] != 0) AddVehicleComponent(DuelCheck[playerid][15], 1007+DuelCheck[playerid][10]);
						TextDrawHideForPlayer(playerid, ArenaInfo[playerid][4]);
						TextDrawHideForPlayer(playerid, ArenaInfo[playerid][5]);
						TextDrawHideForPlayer(playerid, ArenaInfo[playerid][6]);
						TextDrawHideForPlayer(playerid, ArenaInfo[playerid][7]);
						if(health < 250) AchievementsInfo(19, playerid);
		  		    }
		  		}
	   		}
	   		return 1;
	    }
		case 132:
		{
			if(oldkeys == KEY_DOWN && BreathCam[playerid][0] == 1 && BreathCam[playerid][1] == 0 && BreathCam[playerid][2] == 0 && ServerConfig[1] == 0) BreathCam[playerid][1] = 1;
 		    return 1;
 		}
		case 128:// ПРАВАЯ КНОПКА НАЖАТЬ  128
		{
	        if(oldkeys == 1152 && BreathCam[playerid][0] == 1 && BreathCam[playerid][1] == 1 && BreathCam[playerid][2] <= 5)
			{
				if(BreathCam[playerid][2] <= 1)
				{
				    BreathCam[playerid][1] = 0;
				    BreathCam[playerid][2] = 0;
				    SetPlayerDrunkLevel(playerid, 2109);
				}
				else
				{
				    BreathCam[playerid][2] = 5;
					SetPlayerDrunkLevel(playerid, 4000);
				}
			}
		    if(GetPlayerWeapon(playerid) == 34)
		    {
		        if(ServerConfig[1] == 0)
		        {
		        	BreathCam[playerid][0] = 1;
		        	if(BreathCam[playerid][2] == 0) SetPlayerDrunkLevel(playerid, 2109);
		        	else SetPlayerDrunkLevel(playerid, 4000);
			 	}
		        if(PlayerInfo[playerid][pBonus][0] >= 1)
				{
					SetPVarInt(playerid, "LaserCheck", 1);
					if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid, 4);
				}
				if(PlayerInfo[playerid][pBonus][1] >= 1) RemovePlayerAttachedObject(playerid, 5);
				if(PlayerInfo[playerid][pBonus][3] >= 1) RemovePlayerAttachedObject(playerid, 6);
				else if(Armour[playerid][4] >= 1) RemovePlayerAttachedObject(playerid, 6);
				if(PlayerInfo[playerid][pBonus][2] >= 1) RemovePlayerAttachedObject(playerid, 7);
				if(PlayerInfo[playerid][pBonus][4] >= 1) RemovePlayerAttachedObject(playerid, 8);
				if(Armour[playerid][0] >= 1) RemovePlayerAttachedObject(playerid, 9);
			}
			return 1;
	 	}
		case 0:// ПРАВАЯ КНОПКА ОТПУСТИТЬ
		{
		    if(GetPlayerWeapon(playerid) == 34)
		    {
		        if(BreathCam[playerid][0] == 1)
		        {
		        	BreathCam[playerid][0] = 0;
		        	SetPlayerDrunkLevel(playerid, 2000);
			 	}
				if(PlayerInfo[playerid][pBonus][0] >= 1) DeletePVar(playerid, "LaserCheck");
				if(PlayerInfo[playerid][pBonus][1] >= 1) SetPlayerAttachedObjectZS(playerid, InteractionsNumber[2][PlayerInfo[playerid][pBonus][1]]);
		    	if(PlayerInfo[playerid][pBonus][2] >= 1) SetPlayerAttachedObjectZS(playerid, InteractionsNumber[0][PlayerInfo[playerid][pBonus][2]]);
		    	if(PlayerInfo[playerid][pBonus][3] >= 1)
				{
					if(Armour[playerid][4] >= 1) SetPlayerAttachedObjectZS(playerid, 19514);
					else SetPlayerAttachedObjectZS(playerid, InteractionsNumber[1][PlayerInfo[playerid][pBonus][3]]);
				}
				else if(Armour[playerid][4] >= 1) SetPlayerAttachedObjectZS(playerid, 19514);
				if(PlayerInfo[playerid][pBonus][4] >= 1) SetPlayerAttachedObjectZS(playerid, InteractionsNumber[4][PlayerInfo[playerid][pBonus][4]]);
				if(Armour[playerid][0] >= 1) SetPlayerAttachedObjectZS(playerid, 19515);
	 		}
	 		return 1;
		}
	}
	return 1;
}

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
	if(enterexit == 0)
	{
		PlayerInterior[playerid][1] = gettime() + 3;
		PlayerInterior[playerid][0] = 0;
		TuningCheck[playerid] = 0;
		AntiBreik[playerid] = 0;
		if(IsPlayerInAnyVehicle(playerid))
  		{
  		    new lang = PlayerInfo[playerid][pRussifier][1];
			if(PlayerInfo[playerid][pInfoText][4] == 0)
			{
	   	        SpeedCheck[playerid] = 1;
   				TextDrawShowForPlayer(playerid, ArenaInfo[playerid][0]);
   				TextDrawShowForPlayer(playerid, ArenaInfo[playerid][10]);
   				TextDrawSetString(ArenaInfo[playerid][0], TextDrawInfo[61][lang]);
			}
			if(PlayerInfo[playerid][pPassive] == 1)
	    	{
	    		TextDrawShowForPlayer(playerid, ArenaInfo[playerid][1]);
	    		TextDrawShowForPlayer(playerid, ArenaInfo[playerid][11]);
				TextDrawSetString(ArenaInfo[playerid][11], TextDrawInfo[59][lang]);
				TextDrawSetString(ArenaInfo[playerid][1], TextDrawInfo[58][lang]);
	    	}
		}
    }
   	else
	{
		PlayerInterior[playerid][1] = gettime() + 3;
	    PlayerInterior[playerid][0] = interiorid;
	    AntiBreik[playerid] = 1;
		TuningCheck[playerid] = 1;
		if(PlayerInfo[playerid][pInfoText][4] == 0)
    	{
            SpeedCheck[playerid] = 0;
   			TextDrawHideForPlayer(playerid, ArenaInfo[playerid][0]);
   			TextDrawHideForPlayer(playerid, ArenaInfo[playerid][10]);
    	}
	    if(PlayerInfo[playerid][pPassive] == 1)
		{
			TextDrawHideForPlayer(playerid, ArenaInfo[playerid][1]);
			TextDrawHideForPlayer(playerid, ArenaInfo[playerid][11]);
  		}
 	}
    return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	if(TuningCheck[playerid] == 0 && PlayerCheatCheck[playerid] == 0) PlayerCheat(playerid, "тюнинг автомобиля #1.4", "Использование Чит Программ [{FF0000}Код: #1.4{CD853F}]");
    return 0;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	if(color1 == 126 || color2 == 126)
	{
	    SetPlayerChatBubble(playerid, "\n\nЛюбитель Фламинго", 0xFF00FFAA, 15, 300000);
		AchievementsInfo(4, playerid);
	}
	new slot;
 	for(new x; x < 5; x ++)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 8.0, VehicleRespray[x][0], VehicleRespray[x][1], VehicleRespray[x][2])) continue;
		slot = 1;
		break;
	}
	if(slot == 0 && TuningCheck[playerid] == 0 && PlayerCheatCheck[playerid] == 0) PlayerCheat(playerid, "тюн авто краска #1.5", "Использование Чит Программ [{FF0000}Код: #1.5{CD853F}]");
    return 0;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
    if(TuningCheck[playerid] == 0 && PlayerCheatCheck[playerid] == 0) PlayerCheat(playerid, "тюн авто винил #1.6", "Использование Чит Программ [{FF0000}Код: #1.6{CD853F}]");
	return 0;
}

public OnVehicleStreamIn(vehicleid, forplayerid) return SetVehicleParamsForPlayer(vehicleid, forplayerid, 0, VehicleClose[vehicleid]);
stock SetNeonAuto(vehicleid, objectid, action)
{
	if(action == 2)
 	{
 		TuningVehicle[vehicleid][2] = 0;
		DestroyDynamicObject(TuningVehicle[vehicleid][0]);
		return DestroyDynamicObject(TuningVehicle[vehicleid][1]);
 	}
	TuningVehicle[vehicleid][2] = 1;
	if(IsValidDynamicObject(TuningVehicle[vehicleid][0])) DestroyDynamicObject(TuningVehicle[vehicleid][0]);
	if(IsValidDynamicObject(TuningVehicle[vehicleid][1])) DestroyDynamicObject(TuningVehicle[vehicleid][1]);
	TuningVehicle[vehicleid][0] = CreateDynamicObject(objectid, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 202, 0, -1, 200.0, 200.0);
	TuningVehicle[vehicleid][1] = CreateDynamicObject(objectid, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 202, 0, -1, 200.0, 200.0);
	switch(GetVehicleModel(vehicleid))
	{
		case 400, 415, 419, 474, 475, 491, 517, 526, 535, 536, 542, 554, 602:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, 0.0, -0.60, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, 0.0, -0.60, 0.0, 0.0, 0.0);
		}
		case 401, 518, 547:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, 0.1, -0.55, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, 0.1, -0.55, 0.0, 0.0, 0.0);
		}
		case 402, 405, 411, 421, 422, 458, 507, 516, 545:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, 0.0, -0.65, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, 0.0, -0.65, 0.0, 0.0, 0.0);
		}
		case 404, 410, 492, 541, 543, 555, 565, 589, 598:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, 0.0, -0.50, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, 0.0, -0.50, 0.0, 0.0, 0.0);
		}
		case 407, 440:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, 0.0, -0.90, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, 0.0, -0.90, 0.0, 0.0, 0.0);
		}
		case 409, 420, 426, 429, 436, 445, 467, 477, 480, 496, 504, 559, 566, 579, 580, 596, 597:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, 0.0, -0.55, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, 0.0, -0.55, 0.0, 0.0, 0.0);
		}
		case 412:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, -0.2, -0.65, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, -0.2, -0.65, 0.0, 0.0, 0.0);
		}
		case 413, 482, 544:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, 0.0, -0.80, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, 0.0, -0.80, 0.0, 0.0, 0.0);
		}
		case 418:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, -0.2, -0.90, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, -0.2, -0.90, 0.0, 0.0, 0.0);
		}
		case 431, 437:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, 0.4, -0.75, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, 0.4, -0.75, 0.0, 0.0, 0.0);
		}
		case 438, 494:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, -0.1, -0.70, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, -0.1, -0.70, 0.0, 0.0, 0.0);
		}
		case 439, 540:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		}
		case 442, 550, 587:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, -0.1, -0.65, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, -0.1, -0.65, 0.0, 0.0, 0.0);
		}
		case 444:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, 0.1, 0.1, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, 0.1, 0.1, 0.0, 0.0, 0.0);
		}
		case 451, 506:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, -0.2, -0.55, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, -0.2, -0.55, 0.0, 0.0, 0.0);
		}
		case 459, 489:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, 0.0, -0.75, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, 0.0, -0.75, 0.0, 0.0, 0.0);
		}
		case 466, 546:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, -0.1, -0.55, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, -0.1, -0.55, 0.0, 0.0, 0.0);
		}
		case 470:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, -0.2, -0.50, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, -0.2, -0.50, 0.0, 0.0, 0.0);
		}
		case 479, 549, 560, 562:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, 0.1, -0.50, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, 0.1, -0.50, 0.0, 0.0, 0.0);
		}
		case 490:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, 0.0, -0.66, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, 0.0, -0.66, 0.0, 0.0, 0.0);
		}
		case 498, 567:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, 0.3, -0.70, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, 0.3, -0.70, 0.0, 0.0, 0.0);
		}
		case 500:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, 0.2, -0.60, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, 0.2, -0.60, 0.0, 0.0, 0.0);
		}
		case 502:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, 0.2, -0.70, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, 0.2, -0.70, 0.0, 0.0, 0.0);
		}
		case 503:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, -0.2, -0.70, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, -0.2, -0.70, 0.0, 0.0, 0.0);
		}
		case 505:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, 0.1, -0.75, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, 0.1, -0.75, 0.0, 0.0, 0.0);
		}
		case 525:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, 0.0, -0.42, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, 0.0, -0.42, 0.0, 0.0, 0.0);
		}
		case 527:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, 0.2, -0.50, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, 0.2, -0.50, 0.0, 0.0, 0.0);
		}
		case 529, 533, 558, 576:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, -0.1, -0.50, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, -0.1, -0.50, 0.0, 0.0, 0.0);
		}
		case 534, 551:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, 0.1, -0.60, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, 0.1, -0.60, 0.0, 0.0, 0.0);
		}
		case 556:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, 0.0, 0.1, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, 0.0, 0.1, 0.0, 0.0, 0.0);
		}
		case 557:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, 0.1, 0.0, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, 0.1, 0.0, 0.0, 0.0, 0.0);
		}
		case 561:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, 0.2, -0.65, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, 0.2, -0.65, 0.0, 0.0, 0.0);
		}
		case 575, 585:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, 0.0, -0.45, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, 0.0, -0.45, 0.0, 0.0, 0.0);
		}
		case 582:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, -0.1, -0.75, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, -0.1, -0.75, 0.0, 0.0, 0.0);
		}
		case 600:
		{
			AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][0], vehicleid, 0.8, 0.2, -0.55, 0.0, 0.0, 0.0);
			return AttachDynamicObjectToVehicle(TuningVehicle[vehicleid][1], vehicleid, -0.8, 0.2, -0.55, 0.0, 0.0, 0.0);
		}
	}
	return 1;
}

public OnGameModeInit()
{
    new string[14];
	ServerGate[0] = CreateDynamicObject(1966, 2214.78, 1584.90, 1000.30, 0.00, 0.00, 90.00, 1, 1);
	ServerGate[1] = CreateDynamicObject(1966, 2195.90, 1584.98, 1000.30, 0.00, 0.00, -90.00, 1, 1);
	ServerGate[2] = CreateDynamicObject(2927, -2438.11, 1548.25, 16.07, 90.00, 0.00, 90.00, 6, 0);
	ServerCheck[0] = GangZoneCreate(-2988.28125, -3246.09375, 3269.53125, 2988.28125);
    for(new x; x < MAX_VEHICLE; x ++)
	{
	    new vehicle = CreateVehicle(floatround(VehicleFree[x][0]), VehicleFree[x][1], VehicleFree[x][2], VehicleFree[x][3], VehicleFree[x][4], floatround(VehicleFree[x][5]), floatround(VehicleFree[x][6]), floatround(VehicleFree[x][7]));
        if(x < 2) LinkVehicleToInterior(vehicle, 10);
		SetVehicleVirtualWorld(vehicle, floatround(VehicleFree[x][8]));
	    VehicleClose[vehicle] = floatround(VehicleFree[x][9]);
	    format(string, sizeof(string), "MH%02d ARC", x);
		SetVehicleNumberPlate(vehicle, string);
	}
	AddPlayerClass(1, 0.0, 0.0, 3.0, 0.0, 0, 0, 0, 0, 0, 0);
	SetGameModeText("TDM Version (v 1.01)");// 23.03.2014 MCK 13:00 
    SetTeamCount(2);
	ShowNameTags(0);//Бар здоровье
    UsePlayerPedAnims();
    DisableInteriorEnterExits();
    LimitPlayerMarkerRadius(2.0);
    //ManualVehicleEngineAndLights();
    SetTimer("TimeTimer", 1000, true); 
    MysqlConnectID = mysql_connect("127.0.0.1", "root", "5516", "zones");
	mysql_tquery(MysqlConnectID, "SET NAMES cp1251");
	mysql_tquery(MysqlConnectID, "SET SESSION character_set_server='utf8'");
	switch(mysql_errno())
	{
	    case 0: print("Подключение к базе данных удалось");
	    case 1044: print("Подключение к базе данных НЕ удалось [Указано неизвестное имя пользователя]");
	    case 1045: print("Подключение к базе данных НЕ удалось [Указан неизвестный пароль]");
	    case 1049: print("Подключение к базе данных НЕ удалось [Указана неизвестная база данных]");
	    case 2003: print("Подключение к базе данных НЕ удалось [Хостинг с базой данных недоступен]");
	    case 2005: print("Подключение к базе данных НЕ удалось [Указан неизвестный адрес хостинга]");
	    default: printf("Подключение к базе данных НЕ удалось [Неизвестная ошибка. Код ошибки: %d]", mysql_errno());
	}
	return 1;
}
public OnGameModeExit() return mysql_close(MysqlConnectID);

public TimeTimer()
{
    if(PlayerOnline[0] == 0) return 1;
    ActionWithoutPlayer();
 	foreach(new i:Player)
	{
		ServerSystem(i);
		ProtectionSystem(i);
		
		if(TextBarInfoCheck[i] == 1)//debug
		{
	        new strr[350];
	    	format(strr, sizeof(strr),
			"On[0]%d~n~On[1]%d~n~~n~On[2]:%d~n~Team %d~n~Team %d~n~~n~On[3]:%d~n~Team %d~n~Team %d~n~~n~On[4]:%d~n~Team %d~n~Team %d~n~~n~Arena[0] %d~n~\n\
			Arena[1] %d~n~Arena[2] %d~n~~n~Arena[7] %d~n~Arena[8] %d~n~Arena[9] %d~n~~n~Arena[14] %d~n~Arena[15] %d~n~Arena[16] %d", 
			PlayerOnline[0], PlayerOnline[1],
			PlayerOnline[2], Arena[5], Arena[6], PlayerOnline[3], Arena[12], Arena[13], PlayerOnline[4], Arena[19], Arena[20],
			
	        Arena[0], Arena[1], Arena[2], Arena[7], Arena[8], Arena[9], Arena[14], Arena[15], Arena[16]);
	    	TextDrawSetString(TextBarInfo[i], strr);
    	}
	}
	return 1;
}

public OnIncomingConnection(playerid, ip_address[], port)
{
    new string[71];
	format(string, sizeof(string), "[A]: >> Входящие подключение (ID: %d | IP: %s:%d)", playerid, ip_address, port);
    return ABroadCast(0xC3C3C3AA, string, 0, 4);
}

public OnPlayerConnect(playerid)
{
	GetPlayerIp(playerid, PlayerIp[playerid], 16);
	if(PlayerOnline[0] >= MAX_PLAYERS)
	{
	    PlayerCheat(playerid, "вход в переполненный сервер #0.2", "Вы были отсоединены от игрового сервера. [{FF0000}Код #0.2{CD853F}]", 0);
        return BlockIpAddress(PlayerIp[playerid], 30000);
	}
	if(PlayerLogged[playerid] == 1 || IsPlayerNPC(playerid)) return PlayerCheat(playerid, "подключение в один слот #0.3", "Вы были отсоединены от игрового сервера. [{FF0000}Код #0.3{CD853F}]", 0);
	new string[99];
	PlayerLogged[playerid] = 0;
    GetPlayerName(playerid, PlayerName[playerid], MAX_PLAYER_NAME);//Максимальная длина никнейма 21 символ
	format(string, sizeof(string), "Игрок %s (ID: %d) подключился к серверу (IP: %s | Ping: %d)", PlayerName[playerid], playerid, PlayerIp[playerid], GetPlayerPing(playerid));
	ABroadCast(0xC3C3C3AA, string, 0, 4);
	SetPlayerTeam(playerid, 255);
	PlayerOnline[0] += 1;
	TimeInput[playerid] = 70;
	NewLevelCheck[playerid][0] = 0;
	NewLevelCheck[playerid][1] = 0;
    AntiBreik[playerid] = 0;
    PosBreik[playerid][0] = 0.0;
    PosBreik[playerid][1] = 0.0;
    PosBreik[playerid][2] = 0.0;
	Observation[playerid][0] = MAX_PLAYERS;
	Observation[playerid][1] = 0;
	Observation[playerid][2] = 0;
    PlayerCheatCheck[playerid] = 0;
    Spawned[playerid] = false;
	SpawnKillPos[playerid][0] = 0.0;
	SpawnKillPos[playerid][1] = 0.0;
	SpawnKillPos[playerid][2] = 0.0;
	WrPass[playerid] = 1;
	Pause[playerid][0] = 0;
	Pause[playerid][1] = 0;
    SpeedCheck[playerid] = 0;
    DamageTime[playerid][0] = 0;
    DamageTime[playerid][1] = 0;
    DialogueCheck[playerid][0] = 0;
    DialogueCheck[playerid][1] = 0;
    DialogueCheck[playerid][2] = 0;
	Health[playerid] = 0;
	HealthCheck[playerid][0] = 6;
	HealthCheck[playerid][1] = 0;
	PlayerColor[playerid] = 0xFFFFFFAA;
    PutVehicle[playerid][0] = 0;
    PutVehicle[playerid][1] = 0;
    RemoveVehicle[playerid] = 0;
    AutoTpCheck[playerid][0] = 0;
    AutoTpCheck[playerid][1] = 0;
	FrozenCheck[playerid] = 0;
	FrozenPos[playerid][0] = 0.0;
	FrozenPos[playerid][1] = 0.0;
	FrozenPos[playerid][2] = 0.0;
	TuningCheck[playerid] = 0;
	GmTestCheck[playerid][0] = 0;
	GmTestCheck[playerid][1] = 0;
	GmTestCheck[playerid][2] = 0;
	WeaponPlayerIgnore[playerid][0] = 0;
	WeaponPlayerIgnore[playerid][1] = 0;
    InteractionCheck[playerid][0] = 0;
    InteractionCheck[playerid][1] = 0;
    InteractionCheck[playerid][5] = 0;
    InteractionCheck[playerid][6] = -1;
    InteractionCheck[playerid][7] = -1;
    InteractionCheck[playerid][8] = -1;
    InteractionCheck[playerid][9] = 0;
    InteractionCheck[playerid][10] = -1;
    InteractionCheck[playerid][11] = -1;
    InteractionPos[playerid][0] = 0.0;
    InteractionPos[playerid][1] = 0.0;
    InteractionPos[playerid][2] = 0.0;
	BanIpInfo[playerid] = 0;
    RegistrationHealth[playerid][0] = 0;
    RegistrationHealth[playerid][1] = 0;
    RegistrationHealth[playerid][2] = 0;
    PlayerInterior[playerid][0] = 0;
    PlayerInterior[playerid][1] = 0;
    MegaBullet[playerid] = 0;
    ForbiddenArea[playerid][0] = 0;
    ForbiddenArea[playerid][1] = 0;
	PassiveCheck[playerid] = 0;
	OrderKills[playerid][0] = 0;
	OrderKills[playerid][1] = 0;
	AchievementsCheck[playerid][0] = 0;
	AchievementsCheck[playerid][1] = 0;
	GangCheck[playerid][0] = 0;
	GangCheck[playerid][1] = 0;
	GangCheck[playerid][2] = 0;
	RapidFire[playerid][0] = 0;
	RapidFire[playerid][1] = 0;
	RapidFire[playerid][2] = 0;
	ServerHelpInfo[playerid][0] = 0;
	ServerHelpInfo[playerid][1] = 0;
	ServerHelpInfo[playerid][2] = 0;
    BreathCam[playerid][0] = 0;
    BreathCam[playerid][1] = 0;
    BreathCam[playerid][2] = 0;
    TextBarInfoCheck[playerid] = 0;
	SpeedVerTime[playerid] = 0;
	EnterVehicle[playerid][0] = 0;
	EnterVehicle[playerid][1] = 0;
	PrisonCheckArena[playerid] = 0;
	Playidles[playerid] = 0;
	AimingCheck[playerid][0] = 0;
    AimingCheck[playerid][1] = 0;
    AimingCheck[playerid][2] = GetTickCount()+500;//Меньшее значение иногда вызывает залипание маркера. Большое значение вызывает задержку появление маркера

    for(new x; x < 29; x ++)
    {
		if(x < 5)
		{
			Revival[playerid][x] = 0;
			ChangeMap[playerid][x] = 0;
			TopList[playerid][x] = 0;
			SpawnCheck[playerid][x] = 0;
			Armour[playerid][x] = 0;
		}
		if(x < 6) 
		{
			ProtectionFlooding[playerid][x] = 0; 
			ChoiceItemsCheck[playerid][x] = 0;
		}
		if(x < 7) PossSave[playerid][x] = 0.0;
		if(x < 8) 
		{
			if(x == 2) ChoiceTeamCheck[playerid][2] = 256;
			else ChoiceTeamCheck[playerid][x] = 0;
		}
        if(x <= 9) 
		{
			WeaponsSlotSpawn[playerid][x] = 0; // [7] - K | [8] - D | [9] - S
			SelectionCheck[playerid][x] = 0;
		}
		if(x <= 11) KillsCheck[playerid][x] = 0;
        if(x < 13)
	    {
	        WeaponPlayer[playerid][x] = 0;
	        WeaponPlayerAmmo[playerid][x] = 0;
	    }
	    if(x < MAX_PLAYER_ATTACHED_OBJECTS) RemovePlayerAttachedObject(playerid, x);
	    if(x < 24)
	    {
	        PlayerTextDrawDestroy(playerid, gSelectionItems[playerid][x]);
	        gSelectionItems[playerid][x] = PlayerText:INVALID_TEXT_DRAW;
	    }
		if(x < 29)
        {
        	if(x < 1) DuelCheck[playerid][0] = MAX_PLAYERS;
        	else DuelCheck[playerid][x] = 0;
        }
	}
	RemoveBuildingForPlayer(playerid, 11666, -688.1406, 934.8203, 14.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 11665, -685.1719, 935.6953, 13.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 11663, -688.1172, 939.1797, 11.1250, 50.0);
	RemoveBuildingForPlayer(playerid, 3376, -15.5234, 68.4531, 6.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 3375, -15.5234, 68.4531, 6.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 784, -2367.9766, -1944.0000, 305.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 694, -2367.9766, -1944.0000, 305.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 784, -2488.0156, -1918.2031, 300.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 694, -2488.0156, -1918.2031, 300.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 960, 2564.9141, 2823.6484, 11.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 961, 2564.9141, 2823.6484, 11.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 961, 2570.7344, 2829.7734, 11.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 960, 2570.7344, 2829.7734, 11.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 961, 2563.2734, 2837.0156, 11.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 960, 2563.2734, 2837.0234, 11.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 961, 2594.5859, 2821.3750, 11.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 960, 2594.5938, 2821.3750, 11.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 960, 2590.6328, 2815.5938, 11.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 961, 2590.6328, 2815.5938, 11.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 960, 2596.5469, 2820.4297, 11.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 961, 2596.5469, 2820.4297, 11.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 961, 2608.7969, 2806.9063, 11.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 960, 2608.7969, 2806.9063, 11.1641, 0.25);
	if(CheckTextDraw[playerid] == 0) TextDrawStart(playerid);
	return 1;
}

stock TextDrawStart(playerid)
{
	new ColorTextDraw[4] =
	{
	    0x00000055,// полоса 1
		0x00000044,// ФОН
 		0x00000077,// полоса 2
 		0x00000055,// 0x00000088 Цвет Счет таблиц
	};
    CheckTextDraw[playerid] = 1;
	MenuProcurementIcon[playerid][0] = TextDrawCreate(12.000000, 223.000000, "_");
	TextDrawFont(MenuProcurementIcon[playerid][0], 5);
	TextDrawColor(MenuProcurementIcon[playerid][0], 0x10F441FF);
	TextDrawBackgroundColor(MenuProcurementIcon[playerid][0], 0);
    TextDrawTextSize(MenuProcurementIcon[playerid][0], 30.000000, 30.0000);
    TextDrawSetPreviewModel(MenuProcurementIcon[playerid][0], 1349);
	TextDrawSetSelectable(MenuProcurementIcon[playerid][0], 0);

	MenuProcurementIcon[playerid][1] = TextDrawCreate(27.500000, 248.000000, "_");
	TextDrawAlignment(MenuProcurementIcon[playerid][1], 2);
	TextDrawBackgroundColor(MenuProcurementIcon[playerid][1], 255);
	TextDrawFont(MenuProcurementIcon[playerid][1], 1);
	TextDrawLetterSize(MenuProcurementIcon[playerid][1], 0.250000, 0.899999);
	TextDrawColor(MenuProcurementIcon[playerid][1], 0x10F441AA);
	TextDrawSetOutline(MenuProcurementIcon[playerid][1], 1);
	TextDrawSetProportional(MenuProcurementIcon[playerid][1], 1);
	TextDrawSetSelectable(MenuProcurementIcon[playerid][1], 0);

	new slots = 0, Float:ArenaPos[2][4] =
	{
	    {535.0, 588.0,   640.0, 635.0},
	    {2.0,   53.0,    106.0, 103.0}
	};
	ArenaInfo[playerid][0] = TextDrawCreate(ArenaPos[slots][0], 429.0, "_");
	TextDrawBackgroundColor(ArenaInfo[playerid][0], 255);
	TextDrawFont(ArenaInfo[playerid][0], 2);
	TextDrawLetterSize(ArenaInfo[playerid][0], 0.21, 1.0);//0.25
	TextDrawColor(ArenaInfo[playerid][0], -1);
	TextDrawSetOutline(ArenaInfo[playerid][0], 1);
	TextDrawSetProportional(ArenaInfo[playerid][0], 1);
	TextDrawUseBox(ArenaInfo[playerid][0], 1);
	TextDrawBoxColor(ArenaInfo[playerid][0], ColorTextDraw[3]);
	TextDrawTextSize(ArenaInfo[playerid][0], ArenaPos[slots][2], 0.0);
	TextDrawSetSelectable(ArenaInfo[playerid][0], 0);

	ArenaInfo[playerid][1] = TextDrawCreate(ArenaPos[slots][0], 415.0, "_");
	TextDrawBackgroundColor(ArenaInfo[playerid][1], 255);
	TextDrawFont(ArenaInfo[playerid][1], 2);
	TextDrawLetterSize(ArenaInfo[playerid][1], 0.21, 1.0);
	TextDrawColor(ArenaInfo[playerid][1], -1);
	TextDrawSetOutline(ArenaInfo[playerid][1], 1);
	TextDrawSetProportional(ArenaInfo[playerid][1], 1);
	TextDrawUseBox(ArenaInfo[playerid][1], 1);
	TextDrawBoxColor(ArenaInfo[playerid][1], ColorTextDraw[3]);
	TextDrawTextSize(ArenaInfo[playerid][1], ArenaPos[slots][2], 0.0);
	TextDrawSetSelectable(ArenaInfo[playerid][1], 0);

	ArenaInfo[playerid][2] = TextDrawCreate(ArenaPos[slots][1], 401.0, "_");
	TextDrawAlignment(ArenaInfo[playerid][2], 2);
	TextDrawBackgroundColor(ArenaInfo[playerid][2], 255);
	TextDrawFont(ArenaInfo[playerid][2], 2);
	TextDrawLetterSize(ArenaInfo[playerid][2], 0.21, 1.0);
	TextDrawColor(ArenaInfo[playerid][2], -1);
	TextDrawSetOutline(ArenaInfo[playerid][2], 1);
	TextDrawSetProportional(ArenaInfo[playerid][2], 1);
	TextDrawUseBox(ArenaInfo[playerid][2], 1);
	TextDrawBoxColor(ArenaInfo[playerid][2], ColorTextDraw[3]);
	TextDrawTextSize(ArenaInfo[playerid][2], 640.0, 106.0);
	TextDrawSetSelectable(ArenaInfo[playerid][2], 0);

	ArenaInfo[playerid][3] = TextDrawCreate(ArenaPos[slots][0], 387.0, "_");
	TextDrawBackgroundColor(ArenaInfo[playerid][3], 255);
	TextDrawFont(ArenaInfo[playerid][3], 2);
	TextDrawLetterSize(ArenaInfo[playerid][3], 0.21, 1.0);
	TextDrawColor(ArenaInfo[playerid][3], -1);
	TextDrawSetOutline(ArenaInfo[playerid][3], 1);
	TextDrawSetProportional(ArenaInfo[playerid][3], 1);
	TextDrawUseBox(ArenaInfo[playerid][3], 1);
	TextDrawBoxColor(ArenaInfo[playerid][3], ColorTextDraw[3]);
	TextDrawTextSize(ArenaInfo[playerid][3], ArenaPos[slots][2], 0.0);
	TextDrawSetSelectable(ArenaInfo[playerid][3], 0);
	
    ArenaInfo[playerid][4] = TextDrawCreate(535.000000, 373.000000, "_");
	TextDrawLetterSize(ArenaInfo[playerid][4], 0.250000, 2.449997);
	TextDrawUseBox(ArenaInfo[playerid][4], 1);
	TextDrawBoxColor(ArenaInfo[playerid][4], 68);
	TextDrawTextSize(ArenaInfo[playerid][4], 640.000000, 0.000000);
	TextDrawSetSelectable(ArenaInfo[playerid][4], 0);

    ArenaInfo[playerid][5] = TextDrawCreate(538.000000, 373.000000, "_");
	TextDrawBackgroundColor(ArenaInfo[playerid][5], 255);
	TextDrawFont(ArenaInfo[playerid][5], 2);
	TextDrawLetterSize(ArenaInfo[playerid][5], 0.250000, 1.000000);
	TextDrawColor(ArenaInfo[playerid][5], -1);
	TextDrawSetOutline(ArenaInfo[playerid][5], 1);
	TextDrawSetProportional(ArenaInfo[playerid][5], 1);
	TextDrawSetSelectable(ArenaInfo[playerid][5], 0);

    ArenaInfo[playerid][6] = TextDrawCreate(537.000000, 384.000000, "LD_DRV:tvbase");
	TextDrawBackgroundColor(ArenaInfo[playerid][6], 0);
	TextDrawFont(ArenaInfo[playerid][6], 4);
	TextDrawLetterSize(ArenaInfo[playerid][6], 0.500000, 0.000000);
	TextDrawColor(ArenaInfo[playerid][6], 572661674);
	TextDrawUseBox(ArenaInfo[playerid][6], 1);
	TextDrawBoxColor(ArenaInfo[playerid][6], 119);
	TextDrawTextSize(ArenaInfo[playerid][6], 99.000000, 10.000000);
	TextDrawSetSelectable(ArenaInfo[playerid][6], 0);

	ArenaInfo[playerid][7] = TextDrawCreate(538.000000, 385.000000, "LD_DRV:tvbase");
	TextDrawBackgroundColor(ArenaInfo[playerid][7], 0);
	TextDrawFont(ArenaInfo[playerid][7], 4);
	TextDrawLetterSize(ArenaInfo[playerid][7], 0.500000, 0.000000);
	TextDrawColor(ArenaInfo[playerid][7], -1);
	TextDrawUseBox(ArenaInfo[playerid][7], 1);
	TextDrawBoxColor(ArenaInfo[playerid][7], 119);
	TextDrawTextSize(ArenaInfo[playerid][7], 24.000000, 8.000000);
	TextDrawSetSelectable(ArenaInfo[playerid][7], 0);
	
	ArenaInfo[playerid][8] = TextDrawCreate(594.000000, 392.000000, "_");
	TextDrawAlignment(ArenaInfo[playerid][8], 3);
	TextDrawBackgroundColor(ArenaInfo[playerid][8], 255);
	TextDrawFont(ArenaInfo[playerid][8], 2);
	TextDrawLetterSize(ArenaInfo[playerid][8], 0.540000, 2.699898);
	TextDrawColor(ArenaInfo[playerid][8], -1);
	TextDrawSetOutline(ArenaInfo[playerid][8], 0);
	TextDrawSetProportional(ArenaInfo[playerid][8], 1);
	TextDrawSetShadow(ArenaInfo[playerid][8], 1);
	TextDrawSetSelectable(ArenaInfo[playerid][8], 0);

	ArenaInfo[playerid][9] = TextDrawCreate(607.000000, 397.000000, "_");
	TextDrawAlignment(ArenaInfo[playerid][9], 3);
	TextDrawBackgroundColor(ArenaInfo[playerid][9], 255);
	TextDrawFont(ArenaInfo[playerid][9], 3);
	TextDrawLetterSize(ArenaInfo[playerid][9], 0.349999, 1.000000);
	TextDrawColor(ArenaInfo[playerid][9], -1);
	TextDrawSetOutline(ArenaInfo[playerid][9], 0);
	TextDrawSetProportional(ArenaInfo[playerid][9], 1);
	TextDrawSetShadow(ArenaInfo[playerid][9], 1);
	TextDrawSetSelectable(ArenaInfo[playerid][9], 0);
	
	ArenaInfo[playerid][10] = TextDrawCreate(ArenaPos[slots][3], 429.0, "_");
	TextDrawAlignment(ArenaInfo[playerid][10], 3);
	TextDrawBackgroundColor(ArenaInfo[playerid][10], 255);
	TextDrawFont(ArenaInfo[playerid][10], 2);
	TextDrawLetterSize(ArenaInfo[playerid][10], 0.21, 1.0);
	TextDrawColor(ArenaInfo[playerid][10], -1);
	TextDrawSetOutline(ArenaInfo[playerid][10], 1);
	TextDrawSetProportional(ArenaInfo[playerid][10], 1);
	TextDrawSetSelectable(ArenaInfo[playerid][10], 0);
	
	ArenaInfo[playerid][11] = TextDrawCreate(ArenaPos[slots][3], 415.0, "_");
	TextDrawAlignment(ArenaInfo[playerid][11], 3);
	TextDrawBackgroundColor(ArenaInfo[playerid][11], 255);
	TextDrawFont(ArenaInfo[playerid][11], 2);
	TextDrawLetterSize(ArenaInfo[playerid][11], 0.21, 1.0);
	TextDrawColor(ArenaInfo[playerid][11], -1);
	TextDrawSetOutline(ArenaInfo[playerid][11], 1);
	TextDrawSetProportional(ArenaInfo[playerid][11], 1);
	TextDrawSetSelectable(ArenaInfo[playerid][11], 0);

	ArenaInfo[playerid][12] = TextDrawCreate(ArenaPos[slots][3], 401.0, "_");
	TextDrawAlignment(ArenaInfo[playerid][12], 3);
	TextDrawBackgroundColor(ArenaInfo[playerid][12], 255);
	TextDrawFont(ArenaInfo[playerid][12], 2);
	TextDrawLetterSize(ArenaInfo[playerid][12], 0.21, 1.0);
	TextDrawColor(ArenaInfo[playerid][12], -1);
	TextDrawSetOutline(ArenaInfo[playerid][12], 1);
	TextDrawSetProportional(ArenaInfo[playerid][12], 1);
	TextDrawSetSelectable(ArenaInfo[playerid][12], 0);
	
	ArenaInfo[playerid][13] = TextDrawCreate(ArenaPos[slots][3], 387.0, "_");
	TextDrawAlignment(ArenaInfo[playerid][13], 3);
	TextDrawBackgroundColor(ArenaInfo[playerid][13], 255);
	TextDrawFont(ArenaInfo[playerid][13], 2);
	TextDrawLetterSize(ArenaInfo[playerid][13], 0.21, 1.0);
	TextDrawColor(ArenaInfo[playerid][13], -1);
	TextDrawSetOutline(ArenaInfo[playerid][13], 1);
	TextDrawSetProportional(ArenaInfo[playerid][13], 1);
	TextDrawSetSelectable(ArenaInfo[playerid][13], 0);
	
	MoneyInfo[playerid] = TextDrawCreate(497.000000, 100.000000, "_");
	TextDrawBackgroundColor(MoneyInfo[playerid], 255);
	TextDrawFont(MoneyInfo[playerid], 2);
	TextDrawLetterSize(MoneyInfo[playerid], 0.300000, 1.200000);
	TextDrawColor(MoneyInfo[playerid], 0x10F441FF);
	TextDrawSetOutline(MoneyInfo[playerid], 1);
	TextDrawSetProportional(MoneyInfo[playerid], 1);
	TextDrawSetSelectable(MoneyInfo[playerid], 0);

	MenuSelection[playerid][0] = TextDrawCreate(71.0, 131.0, "_");
	TextDrawLetterSize(MenuSelection[playerid][0], 0.5, 26.9);
	TextDrawUseBox(MenuSelection[playerid][0], 1);
	TextDrawBoxColor(MenuSelection[playerid][0], 0x00000077);
	TextDrawTextSize(MenuSelection[playerid][0], 569.5, 0.0);
	TextDrawSetSelectable(MenuSelection[playerid][0], 0);

	MenuSelection[playerid][1] = TextDrawCreate(77.5, 202.0, "_");
	TextDrawLetterSize(MenuSelection[playerid][1], 0.3, 1.0);
	TextDrawUseBox(MenuSelection[playerid][1], 1);
	TextDrawBoxColor(MenuSelection[playerid][1], ColorTextDraw[1]);
	TextDrawTextSize(MenuSelection[playerid][1], 563.0, 0.0);
	TextDrawSetSelectable(MenuSelection[playerid][1], 0);

	MenuSelection[playerid][2] = TextDrawCreate(77.5, 279.0, "_");
	TextDrawLetterSize(MenuSelection[playerid][2], 0.3, 1.0);
	TextDrawUseBox(MenuSelection[playerid][2], 1);
	TextDrawBoxColor(MenuSelection[playerid][2], ColorTextDraw[1]);
	TextDrawTextSize(MenuSelection[playerid][2], 563.0, 0.0);
	TextDrawSetSelectable(MenuSelection[playerid][2], 0);

	MenuSelection[playerid][3] = TextDrawCreate(77.5, 355.9, "_");
	TextDrawLetterSize(MenuSelection[playerid][3], 0.3, 1.0);
	TextDrawUseBox(MenuSelection[playerid][3], 1);
	TextDrawBoxColor(MenuSelection[playerid][3], ColorTextDraw[1]);
	TextDrawTextSize(MenuSelection[playerid][3], 563.0, 0.0);
	TextDrawSetSelectable(MenuSelection[playerid][3], 0);

	MenuSelection[playerid][4] = TextDrawCreate(532.0, 356.0, "LD_BEAT:left");
	TextDrawBackgroundColor(MenuSelection[playerid][4], 0);
	TextDrawFont(MenuSelection[playerid][4], 4);
	TextDrawLetterSize(MenuSelection[playerid][4], 0.3, 1.0);
	TextDrawUseBox(MenuSelection[playerid][4], 1);
	TextDrawBoxColor(MenuSelection[playerid][4], 255);
	TextDrawTextSize(MenuSelection[playerid][4], 14.0, 10.0);
	TextDrawSetSelectable(MenuSelection[playerid][4], true);

	MenuSelection[playerid][5] = TextDrawCreate(527.0, 356.0, "_");
	TextDrawAlignment(MenuSelection[playerid][5], 3);
	TextDrawBackgroundColor(MenuSelection[playerid][5], 255);
	TextDrawFont(MenuSelection[playerid][5], 2);
	TextDrawLetterSize(MenuSelection[playerid][5], 0.29, 0.9);
	TextDrawColor(MenuSelection[playerid][5], -1);
	TextDrawSetOutline(MenuSelection[playerid][5], 1);
	TextDrawSetProportional(MenuSelection[playerid][5], 1);
	TextDrawSetSelectable(MenuSelection[playerid][5], 0);

	MenuSelection[playerid][6] = TextDrawCreate(548.0, 356.0, "LD_BEAT:right");
	TextDrawBackgroundColor(MenuSelection[playerid][6], 0);
	TextDrawFont(MenuSelection[playerid][6], 4);
	TextDrawLetterSize(MenuSelection[playerid][6], 0.3, 0.0);
	TextDrawUseBox(MenuSelection[playerid][6], 1);
	TextDrawBoxColor(MenuSelection[playerid][6], 255);
	TextDrawTextSize(MenuSelection[playerid][6], 14.0, 10.0);
	TextDrawSetSelectable(MenuSelection[playerid][6], true);//5543

	MenuSelection[playerid][7] = TextDrawCreate(537.0, 355.5, "LD_CHAT:thumbdn");
	TextDrawBackgroundColor(MenuSelection[playerid][7], 0);
	TextDrawFont(MenuSelection[playerid][7], 4);
	TextDrawLetterSize(MenuSelection[playerid][7], 0.5, 1.0);
	TextDrawUseBox(MenuSelection[playerid][7], 1);
	TextDrawBoxColor(MenuSelection[playerid][7], 255);
	TextDrawTextSize(MenuSelection[playerid][7], 10.0, 10.0);
	TextDrawSetSelectable(MenuSelection[playerid][7], true);

	MenuSelection[playerid][8] = TextDrawCreate(551.0, 355.5, "LD_CHAT:badchat");
	TextDrawBackgroundColor(MenuSelection[playerid][8], 0);
	TextDrawFont(MenuSelection[playerid][8], 4);
	TextDrawLetterSize(MenuSelection[playerid][8], 0.5, 1.0);
	TextDrawUseBox(MenuSelection[playerid][8], 1);
	TextDrawBoxColor(MenuSelection[playerid][8], 255);
	TextDrawTextSize(MenuSelection[playerid][8], 10.0, 10.0);
	TextDrawSetSelectable(MenuSelection[playerid][8], true);

	MenuSelection[playerid][9] = TextDrawCreate(429.0, 378.0, "_");
	TextDrawLetterSize(MenuSelection[playerid][9], 0.5, 5.0);
	TextDrawUseBox(MenuSelection[playerid][9], 1);
	TextDrawBoxColor(MenuSelection[playerid][9], ColorTextDraw[1]);
	TextDrawTextSize(MenuSelection[playerid][9], 569.5, 11.0);
	TextDrawSetSelectable(MenuSelection[playerid][9], 0);
	
	MenuSelection[playerid][10] = TextDrawCreate(429.0, 378.0, "_");
	TextDrawBackgroundColor(MenuSelection[playerid][10], 255);
	TextDrawFont(MenuSelection[playerid][10], 2);
	TextDrawLetterSize(MenuSelection[playerid][10], 0.20, 1.0);
	TextDrawColor(MenuSelection[playerid][10], -1);
	TextDrawSetOutline(MenuSelection[playerid][10], 0);
	TextDrawSetProportional(MenuSelection[playerid][10], 1);
	TextDrawSetShadow(MenuSelection[playerid][10], 1);
	TextDrawUseBox(MenuSelection[playerid][10], 1);
	TextDrawBoxColor(MenuSelection[playerid][10], ColorTextDraw[0]);
	TextDrawTextSize(MenuSelection[playerid][10], 569.5, 11.0);
	TextDrawSetSelectable(MenuSelection[playerid][10], true);

	MenuSelection[playerid][11] = TextDrawCreate(429.0, 392.0, "_");
	TextDrawBackgroundColor(MenuSelection[playerid][11], 255);
	TextDrawFont(MenuSelection[playerid][11], 2);
	TextDrawLetterSize(MenuSelection[playerid][11], 0.20, 1.0);
	TextDrawColor(MenuSelection[playerid][11], -1);
	TextDrawSetOutline(MenuSelection[playerid][11], 0);
	TextDrawSetProportional(MenuSelection[playerid][11], 1);
	TextDrawSetShadow(MenuSelection[playerid][11], 1);
	TextDrawUseBox(MenuSelection[playerid][11], 1);
	TextDrawBoxColor(MenuSelection[playerid][11], ColorTextDraw[1]);
	TextDrawTextSize(MenuSelection[playerid][11], 569.5, 11.0);
	TextDrawSetSelectable(MenuSelection[playerid][11], true);

	MenuSelection[playerid][12] = TextDrawCreate(429.0, 406.0, "_");
	TextDrawBackgroundColor(MenuSelection[playerid][12], 255);
	TextDrawFont(MenuSelection[playerid][12], 2);
	TextDrawLetterSize(MenuSelection[playerid][12], 0.20, 1.0);
	TextDrawColor(MenuSelection[playerid][12], -1);
	TextDrawSetOutline(MenuSelection[playerid][12], 0);
	TextDrawSetProportional(MenuSelection[playerid][12], 1);
	TextDrawSetShadow(MenuSelection[playerid][12], 1);
	TextDrawUseBox(MenuSelection[playerid][12], 1);
	TextDrawBoxColor(MenuSelection[playerid][12], ColorTextDraw[0]);
	TextDrawTextSize(MenuSelection[playerid][12], 569.5, 11.0);
	TextDrawSetSelectable(MenuSelection[playerid][12], true);

	MenuSelection[playerid][13] = TextDrawCreate(429.0, 420.0, "_");
	TextDrawBackgroundColor(MenuSelection[playerid][13], 255);
	TextDrawFont(MenuSelection[playerid][13], 2);
	TextDrawLetterSize(MenuSelection[playerid][13], 0.20, 1.0);
	TextDrawColor(MenuSelection[playerid][13], -1);
	TextDrawSetOutline(MenuSelection[playerid][13], 0);
	TextDrawSetProportional(MenuSelection[playerid][13], 1);
	TextDrawSetShadow(MenuSelection[playerid][13], 1);
	TextDrawUseBox(MenuSelection[playerid][13], 1);
	TextDrawBoxColor(MenuSelection[playerid][13], ColorTextDraw[1]);
	TextDrawTextSize(MenuSelection[playerid][13], 569.5, 11.0);
	TextDrawSetSelectable(MenuSelection[playerid][13], true);

	MenuSelection[playerid][14] = TextDrawCreate(547.0, 378.0, "LD_BEAT:left");
	TextDrawBackgroundColor(MenuSelection[playerid][14], 0x00000000);
	TextDrawFont(MenuSelection[playerid][14], 4);
	TextDrawLetterSize(MenuSelection[playerid][14], 0.5, 1.0);
	TextDrawColor(MenuSelection[playerid][14], 0xFFFFFFFF);
	TextDrawUseBox(MenuSelection[playerid][14], 1);
	TextDrawBoxColor(MenuSelection[playerid][14], 0x00000077);
	TextDrawTextSize(MenuSelection[playerid][14], 10.0, 10.0);
	TextDrawSetSelectable(MenuSelection[playerid][14], 1);

	MenuSelection[playerid][15] = TextDrawCreate(559.0, 378.0, "LD_BEAT:right");
	TextDrawBackgroundColor(MenuSelection[playerid][15], 0x00000000);
	TextDrawFont(MenuSelection[playerid][15], 4);
	TextDrawLetterSize(MenuSelection[playerid][15], 0.5, 1.0);
	TextDrawColor(MenuSelection[playerid][15], 0xFFFFFFFF);
	TextDrawUseBox(MenuSelection[playerid][15], 1);
	TextDrawBoxColor(MenuSelection[playerid][15], 0x00000077);
	TextDrawTextSize(MenuSelection[playerid][15], 10.0, 10.0);
	TextDrawSetSelectable(MenuSelection[playerid][15], 1);

	MenuSelection[playerid][16] = TextDrawCreate(547.0, 392.0, "LD_BEAT:left");
	TextDrawBackgroundColor(MenuSelection[playerid][16], 0x00000000);
	TextDrawFont(MenuSelection[playerid][16], 4);
	TextDrawLetterSize(MenuSelection[playerid][16], 0.5, 1.0);
	TextDrawColor(MenuSelection[playerid][16], 0xFFFFFFFF);
	TextDrawUseBox(MenuSelection[playerid][16], 1);
	TextDrawBoxColor(MenuSelection[playerid][16], 0x00000077);
	TextDrawTextSize(MenuSelection[playerid][16], 10.0, 10.0);
	TextDrawSetSelectable(MenuSelection[playerid][16], 1);

	MenuSelection[playerid][17] = TextDrawCreate(559.0, 392.0, "LD_BEAT:right");
	TextDrawBackgroundColor(MenuSelection[playerid][17], 0x00000000);
	TextDrawFont(MenuSelection[playerid][17], 4);
	TextDrawLetterSize(MenuSelection[playerid][17], 0.5, 1.0);
	TextDrawColor(MenuSelection[playerid][17], 0xFFFFFFFF);
	TextDrawUseBox(MenuSelection[playerid][17], 1);
	TextDrawBoxColor(MenuSelection[playerid][17], 0x00000077);
	TextDrawTextSize(MenuSelection[playerid][17], 10.0, 10.0);
	TextDrawSetSelectable(MenuSelection[playerid][17], 1);
	
	
	SelectionPrice[playerid][0] = TextDrawCreate(106.000000, 202.000000, "_");
	TextDrawAlignment(SelectionPrice[playerid][0], 2);
	TextDrawBackgroundColor(SelectionPrice[playerid][0], 255);
	TextDrawFont(SelectionPrice[playerid][0], 2);
	TextDrawLetterSize(SelectionPrice[playerid][0], 0.319999, 0.899999);
	TextDrawColor(SelectionPrice[playerid][0], -1);
	TextDrawSetOutline(SelectionPrice[playerid][0], 0);
	TextDrawSetProportional(SelectionPrice[playerid][0], 1);
	TextDrawSetShadow(SelectionPrice[playerid][0], 1);
	TextDrawSetSelectable(SelectionPrice[playerid][0], 0);

	SelectionPrice[playerid][1] = TextDrawCreate(167.000000, 202.000000, "_");
	TextDrawAlignment(SelectionPrice[playerid][1], 2);
	TextDrawBackgroundColor(SelectionPrice[playerid][1], 255);
	TextDrawFont(SelectionPrice[playerid][1], 2);
	TextDrawLetterSize(SelectionPrice[playerid][1], 0.319999, 0.899999);
	TextDrawColor(SelectionPrice[playerid][1], -1);
	TextDrawSetOutline(SelectionPrice[playerid][1], 0);
	TextDrawSetProportional(SelectionPrice[playerid][1], 1);
	TextDrawSetShadow(SelectionPrice[playerid][1], 1);
	TextDrawSetSelectable(SelectionPrice[playerid][1], 0);

	SelectionPrice[playerid][2] = TextDrawCreate(228.000000, 202.000000, "_");
	TextDrawAlignment(SelectionPrice[playerid][2], 2);
	TextDrawBackgroundColor(SelectionPrice[playerid][2], 255);
	TextDrawFont(SelectionPrice[playerid][2], 2);
	TextDrawLetterSize(SelectionPrice[playerid][2], 0.319999, 0.899999);
	TextDrawColor(SelectionPrice[playerid][2], -1);
	TextDrawSetOutline(SelectionPrice[playerid][2], 0);
	TextDrawSetProportional(SelectionPrice[playerid][2], 1);
	TextDrawSetShadow(SelectionPrice[playerid][2], 1);
	TextDrawSetSelectable(SelectionPrice[playerid][2], 0);

	SelectionPrice[playerid][3] = TextDrawCreate(290.000000, 202.000000, "_");
	TextDrawAlignment(SelectionPrice[playerid][3], 2);
	TextDrawBackgroundColor(SelectionPrice[playerid][3], 255);
	TextDrawFont(SelectionPrice[playerid][3], 2);
	TextDrawLetterSize(SelectionPrice[playerid][3], 0.319999, 0.899999);
	TextDrawColor(SelectionPrice[playerid][3], -1);
	TextDrawSetOutline(SelectionPrice[playerid][3], 0);
	TextDrawSetProportional(SelectionPrice[playerid][3], 1);
	TextDrawSetShadow(SelectionPrice[playerid][3], 1);
	TextDrawSetSelectable(SelectionPrice[playerid][3], 0);

	SelectionPrice[playerid][4] = TextDrawCreate(351.000000, 202.000000, "_");
	TextDrawAlignment(SelectionPrice[playerid][4], 2);
	TextDrawBackgroundColor(SelectionPrice[playerid][4], 255);
	TextDrawFont(SelectionPrice[playerid][4], 2);
	TextDrawLetterSize(SelectionPrice[playerid][4], 0.319999, 0.899999);
	TextDrawColor(SelectionPrice[playerid][4], -1);
	TextDrawSetOutline(SelectionPrice[playerid][4], 0);
	TextDrawSetProportional(SelectionPrice[playerid][4], 1);
	TextDrawSetShadow(SelectionPrice[playerid][4], 1);
	TextDrawSetSelectable(SelectionPrice[playerid][4], 0);

	SelectionPrice[playerid][5] = TextDrawCreate(412.000000, 202.000000, "_");
	TextDrawAlignment(SelectionPrice[playerid][5], 2);
	TextDrawBackgroundColor(SelectionPrice[playerid][5], 255);
	TextDrawFont(SelectionPrice[playerid][5], 2);
	TextDrawLetterSize(SelectionPrice[playerid][5], 0.319999, 0.899999);
	TextDrawColor(SelectionPrice[playerid][5], -1);
	TextDrawSetOutline(SelectionPrice[playerid][5], 0);
	TextDrawSetProportional(SelectionPrice[playerid][5], 1);
	TextDrawSetShadow(SelectionPrice[playerid][5], 1);
	TextDrawSetSelectable(SelectionPrice[playerid][5], 0);

	SelectionPrice[playerid][6] = TextDrawCreate(473.000000, 202.000000, "_");
	TextDrawAlignment(SelectionPrice[playerid][6], 2);
	TextDrawBackgroundColor(SelectionPrice[playerid][6], 255);
	TextDrawFont(SelectionPrice[playerid][6], 2);
	TextDrawLetterSize(SelectionPrice[playerid][6], 0.319999, 0.899999);
	TextDrawColor(SelectionPrice[playerid][6], -1);
	TextDrawSetOutline(SelectionPrice[playerid][6], 0);
	TextDrawSetProportional(SelectionPrice[playerid][6], 1);
	TextDrawSetShadow(SelectionPrice[playerid][6], 1);
	TextDrawSetSelectable(SelectionPrice[playerid][6], 0);

	SelectionPrice[playerid][7] = TextDrawCreate(534.000000, 202.000000, "_");
	TextDrawAlignment(SelectionPrice[playerid][7], 2);
	TextDrawBackgroundColor(SelectionPrice[playerid][7], 255);
	TextDrawFont(SelectionPrice[playerid][7], 2);
	TextDrawLetterSize(SelectionPrice[playerid][7], 0.319999, 0.899999);
	TextDrawColor(SelectionPrice[playerid][7], -1);
	TextDrawSetOutline(SelectionPrice[playerid][7], 0);
	TextDrawSetProportional(SelectionPrice[playerid][7], 1);
	TextDrawSetShadow(SelectionPrice[playerid][7], 1);
	TextDrawSetSelectable(SelectionPrice[playerid][7], 0);

	SelectionPrice[playerid][8] = TextDrawCreate(106.000000, 279.000000, "_");
	TextDrawAlignment(SelectionPrice[playerid][8], 2);
	TextDrawBackgroundColor(SelectionPrice[playerid][8], 255);
	TextDrawFont(SelectionPrice[playerid][8], 2);
	TextDrawLetterSize(SelectionPrice[playerid][8], 0.319999, 0.899999);
	TextDrawColor(SelectionPrice[playerid][8], -1);
	TextDrawSetOutline(SelectionPrice[playerid][8], 0);
	TextDrawSetProportional(SelectionPrice[playerid][8], 1);
	TextDrawSetShadow(SelectionPrice[playerid][8], 1);
	TextDrawSetSelectable(SelectionPrice[playerid][8], 0);

	SelectionPrice[playerid][9] = TextDrawCreate(167.000000, 279.000000, "_");
	TextDrawAlignment(SelectionPrice[playerid][9], 2);
	TextDrawBackgroundColor(SelectionPrice[playerid][9], 255);
	TextDrawFont(SelectionPrice[playerid][9], 2);
	TextDrawLetterSize(SelectionPrice[playerid][9], 0.319999, 0.899999);
	TextDrawColor(SelectionPrice[playerid][9], -1);
	TextDrawSetOutline(SelectionPrice[playerid][9], 0);
	TextDrawSetProportional(SelectionPrice[playerid][9], 1);
	TextDrawSetShadow(SelectionPrice[playerid][9], 1);
	TextDrawSetSelectable(SelectionPrice[playerid][9], 0);

	SelectionPrice[playerid][10] = TextDrawCreate(228.000000, 279.000000, "_");
	TextDrawAlignment(SelectionPrice[playerid][10], 2);
	TextDrawBackgroundColor(SelectionPrice[playerid][10], 255);
	TextDrawFont(SelectionPrice[playerid][10], 2);
	TextDrawLetterSize(SelectionPrice[playerid][10], 0.319999, 0.899999);
	TextDrawColor(SelectionPrice[playerid][10], -1);
	TextDrawSetOutline(SelectionPrice[playerid][10], 0);
	TextDrawSetProportional(SelectionPrice[playerid][10], 1);
	TextDrawSetShadow(SelectionPrice[playerid][10], 1);
	TextDrawSetSelectable(SelectionPrice[playerid][10], 0);

	SelectionPrice[playerid][11] = TextDrawCreate(290.000000, 279.000000, "_");
	TextDrawAlignment(SelectionPrice[playerid][11], 2);
	TextDrawBackgroundColor(SelectionPrice[playerid][11], 255);
	TextDrawFont(SelectionPrice[playerid][11], 2);
	TextDrawLetterSize(SelectionPrice[playerid][11], 0.319999, 0.899999);
	TextDrawColor(SelectionPrice[playerid][11], -1);
	TextDrawSetOutline(SelectionPrice[playerid][11], 0);
	TextDrawSetProportional(SelectionPrice[playerid][11], 1);
	TextDrawSetShadow(SelectionPrice[playerid][11], 1);
	TextDrawSetSelectable(SelectionPrice[playerid][11], 0);

	SelectionPrice[playerid][12] = TextDrawCreate(351.000000, 279.000000, "_");
	TextDrawAlignment(SelectionPrice[playerid][12], 2);
	TextDrawBackgroundColor(SelectionPrice[playerid][12], 255);
	TextDrawFont(SelectionPrice[playerid][12], 2);
	TextDrawLetterSize(SelectionPrice[playerid][12], 0.319999, 0.899999);
	TextDrawColor(SelectionPrice[playerid][12], -1);
	TextDrawSetOutline(SelectionPrice[playerid][12], 0);
	TextDrawSetProportional(SelectionPrice[playerid][12], 1);
	TextDrawSetShadow(SelectionPrice[playerid][12], 1);
	TextDrawSetSelectable(SelectionPrice[playerid][12], 0);

	SelectionPrice[playerid][13] = TextDrawCreate(412.000000, 279.000000, "_");
	TextDrawAlignment(SelectionPrice[playerid][13], 2);
	TextDrawBackgroundColor(SelectionPrice[playerid][13], 255);
	TextDrawFont(SelectionPrice[playerid][13], 2);
	TextDrawLetterSize(SelectionPrice[playerid][13], 0.319999, 0.899999);
	TextDrawColor(SelectionPrice[playerid][13], -1);
	TextDrawSetOutline(SelectionPrice[playerid][13], 0);
	TextDrawSetProportional(SelectionPrice[playerid][13], 1);
	TextDrawSetShadow(SelectionPrice[playerid][13], 1);
	TextDrawSetSelectable(SelectionPrice[playerid][13], 0);

	SelectionPrice[playerid][14] = TextDrawCreate(473.000000, 279.000000, "_");
	TextDrawAlignment(SelectionPrice[playerid][14], 2);
	TextDrawBackgroundColor(SelectionPrice[playerid][14], 255);
	TextDrawFont(SelectionPrice[playerid][14], 2);
	TextDrawLetterSize(SelectionPrice[playerid][14], 0.319999, 0.899999);
	TextDrawColor(SelectionPrice[playerid][14], -1);
	TextDrawSetOutline(SelectionPrice[playerid][14], 0);
	TextDrawSetProportional(SelectionPrice[playerid][14], 1);
	TextDrawSetShadow(SelectionPrice[playerid][14], 1);
	TextDrawSetSelectable(SelectionPrice[playerid][14], 0);

	SelectionPrice[playerid][15] = TextDrawCreate(534.000000, 279.000000, "_");
	TextDrawAlignment(SelectionPrice[playerid][15], 2);
	TextDrawBackgroundColor(SelectionPrice[playerid][15], 255);
	TextDrawFont(SelectionPrice[playerid][15], 2);
	TextDrawLetterSize(SelectionPrice[playerid][15], 0.319999, 0.899999);
	TextDrawColor(SelectionPrice[playerid][15], -1);
	TextDrawSetOutline(SelectionPrice[playerid][15], 0);
	TextDrawSetProportional(SelectionPrice[playerid][15], 1);
	TextDrawSetShadow(SelectionPrice[playerid][15], 1);
	TextDrawSetSelectable(SelectionPrice[playerid][15], 0);

    SelectionPrice[playerid][16] = TextDrawCreate(106.000000, 356.000000, "_");
    TextDrawAlignment(SelectionPrice[playerid][16], 2);
	TextDrawBackgroundColor(SelectionPrice[playerid][16], 255);
	TextDrawFont(SelectionPrice[playerid][16], 2);
	TextDrawLetterSize(SelectionPrice[playerid][16], 0.319999, 0.899999);
	TextDrawColor(SelectionPrice[playerid][16], -1);
	TextDrawSetOutline(SelectionPrice[playerid][16], 0);
	TextDrawSetProportional(SelectionPrice[playerid][16], 1);
	TextDrawSetShadow(SelectionPrice[playerid][16], 1);
	TextDrawSetSelectable(SelectionPrice[playerid][16], 0);

	SelectionPrice[playerid][17] = TextDrawCreate(228.000000, 356.000000, "_");
	TextDrawAlignment(SelectionPrice[playerid][17], 2);
	TextDrawBackgroundColor(SelectionPrice[playerid][17], 255);
	TextDrawFont(SelectionPrice[playerid][17], 2);
	TextDrawLetterSize(SelectionPrice[playerid][17], 0.319999, 0.899999);
	TextDrawColor(SelectionPrice[playerid][17], -1);
	TextDrawSetOutline(SelectionPrice[playerid][17], 0);
	TextDrawSetProportional(SelectionPrice[playerid][17], 1);
	TextDrawSetShadow(SelectionPrice[playerid][17], 1);
	TextDrawSetSelectable(SelectionPrice[playerid][17], 0);

	SelectionPrice[playerid][18] = TextDrawCreate(290.000000, 356.000000, "_");
	TextDrawAlignment(SelectionPrice[playerid][18], 2);
	TextDrawBackgroundColor(SelectionPrice[playerid][18], 255);
	TextDrawFont(SelectionPrice[playerid][18], 2);
	TextDrawLetterSize(SelectionPrice[playerid][18], 0.319999, 0.899999);
	TextDrawColor(SelectionPrice[playerid][18], -1);
	TextDrawSetOutline(SelectionPrice[playerid][18], 0);
	TextDrawSetProportional(SelectionPrice[playerid][18], 1);
	TextDrawSetShadow(SelectionPrice[playerid][18], 1);
	TextDrawSetSelectable(SelectionPrice[playerid][18], 0);

	SelectionPrice[playerid][19] = TextDrawCreate(351.000000, 356.000000, "_");
	TextDrawAlignment(SelectionPrice[playerid][19], 2);
	TextDrawBackgroundColor(SelectionPrice[playerid][19], 255);
	TextDrawFont(SelectionPrice[playerid][19], 2);
	TextDrawLetterSize(SelectionPrice[playerid][19], 0.319999, 0.899999);
	TextDrawColor(SelectionPrice[playerid][19], -1);
	TextDrawSetOutline(SelectionPrice[playerid][19], 0);
	TextDrawSetProportional(SelectionPrice[playerid][19], 1);
	TextDrawSetShadow(SelectionPrice[playerid][19], 1);
	TextDrawSetSelectable(SelectionPrice[playerid][19], 0);

	ChoiceTeam[playerid][0] = TextDrawCreate(105.000000, 134.000000, "_");
	TextDrawLetterSize(ChoiceTeam[playerid][0], 0.500000, 3.799998);
	TextDrawUseBox(ChoiceTeam[playerid][0], 1);
	TextDrawBoxColor(ChoiceTeam[playerid][0], 136);
	TextDrawTextSize(ChoiceTeam[playerid][0], 345.000000, 0.000000);
	TextDrawSetSelectable(ChoiceTeam[playerid][0], 0);

	ChoiceTeam[playerid][1] = TextDrawCreate(109.000000, 137.000000, "LD_BEAT:left");
	TextDrawBackgroundColor(ChoiceTeam[playerid][1], 0);
	TextDrawFont(ChoiceTeam[playerid][1], 4);
	TextDrawLetterSize(ChoiceTeam[playerid][1], 0.500000, 1.000000);
	TextDrawUseBox(ChoiceTeam[playerid][1], 1);
	TextDrawBoxColor(ChoiceTeam[playerid][1], 119);
	TextDrawTextSize(ChoiceTeam[playerid][1], 40.000000, 30.000000);
	TextDrawSetSelectable(ChoiceTeam[playerid][1], 1);

	ChoiceTeam[playerid][2] = TextDrawCreate(302.000000, 137.000000, "LD_BEAT:right");
	TextDrawBackgroundColor(ChoiceTeam[playerid][2], 0);
	TextDrawFont(ChoiceTeam[playerid][2], 4);
	TextDrawLetterSize(ChoiceTeam[playerid][2], 0.500000, 1.000000);
	TextDrawUseBox(ChoiceTeam[playerid][2], 1);
	TextDrawBoxColor(ChoiceTeam[playerid][2], 255);
	TextDrawTextSize(ChoiceTeam[playerid][2], 40.000000, 30.000000);
	TextDrawSetSelectable(ChoiceTeam[playerid][2], 1);

	ChoiceTeam[playerid][3] = TextDrawCreate(225.000000, 141.000000, "_");
	TextDrawAlignment(ChoiceTeam[playerid][3], 2);
	TextDrawBackgroundColor(ChoiceTeam[playerid][3], 255);
	TextDrawFont(ChoiceTeam[playerid][3], 2);
	TextDrawLetterSize(ChoiceTeam[playerid][3], 0.419999, 2.000000);
	TextDrawColor(ChoiceTeam[playerid][3], -1);
	TextDrawSetOutline(ChoiceTeam[playerid][3], 0);
	TextDrawSetProportional(ChoiceTeam[playerid][3], 1);
	TextDrawSetShadow(ChoiceTeam[playerid][3], 1);
	TextDrawSetSelectable(ChoiceTeam[playerid][3], 0);

	ChoiceTeam[playerid][4] = TextDrawCreate(105.000000, 173.000000, "_");
	TextDrawLetterSize(ChoiceTeam[playerid][4], 0.500000, 1.499997);
	TextDrawUseBox(ChoiceTeam[playerid][4], 1);
	TextDrawBoxColor(ChoiceTeam[playerid][4], 136);
	TextDrawTextSize(ChoiceTeam[playerid][4], 181.000000, 0.000000);
	TextDrawSetSelectable(ChoiceTeam[playerid][4], 0);

	ChoiceTeam[playerid][5] = TextDrawCreate(269.000000, 173.000000, "_");
	TextDrawLetterSize(ChoiceTeam[playerid][5], 0.300000, 1.499997);
	TextDrawUseBox(ChoiceTeam[playerid][5], 1);
	TextDrawBoxColor(ChoiceTeam[playerid][5], 136);
	TextDrawTextSize(ChoiceTeam[playerid][5], 345.000000, 0.000000);
	TextDrawSetSelectable(ChoiceTeam[playerid][5], 0);

	ChoiceTeam[playerid][6] = TextDrawCreate(186.000000, 173.000000, "_");
	TextDrawLetterSize(ChoiceTeam[playerid][6], 0.500000, 1.499997);
	TextDrawUseBox(ChoiceTeam[playerid][6], 1);
	TextDrawBoxColor(ChoiceTeam[playerid][6], 136);
	TextDrawTextSize(ChoiceTeam[playerid][6], 264.000000, 0.000000);
	TextDrawSetSelectable(ChoiceTeam[playerid][6], 0);

	ChoiceTeam[playerid][7] = TextDrawCreate(143.000000, 175.500000, "_");
	TextDrawAlignment(ChoiceTeam[playerid][7], 2);
	TextDrawBackgroundColor(ChoiceTeam[playerid][7], 255);
	TextDrawFont(ChoiceTeam[playerid][7], 2);
	TextDrawLetterSize(ChoiceTeam[playerid][7], 0.280000, 1.000000);
	TextDrawColor(ChoiceTeam[playerid][7], -1);
	TextDrawSetOutline(ChoiceTeam[playerid][7], 1);
	TextDrawSetProportional(ChoiceTeam[playerid][7], 1);
	TextDrawTextSize(ChoiceTeam[playerid][7], 15.000000, 73.000000);
	TextDrawSetSelectable(ChoiceTeam[playerid][7], 1);

	ChoiceTeam[playerid][8] = TextDrawCreate(307.500000, 175.500000, "_");
	TextDrawAlignment(ChoiceTeam[playerid][8], 2);
	TextDrawBackgroundColor(ChoiceTeam[playerid][8], 255);
	TextDrawFont(ChoiceTeam[playerid][8], 2);
	TextDrawLetterSize(ChoiceTeam[playerid][8], 0.280000, 1.000000);
	TextDrawColor(ChoiceTeam[playerid][8], -1);
	TextDrawSetOutline(ChoiceTeam[playerid][8], 1);
	TextDrawSetProportional(ChoiceTeam[playerid][8], 1);
	TextDrawTextSize(ChoiceTeam[playerid][8], 15.000000, 73.000000);
	TextDrawSetSelectable(ChoiceTeam[playerid][8], 1);

	ChoiceTeam[playerid][9] = TextDrawCreate(225.000000, 175.500000, "_");
	TextDrawAlignment(ChoiceTeam[playerid][9], 2);
	TextDrawBackgroundColor(ChoiceTeam[playerid][9], 255);
	TextDrawFont(ChoiceTeam[playerid][9], 2);
	TextDrawLetterSize(ChoiceTeam[playerid][9], 0.280000, 1.000000);
	TextDrawColor(ChoiceTeam[playerid][9], -1);
	TextDrawSetOutline(ChoiceTeam[playerid][9], 1);
	TextDrawSetProportional(ChoiceTeam[playerid][9], 1);
	TextDrawTextSize(ChoiceTeam[playerid][9], 15.000000, 74.000000);
	TextDrawSetSelectable(ChoiceTeam[playerid][9], 1);

    ChoiceTeam[playerid][10] = TextDrawCreate(524.000000, 408.000000, "_");
	TextDrawLetterSize(ChoiceTeam[playerid][10], 0.300000, 1.499997);
	TextDrawUseBox(ChoiceTeam[playerid][10], 1);
	TextDrawBoxColor(ChoiceTeam[playerid][10], 136);
	TextDrawTextSize(ChoiceTeam[playerid][10], 603.000000, 0.000000);
	TextDrawSetSelectable(ChoiceTeam[playerid][10], 0);

	ChoiceTeam[playerid][11] = TextDrawCreate(564.000000, 409.000000, "_");
	TextDrawAlignment(ChoiceTeam[playerid][11], 2);
	TextDrawBackgroundColor(ChoiceTeam[playerid][11], 255);
	TextDrawFont(ChoiceTeam[playerid][11], 2);
	TextDrawLetterSize(ChoiceTeam[playerid][11], 0.280000, 1.100000);
	TextDrawColor(ChoiceTeam[playerid][11], -1);
	TextDrawSetOutline(ChoiceTeam[playerid][11], 1);
	TextDrawSetProportional(ChoiceTeam[playerid][11], 1);
	TextDrawTextSize(ChoiceTeam[playerid][11], 15.000000, 48.000000);
	TextDrawSetSelectable(ChoiceTeam[playerid][11], true);
	
	ChoiceTeam[playerid][12] = TextDrawCreate(349.000000, 133.000000, "LD_CHAT:badchat");
	TextDrawBackgroundColor(ChoiceTeam[playerid][12], 0);
	TextDrawFont(ChoiceTeam[playerid][12], 4);
	TextDrawLetterSize(ChoiceTeam[playerid][12], 0.500000, 1.000000);
	TextDrawUseBox(ChoiceTeam[playerid][12], 1);
	TextDrawBoxColor(ChoiceTeam[playerid][12], 119);
	TextDrawTextSize(ChoiceTeam[playerid][12], 10.000000, 10.000000);
	TextDrawSetSelectable(ChoiceTeam[playerid][12], true);
	
	ChoiceTeam[playerid][13] = TextDrawCreate(63.000000, 298.000000, "_");
	TextDrawLetterSize(ChoiceTeam[playerid][13], 0.500000, 2.200000);
	TextDrawUseBox(ChoiceTeam[playerid][13], 1);
	TextDrawBoxColor(ChoiceTeam[playerid][13], 136);
	TextDrawTextSize(ChoiceTeam[playerid][13], 167.000000, 0.000000);
	TextDrawSetSelectable(ChoiceTeam[playerid][13], 0);

	ChoiceTeam[playerid][14] = TextDrawCreate(65.000000, 302.000000, "ld_beat:left");
	TextDrawBackgroundColor(ChoiceTeam[playerid][14], 0);
	TextDrawFont(ChoiceTeam[playerid][14], 4);
	TextDrawLetterSize(ChoiceTeam[playerid][14], 0.500000, 1.000000);
	TextDrawUseBox(ChoiceTeam[playerid][14], 1);
	TextDrawBoxColor(ChoiceTeam[playerid][14], 255);
	TextDrawTextSize(ChoiceTeam[playerid][14], 19.000000, 14.000000);
	TextDrawSetSelectable(ChoiceTeam[playerid][14], true);

	ChoiceTeam[playerid][15] = TextDrawCreate(147.000000, 302.000000, "ld_beat:right");
	TextDrawBackgroundColor(ChoiceTeam[playerid][15], 0);
	TextDrawFont(ChoiceTeam[playerid][15], 4);
	TextDrawLetterSize(ChoiceTeam[playerid][15], 0.500000, 1.000000);
	TextDrawUseBox(ChoiceTeam[playerid][15], 1);
	TextDrawBoxColor(ChoiceTeam[playerid][15], 255);
	TextDrawTextSize(ChoiceTeam[playerid][15], 19.000000, 14.000000);
	TextDrawSetSelectable(ChoiceTeam[playerid][15], true);

	ChoiceTeam[playerid][16] = TextDrawCreate(116.000000, 304.000000, "_");
	TextDrawAlignment(ChoiceTeam[playerid][16], 2);
	TextDrawBackgroundColor(ChoiceTeam[playerid][16], 255);
	TextDrawFont(ChoiceTeam[playerid][16], 2);
	TextDrawLetterSize(ChoiceTeam[playerid][16], 0.449999, 1.000000);
	TextDrawColor(ChoiceTeam[playerid][16], -1);
	TextDrawSetOutline(ChoiceTeam[playerid][16], 1);
	TextDrawSetProportional(ChoiceTeam[playerid][16], 1);
	TextDrawSetSelectable(ChoiceTeam[playerid][16], 0);

	ChoiceTeam[playerid][31] = TextDrawCreate(105.000000, 191.500000, "_");//
	TextDrawLetterSize(ChoiceTeam[playerid][31], 0.500000, 6.000000);
	TextDrawUseBox(ChoiceTeam[playerid][31], 1);
	TextDrawBoxColor(ChoiceTeam[playerid][31], 136);
	TextDrawTextSize(ChoiceTeam[playerid][31], 345.000000, 0.000000);
	TextDrawSetSelectable(ChoiceTeam[playerid][31], 0);

	ChoiceTeam[playerid][32] = TextDrawCreate(105.000000, 191.500000, "_");
	TextDrawLetterSize(ChoiceTeam[playerid][32], 0.500000, 1.200000);
	TextDrawSetShadow(ChoiceTeam[playerid][32], 1);
	TextDrawUseBox(ChoiceTeam[playerid][32], 1);
	TextDrawBoxColor(ChoiceTeam[playerid][32], 170);
	TextDrawTextSize(ChoiceTeam[playerid][32], 345.000000, 0.000000);
	TextDrawSetSelectable(ChoiceTeam[playerid][32], 0);

	ChoiceTeam[playerid][17] = TextDrawCreate(105.000000, 208.500000, "_");
	TextDrawLetterSize(ChoiceTeam[playerid][17], 0.500000, 1.000000);
	TextDrawUseBox(ChoiceTeam[playerid][17], 1);
	TextDrawBoxColor(ChoiceTeam[playerid][17], 153);
	TextDrawTextSize(ChoiceTeam[playerid][17], 345.000000, 0.000000);
	TextDrawSetSelectable(ChoiceTeam[playerid][17], 0);

	ChoiceTeam[playerid][18] = TextDrawCreate(105.000000, 222.500000, "_");
	TextDrawLetterSize(ChoiceTeam[playerid][18], 0.500000, 1.000000);
	TextDrawUseBox(ChoiceTeam[playerid][18], 1);
	TextDrawBoxColor(ChoiceTeam[playerid][18], 136);
	TextDrawTextSize(ChoiceTeam[playerid][18], 345.000000, 0.000000);
	TextDrawSetSelectable(ChoiceTeam[playerid][18], 0);

	ChoiceTeam[playerid][19] = TextDrawCreate(105.000000, 236.500000, "_");
	TextDrawLetterSize(ChoiceTeam[playerid][19], 0.500000, 1.000000);
	TextDrawUseBox(ChoiceTeam[playerid][19], 1);
	TextDrawBoxColor(ChoiceTeam[playerid][19], 153);
	TextDrawTextSize(ChoiceTeam[playerid][19], 345.000000, 0.000000);
	TextDrawSetSelectable(ChoiceTeam[playerid][19], 0);

	ChoiceTeam[playerid][20] = TextDrawCreate(107.000000, 192.500000, "_");
	TextDrawBackgroundColor(ChoiceTeam[playerid][20], 255);
	TextDrawFont(ChoiceTeam[playerid][20], 2);
	TextDrawLetterSize(ChoiceTeam[playerid][20], 0.230000, 0.899999);
	TextDrawColor(ChoiceTeam[playerid][20], -1);
	TextDrawSetOutline(ChoiceTeam[playerid][20], 0);
	TextDrawSetProportional(ChoiceTeam[playerid][20], 1);
	TextDrawSetShadow(ChoiceTeam[playerid][20], 1);
	TextDrawSetSelectable(ChoiceTeam[playerid][20], 0);

	ChoiceTeam[playerid][21] = TextDrawCreate(343.000000, 192.500000, "_");
	TextDrawAlignment(ChoiceTeam[playerid][21], 3);
	TextDrawBackgroundColor(ChoiceTeam[playerid][21], 255);
	TextDrawFont(ChoiceTeam[playerid][21], 2);
	TextDrawLetterSize(ChoiceTeam[playerid][21], 0.230000, 0.899999);
	TextDrawColor(ChoiceTeam[playerid][21], -1);
	TextDrawSetOutline(ChoiceTeam[playerid][21], 0);
	TextDrawSetProportional(ChoiceTeam[playerid][21], 1);
	TextDrawSetShadow(ChoiceTeam[playerid][21], 1);
	TextDrawSetSelectable(ChoiceTeam[playerid][21], 0);

	ChoiceTeam[playerid][22] = TextDrawCreate(102.000000, 203.000000, "LD_OTB2:Ric1");
	TextDrawBackgroundColor(ChoiceTeam[playerid][22], 0);
	TextDrawFont(ChoiceTeam[playerid][22], 4);
	TextDrawLetterSize(ChoiceTeam[playerid][22], 0.500000, 1.000000);
	TextDrawUseBox(ChoiceTeam[playerid][22], 1);
	TextDrawBoxColor(ChoiceTeam[playerid][22], 119);
	TextDrawTextSize(ChoiceTeam[playerid][22], 20.000000, 20.000000);
	TextDrawSetSelectable(ChoiceTeam[playerid][22], 0);

	ChoiceTeam[playerid][23] = TextDrawCreate(102.000000, 217.000000, "LD_OTB2:Ric2");
	TextDrawBackgroundColor(ChoiceTeam[playerid][23], 0);
	TextDrawFont(ChoiceTeam[playerid][23], 4);
	TextDrawLetterSize(ChoiceTeam[playerid][23], 0.500000, 1.000000);
	TextDrawUseBox(ChoiceTeam[playerid][23], 1);
	TextDrawBoxColor(ChoiceTeam[playerid][23], 119);
	TextDrawTextSize(ChoiceTeam[playerid][23], 20.000000, 20.000000);
	TextDrawSetSelectable(ChoiceTeam[playerid][23], 0);

	ChoiceTeam[playerid][24] = TextDrawCreate(102.000000, 231.000000, "LD_OTB2:Ric3");
	TextDrawBackgroundColor(ChoiceTeam[playerid][24], 0);
	TextDrawFont(ChoiceTeam[playerid][24], 4);
	TextDrawLetterSize(ChoiceTeam[playerid][24], 0.500000, 1.000000);
	TextDrawUseBox(ChoiceTeam[playerid][24], 1);
	TextDrawBoxColor(ChoiceTeam[playerid][24], 119);
	TextDrawTextSize(ChoiceTeam[playerid][24], 20.000000, 20.000000);
	TextDrawSetSelectable(ChoiceTeam[playerid][24], 0);

	ChoiceTeam[playerid][25] = TextDrawCreate(122.000000, 208.500000, "_");
	TextDrawBackgroundColor(ChoiceTeam[playerid][25], 255);
	TextDrawFont(ChoiceTeam[playerid][25], 2);
	TextDrawLetterSize(ChoiceTeam[playerid][25], 0.250000, 0.899999);
	TextDrawColor(ChoiceTeam[playerid][25], -1);
	TextDrawSetOutline(ChoiceTeam[playerid][25], 0);
	TextDrawSetProportional(ChoiceTeam[playerid][25], 1);
	TextDrawSetShadow(ChoiceTeam[playerid][25], 1);
	TextDrawTextSize(ChoiceTeam[playerid][25], 343.000000, 10.000000);
	TextDrawSetSelectable(ChoiceTeam[playerid][25], true);

	ChoiceTeam[playerid][26] = TextDrawCreate(122.000000, 222.500000, "_");
	TextDrawBackgroundColor(ChoiceTeam[playerid][26], 255);
	TextDrawFont(ChoiceTeam[playerid][26], 2);
	TextDrawLetterSize(ChoiceTeam[playerid][26], 0.250000, 0.899999);
	TextDrawColor(ChoiceTeam[playerid][26], -1);
	TextDrawSetOutline(ChoiceTeam[playerid][26], 0);
	TextDrawSetProportional(ChoiceTeam[playerid][26], 1);
	TextDrawSetShadow(ChoiceTeam[playerid][26], 1);
	TextDrawTextSize(ChoiceTeam[playerid][26], 343.000000, 10.000000);
	TextDrawSetSelectable(ChoiceTeam[playerid][26], true);

	ChoiceTeam[playerid][27] = TextDrawCreate(122.000000, 236.000000, "_");
	TextDrawBackgroundColor(ChoiceTeam[playerid][27], 255);
	TextDrawFont(ChoiceTeam[playerid][27], 2);
	TextDrawLetterSize(ChoiceTeam[playerid][27], 0.250000, 0.899999);
	TextDrawColor(ChoiceTeam[playerid][27], -1);
	TextDrawSetOutline(ChoiceTeam[playerid][27], 0);
	TextDrawSetProportional(ChoiceTeam[playerid][27], 1);
	TextDrawSetShadow(ChoiceTeam[playerid][27], 1);
	TextDrawTextSize(ChoiceTeam[playerid][27], 343.000000, 10.000000);
	TextDrawSetSelectable(ChoiceTeam[playerid][27], true);

	ChoiceTeam[playerid][28] = TextDrawCreate(338.000000, 208.500000, "_");
	TextDrawAlignment(ChoiceTeam[playerid][28], 3);
	TextDrawBackgroundColor(ChoiceTeam[playerid][28], 255);
	TextDrawFont(ChoiceTeam[playerid][28], 2);
	TextDrawLetterSize(ChoiceTeam[playerid][28], 0.250000, 0.899999);
	TextDrawColor(ChoiceTeam[playerid][28], -1);
	TextDrawSetOutline(ChoiceTeam[playerid][28], 0);
	TextDrawSetProportional(ChoiceTeam[playerid][28], 1);
	TextDrawSetShadow(ChoiceTeam[playerid][28], 1);
	TextDrawSetSelectable(ChoiceTeam[playerid][28], 0);

	ChoiceTeam[playerid][29] = TextDrawCreate(338.000000, 222.500000, "_");
	TextDrawAlignment(ChoiceTeam[playerid][29], 3);
	TextDrawBackgroundColor(ChoiceTeam[playerid][29], 255);
	TextDrawFont(ChoiceTeam[playerid][29], 2);
	TextDrawLetterSize(ChoiceTeam[playerid][29], 0.250000, 0.899999);
	TextDrawColor(ChoiceTeam[playerid][29], -1);
	TextDrawSetOutline(ChoiceTeam[playerid][29], 0);
	TextDrawSetProportional(ChoiceTeam[playerid][29], 1);
	TextDrawSetShadow(ChoiceTeam[playerid][29], 1);
	TextDrawSetSelectable(ChoiceTeam[playerid][29], 0);

	ChoiceTeam[playerid][30] = TextDrawCreate(338.000000, 236.000000, "_");
	TextDrawAlignment(ChoiceTeam[playerid][30], 3);
	TextDrawBackgroundColor(ChoiceTeam[playerid][30], 255);
	TextDrawFont(ChoiceTeam[playerid][30], 2);
	TextDrawLetterSize(ChoiceTeam[playerid][30], 0.250000, 0.899999);
	TextDrawColor(ChoiceTeam[playerid][30], -1);
	TextDrawSetOutline(ChoiceTeam[playerid][30], 0);
	TextDrawSetProportional(ChoiceTeam[playerid][30], 1);
	TextDrawSetShadow(ChoiceTeam[playerid][30], 1);
	TextDrawSetSelectable(ChoiceTeam[playerid][30], 0);

    InfoKills[playerid][0] = TextDrawCreate(170.000000, 385.000000, "_");
	TextDrawLetterSize(InfoKills[playerid][0], 0.500000, 1.099998);
	TextDrawUseBox(InfoKills[playerid][0], 1);
	TextDrawBoxColor(InfoKills[playerid][0], 170);
	TextDrawTextSize(InfoKills[playerid][0], 470.000000, 0.000000);
	TextDrawSetSelectable(InfoKills[playerid][0], 0);

	InfoKills[playerid][2] = TextDrawCreate(244.500000, 385.000000, "_");
	TextDrawLetterSize(InfoKills[playerid][2], 0.500000, 5.000000);
	TextDrawUseBox(InfoKills[playerid][2], 1);
	TextDrawBoxColor(InfoKills[playerid][2], 85);
	TextDrawTextSize(InfoKills[playerid][2], 315.000000, 0.000000);
	TextDrawSetSelectable(InfoKills[playerid][2], 0);

	InfoKills[playerid][3] = TextDrawCreate(319.500000, 385.000000, "_");
	TextDrawLetterSize(InfoKills[playerid][3], 0.500000, 5.000000);
	TextDrawUseBox(InfoKills[playerid][3], 1);
	TextDrawBoxColor(InfoKills[playerid][3], 85);
	TextDrawTextSize(InfoKills[playerid][3], 470.000000, 0.000000);
	TextDrawSetSelectable(InfoKills[playerid][3], 0);

	InfoKills[playerid][1] = TextDrawCreate(170.000000, 385.000000, "_");
	TextDrawLetterSize(InfoKills[playerid][1], 0.500000, 5.000000);
	TextDrawUseBox(InfoKills[playerid][1], 1);
	TextDrawBoxColor(InfoKills[playerid][1], 85);
	TextDrawTextSize(InfoKills[playerid][1], 240.000000, 0.000000);
	TextDrawSetSelectable(InfoKills[playerid][1], 0);
	
	InfoKills[playerid][4] = TextDrawCreate(174.000000, 385.500000, "_");
	TextDrawBackgroundColor(InfoKills[playerid][4], 255);
	TextDrawFont(InfoKills[playerid][4], 2);
	TextDrawLetterSize(InfoKills[playerid][4], 0.270000, 0.899999);
	TextDrawColor(InfoKills[playerid][4], -1);
	TextDrawSetOutline(InfoKills[playerid][4], 0);
	TextDrawSetProportional(InfoKills[playerid][4], 1);
	TextDrawSetShadow(InfoKills[playerid][4], 1);
	TextDrawSetSelectable(InfoKills[playerid][4], 0);

	InfoKills[playerid][5] = TextDrawCreate(204.500000, 401.500000, "_");
	TextDrawAlignment(InfoKills[playerid][5], 2);
	TextDrawBackgroundColor(InfoKills[playerid][5], 255);
	TextDrawFont(InfoKills[playerid][5], 2);
	TextDrawLetterSize(InfoKills[playerid][5], 0.290000, 1.100000);
	TextDrawColor(InfoKills[playerid][5], -1);
	TextDrawSetOutline(InfoKills[playerid][5], 0);
	TextDrawSetProportional(InfoKills[playerid][5], 1);
	TextDrawSetShadow(InfoKills[playerid][5], 1);
	TextDrawSetSelectable(InfoKills[playerid][5], 0);

	InfoKills[playerid][6] = TextDrawCreate(205.000000, 411.500000, "_");
	TextDrawAlignment(InfoKills[playerid][6], 2);
	TextDrawBackgroundColor(InfoKills[playerid][6], 255);
	TextDrawFont(InfoKills[playerid][6], 2);
	TextDrawLetterSize(InfoKills[playerid][6], 0.339999, 1.300000);
	TextDrawColor(InfoKills[playerid][6], -1);
	TextDrawSetOutline(InfoKills[playerid][6], 0);
	TextDrawSetProportional(InfoKills[playerid][6], 1);
	TextDrawSetShadow(InfoKills[playerid][6], 1);
	TextDrawSetSelectable(InfoKills[playerid][6], 0);

	InfoKills[playerid][7] = TextDrawCreate(279.500000, 401.500000, "_");
	TextDrawAlignment(InfoKills[playerid][7], 2);
	TextDrawBackgroundColor(InfoKills[playerid][7], 255);
	TextDrawFont(InfoKills[playerid][7], 2);
	TextDrawLetterSize(InfoKills[playerid][7], 0.290000, 1.100000);
	TextDrawColor(InfoKills[playerid][7], -1);
	TextDrawSetOutline(InfoKills[playerid][7], 0);
	TextDrawSetProportional(InfoKills[playerid][7], 1);
	TextDrawSetShadow(InfoKills[playerid][7], 1);
	TextDrawSetSelectable(InfoKills[playerid][7], 0);

	InfoKills[playerid][8] = TextDrawCreate(280.000000, 411.500000, "_");
	TextDrawAlignment(InfoKills[playerid][8], 2);
	TextDrawBackgroundColor(InfoKills[playerid][8], 255);
	TextDrawFont(InfoKills[playerid][8], 2);
	TextDrawLetterSize(InfoKills[playerid][8], 0.339999, 1.300000);
	TextDrawColor(InfoKills[playerid][8], -1);
	TextDrawSetOutline(InfoKills[playerid][8], 0);
	TextDrawSetProportional(InfoKills[playerid][8], 1);
	TextDrawSetShadow(InfoKills[playerid][8], 1);
	TextDrawSetSelectable(InfoKills[playerid][8], 0);

	InfoKills[playerid][9] = TextDrawCreate(466.000000, 412.000000, "_");
	TextDrawAlignment(InfoKills[playerid][9], 3);
	TextDrawBackgroundColor(InfoKills[playerid][9], 255);
	TextDrawFont(InfoKills[playerid][9], 2);
	TextDrawLetterSize(InfoKills[playerid][9], 0.270000, 0.899999);
	TextDrawColor(InfoKills[playerid][9], -1);
	TextDrawSetOutline(InfoKills[playerid][9], 0);
	TextDrawSetProportional(InfoKills[playerid][9], 1);
	TextDrawSetShadow(InfoKills[playerid][9], 1);
	TextDrawSetSelectable(InfoKills[playerid][9], 0);

	InfoKills[playerid][10] = TextDrawCreate(466.000000, 385.500000, "_");
	TextDrawAlignment(InfoKills[playerid][10], 3);
	TextDrawBackgroundColor(InfoKills[playerid][10], 255);
	TextDrawFont(InfoKills[playerid][10], 2);
	TextDrawLetterSize(InfoKills[playerid][10], 0.270000, 0.899999);
	TextDrawColor(InfoKills[playerid][10], -1);
	TextDrawSetOutline(InfoKills[playerid][10], 0);
	TextDrawSetProportional(InfoKills[playerid][10], 1);
	TextDrawSetShadow(InfoKills[playerid][10], 1);
	TextDrawSetSelectable(InfoKills[playerid][10], 0);
	
	InfoKills[playerid][11] = TextDrawCreate(310.500000, 397.000000, "_");
	TextDrawBackgroundColor(InfoKills[playerid][11], 0);
	TextDrawFont(InfoKills[playerid][11], 5);
	TextDrawLetterSize(InfoKills[playerid][11], 0.500000, 1.000000);
	TextDrawTextSize(InfoKills[playerid][11], 56.000000, 33.000000);
	TextDrawSetPreviewModel(InfoKills[playerid][11], 1);
	TextDrawSetPreviewRot(InfoKills[playerid][11], 0.000000, 0.000000, 0.000000, 1.000000);
	TextDrawSetSelectable(InfoKills[playerid][11], 0);

	InfoKills[playerid][12] = TextDrawCreate(336.0, 401.0, "_");//голова
	TextDrawLetterSize(InfoKills[playerid][12], 0.5, 0.1);
	TextDrawUseBox(InfoKills[playerid][12], 1);
	TextDrawBoxColor(InfoKills[playerid][12], -16777080);
	TextDrawTextSize(InfoKills[playerid][12], 342.0, 0.0);
	TextDrawSetSelectable(InfoKills[playerid][12], 0);

	InfoKills[playerid][13] = TextDrawCreate(336.0, 406.2, "_");//грудь
	TextDrawLetterSize(InfoKills[playerid][13], 0.5, 0.4);
	TextDrawUseBox(InfoKills[playerid][13], 1);
	TextDrawBoxColor(InfoKills[playerid][13], -16777080);
	TextDrawTextSize(InfoKills[playerid][13], 342.0, 0.0);
	TextDrawSetSelectable(InfoKills[playerid][13], 0);

	InfoKills[playerid][14] = TextDrawCreate(336.0, 414.5, "_");//пах
	TextDrawLetterSize(InfoKills[playerid][14], 0.5, -0.05);
	TextDrawUseBox(InfoKills[playerid][14], 1);
	TextDrawBoxColor(InfoKills[playerid][14], -16777080);
	TextDrawTextSize(InfoKills[playerid][14], 342.0, 0.0);
	TextDrawSetSelectable(InfoKills[playerid][14], 0);

	InfoKills[playerid][15] = TextDrawCreate(336.0, 418.5, "_");//левая нога
	TextDrawLetterSize(InfoKills[playerid][15], 0.5, 0.8);
	TextDrawUseBox(InfoKills[playerid][15], 1);
	TextDrawBoxColor(InfoKills[playerid][15], -16777080);
	TextDrawTextSize(InfoKills[playerid][15], 336.5, 0.0);
	TextDrawSetSelectable(InfoKills[playerid][15], 0);

	InfoKills[playerid][16] = TextDrawCreate(341.5, 418.5, "_");//правая нога
	TextDrawLetterSize(InfoKills[playerid][16], 0.5, 0.8);
	TextDrawUseBox(InfoKills[playerid][16], 1);
	TextDrawBoxColor(InfoKills[playerid][16], -16777080);
	TextDrawTextSize(InfoKills[playerid][16], 342.0, 0.0);
	TextDrawSetSelectable(InfoKills[playerid][16], 0);

	InfoKills[playerid][17] = TextDrawCreate(333.0, 406.2, "_");//левая рука 
	TextDrawLetterSize(InfoKills[playerid][17], 0.5, 0.9);
	TextDrawUseBox(InfoKills[playerid][17], 1);
	TextDrawBoxColor(InfoKills[playerid][17], -16777080);
	TextDrawTextSize(InfoKills[playerid][17], 332.0, 0.0);
	TextDrawSetSelectable(InfoKills[playerid][17], 0);

	InfoKills[playerid][18] = TextDrawCreate(346.0, 406.2, "_");//правая рука
	TextDrawLetterSize(InfoKills[playerid][18], 0.5, 0.9);
	TextDrawUseBox(InfoKills[playerid][18], 1);
	TextDrawBoxColor(InfoKills[playerid][18], -16777080);
	TextDrawTextSize(InfoKills[playerid][18], 345.0, 0.0);
	TextDrawSetSelectable(InfoKills[playerid][18], 0);

    UpPanel[playerid] = TextDrawCreate(634.000000, 3.000000, "_");
	TextDrawAlignment(UpPanel[playerid], 3);
	TextDrawBackgroundColor(UpPanel[playerid], 255);//170
	TextDrawFont(UpPanel[playerid], 2);
	TextDrawLetterSize(UpPanel[playerid], 0.249999, 1.100000);
	TextDrawColor(UpPanel[playerid], -1);
	TextDrawSetOutline(UpPanel[playerid], 1);
	TextDrawSetProportional(UpPanel[playerid], 1);
	TextDrawSetSelectable(UpPanel[playerid], 0);
	
	RevivalText[playerid][0] = TextDrawCreate(11.0, 255.0, "_");
	TextDrawLetterSize(RevivalText[playerid][0], 0.5, 1.45);
	TextDrawUseBox(RevivalText[playerid][0], 1);
	TextDrawBoxColor(RevivalText[playerid][0], 0x00000077);
	TextDrawTextSize(RevivalText[playerid][0], 108.0, 0.0);
	TextDrawSetSelectable(RevivalText[playerid][0], 0);

	RevivalText[playerid][1] = TextDrawCreate(112.0, 255.0, "_");
	TextDrawLetterSize(RevivalText[playerid][1], 0.5, 1.45);
	TextDrawUseBox(RevivalText[playerid][1], 1);
	TextDrawBoxColor(RevivalText[playerid][1], 0x00000077);
	TextDrawTextSize(RevivalText[playerid][1], 207.0, 0.0);
	TextDrawSetSelectable(RevivalText[playerid][1], 0);

	RevivalText[playerid][2] = TextDrawCreate(59.0, 256.5, "_");
	TextDrawAlignment(RevivalText[playerid][2], 2);
	TextDrawBackgroundColor(RevivalText[playerid][2], 255);
	TextDrawFont(RevivalText[playerid][2], 2);
	TextDrawLetterSize(RevivalText[playerid][2], 0.22, 1.0);
	TextDrawColor(RevivalText[playerid][2], -1);
	TextDrawSetOutline(RevivalText[playerid][2], 1);
	TextDrawSetProportional(RevivalText[playerid][2], 1);
	TextDrawTextSize(RevivalText[playerid][2], 10.0, 100.0);
	TextDrawSetSelectable(RevivalText[playerid][2], true);

	RevivalText[playerid][3] = TextDrawCreate(159.0, 256.5, "_");
	TextDrawAlignment(RevivalText[playerid][3], 2);
	TextDrawBackgroundColor(RevivalText[playerid][3], 255);
	TextDrawFont(RevivalText[playerid][3], 2);
	TextDrawLetterSize(RevivalText[playerid][3], 0.22, 1.0);
	TextDrawColor(RevivalText[playerid][3], -1);
	TextDrawSetOutline(RevivalText[playerid][3], 1);
	TextDrawSetProportional(RevivalText[playerid][3], 1);
	TextDrawTextSize(RevivalText[playerid][3], 10.0, 100.0);
	TextDrawSetSelectable(RevivalText[playerid][3], true);

	ChoiceItems[playerid][0] = TextDrawCreate(0.0, 126.0, "_");
	TextDrawLetterSize(ChoiceItems[playerid][0], 0.5, 10.7);
	TextDrawUseBox(ChoiceItems[playerid][0], 1);
	TextDrawBoxColor(ChoiceItems[playerid][0], 51);
	TextDrawTextSize(ChoiceItems[playerid][0], 140.0, 0.0);
	TextDrawSetSelectable(ChoiceItems[playerid][0], 0);

	ChoiceItems[playerid][1] = TextDrawCreate(0.0, 126.0, "_");
	TextDrawLetterSize(ChoiceItems[playerid][1], 0.3, 1.0);
	TextDrawUseBox(ChoiceItems[playerid][1], 1);
	TextDrawBoxColor(ChoiceItems[playerid][1], 153);
	TextDrawTextSize(ChoiceItems[playerid][1], 140.0, 0.0);
	TextDrawSetSelectable(ChoiceItems[playerid][1], 0);

	ChoiceItems[playerid][2] = TextDrawCreate(1.0, 141.0, "_");
	TextDrawBackgroundColor(ChoiceItems[playerid][2], 255);
	TextDrawFont(ChoiceItems[playerid][2], 2);
	TextDrawLetterSize(ChoiceItems[playerid][2], 0.21, 1.0);
	TextDrawColor(ChoiceItems[playerid][2], -1);
	TextDrawSetOutline(ChoiceItems[playerid][2], 1);
	TextDrawSetProportional(ChoiceItems[playerid][2], 1);
	TextDrawUseBox(ChoiceItems[playerid][2], 1);
	TextDrawBoxColor(ChoiceItems[playerid][2], 68);
	TextDrawTextSize(ChoiceItems[playerid][2], 140.0, 0.0);
	TextDrawSetSelectable(ChoiceItems[playerid][2], 0);

	ChoiceItems[playerid][3] = TextDrawCreate(1.0, 155.5, "_");
	TextDrawBackgroundColor(ChoiceItems[playerid][3], 255);
	TextDrawFont(ChoiceItems[playerid][3], 2);
	TextDrawLetterSize(ChoiceItems[playerid][3], 0.21, 1.0);
	TextDrawColor(ChoiceItems[playerid][3], -1);
	TextDrawSetOutline(ChoiceItems[playerid][3], 1);
	TextDrawSetProportional(ChoiceItems[playerid][3], 1);
	TextDrawUseBox(ChoiceItems[playerid][3], 1);
	TextDrawBoxColor(ChoiceItems[playerid][3], 102);
	TextDrawTextSize(ChoiceItems[playerid][3], 140.0, 0.0);
	TextDrawSetSelectable(ChoiceItems[playerid][3], 0);

	ChoiceItems[playerid][4] = TextDrawCreate(1.0, 170.0, "_");
	TextDrawBackgroundColor(ChoiceItems[playerid][4], 255);
	TextDrawFont(ChoiceItems[playerid][4], 2);
	TextDrawLetterSize(ChoiceItems[playerid][4], 0.21, 1.0);
	TextDrawColor(ChoiceItems[playerid][4], -1);
	TextDrawSetOutline(ChoiceItems[playerid][4], 1);
	TextDrawSetProportional(ChoiceItems[playerid][4], 1);
	TextDrawUseBox(ChoiceItems[playerid][4], 1);
	TextDrawBoxColor(ChoiceItems[playerid][4], 68);
	TextDrawTextSize(ChoiceItems[playerid][4], 140.0, 0.0);
	TextDrawSetSelectable(ChoiceItems[playerid][4], 0);

	ChoiceItems[playerid][5] = TextDrawCreate(1.0, 184.5, "_");
	TextDrawBackgroundColor(ChoiceItems[playerid][5], 255);
	TextDrawFont(ChoiceItems[playerid][5], 2);
	TextDrawLetterSize(ChoiceItems[playerid][5], 0.21, 1.0);
	TextDrawColor(ChoiceItems[playerid][5], -1);
	TextDrawSetOutline(ChoiceItems[playerid][5], 1);
	TextDrawSetProportional(ChoiceItems[playerid][5], 1);
	TextDrawUseBox(ChoiceItems[playerid][5], 1);
	TextDrawBoxColor(ChoiceItems[playerid][5], 102);
	TextDrawTextSize(ChoiceItems[playerid][5], 140.0, 0.0);
	TextDrawSetSelectable(ChoiceItems[playerid][5], 0);

	ChoiceItems[playerid][6] = TextDrawCreate(1.0, 199.0, "_");
	TextDrawBackgroundColor(ChoiceItems[playerid][6], 255);
	TextDrawFont(ChoiceItems[playerid][6], 2);
	TextDrawLetterSize(ChoiceItems[playerid][6], 0.21, 1.0);
	TextDrawColor(ChoiceItems[playerid][6], -1);
	TextDrawSetOutline(ChoiceItems[playerid][6], 1);
	TextDrawSetProportional(ChoiceItems[playerid][6], 1);
	TextDrawUseBox(ChoiceItems[playerid][6], 1);
	TextDrawBoxColor(ChoiceItems[playerid][6], 68);
	TextDrawTextSize(ChoiceItems[playerid][6], 140.0, 0.0);
	TextDrawSetSelectable(ChoiceItems[playerid][6], 0);

	ChoiceItems[playerid][7] = TextDrawCreate(1.0, 213.0, "_");
	TextDrawBackgroundColor(ChoiceItems[playerid][7], 255);
	TextDrawFont(ChoiceItems[playerid][7], 2);
	TextDrawLetterSize(ChoiceItems[playerid][7], 0.21, 1.0);
	TextDrawColor(ChoiceItems[playerid][7], -1);
	TextDrawSetOutline(ChoiceItems[playerid][7], 1);
	TextDrawSetProportional(ChoiceItems[playerid][7], 1);
	TextDrawUseBox(ChoiceItems[playerid][7], 1);
	TextDrawBoxColor(ChoiceItems[playerid][7], 102);
	TextDrawTextSize(ChoiceItems[playerid][7], 140.0, 0.0);
	TextDrawSetSelectable(ChoiceItems[playerid][7], 0);

	ChoiceItems[playerid][8] = TextDrawCreate(1.0, 227.5, "_");
	TextDrawBackgroundColor(ChoiceItems[playerid][8], 255);
	TextDrawFont(ChoiceItems[playerid][8], 2);
	TextDrawLetterSize(ChoiceItems[playerid][8], 0.20, 0.9);
	TextDrawColor(ChoiceItems[playerid][8], -1);
	TextDrawSetOutline(ChoiceItems[playerid][8], 1);
	TextDrawSetProportional(ChoiceItems[playerid][8], 1);
	TextDrawUseBox(ChoiceItems[playerid][8], 1);
	TextDrawBoxColor(ChoiceItems[playerid][8], 102);
	TextDrawTextSize(ChoiceItems[playerid][8], 140.0, 0.0);
	TextDrawSetSelectable(ChoiceItems[playerid][8], 0);

	ChoiceItems[playerid][9] = TextDrawCreate(137.0, 141.0, "_");
	TextDrawAlignment(ChoiceItems[playerid][9], 3);
	TextDrawBackgroundColor(ChoiceItems[playerid][9], 255);
	TextDrawFont(ChoiceItems[playerid][9], 2);
	TextDrawLetterSize(ChoiceItems[playerid][9], 0.21, 1.0);
	TextDrawColor(ChoiceItems[playerid][9], -1);
	TextDrawSetOutline(ChoiceItems[playerid][9], 1);
	TextDrawSetProportional(ChoiceItems[playerid][9], 1);
	TextDrawSetSelectable(ChoiceItems[playerid][9], 0);

	ChoiceItems[playerid][10] = TextDrawCreate(137.0, 155.5, "_");
	TextDrawAlignment(ChoiceItems[playerid][10], 3);
	TextDrawBackgroundColor(ChoiceItems[playerid][10], 255);
	TextDrawFont(ChoiceItems[playerid][10], 2);
	TextDrawLetterSize(ChoiceItems[playerid][10], 0.21, 1.0);
	TextDrawColor(ChoiceItems[playerid][10], -1);
	TextDrawSetOutline(ChoiceItems[playerid][10], 1);
	TextDrawSetProportional(ChoiceItems[playerid][10], 1);
	TextDrawSetSelectable(ChoiceItems[playerid][10], 0);

	ChoiceItems[playerid][11] = TextDrawCreate(137.0, 170.0, "_");
	TextDrawAlignment(ChoiceItems[playerid][11], 3);
	TextDrawBackgroundColor(ChoiceItems[playerid][11], 255);
	TextDrawFont(ChoiceItems[playerid][11], 2);
	TextDrawLetterSize(ChoiceItems[playerid][11], 0.21, 1.0);
	TextDrawColor(ChoiceItems[playerid][11], -1);
	TextDrawSetOutline(ChoiceItems[playerid][11], 1);
	TextDrawSetProportional(ChoiceItems[playerid][11], 1);
	TextDrawSetSelectable(ChoiceItems[playerid][11], 0);

	ChoiceItems[playerid][12] = TextDrawCreate(137.0, 184.5, "_");
	TextDrawAlignment(ChoiceItems[playerid][12], 3);
	TextDrawBackgroundColor(ChoiceItems[playerid][12], 255);
	TextDrawFont(ChoiceItems[playerid][12], 2);
	TextDrawLetterSize(ChoiceItems[playerid][12], 0.21, 1.0);
	TextDrawColor(ChoiceItems[playerid][12], -1);
	TextDrawSetOutline(ChoiceItems[playerid][12], 1);
	TextDrawSetProportional(ChoiceItems[playerid][12], 1);
	TextDrawSetSelectable(ChoiceItems[playerid][12], 0);

	ChoiceItems[playerid][13] = TextDrawCreate(137.0, 199.0, "_");
	TextDrawAlignment(ChoiceItems[playerid][13], 3);
	TextDrawBackgroundColor(ChoiceItems[playerid][13], 255);
	TextDrawFont(ChoiceItems[playerid][13], 2);
	TextDrawLetterSize(ChoiceItems[playerid][13], 0.21, 1.0);
	TextDrawColor(ChoiceItems[playerid][13], -1);
	TextDrawSetOutline(ChoiceItems[playerid][13], 1);
	TextDrawSetProportional(ChoiceItems[playerid][13], 1);
	TextDrawSetSelectable(ChoiceItems[playerid][13], 0);

	ChoiceItems[playerid][14] = TextDrawCreate(137.0, 213.5, "_");
	TextDrawAlignment(ChoiceItems[playerid][14], 3);
	TextDrawBackgroundColor(ChoiceItems[playerid][14], 255);
	TextDrawFont(ChoiceItems[playerid][14], 2);
	TextDrawLetterSize(ChoiceItems[playerid][14], 0.21, 1.0);
	TextDrawColor(ChoiceItems[playerid][14], -1);
	TextDrawSetOutline(ChoiceItems[playerid][14], 1);
	TextDrawSetProportional(ChoiceItems[playerid][14], 1);
	TextDrawSetSelectable(ChoiceItems[playerid][14], 0);
	
	ChoiceItems[playerid][15] = TextDrawCreate(66.0, 126.0, "_");
	TextDrawAlignment(ChoiceItems[playerid][15], 2);
	TextDrawBackgroundColor(ChoiceItems[playerid][15], 255);
	TextDrawFont(ChoiceItems[playerid][15], 2);
	TextDrawLetterSize(ChoiceItems[playerid][15], 0.24, 1.0);
	TextDrawColor(ChoiceItems[playerid][15], -1);
	TextDrawSetOutline(ChoiceItems[playerid][15], 1);
	TextDrawSetProportional(ChoiceItems[playerid][15], 1);
	TextDrawSetSelectable(ChoiceItems[playerid][15], 0);
	
	ChangeMapp[playerid][5] = TextDrawCreate(0.0, 105.0, "_");
	TextDrawLetterSize(ChangeMapp[playerid][5], 0.5, 5.4);
	TextDrawUseBox(ChangeMapp[playerid][5], 1);
	TextDrawBoxColor(ChangeMapp[playerid][5], 136);
	TextDrawTextSize(ChangeMapp[playerid][5], 640.0, 0.0);
	TextDrawSetSelectable(ChangeMapp[playerid][5], 0);

	ChangeMapp[playerid][6] = TextDrawCreate(320.0, 110.0, "_");
	TextDrawAlignment(ChangeMapp[playerid][6], 2);
	TextDrawBackgroundColor(ChangeMapp[playerid][6], 255);
	TextDrawFont(ChangeMapp[playerid][6], 2);
	TextDrawLetterSize(ChangeMapp[playerid][6], 0.5, 2.0);
	TextDrawColor(ChangeMapp[playerid][6], -1);
	TextDrawSetOutline(ChangeMapp[playerid][6], 1);
	TextDrawSetProportional(ChangeMapp[playerid][6], 1);
	TextDrawSetSelectable(ChangeMapp[playerid][6], 0);
	
	ChangeMapp[playerid][11] = TextDrawCreate(72.0, 159.0, "_");
	TextDrawLetterSize(ChangeMapp[playerid][11], 0.5, 19.6);
	TextDrawUseBox(ChangeMapp[playerid][11], 1);
	TextDrawBoxColor(ChangeMapp[playerid][11], ColorTextDraw[1]);//
	TextDrawTextSize(ChangeMapp[playerid][11], 571.0, 0.0);
	TextDrawSetSelectable(ChangeMapp[playerid][11], 0);

    ChangeMapp[playerid][12] = TextDrawCreate(72.0, 324.0, "_");
	TextDrawLetterSize(ChangeMapp[playerid][12], 0.5, 1.3);
	TextDrawUseBox(ChangeMapp[playerid][12], 1);
	TextDrawBoxColor(ChangeMapp[playerid][12], ColorTextDraw[1]);
	TextDrawTextSize(ChangeMapp[playerid][12], 572.0, 0.0);
	TextDrawSetSelectable(ChangeMapp[playerid][12], 0);

	ChangeMapp[playerid][13] = TextDrawCreate(75.0, 161.0, "_");
	TextDrawBackgroundColor(ChangeMapp[playerid][13], 255);
	TextDrawFont(ChangeMapp[playerid][13], 2);
	TextDrawLetterSize(ChangeMapp[playerid][13], 0.36, 1.6);
	TextDrawColor(ChangeMapp[playerid][13], -1);
	TextDrawSetOutline(ChangeMapp[playerid][13], 1);
	TextDrawSetProportional(ChangeMapp[playerid][13], 1);
	TextDrawSetSelectable(ChangeMapp[playerid][13], 0);

	ChangeMapp[playerid][14] = TextDrawCreate(73.0, 180.0, "_");
	TextDrawBackgroundColor(ChangeMapp[playerid][14], 0);
	TextDrawFont(ChangeMapp[playerid][14], 4);
	TextDrawLetterSize(ChangeMapp[playerid][14], 0.5, 1.0);
	TextDrawUseBox(ChangeMapp[playerid][14], 1);
	TextDrawBoxColor(ChangeMapp[playerid][14], 119);
	TextDrawTextSize(ChangeMapp[playerid][14], 165.0, 70.0);
	TextDrawSetSelectable(ChangeMapp[playerid][14], true);

	ChangeMapp[playerid][15] = TextDrawCreate(239.0, 180.0, "_");
	TextDrawBackgroundColor(ChangeMapp[playerid][15], 0);
	TextDrawFont(ChangeMapp[playerid][15], 4);
	TextDrawLetterSize(ChangeMapp[playerid][15], 0.5, 1.0);
	TextDrawUseBox(ChangeMapp[playerid][15], 1);
	TextDrawBoxColor(ChangeMapp[playerid][15], 119);
	TextDrawTextSize(ChangeMapp[playerid][15], 165.0, 70.0);
	TextDrawSetSelectable(ChangeMapp[playerid][15], true);

	ChangeMapp[playerid][16] = TextDrawCreate(405.0, 180.0, "_");
	TextDrawBackgroundColor(ChangeMapp[playerid][16], 0);
	TextDrawFont(ChangeMapp[playerid][16], 4);
	TextDrawLetterSize(ChangeMapp[playerid][16], 0.5, 1.0);
	TextDrawUseBox(ChangeMapp[playerid][16], 1);
	TextDrawBoxColor(ChangeMapp[playerid][16], 119);
	TextDrawTextSize(ChangeMapp[playerid][16], 165.0, 70.0);
	TextDrawSetSelectable(ChangeMapp[playerid][16], true);
	
	ChangeMapp[playerid][17] = TextDrawCreate(73.0, 251.0, "_");
	TextDrawBackgroundColor(ChangeMapp[playerid][17], 0);
	TextDrawFont(ChangeMapp[playerid][17], 4);
	TextDrawLetterSize(ChangeMapp[playerid][17], 0.5, 1.0);
	TextDrawUseBox(ChangeMapp[playerid][17], 1);
	TextDrawBoxColor(ChangeMapp[playerid][17], 119);
	TextDrawTextSize(ChangeMapp[playerid][17], 165.0, 70.0);
	TextDrawSetSelectable(ChangeMapp[playerid][17], true);

	ChangeMapp[playerid][18] = TextDrawCreate(239.0, 251.0, "_");
	TextDrawBackgroundColor(ChangeMapp[playerid][18], 0);
	TextDrawFont(ChangeMapp[playerid][18], 4);
	TextDrawLetterSize(ChangeMapp[playerid][18], 0.5, 1.0);
	TextDrawUseBox(ChangeMapp[playerid][18], 1);
	TextDrawBoxColor(ChangeMapp[playerid][18], 119);
	TextDrawTextSize(ChangeMapp[playerid][18], 165.000000, 70.000000);
	TextDrawSetSelectable(ChangeMapp[playerid][18], true);

	ChangeMapp[playerid][19] = TextDrawCreate(405.0, 251.0, "_");
	TextDrawBackgroundColor(ChangeMapp[playerid][19], 0);
	TextDrawFont(ChangeMapp[playerid][19], 4);
	TextDrawLetterSize(ChangeMapp[playerid][19], 0.5, 1.0);
	TextDrawUseBox(ChangeMapp[playerid][19], 1);
	TextDrawBoxColor(ChangeMapp[playerid][19], 119);
	TextDrawTextSize(ChangeMapp[playerid][19], 165.0, 70.0);
	TextDrawSetSelectable(ChangeMapp[playerid][19], true);
	
	ChangeMapp[playerid][20] = TextDrawCreate(72.000000, 233.000000, "_");
	TextDrawBackgroundColor(ChangeMapp[playerid][20], 0);
	TextDrawFont(ChangeMapp[playerid][20], 4);
	TextDrawLetterSize(ChangeMapp[playerid][20], 0.350000, 1.000000);
	TextDrawUseBox(ChangeMapp[playerid][20], 1);
	TextDrawBoxColor(ChangeMapp[playerid][20], 119);
	TextDrawTextSize(ChangeMapp[playerid][20], 19.000000, 14.000000);
	TextDrawSetSelectable(ChangeMapp[playerid][20], true);

	ChangeMapp[playerid][21] = TextDrawCreate(92.000000, 235.000000, "_");
	TextDrawBackgroundColor(ChangeMapp[playerid][21], 255);
	TextDrawFont(ChangeMapp[playerid][21], 2);
	TextDrawLetterSize(ChangeMapp[playerid][21], 0.270000, 1.000000);
	TextDrawColor(ChangeMapp[playerid][21], -1);
	TextDrawSetOutline(ChangeMapp[playerid][21], 1);
	TextDrawSetProportional(ChangeMapp[playerid][21], 1);
	TextDrawSetSelectable(ChangeMapp[playerid][21], 0);

	ChangeMapp[playerid][22] = TextDrawCreate(239.000000, 233.000000, "mdl-2000:deaths");
	TextDrawBackgroundColor(ChangeMapp[playerid][22], 0);
	TextDrawFont(ChangeMapp[playerid][22], 4);
	TextDrawLetterSize(ChangeMapp[playerid][22], 0.350000, 1.000000);
	TextDrawUseBox(ChangeMapp[playerid][22], 1);
	TextDrawBoxColor(ChangeMapp[playerid][22], 119);
	TextDrawTextSize(ChangeMapp[playerid][22], 19.000000, 14.000000);
	TextDrawSetSelectable(ChangeMapp[playerid][22], 0);

	ChangeMapp[playerid][23] = TextDrawCreate(259.000000, 235.000000, "_");
	TextDrawBackgroundColor(ChangeMapp[playerid][23], 255);
	TextDrawFont(ChangeMapp[playerid][23], 2);
	TextDrawLetterSize(ChangeMapp[playerid][23], 0.270000, 1.000000);
	TextDrawColor(ChangeMapp[playerid][23], -1);
	TextDrawSetOutline(ChangeMapp[playerid][23], 1);
	TextDrawSetProportional(ChangeMapp[playerid][23], 1);
	TextDrawSetSelectable(ChangeMapp[playerid][23], 0);

	ChangeMapp[playerid][24] = TextDrawCreate(406.000000, 233.000000, "mdl-2000:deaths");
	TextDrawBackgroundColor(ChangeMapp[playerid][24], 0);
	TextDrawFont(ChangeMapp[playerid][24], 4);
	TextDrawLetterSize(ChangeMapp[playerid][24], 0.350000, 1.000000);
	TextDrawUseBox(ChangeMapp[playerid][24], 1);
	TextDrawBoxColor(ChangeMapp[playerid][24], 119);
	TextDrawTextSize(ChangeMapp[playerid][24], 19.000000, 14.000000);
	TextDrawSetSelectable(ChangeMapp[playerid][24], 0);

	ChangeMapp[playerid][25] = TextDrawCreate(426.000000, 235.000000, "_");
	TextDrawBackgroundColor(ChangeMapp[playerid][25], 255);
	TextDrawFont(ChangeMapp[playerid][25], 2);
	TextDrawLetterSize(ChangeMapp[playerid][25], 0.270000, 1.000000);
	TextDrawColor(ChangeMapp[playerid][25], -1);
	TextDrawSetOutline(ChangeMapp[playerid][25], 1);
	TextDrawSetProportional(ChangeMapp[playerid][25], 1);
	TextDrawSetSelectable(ChangeMapp[playerid][25], 0);

	ChangeMapp[playerid][26] = TextDrawCreate(72.000000, 304.000000, "mdl-2000:deaths");
	TextDrawBackgroundColor(ChangeMapp[playerid][26], 0);
	TextDrawFont(ChangeMapp[playerid][26], 4);
	TextDrawLetterSize(ChangeMapp[playerid][26], 0.350000, 1.000000);
	TextDrawUseBox(ChangeMapp[playerid][26], 1);
	TextDrawBoxColor(ChangeMapp[playerid][26], 119);
	TextDrawTextSize(ChangeMapp[playerid][26], 19.000000, 14.000000);
	TextDrawSetSelectable(ChangeMapp[playerid][26], 0);

	ChangeMapp[playerid][27] = TextDrawCreate(92.000000, 306.000000, "_");
	TextDrawBackgroundColor(ChangeMapp[playerid][27], 255);
	TextDrawFont(ChangeMapp[playerid][27], 2);
	TextDrawLetterSize(ChangeMapp[playerid][27], 0.270000, 1.000000);
	TextDrawColor(ChangeMapp[playerid][27], -1);
	TextDrawSetOutline(ChangeMapp[playerid][27], 1);
	TextDrawSetProportional(ChangeMapp[playerid][27], 1);
	TextDrawSetSelectable(ChangeMapp[playerid][27], 0);

	ChangeMapp[playerid][28] = TextDrawCreate(239.000000, 304.000000, "mdl-2000:deaths");
	TextDrawBackgroundColor(ChangeMapp[playerid][28], 0);
	TextDrawFont(ChangeMapp[playerid][28], 4);
	TextDrawLetterSize(ChangeMapp[playerid][28], 0.350000, 1.000000);
	TextDrawUseBox(ChangeMapp[playerid][28], 1);
	TextDrawBoxColor(ChangeMapp[playerid][28], 119);
	TextDrawTextSize(ChangeMapp[playerid][28], 19.000000, 14.000000);
	TextDrawSetSelectable(ChangeMapp[playerid][28], 0);

	ChangeMapp[playerid][29] = TextDrawCreate(259.000000, 306.000000, "_");
	TextDrawBackgroundColor(ChangeMapp[playerid][29], 255);
	TextDrawFont(ChangeMapp[playerid][29], 2);
	TextDrawLetterSize(ChangeMapp[playerid][29], 0.270000, 1.000000);
	TextDrawColor(ChangeMapp[playerid][29], -1);
	TextDrawSetOutline(ChangeMapp[playerid][29], 1);
	TextDrawSetProportional(ChangeMapp[playerid][29], 1);
	TextDrawSetSelectable(ChangeMapp[playerid][29], 0);

	ChangeMapp[playerid][30] = TextDrawCreate(406.000000, 304.000000, "mdl-2000:deaths");
	TextDrawBackgroundColor(ChangeMapp[playerid][30], 0);
	TextDrawFont(ChangeMapp[playerid][30], 4);
	TextDrawLetterSize(ChangeMapp[playerid][30], 0.350000, 1.000000);
	TextDrawUseBox(ChangeMapp[playerid][30], 1);
	TextDrawBoxColor(ChangeMapp[playerid][30], 119);
	TextDrawTextSize(ChangeMapp[playerid][30], 19.000000, 14.000000);
	TextDrawSetSelectable(ChangeMapp[playerid][30], 0);

	ChangeMapp[playerid][31] = TextDrawCreate(426.000000, 306.000000, "_");
	TextDrawBackgroundColor(ChangeMapp[playerid][31], 255);
	TextDrawFont(ChangeMapp[playerid][31], 2);
	TextDrawLetterSize(ChangeMapp[playerid][31], 0.270000, 1.000000);
	TextDrawColor(ChangeMapp[playerid][31], -1);
	TextDrawSetOutline(ChangeMapp[playerid][31], 1);
	TextDrawSetProportional(ChangeMapp[playerid][31], 1);
	TextDrawSetSelectable(ChangeMapp[playerid][31], 0);

	ChangeMapp[playerid][32] = TextDrawCreate(149.0, 325.0, "_");
	TextDrawAlignment(ChangeMapp[playerid][32], 2);
	TextDrawBackgroundColor(ChangeMapp[playerid][32], 255);
	TextDrawFont(ChangeMapp[playerid][32], 2);
	TextDrawLetterSize(ChangeMapp[playerid][32], 0.27, 1.0);
	TextDrawColor(ChangeMapp[playerid][32], -1);
	TextDrawSetOutline(ChangeMapp[playerid][32], 1);
	TextDrawSetProportional(ChangeMapp[playerid][32], 1);
	TextDrawTextSize(ChangeMapp[playerid][32], 10.0, 110.0);
	TextDrawSetSelectable(ChangeMapp[playerid][32], true);

	ChangeMapp[playerid][33] = TextDrawCreate(322.0, 325.0, "_");
	TextDrawAlignment(ChangeMapp[playerid][33], 2);
	TextDrawBackgroundColor(ChangeMapp[playerid][33], 255);
	TextDrawFont(ChangeMapp[playerid][33], 2);
	TextDrawLetterSize(ChangeMapp[playerid][33], 0.27, 1.0);
	TextDrawColor(ChangeMapp[playerid][33], -1);
	TextDrawSetOutline(ChangeMapp[playerid][33], 1);
	TextDrawSetProportional(ChangeMapp[playerid][33], 1);
	TextDrawTextSize(ChangeMapp[playerid][33], 10.0, 118.0);
	TextDrawSetSelectable(ChangeMapp[playerid][33], true);
	
	ChangeMapp[playerid][40] = TextDrawCreate(491.0, 325.0, "_");
	TextDrawAlignment(ChangeMapp[playerid][40], 2);
	TextDrawBackgroundColor(ChangeMapp[playerid][40], 255);
	TextDrawFont(ChangeMapp[playerid][40], 2);
	TextDrawLetterSize(ChangeMapp[playerid][40], 0.27, 1.0);
	TextDrawColor(ChangeMapp[playerid][40], -1);
	TextDrawSetOutline(ChangeMapp[playerid][40], 1);
	TextDrawSetProportional(ChangeMapp[playerid][40], 1);
	TextDrawTextSize(ChangeMapp[playerid][40], 10.0, 118.0);
	TextDrawSetSelectable(ChangeMapp[playerid][40], true);
	
	ChangeMapp[playerid][7] = TextDrawCreate(45.050003, 161.500000, "_");
	TextDrawAlignment(ChangeMapp[playerid][7], 2);
	TextDrawBackgroundColor(ChangeMapp[playerid][7], 255);
	TextDrawFont(ChangeMapp[playerid][7], 2);
	TextDrawLetterSize(ChangeMapp[playerid][7], 0.250000, 1.000000);
	TextDrawColor(ChangeMapp[playerid][7], -1);
	TextDrawSetOutline(ChangeMapp[playerid][7], 1);
	TextDrawSetProportional(ChangeMapp[playerid][7], 1);
	TextDrawSetSelectable(ChangeMapp[playerid][7], 0);

	ChangeMapp[playerid][8] = TextDrawCreate(238.050003, 161.500000, "_");
	TextDrawAlignment(ChangeMapp[playerid][8], 2);
	TextDrawBackgroundColor(ChangeMapp[playerid][8], 255);
	TextDrawFont(ChangeMapp[playerid][8], 2);
	TextDrawLetterSize(ChangeMapp[playerid][8], 0.250000, 1.000000);
	TextDrawColor(ChangeMapp[playerid][8], -1);
	TextDrawSetOutline(ChangeMapp[playerid][8], 1);
	TextDrawSetProportional(ChangeMapp[playerid][8], 1);
	TextDrawSetSelectable(ChangeMapp[playerid][8], 0);

	ChangeMapp[playerid][34] = TextDrawCreate(263.049987, 161.500000, "_");
	TextDrawAlignment(ChangeMapp[playerid][34], 2);
	TextDrawBackgroundColor(ChangeMapp[playerid][34], 255);
	TextDrawFont(ChangeMapp[playerid][34], 2);
	TextDrawLetterSize(ChangeMapp[playerid][34], 0.250000, 1.000000);
	TextDrawColor(ChangeMapp[playerid][34], -1);
	TextDrawSetOutline(ChangeMapp[playerid][34], 1);
	TextDrawSetProportional(ChangeMapp[playerid][34], 1);
	TextDrawSetSelectable(ChangeMapp[playerid][34], 0);

	ChangeMapp[playerid][35] = TextDrawCreate(294.049987, 161.500000, "_");
	TextDrawAlignment(ChangeMapp[playerid][35], 2);
	TextDrawBackgroundColor(ChangeMapp[playerid][35], 255);
	TextDrawFont(ChangeMapp[playerid][35], 2);
	TextDrawLetterSize(ChangeMapp[playerid][35], 0.250000, 1.000000);
	TextDrawColor(ChangeMapp[playerid][35], -1);
	TextDrawSetOutline(ChangeMapp[playerid][35], 1);
	TextDrawSetProportional(ChangeMapp[playerid][35], 1);
	TextDrawSetSelectable(ChangeMapp[playerid][35], 0);

	ChangeMapp[playerid][36] = TextDrawCreate(350.049987, 161.500000, "_");
	TextDrawAlignment(ChangeMapp[playerid][36], 2);
	TextDrawBackgroundColor(ChangeMapp[playerid][36], 255);
	TextDrawFont(ChangeMapp[playerid][36], 2);
	TextDrawLetterSize(ChangeMapp[playerid][36], 0.250000, 1.000000);
	TextDrawColor(ChangeMapp[playerid][36], -1);
	TextDrawSetOutline(ChangeMapp[playerid][36], 1);
	TextDrawSetProportional(ChangeMapp[playerid][36], 1);
	TextDrawSetSelectable(ChangeMapp[playerid][36], 0);

	ChangeMapp[playerid][37] = TextDrawCreate(543.049987, 161.500000, "_");
	TextDrawAlignment(ChangeMapp[playerid][37], 2);
	TextDrawBackgroundColor(ChangeMapp[playerid][37], 255);
	TextDrawFont(ChangeMapp[playerid][37], 2);
	TextDrawLetterSize(ChangeMapp[playerid][37], 0.250000, 1.000000);
	TextDrawColor(ChangeMapp[playerid][37], -1);
	TextDrawSetOutline(ChangeMapp[playerid][37], 1);
	TextDrawSetProportional(ChangeMapp[playerid][37], 1);
	TextDrawSetSelectable(ChangeMapp[playerid][37], 0);

	ChangeMapp[playerid][38] = TextDrawCreate(567.049987, 161.500000, "_");
	TextDrawAlignment(ChangeMapp[playerid][38], 2);
	TextDrawBackgroundColor(ChangeMapp[playerid][38], 255);
	TextDrawFont(ChangeMapp[playerid][38], 2);
	TextDrawLetterSize(ChangeMapp[playerid][38], 0.250000, 1.000000);
	TextDrawColor(ChangeMapp[playerid][38], -1);
	TextDrawSetOutline(ChangeMapp[playerid][38], 1);
	TextDrawSetProportional(ChangeMapp[playerid][38], 1);
	TextDrawSetSelectable(ChangeMapp[playerid][38], 0);

	ChangeMapp[playerid][39] = TextDrawCreate(598.049987, 161.500000, "_");
	TextDrawAlignment(ChangeMapp[playerid][39], 2);
	TextDrawBackgroundColor(ChangeMapp[playerid][39], 255);
	TextDrawFont(ChangeMapp[playerid][39], 2);
	TextDrawLetterSize(ChangeMapp[playerid][39], 0.250000, 1.000000);
	TextDrawColor(ChangeMapp[playerid][39], -1);
	TextDrawSetOutline(ChangeMapp[playerid][39], 1);
	TextDrawSetProportional(ChangeMapp[playerid][39], 1);
	TextDrawSetSelectable(ChangeMapp[playerid][39], 0);
	
	Glasses[playerid] = TextDrawCreate(0.000000, 0.000000, "_");
	TextDrawLetterSize(Glasses[playerid], 0.500000, 50.099945);
	TextDrawUseBox(Glasses[playerid], 1);
	TextDrawBoxColor(Glasses[playerid], 34);
	TextDrawTextSize(Glasses[playerid], 640.000000, 0.000000);
	TextDrawSetSelectable(Glasses[playerid], 0);

	DuelInfo[playerid][16] = TextDrawCreate(7.000000, 216.000000, "_");
	TextDrawLetterSize(DuelInfo[playerid][16], 0.000000, 9.199989);
	TextDrawUseBox(DuelInfo[playerid][16], 1);
	TextDrawBoxColor(DuelInfo[playerid][16], 85);
	TextDrawTextSize(DuelInfo[playerid][16], 155.000000, 0.000000);
	TextDrawSetSelectable(DuelInfo[playerid][16], 0);

	DuelInfo[playerid][17] = TextDrawCreate(84.000000, 219.000000, "_");
	TextDrawAlignment(DuelInfo[playerid][17], 2);
	TextDrawBackgroundColor(DuelInfo[playerid][17], 255);
	TextDrawFont(DuelInfo[playerid][17], 2);
	TextDrawLetterSize(DuelInfo[playerid][17], 0.329998, 1.000000);
	TextDrawColor(DuelInfo[playerid][17], -1);
	TextDrawSetOutline(DuelInfo[playerid][17], 1);
	TextDrawSetProportional(DuelInfo[playerid][17], 1);
	TextDrawSetSelectable(DuelInfo[playerid][17], 0);
	
	DuelInfo[playerid][46] = TextDrawCreate(7.0, 169.0, "_");
	TextDrawLetterSize(DuelInfo[playerid][46], 0.0, 14.4);
	TextDrawUseBox(DuelInfo[playerid][46], 1);
	TextDrawBoxColor(DuelInfo[playerid][46], 85);
	TextDrawTextSize(DuelInfo[playerid][46], 155.0, 0.0);
	TextDrawSetSelectable(DuelInfo[playerid][46], 0);

	DuelInfo[playerid][47] = TextDrawCreate(81.0, 173.0, "_");
	TextDrawAlignment(DuelInfo[playerid][47], 2);
	TextDrawBackgroundColor(DuelInfo[playerid][47], 255);
	TextDrawFont(DuelInfo[playerid][47], 2);
	TextDrawLetterSize(DuelInfo[playerid][47], 0.26, 1.3);
	TextDrawColor(DuelInfo[playerid][47], -1);
	TextDrawSetOutline(DuelInfo[playerid][47], 1);
	TextDrawSetProportional(DuelInfo[playerid][47], 1);
	TextDrawSetSelectable(DuelInfo[playerid][47], 0);

	DuelInfo[playerid][0] = TextDrawCreate(7.000000, 131.000000, "_");
	TextDrawLetterSize(DuelInfo[playerid][0], 0.000000, 20.199996);
	TextDrawUseBox(DuelInfo[playerid][0], 1);
	TextDrawBoxColor(DuelInfo[playerid][0], ColorTextDraw[1]);
	TextDrawTextSize(DuelInfo[playerid][0], 155.000000, 0.000000);
	TextDrawSetSelectable(DuelInfo[playerid][0], 0);
	
	DuelInfo[playerid][1] = TextDrawCreate(82.000000, 134.000000, "_");
	TextDrawAlignment(DuelInfo[playerid][1], 2);
	TextDrawBackgroundColor(DuelInfo[playerid][1], 255);
	TextDrawFont(DuelInfo[playerid][1], 2);
	TextDrawLetterSize(DuelInfo[playerid][1], 0.329998, 1.000000);
	TextDrawColor(DuelInfo[playerid][1], -1);
	TextDrawSetOutline(DuelInfo[playerid][1], 1);
	TextDrawSetProportional(DuelInfo[playerid][1], 1);
	TextDrawSetSelectable(DuelInfo[playerid][1], 0);

	DuelInfo[playerid][2] = TextDrawCreate(7.000000, 149.000000, "_");
	TextDrawBackgroundColor(DuelInfo[playerid][2], 255);
	TextDrawFont(DuelInfo[playerid][2], 2);
	TextDrawLetterSize(DuelInfo[playerid][2], 0.200000, 1.000000);
	TextDrawColor(DuelInfo[playerid][2], -1);
	TextDrawSetOutline(DuelInfo[playerid][2], 1);
	TextDrawSetProportional(DuelInfo[playerid][2], 1);
	TextDrawUseBox(DuelInfo[playerid][2], 1);
	TextDrawBoxColor(DuelInfo[playerid][2], ColorTextDraw[0]);
	TextDrawTextSize(DuelInfo[playerid][2], 155.000000, 10.000000);
	TextDrawSetSelectable(DuelInfo[playerid][2], true);

	DuelInfo[playerid][3] = TextDrawCreate(7.000000, 164.000000, "_");
	TextDrawBackgroundColor(DuelInfo[playerid][3], 255);
	TextDrawFont(DuelInfo[playerid][3], 2);
	TextDrawLetterSize(DuelInfo[playerid][3], 0.230000, 1.000000);
	TextDrawColor(DuelInfo[playerid][3], -1);
	TextDrawSetOutline(DuelInfo[playerid][3], 1);
	TextDrawSetProportional(DuelInfo[playerid][3], 1);
	TextDrawUseBox(DuelInfo[playerid][3], 1);
	TextDrawBoxColor(DuelInfo[playerid][3], ColorTextDraw[2]);
	TextDrawTextSize(DuelInfo[playerid][3], 155.000000, 10.000000);
	TextDrawSetSelectable(DuelInfo[playerid][3], true);

	DuelInfo[playerid][4] = TextDrawCreate(7.000000, 178.000000, "_");
	TextDrawBackgroundColor(DuelInfo[playerid][4], 255);
	TextDrawFont(DuelInfo[playerid][4], 2);
	TextDrawLetterSize(DuelInfo[playerid][4], 0.230000, 1.000000);
	TextDrawColor(DuelInfo[playerid][4], -1);
	TextDrawSetOutline(DuelInfo[playerid][4], 1);
	TextDrawSetProportional(DuelInfo[playerid][4], 1);
	TextDrawUseBox(DuelInfo[playerid][4], 1);
	TextDrawBoxColor(DuelInfo[playerid][4], ColorTextDraw[1]);
	TextDrawTextSize(DuelInfo[playerid][4], 155.000000, 10.000000);
	TextDrawSetSelectable(DuelInfo[playerid][4], true);

	DuelInfo[playerid][5] = TextDrawCreate(7.000000, 192.000000, "_");
	TextDrawBackgroundColor(DuelInfo[playerid][5], 255);
	TextDrawFont(DuelInfo[playerid][5], 2);
	TextDrawLetterSize(DuelInfo[playerid][5], 0.230000, 1.000000);
	TextDrawColor(DuelInfo[playerid][5], -1);
	TextDrawSetOutline(DuelInfo[playerid][5], 1);
	TextDrawSetProportional(DuelInfo[playerid][5], 1);
	TextDrawUseBox(DuelInfo[playerid][5], 1);
	TextDrawBoxColor(DuelInfo[playerid][5], ColorTextDraw[2]);
	TextDrawTextSize(DuelInfo[playerid][5], 155.000000, 10.000000);
	TextDrawSetSelectable(DuelInfo[playerid][5], true);

	DuelInfo[playerid][6] = TextDrawCreate(7.000000, 206.000000, "_");
	TextDrawBackgroundColor(DuelInfo[playerid][6], 255);
	TextDrawFont(DuelInfo[playerid][6], 2);
	TextDrawLetterSize(DuelInfo[playerid][6], 0.230000, 1.000000);
	TextDrawColor(DuelInfo[playerid][6], -1);
	TextDrawSetOutline(DuelInfo[playerid][6], 1);
	TextDrawSetProportional(DuelInfo[playerid][6], 1);
	TextDrawUseBox(DuelInfo[playerid][6], 1);
	TextDrawBoxColor(DuelInfo[playerid][6], ColorTextDraw[1]);
	TextDrawTextSize(DuelInfo[playerid][6], 155.000000, 10.000000);
	TextDrawSetSelectable(DuelInfo[playerid][6], true);

	DuelInfo[playerid][7] = TextDrawCreate(7.000000, 220.000000, "_");
	TextDrawBackgroundColor(DuelInfo[playerid][7], 255);
	TextDrawFont(DuelInfo[playerid][7], 2);
	TextDrawLetterSize(DuelInfo[playerid][7], 0.230000, 1.000000);
	TextDrawColor(DuelInfo[playerid][7], -1);
	TextDrawSetOutline(DuelInfo[playerid][7], 1);
	TextDrawSetProportional(DuelInfo[playerid][7], 1);
	TextDrawUseBox(DuelInfo[playerid][7], 1);
	TextDrawBoxColor(DuelInfo[playerid][7], ColorTextDraw[2]);
	TextDrawTextSize(DuelInfo[playerid][7], 155.000000, 10.000000);
	TextDrawSetSelectable(DuelInfo[playerid][7], true);

	DuelInfo[playerid][8] = TextDrawCreate(7.000000, 234.000000, "_");
	TextDrawBackgroundColor(DuelInfo[playerid][8], 255);
	TextDrawFont(DuelInfo[playerid][8], 2);
	TextDrawLetterSize(DuelInfo[playerid][8], 0.230000, 1.000000);
	TextDrawColor(DuelInfo[playerid][8], -1);
	TextDrawSetOutline(DuelInfo[playerid][8], 1);
	TextDrawSetProportional(DuelInfo[playerid][8], 1);
	TextDrawUseBox(DuelInfo[playerid][8], 1);
	TextDrawBoxColor(DuelInfo[playerid][8], ColorTextDraw[1]);
	TextDrawTextSize(DuelInfo[playerid][8], 155.000000, 10.000000);
	TextDrawSetSelectable(DuelInfo[playerid][8], true);

	DuelInfo[playerid][9] = TextDrawCreate(7.000000, 248.000000, "_");
	TextDrawBackgroundColor(DuelInfo[playerid][9], 255);
	TextDrawFont(DuelInfo[playerid][9], 2);
	TextDrawLetterSize(DuelInfo[playerid][9], 0.230000, 1.000000);
	TextDrawColor(DuelInfo[playerid][9], -1);
	TextDrawSetOutline(DuelInfo[playerid][9], 1);
	TextDrawSetProportional(DuelInfo[playerid][9], 1);
	TextDrawUseBox(DuelInfo[playerid][9], 1);
	TextDrawBoxColor(DuelInfo[playerid][9], ColorTextDraw[2]);
	TextDrawTextSize(DuelInfo[playerid][9], 155.000000, 10.000000);
	TextDrawSetSelectable(DuelInfo[playerid][9], true);

	DuelInfo[playerid][10] = TextDrawCreate(7.000000, 262.000000, "_");
	TextDrawBackgroundColor(DuelInfo[playerid][10], 255);
	TextDrawFont(DuelInfo[playerid][10], 2);
	TextDrawLetterSize(DuelInfo[playerid][10], 0.230000, 1.000000);
	TextDrawColor(DuelInfo[playerid][10], -1);
	TextDrawSetOutline(DuelInfo[playerid][10], 1);
	TextDrawSetProportional(DuelInfo[playerid][10], 1);
	TextDrawUseBox(DuelInfo[playerid][10], 1);
	TextDrawBoxColor(DuelInfo[playerid][10], ColorTextDraw[1]);
	TextDrawTextSize(DuelInfo[playerid][10], 155.000000, 10.000000);
	TextDrawSetSelectable(DuelInfo[playerid][10], true);

	DuelInfo[playerid][11] = TextDrawCreate(7.000000, 276.000000, "_");
	TextDrawBackgroundColor(DuelInfo[playerid][11], 255);
	TextDrawFont(DuelInfo[playerid][11], 2);
	TextDrawLetterSize(DuelInfo[playerid][11], 0.230000, 1.000000);
	TextDrawColor(DuelInfo[playerid][11], -1);
	TextDrawSetOutline(DuelInfo[playerid][11], 1);
	TextDrawSetProportional(DuelInfo[playerid][11], 1);
	TextDrawUseBox(DuelInfo[playerid][11], 1);
	TextDrawBoxColor(DuelInfo[playerid][11], ColorTextDraw[2]);
	TextDrawTextSize(DuelInfo[playerid][11], 155.000000, 10.000000);
	TextDrawSetSelectable(DuelInfo[playerid][11], true);

	DuelInfo[playerid][12] = TextDrawCreate(7.000000, 290.000000, "_");
	TextDrawBackgroundColor(DuelInfo[playerid][12], 255);
	TextDrawFont(DuelInfo[playerid][12], 2);
	TextDrawLetterSize(DuelInfo[playerid][12], 0.230000, 1.000000);
	TextDrawColor(DuelInfo[playerid][12], -1);
	TextDrawSetOutline(DuelInfo[playerid][12], 1);
	TextDrawSetProportional(DuelInfo[playerid][12], 1);
	TextDrawUseBox(DuelInfo[playerid][12], 1);
	TextDrawBoxColor(DuelInfo[playerid][12], ColorTextDraw[1]);
	TextDrawTextSize(DuelInfo[playerid][12], 155.000000, 10.000000);
	TextDrawSetSelectable(DuelInfo[playerid][12], true);
	
	DuelInfo[playerid][13] = TextDrawCreate(7.000000, 304.000000, "_");
	TextDrawBackgroundColor(DuelInfo[playerid][13], 255);
	TextDrawFont(DuelInfo[playerid][13], 2);
	TextDrawLetterSize(DuelInfo[playerid][13], 0.230000, 1.000000);
	TextDrawColor(DuelInfo[playerid][13], -1);
	TextDrawSetOutline(DuelInfo[playerid][13], 1);
	TextDrawSetProportional(DuelInfo[playerid][13], 1);
	TextDrawUseBox(DuelInfo[playerid][13], 1);
	TextDrawBoxColor(DuelInfo[playerid][13], ColorTextDraw[2]);
	TextDrawTextSize(DuelInfo[playerid][13], 155.000000, 10.000000);
	TextDrawSetSelectable(DuelInfo[playerid][13], true);
	
	DuelInfo[playerid][35] = TextDrawCreate(151.000000, 164.000000, "_");
	TextDrawAlignment(DuelInfo[playerid][35], 3);
	TextDrawBackgroundColor(DuelInfo[playerid][35], 255);
	TextDrawFont(DuelInfo[playerid][35], 2);
	TextDrawLetterSize(DuelInfo[playerid][35], 0.230000, 1.000000);
	TextDrawColor(DuelInfo[playerid][35], -1);
	TextDrawSetOutline(DuelInfo[playerid][35], 1);
	TextDrawSetProportional(DuelInfo[playerid][35], 1);
	TextDrawSetSelectable(DuelInfo[playerid][35], 0);

	DuelInfo[playerid][36] = TextDrawCreate(151.000000, 178.000000, "_");
	TextDrawAlignment(DuelInfo[playerid][36], 3);
	TextDrawBackgroundColor(DuelInfo[playerid][36], 255);
	TextDrawFont(DuelInfo[playerid][36], 2);
	TextDrawLetterSize(DuelInfo[playerid][36], 0.230000, 1.000000);
	TextDrawColor(DuelInfo[playerid][36], -1);
	TextDrawSetOutline(DuelInfo[playerid][36], 1);
	TextDrawSetProportional(DuelInfo[playerid][36], 1);
	TextDrawSetSelectable(DuelInfo[playerid][36], 0);

	DuelInfo[playerid][37] = TextDrawCreate(151.000000, 192.000000, "_");
	TextDrawAlignment(DuelInfo[playerid][37], 3);
	TextDrawBackgroundColor(DuelInfo[playerid][37], 255);
	TextDrawFont(DuelInfo[playerid][37], 2);
	TextDrawLetterSize(DuelInfo[playerid][37], 0.230000, 1.000000);
	TextDrawColor(DuelInfo[playerid][37], -1);
	TextDrawSetOutline(DuelInfo[playerid][37], 1);
	TextDrawSetProportional(DuelInfo[playerid][37], 1);
	TextDrawSetSelectable(DuelInfo[playerid][37], 0);

	DuelInfo[playerid][38] = TextDrawCreate(151.000000, 206.000000, "_");
	TextDrawAlignment(DuelInfo[playerid][38], 3);
	TextDrawBackgroundColor(DuelInfo[playerid][38], 255);
	TextDrawFont(DuelInfo[playerid][38], 2);
	TextDrawLetterSize(DuelInfo[playerid][38], 0.230000, 1.000000);
	TextDrawColor(DuelInfo[playerid][38], -1);
	TextDrawSetOutline(DuelInfo[playerid][38], 1);
	TextDrawSetProportional(DuelInfo[playerid][38], 1);
	TextDrawSetSelectable(DuelInfo[playerid][38], 0);

	DuelInfo[playerid][39] = TextDrawCreate(151.000000, 220.000000, "_");
	TextDrawAlignment(DuelInfo[playerid][39], 3);
	TextDrawBackgroundColor(DuelInfo[playerid][39], 255);
	TextDrawFont(DuelInfo[playerid][39], 2);
	TextDrawLetterSize(DuelInfo[playerid][39], 0.230000, 1.000000);
	TextDrawColor(DuelInfo[playerid][39], -1);
	TextDrawSetOutline(DuelInfo[playerid][39], 1);
	TextDrawSetProportional(DuelInfo[playerid][39], 1);
	TextDrawSetSelectable(DuelInfo[playerid][39], 0);

	DuelInfo[playerid][40] = TextDrawCreate(151.000000, 234.000000, "_");
	TextDrawAlignment(DuelInfo[playerid][40], 3);
	TextDrawBackgroundColor(DuelInfo[playerid][40], 255);
	TextDrawFont(DuelInfo[playerid][40], 2);
	TextDrawLetterSize(DuelInfo[playerid][40], 0.230000, 1.000000);
	TextDrawColor(DuelInfo[playerid][40], -1);
	TextDrawSetOutline(DuelInfo[playerid][40], 1);
	TextDrawSetProportional(DuelInfo[playerid][40], 1);
	TextDrawSetSelectable(DuelInfo[playerid][40], 0);

	DuelInfo[playerid][41] = TextDrawCreate(151.000000, 248.000000, "_");
	TextDrawAlignment(DuelInfo[playerid][41], 3);
	TextDrawBackgroundColor(DuelInfo[playerid][41], 255);
	TextDrawFont(DuelInfo[playerid][41], 2);
	TextDrawLetterSize(DuelInfo[playerid][41], 0.230000, 1.000000);
	TextDrawColor(DuelInfo[playerid][41], -1);
	TextDrawSetOutline(DuelInfo[playerid][41], 1);
	TextDrawSetProportional(DuelInfo[playerid][41], 1);
	TextDrawSetSelectable(DuelInfo[playerid][41], 0);

	DuelInfo[playerid][42] = TextDrawCreate(151.000000, 262.000000, "_");
	TextDrawAlignment(DuelInfo[playerid][42], 3);
	TextDrawBackgroundColor(DuelInfo[playerid][42], 255);
	TextDrawFont(DuelInfo[playerid][42], 2);
	TextDrawLetterSize(DuelInfo[playerid][42], 0.230000, 1.000000);
	TextDrawColor(DuelInfo[playerid][42], -1);
	TextDrawSetOutline(DuelInfo[playerid][42], 1);
	TextDrawSetProportional(DuelInfo[playerid][42], 1);
	TextDrawSetSelectable(DuelInfo[playerid][42], 0);

	DuelInfo[playerid][43] = TextDrawCreate(151.000000, 276.000000, "_");
	TextDrawAlignment(DuelInfo[playerid][43], 3);
	TextDrawBackgroundColor(DuelInfo[playerid][43], 255);
	TextDrawFont(DuelInfo[playerid][43], 2);
	TextDrawLetterSize(DuelInfo[playerid][43], 0.230000, 1.000000);
	TextDrawColor(DuelInfo[playerid][43], -1);
	TextDrawSetOutline(DuelInfo[playerid][43], 1);
	TextDrawSetProportional(DuelInfo[playerid][43], 1);
	TextDrawSetSelectable(DuelInfo[playerid][43], 0);

	DuelInfo[playerid][44] = TextDrawCreate(151.000000, 290.000000, "_");
	TextDrawAlignment(DuelInfo[playerid][44], 3);
	TextDrawBackgroundColor(DuelInfo[playerid][44], 255);
	TextDrawFont(DuelInfo[playerid][44], 2);
	TextDrawLetterSize(DuelInfo[playerid][44], 0.230000, 1.000000);
	TextDrawColor(DuelInfo[playerid][44], -1);
	TextDrawSetOutline(DuelInfo[playerid][44], 1);
	TextDrawSetProportional(DuelInfo[playerid][44], 1);
	TextDrawSetSelectable(DuelInfo[playerid][44], 0);
	
	DuelInfo[playerid][14] = TextDrawCreate(635.0, 428.5, "_");
	TextDrawAlignment(DuelInfo[playerid][14], 3);
	TextDrawBackgroundColor(DuelInfo[playerid][14], 255);
	TextDrawFont(DuelInfo[playerid][14], 2);
	TextDrawLetterSize(DuelInfo[playerid][14], 0.18, 1.0);
	TextDrawColor(DuelInfo[playerid][14], -1);
	TextDrawSetOutline(DuelInfo[playerid][14], 0);
	TextDrawSetProportional(DuelInfo[playerid][14], 1);
	TextDrawSetShadow(DuelInfo[playerid][14], 1);
	TextDrawSetSelectable(DuelInfo[playerid][14], 0);

	DuelInfo[playerid][15] = TextDrawCreate(7.000000, 318.000000, "_");
	TextDrawBackgroundColor(DuelInfo[playerid][15], 255);
	TextDrawFont(DuelInfo[playerid][15], 2);
	TextDrawLetterSize(DuelInfo[playerid][15], 0.230000, 1.000000);
	TextDrawColor(DuelInfo[playerid][15], -1);
	TextDrawSetOutline(DuelInfo[playerid][15], 1);
	TextDrawSetProportional(DuelInfo[playerid][15], 1);
	TextDrawUseBox(DuelInfo[playerid][15], 1);
	TextDrawBoxColor(DuelInfo[playerid][15], 102);
	TextDrawTextSize(DuelInfo[playerid][15], 155.000000, 0.000000);
	TextDrawSetSelectable(DuelInfo[playerid][15], 0);

    DuelInfo[playerid][18] = TextDrawCreate(104.000000, 132.000000, "_");
	TextDrawLetterSize(DuelInfo[playerid][18], 0.500000, 6.299983);
	TextDrawUseBox(DuelInfo[playerid][18], 1);
	TextDrawBoxColor(DuelInfo[playerid][18], 51);
	TextDrawTextSize(DuelInfo[playerid][18], 528.000000, 0.000000);
	TextDrawSetSelectable(DuelInfo[playerid][18], 0);

	DuelInfo[playerid][19] = TextDrawCreate(105.000000, 130.000000, "_");
	TextDrawBackgroundColor(DuelInfo[playerid][19], 255);
	TextDrawFont(DuelInfo[playerid][19], 2);
	TextDrawLetterSize(DuelInfo[playerid][19], 0.479999, 1.500000);
	TextDrawColor(DuelInfo[playerid][19], -1);
	TextDrawSetOutline(DuelInfo[playerid][19], 1);
	TextDrawSetProportional(DuelInfo[playerid][19], 1);
	TextDrawSetSelectable(DuelInfo[playerid][19], 0);

	DuelInfo[playerid][20] = TextDrawCreate(104.000000, 148.000000, "_");
	TextDrawLetterSize(DuelInfo[playerid][20], 0.310000, 1.200000);
	TextDrawUseBox(DuelInfo[playerid][20], 1);
	TextDrawBoxColor(DuelInfo[playerid][20], 153);
	TextDrawTextSize(DuelInfo[playerid][20], 528.000000, 0.000000);
	TextDrawSetSelectable(DuelInfo[playerid][20], 0);

	DuelInfo[playerid][21] = TextDrawCreate(181.000000, 149.500000, "_");
	TextDrawBackgroundColor(DuelInfo[playerid][21], 255);
	TextDrawFont(DuelInfo[playerid][21], 2);
	TextDrawLetterSize(DuelInfo[playerid][21], 0.250000, 0.839999);
	TextDrawColor(DuelInfo[playerid][21], -1);
	TextDrawSetOutline(DuelInfo[playerid][21], 0);
	TextDrawSetProportional(DuelInfo[playerid][21], 1);
	TextDrawSetShadow(DuelInfo[playerid][21], 0);
	TextDrawSetSelectable(DuelInfo[playerid][21], 0);

	DuelInfo[playerid][22] = TextDrawCreate(104.000000, 165.000000, " 1");
	TextDrawBackgroundColor(DuelInfo[playerid][22], 255);
	TextDrawFont(DuelInfo[playerid][22], 3);
	TextDrawLetterSize(DuelInfo[playerid][22], 0.310000, 1.000000);
	TextDrawColor(DuelInfo[playerid][22], -1);
	TextDrawSetOutline(DuelInfo[playerid][22], 0);
	TextDrawSetProportional(DuelInfo[playerid][22], 1);
	TextDrawSetShadow(DuelInfo[playerid][22], 1);
	TextDrawUseBox(DuelInfo[playerid][22], 1);
	TextDrawBoxColor(DuelInfo[playerid][22], 119);
	TextDrawTextSize(DuelInfo[playerid][22], 528.000000, 0.000000);
	TextDrawSetSelectable(DuelInfo[playerid][22], 0);

	DuelInfo[playerid][23] = TextDrawCreate(104.000000, 180.000000, " 2");
	TextDrawBackgroundColor(DuelInfo[playerid][23], 255);
	TextDrawFont(DuelInfo[playerid][23], 3);
	TextDrawLetterSize(DuelInfo[playerid][23], 0.310000, 1.000000);
	TextDrawColor(DuelInfo[playerid][23], -1);
	TextDrawSetOutline(DuelInfo[playerid][23], 0);
	TextDrawSetProportional(DuelInfo[playerid][23], 1);
	TextDrawSetShadow(DuelInfo[playerid][23], 1);
	TextDrawUseBox(DuelInfo[playerid][23], 1);
	TextDrawBoxColor(DuelInfo[playerid][23], 119);
	TextDrawTextSize(DuelInfo[playerid][23], 528.000000, 0.000000);
	TextDrawSetSelectable(DuelInfo[playerid][23], 0);

    DuelInfo[playerid][24] = TextDrawCreate(120.000000, 165.000000, "_");
	TextDrawBackgroundColor(DuelInfo[playerid][24], 255);
	TextDrawFont(DuelInfo[playerid][24], 2);
	TextDrawLetterSize(DuelInfo[playerid][24], 0.239999, 0.839999);
	TextDrawColor(DuelInfo[playerid][24], -1);
	TextDrawSetOutline(DuelInfo[playerid][24], 0);
	TextDrawSetProportional(DuelInfo[playerid][24], 1);
	TextDrawSetShadow(DuelInfo[playerid][24], 0);
	TextDrawSetSelectable(DuelInfo[playerid][24], 0);
	
	DuelInfo[playerid][25] = TextDrawCreate(279.000000, 165.000000, "_");
	TextDrawAlignment(DuelInfo[playerid][25], 2);
	TextDrawBackgroundColor(DuelInfo[playerid][25], 255);
	TextDrawFont(DuelInfo[playerid][25], 2);
	TextDrawLetterSize(DuelInfo[playerid][25], 0.250000, 0.839999);
	TextDrawColor(DuelInfo[playerid][25], -1);
	TextDrawSetOutline(DuelInfo[playerid][25], 0);
	TextDrawSetProportional(DuelInfo[playerid][25], 1);
	TextDrawSetShadow(DuelInfo[playerid][25], 1);
	TextDrawSetSelectable(DuelInfo[playerid][25], 0);
	
	DuelInfo[playerid][26] = TextDrawCreate(349.000000, 165.000000, "_");
	TextDrawAlignment(DuelInfo[playerid][26], 2);
	TextDrawBackgroundColor(DuelInfo[playerid][26], 255);
	TextDrawFont(DuelInfo[playerid][26], 2);
	TextDrawLetterSize(DuelInfo[playerid][26], 0.250000, 0.839999);
	TextDrawColor(DuelInfo[playerid][26], -1);
	TextDrawSetOutline(DuelInfo[playerid][26], 0);
	TextDrawSetProportional(DuelInfo[playerid][26], 1);
	TextDrawSetShadow(DuelInfo[playerid][26], 1);
	TextDrawSetSelectable(DuelInfo[playerid][26], 0);

    DuelInfo[playerid][27] = TextDrawCreate(426.000000, 165.000000, "_");
	TextDrawAlignment(DuelInfo[playerid][27], 2);
	TextDrawBackgroundColor(DuelInfo[playerid][27], 255);
	TextDrawFont(DuelInfo[playerid][27], 2);
	TextDrawLetterSize(DuelInfo[playerid][27], 0.250000, 0.839999);
	TextDrawColor(DuelInfo[playerid][27], -1);
	TextDrawSetOutline(DuelInfo[playerid][27], 0);
	TextDrawSetProportional(DuelInfo[playerid][27], 1);
	TextDrawSetShadow(DuelInfo[playerid][27], 1);
	TextDrawSetSelectable(DuelInfo[playerid][27], 0);

	DuelInfo[playerid][28] = TextDrawCreate(490.000000, 165.000000, "_");
	TextDrawAlignment(DuelInfo[playerid][28], 2);
	TextDrawBackgroundColor(DuelInfo[playerid][28], 255);
	TextDrawFont(DuelInfo[playerid][28], 2);
	TextDrawLetterSize(DuelInfo[playerid][28], 0.250000, 0.839999);
	TextDrawColor(DuelInfo[playerid][28], -1);
	TextDrawSetOutline(DuelInfo[playerid][28], 0);
	TextDrawSetProportional(DuelInfo[playerid][28], 1);
	TextDrawSetShadow(DuelInfo[playerid][28], 1);
	TextDrawSetSelectable(DuelInfo[playerid][28], 0);
	
	DuelInfo[playerid][29] = TextDrawCreate(279.000000, 149.500000, "_");
	TextDrawAlignment(DuelInfo[playerid][29], 2);
	TextDrawBackgroundColor(DuelInfo[playerid][29], 255);
	TextDrawFont(DuelInfo[playerid][29], 2);
	TextDrawLetterSize(DuelInfo[playerid][29], 0.250000, 0.839999);
	TextDrawColor(DuelInfo[playerid][29], -1);
	TextDrawSetOutline(DuelInfo[playerid][29], 0);
	TextDrawSetProportional(DuelInfo[playerid][29], 1);
	TextDrawSetShadow(DuelInfo[playerid][29], 1);
	TextDrawSetSelectable(DuelInfo[playerid][29], 0);
	
	DuelInfo[playerid][30] = TextDrawCreate(349.000000, 149.500000, "_");
	TextDrawAlignment(DuelInfo[playerid][30], 2);
	TextDrawBackgroundColor(DuelInfo[playerid][30], 255);
	TextDrawFont(DuelInfo[playerid][30], 2);
	TextDrawLetterSize(DuelInfo[playerid][30], 0.250000, 0.839999);
	TextDrawColor(DuelInfo[playerid][30], -1);
	TextDrawSetOutline(DuelInfo[playerid][30], 0);
	TextDrawSetProportional(DuelInfo[playerid][30], 1);
	TextDrawSetShadow(DuelInfo[playerid][30], 1);
	TextDrawSetSelectable(DuelInfo[playerid][30], 0);

	DuelInfo[playerid][31] = TextDrawCreate(426.000000, 149.500000, "_");
	TextDrawAlignment(DuelInfo[playerid][31], 2);
	TextDrawBackgroundColor(DuelInfo[playerid][31], 255);
	TextDrawFont(DuelInfo[playerid][31], 2);
	TextDrawLetterSize(DuelInfo[playerid][31], 0.250000, 0.839999);
	TextDrawColor(DuelInfo[playerid][31], -1);
	TextDrawSetOutline(DuelInfo[playerid][31], 0);
	TextDrawSetProportional(DuelInfo[playerid][31], 1);
	TextDrawSetShadow(DuelInfo[playerid][31], 1);
	TextDrawSetSelectable(DuelInfo[playerid][31], 0);

	DuelInfo[playerid][32] = TextDrawCreate(490.000000, 149.500000, "_");
	TextDrawAlignment(DuelInfo[playerid][32], 2);
	TextDrawBackgroundColor(DuelInfo[playerid][32], 255);
	TextDrawFont(DuelInfo[playerid][32], 2);
	TextDrawLetterSize(DuelInfo[playerid][32], 0.250000, 0.839999);
	TextDrawColor(DuelInfo[playerid][32], -1);
	TextDrawSetOutline(DuelInfo[playerid][32], 0);
	TextDrawSetProportional(DuelInfo[playerid][32], 1);
	TextDrawSetShadow(DuelInfo[playerid][32], 1);
	TextDrawSetSelectable(DuelInfo[playerid][32], 0);

	DuelInfo[playerid][33] = TextDrawCreate(526.000000, 164.000000, "_");
	TextDrawAlignment(DuelInfo[playerid][33], 3);
	TextDrawBackgroundColor(DuelInfo[playerid][33], -1);
	TextDrawFont(DuelInfo[playerid][33], 1);
	TextDrawLetterSize(DuelInfo[playerid][33], 0.320000, 1.200000);
	TextDrawColor(DuelInfo[playerid][33], -1);
	TextDrawSetOutline(DuelInfo[playerid][33], 1);
	TextDrawSetProportional(DuelInfo[playerid][33], 1);
	TextDrawSetSelectable(DuelInfo[playerid][33], 0);

	DuelInfo[playerid][45] = TextDrawCreate(526.000000, 178.000000, "_");
	TextDrawAlignment(DuelInfo[playerid][45], 3);
	TextDrawBackgroundColor(DuelInfo[playerid][45], -1);
	TextDrawFont(DuelInfo[playerid][45], 1);
	TextDrawLetterSize(DuelInfo[playerid][45], 0.320000, 1.200000);
	TextDrawColor(DuelInfo[playerid][45], -1);
	TextDrawSetOutline(DuelInfo[playerid][45], 1);
	TextDrawSetProportional(DuelInfo[playerid][45], 1);
	TextDrawSetSelectable(DuelInfo[playerid][45], 0);
	
	DuelInfo[playerid][34] = TextDrawCreate(391.0, 429.0, "_");
	TextDrawLetterSize(DuelInfo[playerid][34], 0.5, 1.0);
	TextDrawUseBox(DuelInfo[playerid][34], 1);
	TextDrawBoxColor(DuelInfo[playerid][34], 85);
	TextDrawTextSize(DuelInfo[playerid][34], 640.0, 0.0);
	TextDrawSetSelectable(DuelInfo[playerid][34], 0);

	ChangeMapp[playerid][0] = TextDrawCreate(431.0, 428.5, "_");
	TextDrawBackgroundColor(ChangeMapp[playerid][0], 0x000000FF);
	TextDrawFont(ChangeMapp[playerid][0], 2);
	TextDrawLetterSize(ChangeMapp[playerid][0], 0.18, 1.0);
	TextDrawColor(ChangeMapp[playerid][0], 0xFFFFFFFF);
	TextDrawSetProportional(ChangeMapp[playerid][0], 1);
	TextDrawSetShadow(ChangeMapp[playerid][0], 1);
	TextDrawTextSize(ChangeMapp[playerid][0], 529.0, 43.0);
	TextDrawSetSelectable(ChangeMapp[playerid][0], 1);

	ChangeMapp[playerid][1] = TextDrawCreate(394.0, 429.0, "LD_BEAT:left");
	TextDrawBackgroundColor(ChangeMapp[playerid][1], 0x00000000);
	TextDrawFont(ChangeMapp[playerid][1], 4);
	TextDrawLetterSize(ChangeMapp[playerid][1], 0.5, 1.0);
	TextDrawColor(ChangeMapp[playerid][1], 0xFFFFFFFF);
	TextDrawUseBox(ChangeMapp[playerid][1], 1);
	TextDrawBoxColor(ChangeMapp[playerid][1], 0x00000077);
	TextDrawTextSize(ChangeMapp[playerid][1], 10.0, 10.0);
	TextDrawSetSelectable(ChangeMapp[playerid][1], 1);

	ChangeMapp[playerid][2] = TextDrawCreate(406.0, 429.0, "LD_BEAT:right");
	TextDrawBackgroundColor(ChangeMapp[playerid][2], 0x00000000);
	TextDrawFont(ChangeMapp[playerid][2], 4);
	TextDrawLetterSize(ChangeMapp[playerid][2], 0.5, 1.0);
	TextDrawColor(ChangeMapp[playerid][2], 0xFFFFFFFF);
	TextDrawUseBox(ChangeMapp[playerid][2], 1);
	TextDrawBoxColor(ChangeMapp[playerid][2], 0x00000077);
	TextDrawTextSize(ChangeMapp[playerid][2], 10.0, 10.0);
	TextDrawSetSelectable(ChangeMapp[playerid][2], 1);

	ChangeMapp[playerid][3] = TextDrawCreate(574.0, 428.5, "_");
	TextDrawAlignment(ChangeMapp[playerid][3], 2);
	TextDrawBackgroundColor(ChangeMapp[playerid][3], 0x000000FF);
	TextDrawFont(ChangeMapp[playerid][3], 2);
	TextDrawLetterSize(ChangeMapp[playerid][3], 0.18, 1.0);
	TextDrawColor(ChangeMapp[playerid][3], 0xFFFFFFFF);
	TextDrawSetProportional(ChangeMapp[playerid][3], 1);
	TextDrawSetShadow(ChangeMapp[playerid][3], 1);
	TextDrawTextSize(ChangeMapp[playerid][3], 640.0, 10.0);
	TextDrawSetSelectable(ChangeMapp[playerid][3], 1);

	ChangeMapp[playerid][4] = TextDrawCreate(635.0, 428.5, "_");
	TextDrawAlignment(ChangeMapp[playerid][4], 3);
	TextDrawBackgroundColor(ChangeMapp[playerid][4], 0x000000FF);
	TextDrawFont(ChangeMapp[playerid][4], 2);
	TextDrawLetterSize(ChangeMapp[playerid][4], 0.18, 1.0);
	TextDrawColor(ChangeMapp[playerid][4], 0xFFFFFFFF);
	TextDrawSetProportional(ChangeMapp[playerid][4], 1);
	TextDrawSetShadow(ChangeMapp[playerid][4], 1);
	TextDrawTextSize(ChangeMapp[playerid][4], 670.0, 10.0);
	TextDrawSetSelectable(ChangeMapp[playerid][4], 1);

    Aiming[playerid][0] = TextDrawCreate(332.5, 172.5, AimingText);
	TextDrawBackgroundColor(Aiming[playerid][0], 0);
	TextDrawFont(Aiming[playerid][0], 0);
	TextDrawLetterSize(Aiming[playerid][0], 0.33, 0.7);
	TextDrawColor(Aiming[playerid][0], -1);
	TextDrawSetOutline(Aiming[playerid][0], 0);
	TextDrawSetProportional(Aiming[playerid][0], 1);
	TextDrawSetShadow(Aiming[playerid][0], 1);
	TextDrawSetSelectable(Aiming[playerid][0], 0);

	Aiming[playerid][1] = TextDrawCreate(310.5, 214.0, AimingText);
	TextDrawBackgroundColor(Aiming[playerid][1], 0);
	TextDrawFont(Aiming[playerid][1], 0);
	TextDrawLetterSize(Aiming[playerid][1], 0.46, 1.0);
	TextDrawColor(Aiming[playerid][1], -1);
	TextDrawSetOutline(Aiming[playerid][1], 0);
	TextDrawSetProportional(Aiming[playerid][1], 1);
	TextDrawSetShadow(Aiming[playerid][1], 1);
	TextDrawSetSelectable(Aiming[playerid][1], 0);

    NewLelevT[playerid][0] = TextDrawCreate(320.000000, 130.000000, "_");
	TextDrawAlignment(NewLelevT[playerid][0], 2);
	TextDrawBackgroundColor(NewLelevT[playerid][0], 255);
	TextDrawFont(NewLelevT[playerid][0], 2);
	TextDrawLetterSize(NewLelevT[playerid][0], 0.280000, 1.000000);
	TextDrawColor(NewLelevT[playerid][0], -1);
	TextDrawSetOutline(NewLelevT[playerid][0], 1);
	TextDrawSetProportional(NewLelevT[playerid][0], 1);
	TextDrawSetSelectable(NewLelevT[playerid][0], 0);

	NewLelevT[playerid][1] = TextDrawCreate(199.000000, 142.000000, "LD_DRV:tvbase");
	TextDrawBackgroundColor(NewLelevT[playerid][1], 0);
	TextDrawFont(NewLelevT[playerid][1], 4);
	TextDrawLetterSize(NewLelevT[playerid][1], 0.500000, 0.000000);
	TextDrawColor(NewLelevT[playerid][1], 572661674);
	TextDrawUseBox(NewLelevT[playerid][1], 1);
	TextDrawBoxColor(NewLelevT[playerid][1], 119);
	TextDrawTextSize(NewLelevT[playerid][1], 240.000000, 10.000000);
	TextDrawSetSelectable(NewLelevT[playerid][1], 0);

	NewLelevT[playerid][2] = TextDrawCreate(200.000000, 143.000000, "LD_DRV:tvbase");
	TextDrawBackgroundColor(NewLelevT[playerid][2], 0);
	TextDrawFont(NewLelevT[playerid][2], 4);
	TextDrawLetterSize(NewLelevT[playerid][2], 0.500000, 0.000000);
	TextDrawColor(NewLelevT[playerid][2], -86);
	TextDrawUseBox(NewLelevT[playerid][2], 1);
	TextDrawBoxColor(NewLelevT[playerid][2], 119);
	TextDrawTextSize(NewLelevT[playerid][2], 238.000000, 8.000000);
	TextDrawSetSelectable(NewLelevT[playerid][2], 0);

    KillInfo[playerid][0] = TextDrawCreate(312.000000, 397.000000, "_");
	TextDrawAlignment(KillInfo[playerid][0], 3);
	TextDrawBackgroundColor(KillInfo[playerid][0], -256);
	TextDrawFont(KillInfo[playerid][0], 1);
	TextDrawLetterSize(KillInfo[playerid][0], 0.270000, 1.049998);
	TextDrawColor(KillInfo[playerid][0], -171);
	TextDrawSetOutline(KillInfo[playerid][0], 0);
	TextDrawSetProportional(KillInfo[playerid][0], 1);
	TextDrawSetShadow(KillInfo[playerid][0], 1);
	TextDrawSetSelectable(KillInfo[playerid][0], 0);

	KillInfo[playerid][1] = TextDrawCreate(312.000000, 387.000000, "_");
	TextDrawAlignment(KillInfo[playerid][1], 3);
	TextDrawBackgroundColor(KillInfo[playerid][1], 255);
	TextDrawFont(KillInfo[playerid][1], 1);
	TextDrawLetterSize(KillInfo[playerid][1], 0.270000, 1.049998);
	TextDrawColor(KillInfo[playerid][1], -1);
	TextDrawSetOutline(KillInfo[playerid][1], 0);
	TextDrawSetProportional(KillInfo[playerid][1], 1);
	TextDrawSetShadow(KillInfo[playerid][1], 1);
	TextDrawSetSelectable(KillInfo[playerid][1], 0);

	KillInfo[playerid][2] = TextDrawCreate(312.000000, 377.000000, "_");
	TextDrawAlignment(KillInfo[playerid][2], 3);
	TextDrawBackgroundColor(KillInfo[playerid][2], 255);
	TextDrawFont(KillInfo[playerid][2], 1);
	TextDrawLetterSize(KillInfo[playerid][2], 0.270000, 1.049998);
	TextDrawColor(KillInfo[playerid][2], -1);
	TextDrawSetOutline(KillInfo[playerid][2], 0);
	TextDrawSetProportional(KillInfo[playerid][2], 1);
	TextDrawSetShadow(KillInfo[playerid][2], 1);
	TextDrawSetSelectable(KillInfo[playerid][2], 0);

	KillInfo[playerid][3] = TextDrawCreate(312.000000, 367.000000, "_");
	TextDrawAlignment(KillInfo[playerid][3], 3);
	TextDrawBackgroundColor(KillInfo[playerid][3], 255);
	TextDrawFont(KillInfo[playerid][3], 1);
	TextDrawLetterSize(KillInfo[playerid][3], 0.270000, 1.049998);
	TextDrawColor(KillInfo[playerid][3], -1);
	TextDrawSetOutline(KillInfo[playerid][3], 0);
	TextDrawSetProportional(KillInfo[playerid][3], 1);
	TextDrawSetShadow(KillInfo[playerid][3], 1);
	TextDrawSetSelectable(KillInfo[playerid][3], 0);
	
	KillInfo[playerid][4] = TextDrawCreate(315.500000, 397.000000, "_");
	TextDrawBackgroundColor(KillInfo[playerid][4], -256);
	TextDrawFont(KillInfo[playerid][4], 1);
	TextDrawLetterSize(KillInfo[playerid][4], 0.259900, 1.049998);
	TextDrawColor(KillInfo[playerid][4], -171);
	TextDrawSetOutline(KillInfo[playerid][4], 1);
	TextDrawSetProportional(KillInfo[playerid][4], 1);
	TextDrawSetSelectable(KillInfo[playerid][4], 0);

	KillInfo[playerid][5] = TextDrawCreate(315.500000, 387.000000, "_");
	TextDrawBackgroundColor(KillInfo[playerid][5], 255);
	TextDrawFont(KillInfo[playerid][5], 1);
	TextDrawLetterSize(KillInfo[playerid][5], 0.259900, 1.049998);
	TextDrawColor(KillInfo[playerid][5], -1);
	TextDrawSetOutline(KillInfo[playerid][5], 1);
	TextDrawSetProportional(KillInfo[playerid][5], 1);
	TextDrawSetSelectable(KillInfo[playerid][5], 0);

	KillInfo[playerid][6] = TextDrawCreate(315.500000, 377.000000, "_");
	TextDrawBackgroundColor(KillInfo[playerid][6], 255);
	TextDrawFont(KillInfo[playerid][6], 1);
	TextDrawLetterSize(KillInfo[playerid][6], 0.259900, 1.049998);
	TextDrawColor(KillInfo[playerid][6], -1);
	TextDrawSetOutline(KillInfo[playerid][6], 1);
	TextDrawSetProportional(KillInfo[playerid][6], 1);
	TextDrawSetSelectable(KillInfo[playerid][6], 0);

	KillInfo[playerid][7] = TextDrawCreate(315.500000, 367.000000, "_");
	TextDrawBackgroundColor(KillInfo[playerid][7], 255);
	TextDrawFont(KillInfo[playerid][7], 1);
	TextDrawLetterSize(KillInfo[playerid][7], 0.259900, 1.049998);
	TextDrawColor(KillInfo[playerid][7], -1);
	TextDrawSetOutline(KillInfo[playerid][7], 1);
	TextDrawSetProportional(KillInfo[playerid][7], 1);
	TextDrawSetSelectable(KillInfo[playerid][7], 0);

	KillInfo[playerid][8] = TextDrawCreate(309.000000, 331.000000, "_");
	TextDrawAlignment(KillInfo[playerid][8], 2);
	TextDrawBackgroundColor(KillInfo[playerid][8], 255);
	TextDrawFont(KillInfo[playerid][8], 2);
	TextDrawLetterSize(KillInfo[playerid][8], 0.200000, 1.000000);
	TextDrawColor(KillInfo[playerid][8], -1);
	TextDrawSetOutline(KillInfo[playerid][8], 0);
	TextDrawSetProportional(KillInfo[playerid][8], 1);
	TextDrawSetShadow(KillInfo[playerid][8], 1);
	TextDrawSetSelectable(KillInfo[playerid][8], 0);
	
	KillInfo[playerid][9] = TextDrawCreate(309.000000, 340.000000, "_");
	TextDrawAlignment(KillInfo[playerid][9], 2);
	TextDrawBackgroundColor(KillInfo[playerid][9], 255);
	TextDrawFont(KillInfo[playerid][9], 2);
	TextDrawLetterSize(KillInfo[playerid][9], 0.200000, 1.000000);
	TextDrawColor(KillInfo[playerid][9], -1);
	TextDrawSetOutline(KillInfo[playerid][9], 0);
	TextDrawSetProportional(KillInfo[playerid][9], 1);
	TextDrawSetShadow(KillInfo[playerid][9], 1);
	TextDrawSetSelectable(KillInfo[playerid][9], 0);

	KillInfo[playerid][10] = TextDrawCreate(309.000000, 349.000000, "_");
	TextDrawAlignment(KillInfo[playerid][10], 2);
	TextDrawBackgroundColor(KillInfo[playerid][10], 255);
	TextDrawFont(KillInfo[playerid][10], 2);
	TextDrawLetterSize(KillInfo[playerid][10], 0.200000, 1.000000);
	TextDrawColor(KillInfo[playerid][10], -1);
	TextDrawSetOutline(KillInfo[playerid][10], 0);
	TextDrawSetProportional(KillInfo[playerid][10], 1);
	TextDrawSetShadow(KillInfo[playerid][10], 1);
	TextDrawSetSelectable(KillInfo[playerid][10], 0);

	KillInfo[playerid][11] = TextDrawCreate(309.000000, 358.000000, "_");
	TextDrawAlignment(KillInfo[playerid][11], 2);
	TextDrawBackgroundColor(KillInfo[playerid][11], 255);
	TextDrawFont(KillInfo[playerid][11], 2);
	TextDrawLetterSize(KillInfo[playerid][11], 0.200000, 1.000000);
	TextDrawColor(KillInfo[playerid][11], -1);
	TextDrawSetOutline(KillInfo[playerid][11], 0);
	TextDrawSetProportional(KillInfo[playerid][11], 1);
	TextDrawSetShadow(KillInfo[playerid][11], 1);
	TextDrawSetSelectable(KillInfo[playerid][11], 0);

    TextBarInfo[playerid] = TextDrawCreate(5.000000, 144.000000, "_");
	TextDrawBackgroundColor(TextBarInfo[playerid], 255);
	TextDrawFont(TextBarInfo[playerid], 1);
	TextDrawLetterSize(TextBarInfo[playerid], 0.370000, 1.100000);
	TextDrawColor(TextBarInfo[playerid], -1);
	TextDrawSetOutline(TextBarInfo[playerid], 0);
	TextDrawSetProportional(TextBarInfo[playerid], 1);
	TextDrawSetShadow(TextBarInfo[playerid], 1);
	TextDrawSetSelectable(TextBarInfo[playerid], 0);

	AchievementsT[playerid][0] = TextDrawCreate(535.000000, 401.000000, "_");
	TextDrawLetterSize(AchievementsT[playerid][0], 0.250000, 1.000000);
	TextDrawUseBox(AchievementsT[playerid][0], 1);
	TextDrawBoxColor(AchievementsT[playerid][0], 170);
	TextDrawTextSize(AchievementsT[playerid][0], 640.000000, 0.000000);
	TextDrawSetSelectable(AchievementsT[playerid][0], 0);

	AchievementsT[playerid][1] = TextDrawCreate(535.000000, 401.000000, "_");
	TextDrawLetterSize(AchievementsT[playerid][1], 0.250000, 4.649997);
	TextDrawUseBox(AchievementsT[playerid][1], 1);
	TextDrawBoxColor(AchievementsT[playerid][1], 102);
	TextDrawTextSize(AchievementsT[playerid][1], 640.000000, 0.000000);
	TextDrawSetSelectable(AchievementsT[playerid][1], 0);

    AchievementsT[playerid][2] = TextDrawCreate(587.000000, 401.000000, "_");
	TextDrawAlignment(AchievementsT[playerid][2], 2);
	TextDrawBackgroundColor(AchievementsT[playerid][2], 255);
	TextDrawFont(AchievementsT[playerid][2], 2);
	TextDrawLetterSize(AchievementsT[playerid][2], 0.189998, 0.899999);
	TextDrawColor(AchievementsT[playerid][2], -1);
	TextDrawSetOutline(AchievementsT[playerid][2], 1);
	TextDrawSetProportional(AchievementsT[playerid][2], 1);
	TextDrawSetSelectable(AchievementsT[playerid][2], 0);

	AchievementsT[playerid][3] = TextDrawCreate(570.000000, 415.000000, "_");
	TextDrawBackgroundColor(AchievementsT[playerid][3], 255);
	TextDrawFont(AchievementsT[playerid][3], 2);
	TextDrawLetterSize(AchievementsT[playerid][3], 0.209999, 0.899999);
	TextDrawColor(AchievementsT[playerid][3], -1);
	TextDrawSetOutline(AchievementsT[playerid][3], 1);
	TextDrawSetProportional(AchievementsT[playerid][3], 1);
	TextDrawSetSelectable(AchievementsT[playerid][3], 0);

	AchievementsT[playerid][4] = TextDrawCreate(536.000000, 414.000000, "_");
	TextDrawBackgroundColor(AchievementsT[playerid][4], 255);
	TextDrawFont(AchievementsT[playerid][4], 4);
	TextDrawLetterSize(AchievementsT[playerid][4], 0.500000, 0.000000);
	TextDrawColor(AchievementsT[playerid][4], -86);
	TextDrawSetOutline(AchievementsT[playerid][4], 0);
	TextDrawSetProportional(AchievementsT[playerid][4], 1);
	TextDrawSetShadow(AchievementsT[playerid][4], 1);
	TextDrawUseBox(AchievementsT[playerid][4], 1);
	TextDrawBoxColor(AchievementsT[playerid][4], 119);
	TextDrawTextSize(AchievementsT[playerid][4], 30.000000, 28.000000);
	TextDrawSetSelectable(AchievementsT[playerid][4], 0);
	
	ListTable[playerid][0] = TextDrawCreate(132.000000, 153.000000, "_");
	TextDrawLetterSize(ListTable[playerid][0], 0.500000, 21.599990);
	TextDrawUseBox(ListTable[playerid][0], 1);
	TextDrawBoxColor(ListTable[playerid][0], 136);
	TextDrawTextSize(ListTable[playerid][0], 506.000000, 0.000000);
	TextDrawSetSelectable(ListTable[playerid][0], 0);

	ListTable[playerid][1] = TextDrawCreate(132.000000, 153.000000, "_");
	TextDrawLetterSize(ListTable[playerid][1], 0.500000, 1.299999);
	TextDrawUseBox(ListTable[playerid][1], 1);
	TextDrawBoxColor(ListTable[playerid][1], 153);
	TextDrawTextSize(ListTable[playerid][1], 506.000000, 0.000000);
	TextDrawSetSelectable(ListTable[playerid][1], 0);

	ListTable[playerid][2] = TextDrawCreate(136.000000, 172.000000, "_");
	TextDrawBackgroundColor(ListTable[playerid][2], 255);
	TextDrawFont(ListTable[playerid][2], 2);
	TextDrawLetterSize(ListTable[playerid][2], 0.250000, 1.000000);
	TextDrawColor(ListTable[playerid][2], -1);
	TextDrawSetOutline(ListTable[playerid][2], 0);
	TextDrawSetProportional(ListTable[playerid][2], 1);
	TextDrawSetShadow(ListTable[playerid][2], 1);
	TextDrawSetSelectable(ListTable[playerid][2], 0);

	ListTable[playerid][3] = TextDrawCreate(167.000000, 154.000000, "_");
	TextDrawBackgroundColor(ListTable[playerid][3], 255);
	TextDrawFont(ListTable[playerid][3], 2);
	TextDrawLetterSize(ListTable[playerid][3], 0.250000, 1.000000);
	TextDrawColor(ListTable[playerid][3], -1);
	TextDrawSetOutline(ListTable[playerid][3], 0);
	TextDrawSetProportional(ListTable[playerid][3], 1);
	TextDrawSetShadow(ListTable[playerid][3], 1);
	TextDrawSetSelectable(ListTable[playerid][3], 0);

	ListTable[playerid][4] = TextDrawCreate(345.000000, 154.000000, "_");
	TextDrawAlignment(ListTable[playerid][4], 2);
	TextDrawBackgroundColor(ListTable[playerid][4], 255);
	TextDrawFont(ListTable[playerid][4], 2);
	TextDrawLetterSize(ListTable[playerid][4], 0.250000, 1.000000);
	TextDrawColor(ListTable[playerid][4], -1);
	TextDrawSetOutline(ListTable[playerid][4], 0);
	TextDrawSetProportional(ListTable[playerid][4], 1);
	TextDrawSetShadow(ListTable[playerid][4], 1);
	TextDrawSetSelectable(ListTable[playerid][4], 0);

	ListTable[playerid][5] = TextDrawCreate(405.000000, 154.000000, "_");
	TextDrawAlignment(ListTable[playerid][5], 2);
	TextDrawBackgroundColor(ListTable[playerid][5], 255);
	TextDrawFont(ListTable[playerid][5], 2);
	TextDrawLetterSize(ListTable[playerid][5], 0.250000, 1.000000);
	TextDrawColor(ListTable[playerid][5], -1);
	TextDrawSetOutline(ListTable[playerid][5], 0);
	TextDrawSetProportional(ListTable[playerid][5], 1);
	TextDrawSetShadow(ListTable[playerid][5], 1);
	TextDrawSetSelectable(ListTable[playerid][5], 0);

	ListTable[playerid][6] = TextDrawCreate(465.000000, 154.000000, "_");
	TextDrawAlignment(ListTable[playerid][6], 2);
	TextDrawBackgroundColor(ListTable[playerid][6], 255);
	TextDrawFont(ListTable[playerid][6], 2);
	TextDrawLetterSize(ListTable[playerid][6], 0.250000, 1.000000);
	TextDrawColor(ListTable[playerid][6], -1);
	TextDrawSetOutline(ListTable[playerid][6], 0);
	TextDrawSetProportional(ListTable[playerid][6], 1);
	TextDrawSetShadow(ListTable[playerid][6], 1);
	TextDrawSetSelectable(ListTable[playerid][6], 0);

	ListTable[playerid][7] = TextDrawCreate(493.000000, 318.000000, "LD_BEAT:down");
	TextDrawBackgroundColor(ListTable[playerid][7], 0);
	TextDrawFont(ListTable[playerid][7], 4);
	TextDrawLetterSize(ListTable[playerid][7], 0.500000, 1.000000);
	TextDrawColor(ListTable[playerid][7], -1);
	TextDrawSetOutline(ListTable[playerid][7], 0);
	TextDrawSetProportional(ListTable[playerid][7], 1);
	TextDrawSetShadow(ListTable[playerid][7], 1);
	TextDrawUseBox(ListTable[playerid][7], 1);
	TextDrawBoxColor(ListTable[playerid][7], 119);
	TextDrawTextSize(ListTable[playerid][7], 13.000000, 10.000000);
	TextDrawSetSelectable(ListTable[playerid][7], 1);

	ListTable[playerid][8] = TextDrawCreate(493.000000, 304.000000, "LD_BEAT:up");
	TextDrawBackgroundColor(ListTable[playerid][8], 0);
	TextDrawFont(ListTable[playerid][8], 4);
	TextDrawLetterSize(ListTable[playerid][8], 0.500000, 1.000000);
	TextDrawColor(ListTable[playerid][8], -1);
	TextDrawSetOutline(ListTable[playerid][8], 0);
	TextDrawSetProportional(ListTable[playerid][8], 1);
	TextDrawSetShadow(ListTable[playerid][8], 1);
	TextDrawUseBox(ListTable[playerid][8], 1);
	TextDrawBoxColor(ListTable[playerid][8], 119);
	TextDrawTextSize(ListTable[playerid][8], 13.000000, 10.000000);
	TextDrawSetSelectable(ListTable[playerid][8], 1);

	ListTable[playerid][9] = TextDrawCreate(492.500000, 332.000000, "LD_BEAT:cring");
	TextDrawBackgroundColor(ListTable[playerid][9], 0);
	TextDrawFont(ListTable[playerid][9], 4);
	TextDrawLetterSize(ListTable[playerid][9], 0.500000, 1.000000);
	TextDrawColor(ListTable[playerid][9], -1);
	TextDrawSetOutline(ListTable[playerid][9], 0);
	TextDrawSetProportional(ListTable[playerid][9], 1);
	TextDrawSetShadow(ListTable[playerid][9], 1);
	TextDrawUseBox(ListTable[playerid][9], 1);
	TextDrawBoxColor(ListTable[playerid][9], 119);
	TextDrawTextSize(ListTable[playerid][9], 14.000000, 14.000000);
	TextDrawSetSelectable(ListTable[playerid][9], 1);
	
	ScoreArena[playerid][0] = TextDrawCreate(18.0, 160.0, "_");//list 1
	TextDrawLetterSize(ScoreArena[playerid][0], 0.5, 1.30);
	TextDrawUseBox(ScoreArena[playerid][0], 1);
	TextDrawBoxColor(ScoreArena[playerid][0], 136);
	TextDrawTextSize(ScoreArena[playerid][0], 317.0, 1.0);
	TextDrawSetSelectable(ScoreArena[playerid][0], 0);

	ScoreArena[playerid][1] = TextDrawCreate(18.0, 177.0, "_");
	TextDrawLetterSize(ScoreArena[playerid][1], 0.5, 19.6);
	TextDrawUseBox(ScoreArena[playerid][1], 1);
	TextDrawBoxColor(ScoreArena[playerid][1], 136);
	TextDrawTextSize(ScoreArena[playerid][1], 317.0, 1.0);
	TextDrawSetSelectable(ScoreArena[playerid][1], 0);

	ScoreArena[playerid][2] = TextDrawCreate(307.0, 326.0, "LD_BEAT:up");
	TextDrawBackgroundColor(ScoreArena[playerid][2], 0);
	TextDrawFont(ScoreArena[playerid][2], 4);
	TextDrawLetterSize(ScoreArena[playerid][2], 0.5, 1.0);
	TextDrawColor(ScoreArena[playerid][2], -1);
	TextDrawUseBox(ScoreArena[playerid][2], 1);
	TextDrawBoxColor(ScoreArena[playerid][2], 119);
	TextDrawTextSize(ScoreArena[playerid][2], 11.0, 10.0);
	TextDrawSetSelectable(ScoreArena[playerid][2], 1);

	ScoreArena[playerid][3] = TextDrawCreate(307.0, 340.5, "LD_BEAT:down");
	TextDrawBackgroundColor(ScoreArena[playerid][3], 0);
	TextDrawFont(ScoreArena[playerid][3], 4);
	TextDrawLetterSize(ScoreArena[playerid][3], 0.5, 1.0);
	TextDrawColor(ScoreArena[playerid][3], -1);
	TextDrawUseBox(ScoreArena[playerid][3], 1);
	TextDrawBoxColor(ScoreArena[playerid][3], 119);
	TextDrawTextSize(ScoreArena[playerid][3], 11.0, 10.0);
	TextDrawSetSelectable(ScoreArena[playerid][3], 1);

	ScoreArena[playerid][4] = TextDrawCreate(26.0, 178.5, "_");
	TextDrawAlignment(ScoreArena[playerid][4], 2);
	TextDrawBackgroundColor(ScoreArena[playerid][4], 255);
	TextDrawFont(ScoreArena[playerid][4], 2);
	TextDrawLetterSize(ScoreArena[playerid][4], 0.25, 1.0);
	TextDrawColor(ScoreArena[playerid][4], -1);
	TextDrawSetOutline(ScoreArena[playerid][4], 0);
	TextDrawSetProportional(ScoreArena[playerid][4], 1);
	TextDrawSetShadow(ScoreArena[playerid][4], 1);
	TextDrawSetSelectable(ScoreArena[playerid][4], 0);

	ScoreArena[playerid][5] = TextDrawCreate(35.1, 160.5, "_");
	TextDrawBackgroundColor(ScoreArena[playerid][5], 255);
	TextDrawFont(ScoreArena[playerid][5], 2);
	TextDrawLetterSize(ScoreArena[playerid][5], 0.25, 1.0);
	TextDrawColor(ScoreArena[playerid][5], -1);
	TextDrawSetOutline(ScoreArena[playerid][5], 0);
	TextDrawSetProportional(ScoreArena[playerid][5], 1);
	TextDrawSetShadow(ScoreArena[playerid][5], 1);
	TextDrawSetSelectable(ScoreArena[playerid][5], 0);

	ScoreArena[playerid][6] = TextDrawCreate(209.05, 160.5, "_");
	TextDrawAlignment(ScoreArena[playerid][6], 2);
	TextDrawBackgroundColor(ScoreArena[playerid][6], 255);
	TextDrawFont(ScoreArena[playerid][6], 2);
	TextDrawLetterSize(ScoreArena[playerid][6], 0.25, 1.0);
	TextDrawColor(ScoreArena[playerid][6], -1);
	TextDrawSetOutline(ScoreArena[playerid][6], 0);
	TextDrawSetProportional(ScoreArena[playerid][6], 1);
	TextDrawSetShadow(ScoreArena[playerid][6], 1);
	TextDrawSetSelectable(ScoreArena[playerid][6], 0);

	ScoreArena[playerid][7] = TextDrawCreate(247.05, 160.5, "_");
	TextDrawAlignment(ScoreArena[playerid][7], 2);
	TextDrawBackgroundColor(ScoreArena[playerid][7], 255);
	TextDrawFont(ScoreArena[playerid][7], 2);
	TextDrawLetterSize(ScoreArena[playerid][7], 0.25, 1.0);
	TextDrawColor(ScoreArena[playerid][7], -1);
	TextDrawSetOutline(ScoreArena[playerid][7], 0);
	TextDrawSetProportional(ScoreArena[playerid][7], 1);
	TextDrawSetShadow(ScoreArena[playerid][7], 1);
	TextDrawSetSelectable(ScoreArena[playerid][7], 0);

	ScoreArena[playerid][8] = TextDrawCreate(287.05, 160.5, "_");
	TextDrawAlignment(ScoreArena[playerid][8], 2);
	TextDrawBackgroundColor(ScoreArena[playerid][8], 255);
	TextDrawFont(ScoreArena[playerid][8], 2);
	TextDrawLetterSize(ScoreArena[playerid][8], 0.25, 1.0);
	TextDrawColor(ScoreArena[playerid][8], -1);
	TextDrawSetOutline(ScoreArena[playerid][8], 0);
	TextDrawSetProportional(ScoreArena[playerid][8], 1);
	TextDrawSetShadow(ScoreArena[playerid][8], 1);
	TextDrawSetSelectable(ScoreArena[playerid][8], 0);

	ScoreArena[playerid][9] = TextDrawCreate(323.0, 160.0, "_");// list 2
	TextDrawLetterSize(ScoreArena[playerid][9], 0.5, 1.30);
	TextDrawUseBox(ScoreArena[playerid][9], 1);
	TextDrawBoxColor(ScoreArena[playerid][9], 136);
	TextDrawTextSize(ScoreArena[playerid][9], 622.0, 1.0);
	TextDrawSetSelectable(ScoreArena[playerid][9], 0);

	ScoreArena[playerid][10] = TextDrawCreate(323.0, 177.0, "_");
	TextDrawLetterSize(ScoreArena[playerid][10], 0.5, 19.6);
	TextDrawUseBox(ScoreArena[playerid][10], 1);
	TextDrawBoxColor(ScoreArena[playerid][10], 136);
	TextDrawTextSize(ScoreArena[playerid][10], 622.0, 1.0);
	TextDrawSetSelectable(ScoreArena[playerid][10], 0);

	ScoreArena[playerid][11] = TextDrawCreate(612.0, 326.0, "LD_BEAT:up");
	TextDrawBackgroundColor(ScoreArena[playerid][11], 0);
	TextDrawFont(ScoreArena[playerid][11], 4);
	TextDrawLetterSize(ScoreArena[playerid][11], 0.5, 1.0);
	TextDrawColor(ScoreArena[playerid][11], -1);
	TextDrawUseBox(ScoreArena[playerid][11], 1);
	TextDrawBoxColor(ScoreArena[playerid][11], 119);
	TextDrawTextSize(ScoreArena[playerid][11], 11.0, 10.0);
	TextDrawSetSelectable(ScoreArena[playerid][11], 1);

	ScoreArena[playerid][12] = TextDrawCreate(612.0, 340.5, "LD_BEAT:down");
	TextDrawBackgroundColor(ScoreArena[playerid][12], 0);
	TextDrawFont(ScoreArena[playerid][12], 4);
	TextDrawLetterSize(ScoreArena[playerid][12], 0.5, 1.0);
	TextDrawColor(ScoreArena[playerid][12], -1);
	TextDrawUseBox(ScoreArena[playerid][12], 1);
	TextDrawBoxColor(ScoreArena[playerid][12], 119);
	TextDrawTextSize(ScoreArena[playerid][12], 11.0, 10.0);
	TextDrawSetSelectable(ScoreArena[playerid][12], 1);

	ScoreArena[playerid][13] = TextDrawCreate(331.5, 178.5, "_");
	TextDrawAlignment(ScoreArena[playerid][13], 2);
	TextDrawBackgroundColor(ScoreArena[playerid][13], 255);
	TextDrawFont(ScoreArena[playerid][13], 2);
	TextDrawLetterSize(ScoreArena[playerid][13], 0.25, 1.0);
	TextDrawColor(ScoreArena[playerid][13], -1);
	TextDrawSetOutline(ScoreArena[playerid][13], 0);
	TextDrawSetProportional(ScoreArena[playerid][13], 1);
	TextDrawSetShadow(ScoreArena[playerid][13], 1);
	TextDrawSetSelectable(ScoreArena[playerid][13], 0);

	ScoreArena[playerid][14] = TextDrawCreate(339.5, 160.5, "_");
	TextDrawBackgroundColor(ScoreArena[playerid][14], 255);
	TextDrawFont(ScoreArena[playerid][14], 2);
	TextDrawLetterSize(ScoreArena[playerid][14], 0.25, 1.0);
	TextDrawColor(ScoreArena[playerid][14], -1);
	TextDrawSetOutline(ScoreArena[playerid][14], 0);
	TextDrawSetProportional(ScoreArena[playerid][14], 1);
	TextDrawSetShadow(ScoreArena[playerid][14], 1);
	TextDrawSetSelectable(ScoreArena[playerid][14], 0);

	ScoreArena[playerid][15] = TextDrawCreate(512.05, 160.5, "_");
	TextDrawAlignment(ScoreArena[playerid][15], 2);
	TextDrawBackgroundColor(ScoreArena[playerid][15], 255);
	TextDrawFont(ScoreArena[playerid][15], 2);
	TextDrawLetterSize(ScoreArena[playerid][15], 0.25, 1.0);
	TextDrawColor(ScoreArena[playerid][15], -1);
	TextDrawSetOutline(ScoreArena[playerid][15], 0);
	TextDrawSetProportional(ScoreArena[playerid][15], 1);
	TextDrawSetShadow(ScoreArena[playerid][15], 1);
	TextDrawSetSelectable(ScoreArena[playerid][15], 0);

	ScoreArena[playerid][16] = TextDrawCreate(551.05, 160.5, "_");
	TextDrawAlignment(ScoreArena[playerid][16], 2);
	TextDrawBackgroundColor(ScoreArena[playerid][16], 255);
	TextDrawFont(ScoreArena[playerid][16], 2);
	TextDrawLetterSize(ScoreArena[playerid][16], 0.25, 1.0);
	TextDrawColor(ScoreArena[playerid][16], -1);
	TextDrawSetOutline(ScoreArena[playerid][16], 0);
	TextDrawSetProportional(ScoreArena[playerid][16], 1);
	TextDrawSetShadow(ScoreArena[playerid][16], 1);
	TextDrawSetSelectable(ScoreArena[playerid][16], 0);

	ScoreArena[playerid][17] = TextDrawCreate(591.0, 160.5, "_");
	TextDrawAlignment(ScoreArena[playerid][17], 2);
	TextDrawBackgroundColor(ScoreArena[playerid][17], 255);
	TextDrawFont(ScoreArena[playerid][17], 2);
	TextDrawLetterSize(ScoreArena[playerid][17], 0.25, 1.0);
	TextDrawColor(ScoreArena[playerid][17], -1);
	TextDrawSetOutline(ScoreArena[playerid][17], 0);
	TextDrawSetProportional(ScoreArena[playerid][17], 1);
	TextDrawSetShadow(ScoreArena[playerid][17], 1);
	TextDrawSetSelectable(ScoreArena[playerid][17], 0);//end
	
	HealthPure[playerid] = TextDrawCreate(636.0, 439.0, "_");
	TextDrawAlignment(HealthPure[playerid], 3);
	TextDrawBackgroundColor(HealthPure[playerid], 255);
	TextDrawFont(HealthPure[playerid], 2);
	TextDrawLetterSize(HealthPure[playerid], 0.21, 1.0);
	TextDrawColor(HealthPure[playerid], -1);
	TextDrawSetOutline(HealthPure[playerid], 1);
	TextDrawSetProportional(HealthPure[playerid], 1);
	return TextDrawSetSelectable(HealthPure[playerid], 0);
}

public OnPlayerDisconnect(playerid, reason)
{
    PlayerCheatCheck[playerid] = 0;
    DialogueCheck[playerid][0] = 0;
    DialogueCheck[playerid][1] = 0;
    DialogueCheck[playerid][2] = 0;
    TimeInput[playerid] = 0;
	Spawned[playerid] = false;
	PlayerLogged[playerid] = 0;
	ForbiddenArea[playerid][0] = 0;
	DestroyDynamicArea(ForbiddenArea[playerid][1]);
    ProtectionFlooding[playerid][0] = 0;
	ProtectionFlooding[playerid][1] = 0;
	ProtectionFlooding[playerid][2] = 0;
	ProtectionFlooding[playerid][3] = 0;
	ProtectionFlooding[playerid][4] = 0;
	if(PlayerOnline[0] >= 1) PlayerOnline[0] -= 1;
    if(PlayerInfo[playerid][pFreeMode] == 0 && ChoiceTeamCheck[playerid][6] != 0)
	{
		switch(ChoiceTeamCheck[playerid][6])
		{
		    case 1:
		    {
		        if(PlayerOnline[2] >= 1) PlayerOnline[2] -= 1;
		        if(ChoiceTeamCheck[playerid][2] == 1 && Arena[5] >= 1) Arena[5] -= 1;
				else if(ChoiceTeamCheck[playerid][2] == 2 && Arena[6] >= 1) Arena[6] -= 1;
		    }
		    case 2:
			{
			    if(PlayerOnline[3] >= 1) PlayerOnline[3] -= 1;
			    if(ChoiceTeamCheck[playerid][2] == 1 && Arena[12] >= 1) Arena[12] -= 1;
				else if(ChoiceTeamCheck[playerid][2] == 2 && Arena[13] >= 1) Arena[13] -= 1;
			}
			case 3:
			{
			    if(PlayerOnline[4] >= 1) PlayerOnline[4] -= 1;
			    if(ChoiceTeamCheck[playerid][2] == 1 && Arena[19] >= 1) Arena[19] -= 1;
				else if(ChoiceTeamCheck[playerid][2] == 2 && Arena[20] >= 1) Arena[20] -= 1;
			}
		}
	}
	if(PlayerInfo[playerid][pFreeMode] == 1 && PlayerOnline[1] >= 1) PlayerOnline[1] -= 1;
	DestroyDynamic3DTextLabel(PlayerText[playerid]);
	/*if(reason == 1) BlockIpAddress(PlayerIp[playerid], 20000);
	else if(reason == 2) BlockIpAddress(PlayerIp[playerid], 300000);*/
	if(InteractionCheck[playerid][0] >= 1 || IsValidDynamicObject(InteractionCheck[playerid][2]) || IsValidDynamicObject(InteractionCheck[playerid][3]) || IsValidDynamicObject(InteractionCheck[playerid][4]))
	{
	    InteractionCheck[playerid][0] = 0;
	    InteractionCheck[playerid][1] = 0;
	    InteractionCheck[playerid][5] = 0;
	    DestroyDynamicObject(InteractionCheck[playerid][2]);
		DestroyDynamicObject(InteractionCheck[playerid][3]);
		DestroyDynamicObject(InteractionCheck[playerid][4]);
		DestroyDynamicObject(InteractionCheck[playerid][9]);
		DestroyPickup(InteractionCheck[playerid][6]);
		DestroyPickup(InteractionCheck[playerid][7]);
		DestroyPickup(InteractionCheck[playerid][8]);
		InteractionCheck[playerid][6] = -1;
		InteractionCheck[playerid][7] = -1;
		InteractionCheck[playerid][8] = -1;
		InteractionCheck[playerid][9] = 0;
		Delete3DTextLabel(InteractionText[playerid][0]);
		Delete3DTextLabel(InteractionText[playerid][1]);
		Delete3DTextLabel(InteractionText[playerid][2]);
		Delete3DTextLabel(InteractionText[playerid][3]);
	}
	if(InteractionCheck[playerid][11] != -1) InteractionCheck[InteractionCheck[playerid][11]][10] = -1;
	InteractionCheck[playerid][10] = -1;
	InteractionCheck[playerid][11] = -1;
	if(AutoCheck[playerid] != 0) DestroyVehicle(AutoCheck[playerid]);
	if(DuelCheck[playerid][3] != 0)
	{
	    DuelCheck[playerid][0] = MAX_PLAYERS;
		DisablePlayerRaceCheckpoint(playerid);
		DestroyVehicle(DuelCheck[playerid][15]);
		DestroyDynamicArea(DuelCheck[playerid][27]);
		DestroyDynamicObject(ObjectLoading[playerid][0]);
 	    DestroyDynamicObject(ObjectLoading[playerid][1]);
 	    DestroyDynamicObject(ObjectLoading[playerid][2]);
     	DestroyDynamicObject(ObjectLoading[playerid][3]);
     	DestroyDynamicObject(ObjectLoading[playerid][4]);
	}
	GangZoneHideForPlayer(playerid, ServerCheck[0]);
	new string[160], str[28], szDisconnectReason[3][] = {"вылет", "выход", "кик/бан"};
	format(str, sizeof(str), "%d,%d,%d", PlayerInfo[playerid][pTimeGame][0], PlayerInfo[playerid][pTimeGame][1], PlayerInfo[playerid][pTimeGame][2]);
	mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET online=0,muted=%d,prison=%d,scorecheck=0,timegame='%s' WHERE id=%d", PlayerInfo[playerid][pMuted], PlayerInfo[playerid][pPrison], str, PlayerInfo[playerid][pRoomAccount]);
	mysql_tquery(MysqlConnectID, string);
    format(string, sizeof(string), "Игрок %s (ID: %d) покинул сервер %s (IP: %s | Ping: %d)", PlayerName[playerid], playerid, szDisconnectReason[reason], PlayerIp[playerid], GetPlayerPing(playerid));
    return ABroadCast(0xC3C3C3AA, string, 0, 3);
}

public OnPlayerSpawn(playerid)
{
    if(PlayerLogged[playerid] == 0) return PlayerCheat(playerid, "спавн не авторизованным", "Вы были отсоединены от игрового сервера. С причиной: Вы были не авторизированны.", 0, 1);
    if(SpawnCheck[playerid][0] == 0 && (SpawnCheck[playerid][1] != 0 || SpawnCheck[playerid][1] <= gettime()) && Observation[playerid][1] == 0 && Pause[playerid][1] <= 3 && PlayerCheatCheck[playerid] == 0 && DuelCheck[playerid][13] == 0) return PlayerCheat(playerid, "автореспавн #3", "Использование Чит Программ [{FF0000}Код: #3{CD853F}]");
	else
	{
		SpawnCheck[playerid][0] = 0;
	    SpawnCheck[playerid][1] = 0;
	}
	SpeedVer[playerid] = 0.0;
	new lang = PlayerInfo[playerid][pRussifier][1];
	if(ChoiceTeamCheck[playerid][0] == 1 && PlayerInfo[playerid][pPrison] == 0)
	{
	    SelectTextDraw(playerid, 0x88AA88FF);
	    SetPlayerPosZS(playerid, 1661.8116, -1637.9564, 83.7788, 69.4753, 0, 400 + playerid);
	    SetPlayerCameraPos(playerid, 1659.662475, -1636.247924, 84.131706);
	    SetPlayerCameraLookAt(playerid, 1664.396118, -1637.787963, 83.661827);
	    if(TimeInput[playerid] <= 70) TimeInput[playerid] = 300;
	    if(PlayerOnline[2] >= 36 || ServerConfig[2] == 0)
	    {
		    ChoiceTeamCheck[playerid][5] = 1;//5535
		    TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][31]);
		    TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][32]);
		    TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][17]);
		    TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][18]);
		    TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][19]);
		    TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][20]);
		    TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][21]);
		    TextDrawSetString(ChoiceTeam[playerid][20], TextDrawInfo[98][lang]);
		    TextDrawSetString(ChoiceTeam[playerid][21], TextDrawInfo[99][lang]);
		    TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][22]);
		    TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][23]);
		    TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][24]);
		    TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][25]);
		    TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][26]);
		    TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][27]);
		    TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][28]);
		    TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][29]);
		    return TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][30]);
	    }
	    else
		{
			PlayerOnline[2] += 1;
			ChoiceTeamCheck[playerid][6] = 1;
  		}
	    if(PlayerInfo[playerid][pServerHelp][0] == 1)
		{
		    TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][0]);
		    TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][1]);
		    TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][2]);
		    TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][3]);
		    TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][4]);
		    TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][5]);
		    TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][7]);
		    TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][8]);
		    TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][12]);
		    TextDrawSetString(ChoiceTeam[playerid][3], TextDrawInfo[49][lang]);
		    TextDrawSetString(ChoiceTeam[playerid][7], TextDrawInfo[51][lang]);
		    TextDrawSetString(ChoiceTeam[playerid][8], TextDrawInfo[52][lang]);
		    if(PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pVip] >= 2)
		    {
		    	TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][6]);
		    	TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][9]);
		    	TextDrawSetString(ChoiceTeam[playerid][9], TextDrawInfo[53][lang]);
	  		}
	  		return 1;
		}
		else
		{
		    ServerHelpInfo[playerid][0] = gettime() + 2;
			ServerHelpInfo[playerid][1] = 1;
			ServerHelpInfo[playerid][2] = 0;
		}
		return 1;
	}
	Pause[playerid][0] = 1;
    Spawned[playerid] = true;
    HealthCheck[playerid][0] = 6;
    Armour[playerid][2] = 6;
 	if(PossSave[playerid][6] == 2.0)
  	{
  	 	Health[playerid] = 10;
 		SetPlayerHealth(playerid, 10.0);
  	}
	else
	{
        Health[playerid] = 100;
 		SetPlayerHealth(playerid, 100.0);
	}
	Armour[playerid][0] = 0;
	Armour[playerid][1] = 0;
	SetPlayerArmour(playerid, 0.0);
	if(PlayerInfo[playerid][pYourSkin][1] == 0)
 	{
 	    if(PlayerInfo[playerid][pFreeMode] == 0) SetPlayerSkinZS(playerid, SkinChoice[ChoiceTeamCheck[playerid][2]-1][ChoiceTeamCheck[playerid][3]]);
 	    else SetPlayerSkinZS(playerid, PlayerInfo[playerid][pYourSkin][0]);
  	}
	else SetPlayerSkinZS(playerid, PlayerInfo[playerid][pYourSkin][0]);
 	if(DuelCheck[playerid][12] >= 1 && DuelCheck[playerid][13] == 4)
	{
	    EnterVehicle[playerid][1] = gettime() + 2;
	    PosBreik[playerid][0] = PossSave[playerid][0];
        PosBreik[playerid][1] = PossSave[playerid][1];
	    PosBreik[playerid][2] = PossSave[playerid][2];
	    if(DuelCheck[playerid][15] != 0) DestroyVehicle(DuelCheck[playerid][15]);
	    DuelCheck[playerid][15] = CreateVehicle(ClassVehicleDuel[DuelCheck[playerid][7]-1][DuelCheck[playerid][16]], PossSave[playerid][0], PossSave[playerid][1], PossSave[playerid][2], PossSave[playerid][3], DuelCheck[playerid][17], DuelCheck[playerid][18], -1);
	    SetVehicleVirtualWorld(DuelCheck[playerid][15], DuelCheck[playerid][25]);
	    LinkVehicleToInterior(DuelCheck[playerid][15], floatround(DuelCameraRace[DuelCheck[playerid][4] - 1][6]));
		SetVehicleNumberPlate(DuelCheck[playerid][15], "_");
		PutPlayerInVehicle(playerid, DuelCheck[playerid][15], 0);
		DisableRemoteVehicleCollisions(playerid, DuelCheck[playerid][8]);
		if(DuelCheck[playerid][10] != 0) AddVehicleComponent(DuelCheck[playerid][15], 1007+DuelCheck[playerid][10]);
		return EnterVehicle[playerid][0] = GetPlayerVehicleID(playerid);
  	}
	if(PlayerInfo[playerid][pInfoText][2] == 0 || PlayerInfo[playerid][pInfoText][7] == 0) TextDrawShowForPlayer(playerid, UpPanel[playerid]);
	if(PlayerInfo[playerid][pInfoText][3] == 0 && PlayerInfo[playerid][pPrison] == 0) TextDrawShowForPlayer(playerid, HealthPure[playerid]);
    if(InteractionsNumber[2][PlayerInfo[playerid][pBonus][1]] >= 19036 && InteractionsNumber[2][PlayerInfo[playerid][pBonus][1]] <= 19038) SetPlayerAttachedObjectZS(playerid, InteractionsNumber[2][PlayerInfo[playerid][pBonus][1]]);
	else
	{
		if(PlayerInfo[playerid][pBonus][2] >= 1) SetPlayerAttachedObjectZS(playerid, InteractionsNumber[0][PlayerInfo[playerid][pBonus][2]]);
		if(PlayerInfo[playerid][pBonus][1] >= 1) SetPlayerAttachedObjectZS(playerid, InteractionsNumber[2][PlayerInfo[playerid][pBonus][1]]);
	}
	if(PlayerInfo[playerid][pBonus][3] >= 1) SetPlayerAttachedObjectZS(playerid, InteractionsNumber[1][PlayerInfo[playerid][pBonus][3]]);
	if(PlayerInfo[playerid][pBonus][4] >= 1) SetPlayerAttachedObjectZS(playerid, InteractionsNumber[4][PlayerInfo[playerid][pBonus][4]]);
    if(PlayerInfo[playerid][pFreeze] == 1) GameTextForPlayerZS(playerid, "~n~~w~You were ~r~Frozen", "~n~~w~‹Ё ~r~џaЇopo›e®Ё", 5000, 4, 1085);
	if(PlayerInfo[playerid][pPrison] >= 1)
    {
        TextDrawShowForPlayer(playerid, ArenaInfo[playerid][0]);
        TextDrawShowForPlayer(playerid, ArenaInfo[playerid][10]);
        TextDrawSetString(ArenaInfo[playerid][0], TextDrawInfo[63][lang]);
        switch(random(3))
        {
            case 0: SetPlayerPosZS(playerid, 198.0586, 173.8647, 1003.0234, 0.0, 3, 201);
            case 1: SetPlayerPosZS(playerid, 193.7625, 173.6763, 1003.0234, 0.0, 3, 201);
            case 2: SetPlayerPosZS(playerid, 198.0842, 163.0792, 1003.0300, 0.0, 3, 201);
        }
        return 1;
    }
    if(PlayerInfo[playerid][pFreeMode] == 1)
	{
	    if(PossSave[playerid][6] == 0.0)
	    {
			new ran = random(sizeof(FreeModePos));
			SetPlayerPosZS(playerid, FreeModePos[ran][0], FreeModePos[ran][1], FreeModePos[ran][2], FreeModePos[ran][3], 0, 202);
	 	}
     	else SetPlayerPosZS(playerid, PossSave[playerid][0], PossSave[playerid][1], PossSave[playerid][2], PossSave[playerid][3], floatround(PossSave[playerid][4]), floatround(PossSave[playerid][5])), PossSave[playerid][6] = 0.0;
		if(PlayerInfo[playerid][pPassive] == 1)
        {
        	//DisableRemoteVehicleCollisions(playerid, 1);
            TextDrawShowForPlayer(playerid, ArenaInfo[playerid][1]);
            TextDrawShowForPlayer(playerid, ArenaInfo[playerid][11]);
            TextDrawSetString(ArenaInfo[playerid][1], TextDrawInfo[58][lang]);
            if(IsPlayerInAnyVehicle(playerid)) TextDrawSetString(ArenaInfo[playerid][11], TextDrawInfo[59][lang]);
		    else TextDrawSetString(ArenaInfo[playerid][11], TextDrawInfo[60][lang]);
	   	}
	   	else for(new x; x < 3; x ++) if(PlayerInfo[playerid][pHisWeapons][x] >= 1) GivePlayerWeaponZS(playerid, PlayerInfo[playerid][pHisWeapons][x], 150);
    	SetPlayerWeather(playerid, PlayerInfo[playerid][pWeather]);
    	if(PlayerInfo[playerid][pTimers] != 24) SetPlayerTime(playerid, PlayerInfo[playerid][pTimers], 0);
    	return GameTextForPlayerZS(playerid, "~n~~g~Free Mode", "~n~~g~Cўo—oљ®Ёќ pe›њЇ", 2000, 4);
	}
	if(ChoiceTeamCheck[playerid][6] == 1 && Arena[2] == 0 || ChoiceTeamCheck[playerid][6] == 2 && Arena[9] == 0 || ChoiceTeamCheck[playerid][6] == 3 && Arena[16] == 0)
	{
		if(PlayerInfo[playerid][pInfoText][0] == 0 && (ChoiceTeamCheck[playerid][4] == 0 || PlayerInfo[playerid][pInfoText][5] == 1))
		{
			TextDrawShowForPlayer(playerid, ArenaInfo[playerid][0]);
			TextDrawShowForPlayer(playerid, ArenaInfo[playerid][1]);
			TextDrawShowForPlayer(playerid, ArenaInfo[playerid][2]);
			TextDrawShowForPlayer(playerid, ArenaInfo[playerid][10]);
			TextDrawShowForPlayer(playerid, ArenaInfo[playerid][11]);
			TextDrawSetString(ArenaInfo[playerid][1], TextDrawInfo[56][lang]);
			TextDrawSetString(ArenaInfo[playerid][0], TextDrawInfo[57][lang]);
		}
		if(PossSave[playerid][6] == 0.0)
		{
			if(Revival[playerid][2] != 0) Revival[playerid][2] = 0;
			if(PlayerInfo[playerid][pVip] != 3) MenuProcurementTime[playerid] = gettime()+25;
			else MenuProcurementTime[playerid] = gettime()+35;
			TextDrawShowForPlayer(playerid, MenuProcurementIcon[playerid][0]);
			TextDrawShowForPlayer(playerid, MenuProcurementIcon[playerid][1]);
			TextDrawSetString(MenuProcurementIcon[playerid][1], TextDrawInfo[48][lang]);
			for(new x; x < 6; x ++)
			{
				if(x != 5 && WeaponsSlotSpawn[playerid][x] != 0) GivePlayerWeaponZS(playerid, WeaponsSlotSpawn[playerid][x], MenuBuy[WeaponsSlotSpawn[playerid][x]-22][1]);
				else if(x == 5 && WeaponsSlotSpawn[playerid][5] != 0) GivePlayerWeaponZS(playerid, WeaponsSlotSpawn[playerid][5], MenuBuy[WeaponsSlotSpawn[playerid][5]-3][1]);
			}
		}
		if(!IsValidDynamicArea(ForbiddenArea[playerid][1])) ForbiddenArea[playerid][1] = CreateDynamicCube(MapSettings[ChoiceTeamCheck[playerid][7]][Zone][0], MapSettings[ChoiceTeamCheck[playerid][7]][Zone][1], MapSettings[ChoiceTeamCheck[playerid][7]][Zone][2], MapSettings[ChoiceTeamCheck[playerid][7]][Zone][3], MapSettings[ChoiceTeamCheck[playerid][7]][Zone][4], MapSettings[ChoiceTeamCheck[playerid][7]][Zone][5], -1, -1, playerid);
	}
	if(ChoiceTeamCheck[playerid][6] == 1 && Arena[2] >= 2 || ChoiceTeamCheck[playerid][6] == 2 && Arena[9] >= 2 || ChoiceTeamCheck[playerid][6] == 3 && Arena[16] >= 2)
	{
		Spawned[playerid] = false;
		TextDrawShowForPlayer(playerid, ChangeMapp[playerid][5]);
		TextDrawShowForPlayer(playerid, ChangeMapp[playerid][6]);
		switch(ChoiceTeamCheck[playerid][6])//ID карта меняется после 5 сек, то есть будет показана камера на следующей карте (FIX: отключить кнопку SPAWN, если осталось 5 секунд | или сделать отсчет )
		{
			case 1: ArenaUpdate(playerid, Arena[0], Arena[3], Arena[4]);
			case 2: ArenaUpdate(playerid, Arena[7], Arena[10], Arena[11]);
			case 3: ArenaUpdate(playerid, Arena[14], Arena[17], Arena[18]);
		}
	}
	if(PossSave[playerid][6] == 2.0)
	{
		PossSave[playerid][6] = 0.0;
		SetPlayerPosZS(playerid, PossSave[playerid][0], PossSave[playerid][1], PossSave[playerid][2], PossSave[playerid][3], floatround(PossSave[playerid][4]), floatround(PossSave[playerid][5]));
		ApplyAnimation(playerid, "PED", "GETUP_FRONT", 4.1, 0, 1, 1, 0, 0);
		new idS[6] = {2, 3, 4, 5, 6, 8}; //0 пистол | 1 дробь | 2 - узи | 3 M4, ак47 | 4 винтовки | 5 гранаты
		for(new x; x < 6; x ++) if(WeaponPlayer[playerid][idS[x]] >= 1 && WeaponPlayerAmmo[playerid][idS[x]] >= 1) GivePlayerWeaponZS(playerid, WeaponPlayer[playerid][idS[x]], WeaponPlayerAmmo[playerid][idS[x]]);
		return 1;
	}
	if(PlayerInfo[playerid][pTimers] == 9) SetPlayerTime(playerid, MapSettings[ChoiceTeamCheck[playerid][7]][Preset][3], 0);
	else if(PlayerInfo[playerid][pTimers] <= 23) SetPlayerTime(playerid, PlayerInfo[playerid][pTimers], 0);
	if(PlayerInfo[playerid][pWeather] == 13) SetPlayerWeather(playerid, MapSettings[ChoiceTeamCheck[playerid][7]][Preset][4]);
	else SetPlayerWeather(playerid, PlayerInfo[playerid][pWeather]);
/* КАК ДОБАВИТЬ КАРТУ

1 - увеличиваем MAX_MAPS на + один
2 - в паблике OnPlayerSpawn прописываем спавн двум командам (У КАЖДОЙ КАРТЫ СВОЙ ВИРТУАЛЬНЫЙ МИР, СМОТРИТЕ ПО ПОСЛЕДНЕЙ КАРТЕ КАКОЙ У НЕЁ МИР)
3 - теперь нужно узнать вместимость карты, идем в "MapSettings" и пишем нужные вам значения, время, Интерьер (если есть), погода, зона ограничение, название карты
4 - добавляем камеру в конце раунда в ArenaCamera (используйте "filterscripts - cam.pwn" для получения координат)
5 - в filterscripts "ObjectServer.pwn" добавляем объекты (У КАЖДОЙ КАРТЫ СВОЙ ВИРТУАЛЬНЫЙ МИР, СМОТРИТЕ ПО ПОСЛЕДНЕЙ КАРТЕ КАКОЙ У НЕЁ МИР)*/
	switch(ChoiceTeamCheck[playerid][7])
	{
		case 0://Карта № 1 Подвал (Интерьер № 1)
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 2217.6746, 1593.8505, 999.9753, 184.0318, 1, 1);
					case 1: SetPlayerPosZS(playerid, 2216.5701, 1589.3715, 999.9793, 273.3328, 1, 1);
					case 2: SetPlayerPosZS(playerid, 2215.8020, 1574.8750, 999.9702, 274.5860, 1, 1);
					case 3: SetPlayerPosZS(playerid, 2229.6638, 1574.5757, 999.9697, 3.2601, 1, 1);
					case 4: SetPlayerPosZS(playerid, 2232.0552, 1580.4399, 999.9658, 94.1276, 1, 1);
					case 5: SetPlayerPosZS(playerid, 2229.7971, 1593.7428, 999.9600, 92.8743, 1, 1);
					case 6: SetPlayerPosZS(playerid, 2228.9387, 1586.4474, 999.9610, 91.6209, 1, 1);
				}
				return 1;
			}
			switch(random(7))
			{
				case 0: SetPlayerPosZS(playerid, 2193.9106, 1583.3219, 999.9774, 90.0777, 1, 1);
				case 1: SetPlayerPosZS(playerid, 2194.0549, 1586.5956, 999.9774, 86.3176, 1, 1);
				case 2: SetPlayerPosZS(playerid, 2187.6274, 1590.7726, 999.9799, 182.8252, 1, 1);
				case 3: SetPlayerPosZS(playerid, 2187.6577, 1578.9189, 999.9691, 358.8969, 1, 1);
				case 4: SetPlayerPosZS(playerid, 2169.6658, 1584.0209, 999.9731, 272.4395, 1, 1);
				case 5: SetPlayerPosZS(playerid, 2181.7009, 1591.9448, 999.9786, 178.7753, 1, 1);
				case 6: SetPlayerPosZS(playerid, 2172.0698, 1578.2229, 999.9662, 358.0036, 1, 1);
			}
			return 1;
		}
		case 1://Карта № 2 кладбище 6 27
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(6))
				{
					case 0: SetPlayerPosZS(playerid, 943.2296, -1127.3093, 23.9082, 357.5729, 0, 2);
					case 1: SetPlayerPosZS(playerid, 949.9988, -1113.0670, 23.9733, 88.4966, 0, 2);
					case 2: SetPlayerPosZS(playerid, 950.4020, -1093.7827, 24.0447, 86.7290, 0, 2);
					case 3: SetPlayerPosZS(playerid, 917.2080, -1127.1561, 23.9148, 2.2078, 0, 2);
					case 4: SetPlayerPosZS(playerid, 918.6135, -1111.2922, 24.2161, 273.0194, 0, 2);
					case 5: SetPlayerPosZS(playerid, 951.1823, -1078.9530, 25.1017, 92.0468, 0, 2);
				}
			}
			else
			{
				switch(random(6))
				{
					case 0: SetPlayerPosZS(playerid, 815.4514, -1108.5942, 25.7899, 0.0055, 0, 2);
					case 1: SetPlayerPosZS(playerid, 812.3546, -1096.0988, 25.7861, 270.7609, 0, 2);
					case 2: SetPlayerPosZS(playerid, 824.4557, -1113.6525, 24.0391, 274.5771, 0, 2);
					case 3: SetPlayerPosZS(playerid, 824.4254, -1092.1459, 24.2267, 273.0667, 0, 2);
					case 4: SetPlayerPosZS(playerid, 842.2191, -1077.1804, 24.2969, 183.5648, 0, 2);
					case 5: SetPlayerPosZS(playerid, 815.0984, -1076.1434, 24.3568, 271.0981, 0, 2);
				}
			}
			return 1;
		}
		case 2://Карта № 3 казино ЛВ (Интерьер № 1)
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(6))
				{
					case 0: SetPlayerPosZS(playerid, 2248.4988, 1697.7367, 1012.3903, 91.2934, 1, 3);
					case 1: SetPlayerPosZS(playerid, 2222.9351, 1698.3032, 1012.3851, 266.8179, 1, 3);
					case 2: SetPlayerPosZS(playerid, 2226.4651, 1713.8031, 1012.2501, 179.8229, 1, 3);
					case 3: SetPlayerPosZS(playerid, 2245.6362, 1713.4883, 1012.1526, 180.8191, 1, 3);
					case 4: SetPlayerPosZS(playerid, 2254.0938, 1677.3350, 1008.3658, 88.1839, 1, 3);
					case 5: SetPlayerPosZS(playerid, 2219.4006, 1677.2220, 1008.3594, 267.7818, 1, 3);
				}
			}
			else
			{
				switch(random(6))
				{
					case 0: SetPlayerPosZS(playerid, 2270.9944, 1637.1146, 1008.3594, 179.1874, 1, 3);
					case 1: SetPlayerPosZS(playerid, 2252.0215, 1581.7347, 1008.3594, 182.6902, 1, 3);
					case 2: SetPlayerPosZS(playerid, 2222.1733, 1581.8370, 1008.3594, 180.2398, 1, 3);
					case 3: SetPlayerPosZS(playerid, 2136.2637, 1599.5781, 1008.3594, 270.8829, 1, 3);
					case 4: SetPlayerPosZS(playerid, 2175.9956, 1630.3467, 1008.3594, 178.1916, 1, 3);
					case 5: SetPlayerPosZS(playerid, 2205.2466, 1587.4712, 1006.1667, 0.6096, 1, 3);
				}
			}
			return 1;
		}
		case 3://Карта № 4 ферма
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, -64.5772, -85.4386, 3.1172, 103.9057, 0, 4);
					case 1: SetPlayerPosZS(playerid, -79.8410, -93.6343, 3.1172, 351.1046, 0, 4);
					case 2: SetPlayerPosZS(playerid, -86.6470, -83.8812, 3.1094, 36.8517, 0, 4);
					case 3: SetPlayerPosZS(playerid, -119.4940, -90.2838, 3.1181, 86.3589, 0, 4);
					case 4: SetPlayerPosZS(playerid, -157.9791, -79.3325, 3.1094, 266.5273, 0, 4);
					case 5: SetPlayerPosZS(playerid, -143.1103, -87.3881, 3.1181, 261.8273, 0, 4);
					case 6: SetPlayerPosZS(playerid, -146.8283, -54.9300, 3.1172, 256.9357, 0, 4);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, -27.7009, 69.4835, 3.1172, 65.6315, 0, 4);
					case 1: SetPlayerPosZS(playerid, -30.2309, 64.3062, 3.1172, 63.7515, 0, 4);
					case 2: SetPlayerPosZS(playerid, -35.3405, 55.2903, 3.1172, 338.8374, 0, 4);
					case 3: SetPlayerPosZS(playerid, -42.4290, 57.8548, 3.1172, 341.3441, 0, 4);
					case 4: SetPlayerPosZS(playerid, -25.3952, 79.3822, 3.1172, 158.6925, 0, 4);
					case 5: SetPlayerPosZS(playerid, -56.4924, 82.4377, 3.1172, 251.7534, 0, 4);
					case 6: SetPlayerPosZS(playerid, -61.1222, 64.3892, 3.1172, 339.4877, 0, 4);
				}
			}
			return 1;
		}
		case 4://Карта № 5 мэрия (Интерьер № 3)
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 366.6317, 160.8986, 1008.3828, 1.3978, 3, 5);
					case 1: SetPlayerPosZS(playerid, 374.5993, 181.1616, 1008.3828, 91.9519, 3, 5);
					case 2: SetPlayerPosZS(playerid, 359.9489, 161.1478, 1008.3828, 316.3009, 3, 5);
					case 3: SetPlayerPosZS(playerid, 358.8994, 186.9503, 1008.3828, 212.9233, 3, 5);
					case 4: SetPlayerPosZS(playerid, 368.0035, 193.8474, 1008.3828, 180.3363, 3, 5);
					case 5: SetPlayerPosZS(playerid, 359.1879, 210.9408, 1008.3828, 178.7696, 3, 5);
					case 6: SetPlayerPosZS(playerid, 386.3942, 170.6194, 1008.3828, 89.5158, 3, 5);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 356.9167, 167.8615, 1025.7891, 92.5553, 3, 5);
					case 1: SetPlayerPosZS(playerid, 357.2836, 155.7747, 1025.7891, 89.4220, 3, 5);
					case 2: SetPlayerPosZS(playerid, 346.5785, 160.4581, 1025.7891, 269.5904, 3, 5);
					case 3: SetPlayerPosZS(playerid, 360.8650, 168.6581, 1025.7891, 268.9638, 3, 5);
					case 4: SetPlayerPosZS(playerid, 364.9109, 155.6070, 1025.7891, 91.9522, 3, 5);
					case 5: SetPlayerPosZS(playerid, 346.5428, 163.8450, 1025.7891, 269.2772, 3, 5);
					case 6: SetPlayerPosZS(playerid, 365.0906, 154.7566, 1025.7891, 0.1913, 3, 5);
				}
			}
			return 1;
		}
		case 5://Карта № 6 корабль SF
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, -2312.8755, 1536.5541, 18.7734, 90.9652, 0, 6);
					case 1: SetPlayerPosZS(playerid, -2311.2766, 1552.5966, 18.7734, 86.2651, 0, 6);
					case 2: SetPlayerPosZS(playerid, -2322.9907, 1553.2074, 17.3281, 89.7118, 0, 6);
					case 3: SetPlayerPosZS(playerid, -2322.8545, 1541.0924, 17.3281, 90.3385, 0, 6);
					case 4: SetPlayerPosZS(playerid, -2327.2217, 1531.2543, 17.3358, 13.2578, 0, 6);
					case 5: SetPlayerPosZS(playerid, -2327.6963, 1558.9672, 17.3358, 180.2660, 0, 6);
					case 6: SetPlayerPosZS(playerid, -2317.1047, 1548.3751, 18.7734, 92.2185, 0, 6);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, -2475.0740, 1553.4771, 33.2344, 183.7127, 0, 6);
					case 1: SetPlayerPosZS(playerid, -2477.6328, 1550.2067, 33.2344, 271.7602, 0, 6);
					case 2: SetPlayerPosZS(playerid, -2471.4263, 1540.6981, 33.2344, 4.8211, 0, 6);
					case 3: SetPlayerPosZS(playerid, -2471.6709, 1546.6298, 33.2273, 95.0620, 0, 6);
					case 4: SetPlayerPosZS(playerid, -2474.1736, 1533.3438, 28.8281, 3.2778, 0, 6);
					case 5: SetPlayerPosZS(playerid, -2477.3787, 1546.9506, 23.6484, 270.5302, 0, 6);
					case 6: SetPlayerPosZS(playerid, -2474.4500, 1544.9341, 33.2344, 359.1575, 0, 6);
				}
			}
			return 1;
		}
		case 6://Карта № 7 Battlefield RC (Интерьер № 7)
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, -979.0768, 1070.7078, 1344.9652, 272.3342, 10, 7);
					case 1: SetPlayerPosZS(playerid, -969.2897, 1075.1266, 1345.0243, 95.6360, 10, 7);
					case 2: SetPlayerPosZS(playerid, -971.3531, 1089.2070, 1344.9999, 359.7551, 10, 7);
					case 3: SetPlayerPosZS(playerid, -972.8312, 1027.0669, 1345.0510, 91.2260, 10, 7);
					case 4: SetPlayerPosZS(playerid, -973.9410, 1020.2479, 1345.0500, 1.2985, 10, 7);
					case 5: SetPlayerPosZS(playerid, -974.8558, 1084.8654, 1344.9791, 177.3934, 10, 7);
					case 6: SetPlayerPosZS(playerid, -973.6807, 1055.6100, 1345.0173, 91.2259, 10, 7);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, -1126.7830, 1048.7228, 1345.7118, 89.3461, 10, 7);
					case 1: SetPlayerPosZS(playerid, -1127.5442, 1039.4402, 1345.7119, 92.1661, 10, 7);
					case 2: SetPlayerPosZS(playerid, -1136.1078, 1044.0802, 1345.7721, 274.1910, 10, 7);
					case 3: SetPlayerPosZS(playerid, -1132.1388, 1033.8527, 1345.7305, 359.1052, 10, 7);
					case 4: SetPlayerPosZS(playerid, -1132.4935, 1063.7167, 1345.7657, 270.1409, 10, 7);
					case 5: SetPlayerPosZS(playerid, -1132.3666, 1092.5505, 1345.7921, 272.3343 , 10, 7);
					case 6: SetPlayerPosZS(playerid, -1132.2750, 1097.3301, 1345.7982, 265.1276, 10, 7);
				}
			}
			return 1;
		}
		case 7://Карта № 8 ферма 2
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(6))
				{
					case 0: SetPlayerPosZS(playerid, -1083.0088, -1681.1624, 76.1188, 89.4452, 0, 8);
					case 1: SetPlayerPosZS(playerid, -1111.9423, -1676.5978, 76.3672, 2.3611, 0, 8);
					case 2: SetPlayerPosZS(playerid, -1122.4296, -1667.8751, 76.3672, 359.5411, 0, 8);
					case 3: SetPlayerPosZS(playerid, -1122.8022, -1668.3466, 80.2056, 353.2743, 0, 8);
					case 4: SetPlayerPosZS(playerid, -1105.9736, -1678.1877, 76.3739, 270.8667, 0, 8);
					case 5: SetPlayerPosZS(playerid, -1068.1563, -1678.7246, 76.0747, 84.7684, 0, 8);
				}
			}
			else
			{
				switch(random(6))
				{
					case 0: SetPlayerPosZS(playerid, -1118.6935, -1618.7206, 76.3739, 182.8195, 0, 8);
					case 1: SetPlayerPosZS(playerid, -1111.7832, -1626.3029, 76.3739, 272.7469, 0, 8);
					case 2: SetPlayerPosZS(playerid, -1067.9818, -1623.6201, 76.3739, 357.3244, 0, 8);
					case 3: SetPlayerPosZS(playerid, -1060.8342, -1609.5157, 76.3672, 179.0359, 0, 8);
					case 4: SetPlayerPosZS(playerid, -1072.2446, -1612.9647, 76.3739, 94.7484, 0, 8);
					case 5: SetPlayerPosZS(playerid, -1113.3802, -1637.5668, 76.3672, 272.0968, 0, 8);
				}
			}
			return 1;
		}
		case 8://Карта № 9 отель (Интерьер № 15)
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(6))
				{
					case 0: SetPlayerPosZS(playerid, 2224.1768, -1142.2896, 1025.7969, 179.2612, 15, 9);
					case 1: SetPlayerPosZS(playerid, 2227.3206, -1150.5736, 1025.7969, 88.4499, 15, 9);
					case 2: SetPlayerPosZS(playerid, 2235.5764, -1161.1443, 1030.2946, 2.3385, 15, 9);
					case 3: SetPlayerPosZS(playerid, 2235.3093, -1172.0850, 1030.2946, 2.7408, 15, 9);
					case 4: SetPlayerPosZS(playerid, 2240.5854, -1193.3356, 1033.7969, 358.1204, 15, 9);
					case 5: SetPlayerPosZS(playerid, 2237.2769, -1194.0515, 1029.7969, 357.8399, 15, 9);
				}
			}
			else
			{
				switch(random(6))
				{
					case 0: SetPlayerPosZS(playerid, 2190.5291, -1146.3684, 1033.7969, 268.9088, 15, 9);
					case 1: SetPlayerPosZS(playerid, 2201.4519, -1144.2264, 1029.7969, 87.9362, 15, 9);
					case 2: SetPlayerPosZS(playerid, 2187.3208, -1158.4785, 1030.2946, 358.4016, 15, 9);
					case 3: SetPlayerPosZS(playerid, 2199.2415, -1171.8088, 1030.2946, 179.2295, 15, 9);
					case 4: SetPlayerPosZS(playerid, 2186.5198, -1182.3094, 1029.7969, 271.7199, 15, 9);
					case 5: SetPlayerPosZS(playerid, 2192.8411, -1181.1414, 1033.7896, 89.1573, 15, 9);
				}
			}
			return 1;
		}
		case 9://Карта № 10 зона 51
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(6))
				{
					case 0: SetPlayerPosZS(playerid, 203.7609, 1871.7262, 13.1406, 270.3800, 0, 10);
					case 1: SetPlayerPosZS(playerid, 203.8560, 1865.4495, 13.1406, 270.0667, 0, 10);
					case 2: SetPlayerPosZS(playerid, 211.2745, 1854.5577, 12.9503, 357.8009, 0, 10);
					case 3: SetPlayerPosZS(playerid, 218.1499, 1854.5400, 12.8885, 3.4409, 0, 10);
					case 4: SetPlayerPosZS(playerid, 224.4582, 1861.5402, 13.1470, 90.8617, 0, 10);
					case 5: SetPlayerPosZS(playerid, 224.7069, 1866.3594, 13.1406, 87.7284, 0, 10);
				}
			}
			else
			{
				switch(random(6))
				{
					case 0: SetPlayerPosZS(playerid, 281.5541, 1872.7351, 8.7578, 178.6320, 0, 10);
					case 1: SetPlayerPosZS(playerid, 281.1545, 1865.0161, 8.7578, 5.4366, 0, 10);
					case 2: SetPlayerPosZS(playerid, 279.3021, 1861.8275, 8.7578, 92.6003, 0, 10);
					case 3: SetPlayerPosZS(playerid, 268.3719, 1853.9270, 8.7578, 358.6556, 0, 10);
					case 4: SetPlayerPosZS(playerid, 272.2455, 1865.9839, 8.7578, 269.4111, 0, 10);
					case 5: SetPlayerPosZS(playerid, 265.8731, 1862.1724, 8.7649, 267.9006, 0, 10);
				}
			}
			return 1;
		}
		case 10://Карта № 11 мясокомбинат (Интерьер № 1)
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(6))
				{
					case 0: SetPlayerPosZS(playerid, 963.8375, 2165.1538, 1011.0234, 179.9117, 1, 11);
					case 1: SetPlayerPosZS(playerid, 961.1722, 2151.8645, 1011.0234, 185.2947, 1, 11);
					case 2: SetPlayerPosZS(playerid, 964.3997, 2149.2375, 1011.0234, 85.0832, 1, 11);
					case 3: SetPlayerPosZS(playerid, 953.4119, 2148.7546, 1011.0234, 0.2253, 1, 11);
					case 4: SetPlayerPosZS(playerid, 951.1432, 2172.2439, 1011.0234, 88.3852, 1, 11);
					case 5: SetPlayerPosZS(playerid, 932.9727, 2173.8613, 1011.0234, 272.9965, 1, 11);
				}
			}
			else
			{
				switch(random(6))
				{
					case 0: SetPlayerPosZS(playerid, 961.9727, 2100.7148, 1011.0260, 92.8037, 1, 11);
					case 1: SetPlayerPosZS(playerid, 964.1154, 2105.7429, 1011.0234, 92.8600, 1, 11);
					case 2: SetPlayerPosZS(playerid, 963.7260, 2111.0571, 1011.0303, 91.3495, 1, 11);
					case 3: SetPlayerPosZS(playerid, 948.4664, 2105.4824, 1011.0234, 0.2249, 1, 11);
					case 4: SetPlayerPosZS(playerid, 934.1929, 2105.3521, 1011.0234, 357.4610, 1, 11);
					case 5: SetPlayerPosZS(playerid, 937.6343, 2111.9954, 1011.0234, 179.8556, 1, 11);
				}
			}
			return 1;
		}
		case 11://Карта № 12 Market
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 399.3170, -2505.6753, 12.3400, 182.7494, 0, 12, 3);
					case 1: SetPlayerPosZS(playerid, 391.9911, -2509.4219, 12.3400, 271.4237, 0, 12, 3);
					case 2: SetPlayerPosZS(playerid, 391.7500, -2515.6689, 12.3400, 273.3037, 0, 12, 3);
					case 3: SetPlayerPosZS(playerid, 398.8255, -2518.5925, 12.3400, 5.1113, 0, 12, 3);
					case 4: SetPlayerPosZS(playerid, 410.0234, -2508.3682, 14.8134, 178.6763, 0, 12, 3);
					case 5: SetPlayerPosZS(playerid, 409.3850, -2518.3467, 12.3400, 4.1713, 0, 12, 3);
					case 6: SetPlayerPosZS(playerid, 404.7259, -2511.0532, 12.3400, 270.8206, 0, 12, 3);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 555.7415, -2465.3994, 12.3400, 1.9542, 0, 12, 3);
					case 1: SetPlayerPosZS(playerid, 560.5579, -2465.5200, 12.3400, 5.7143, 0, 12, 3);
					case 2: SetPlayerPosZS(playerid, 554.5963, -2456.7534, 12.3400, 181.4959, 0, 12, 3);
					case 3: SetPlayerPosZS(playerid, 542.9686, -2456.9741, 12.3400, 180.8693, 0, 12, 3);
					case 4: SetPlayerPosZS(playerid, 539.2449, -2464.8276, 12.3400, 273.6169, 0, 12, 3);
					case 5: SetPlayerPosZS(playerid, 539.1986, -2459.9824, 12.3400, 270.7968, 0, 12, 3);
					case 6: SetPlayerPosZS(playerid, 561.1584, -2458.9233, 12.3400, 113.8155, 0, 12, 3);
				}
			}
			return 1;
		}
		case 12://Карта № 13 большой дом (Интерьер № 5)
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 1275.8711, -794.4862, 1089.9375, 5.2661, 5, 13);
					case 1: SetPlayerPosZS(playerid, 1290.7314, -797.6724, 1089.9375, 90.8069, 5, 13);
					case 2: SetPlayerPosZS(playerid, 1275.1975, -806.5352, 1089.9375, 359.3360, 5, 13);
					case 3: SetPlayerPosZS(playerid, 1289.2960, -805.5598, 1089.9375, 180.7577, 5, 13);
					case 4: SetPlayerPosZS(playerid, 1274.3663, -814.1631, 1089.9375, 272.5652, 5, 13);
					case 5: SetPlayerPosZS(playerid, 1289.2085, -816.4454, 1089.9375, 181.0710, 5, 13);
					case 6: SetPlayerPosZS(playerid, 1276.1460, -821.5679, 1085.6328, 229.3249, 5, 13);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 1265.9081, -794.6605, 1084.0078, 3.5493, 5, 13);
					case 1: SetPlayerPosZS(playerid, 1270.6066, -795.4992, 1084.1719, 358.2644, 5, 13);
					case 2: SetPlayerPosZS(playerid, 1278.7216, -793.0124, 1084.1719, 88.3381, 5, 13);
					case 3: SetPlayerPosZS(playerid, 1269.4937, -786.6973, 1084.0149, 267.9609, 5, 13);
					case 4: SetPlayerPosZS(playerid, 1253.4952, -787.3929, 1084.0149, 269.2744, 5, 13);
					case 5: SetPlayerPosZS(playerid, 1254.6870, -794.6060, 1084.2344, 272.2616, 5, 13);
					case 6: SetPlayerPosZS(playerid, 1266.7280, -786.7861, 1084.0149, 178.5114, 5, 13);
				}
			}
			return 1;
		}
		case 13://Карта № 14 остров 5516
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(6))
				{
					case 0: SetPlayerPosZS(playerid, 320.1273, -2383.0261, 34.0793, 4.4429, 0, 14, 3);
					case 1: SetPlayerPosZS(playerid, 311.8108, -2381.9304, 35.9720, 4.8125, 0, 14, 3);
					case 2: SetPlayerPosZS(playerid, 293.8642, -2368.3516, 35.8916, 322.1988, 0, 14, 3);
					case 3: SetPlayerPosZS(playerid, 331.3615, -2342.6294, 19.3726, 39.9623, 0, 14, 3);
					case 4: SetPlayerPosZS(playerid, 329.9842, -2343.2698, 19.5878, 349.5618, 0, 14, 3);
					case 5: SetPlayerPosZS(playerid, 330.2726, -2374.3440, 26.9056, 358.4148, 0, 14, 3);
				}
			}
			else
			{
				switch(random(6))
				{
					case 0: SetPlayerPosZS(playerid, 713.8833, -2450.1104, 25.9673, 120.3589, 0, 14, 3);
					case 1: SetPlayerPosZS(playerid, 716.5098, -2459.6538, 24.7326, 118.2217, 0, 14, 3);
					case 2: SetPlayerPosZS(playerid, 711.3960, -2474.6631, 23.3777, 96.657, 0, 14, 3);
					case 3: SetPlayerPosZS(playerid, 683.8505, -2451.2400, 27.3400, 128.9875, 0, 14, 3);
					case 4: SetPlayerPosZS(playerid, 685.7477, -2479.1033, 22.3844, 127.4771, 0, 14, 3);
					case 5: SetPlayerPosZS(playerid, 680.9784, -2467.8225, 23.5656, 157.6136, 0, 14, 3);
				}
			}
			return 1;
		}
		case 14://Карта № 15 трещина завод (Интерьер № 2)
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(6))
				{
					case 0: SetPlayerPosZS(playerid, 2524.8921, -1282.2059, 1048.2891, 180.1195, 2, 15);
					case 1: SetPlayerPosZS(playerid, 2528.4851, -1282.7434, 1048.2891, 180.1195, 2, 15);
					case 2: SetPlayerPosZS(playerid, 2523.6609, -1304.7921, 1048.2891, 269.1071, 2, 15);
					case 3: SetPlayerPosZS(playerid, 2526.5781, -1293.7207, 1048.2891, 183.2529, 2, 15);
					case 4: SetPlayerPosZS(playerid, 2537.5684, -1287.3003, 1044.1250, 181.0831, 2, 15);
					case 5: SetPlayerPosZS(playerid, 2537.6953, -1300.8643, 1044.1250, 355.6115, 2, 15);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 2543.0022, -1318.6101, 1031.4219, 91.1317, 2, 15);
					case 1: SetPlayerPosZS(playerid, 2534.9087, -1321.5027, 1031.4219, 3.0842, 2, 15);
					case 2: SetPlayerPosZS(playerid, 2526.9707, -1321.1520, 1031.4219, 359.9508, 2, 15);
					case 3: SetPlayerPosZS(playerid, 2523.8911, -1309.7235, 1031.4219, 273.1567, 2, 15);
					case 4: SetPlayerPosZS(playerid, 2526.2651, -1290.4703, 1031.4219, 178.5291, 2, 15);
					case 5: SetPlayerPosZS(playerid, 2524.0562, -1298.9247, 1031.4219, 275.0367, 2, 15);
					case 6: SetPlayerPosZS(playerid, 2524.2488, -1296.7710, 1031.4219, 271.2767, 2, 15);
				}
			}
			return 1;
		}
		case 15://Карта № 16 nuke
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 2605.9092, 2806.4026, 10.8203, 357.5676, 0, 16);
					case 1: SetPlayerPosZS(playerid, 2611.9460, 2806.9373, 10.8203, 7.2809, 0, 16);
					case 2: SetPlayerPosZS(playerid, 2604.3628, 2824.4133, 10.8203, 184.0026, 0, 16);
					case 3: SetPlayerPosZS(playerid, 2605.1077, 2831.6570, 10.8203, 93.4718, 0, 16);
					case 4: SetPlayerPosZS(playerid, 2592.7188, 2847.8550, 10.8203, 180.2660, 0, 16);
					case 5: SetPlayerPosZS(playerid, 2596.4194, 2848.4099, 10.8203, 181.2060, 0, 16);
					case 6: SetPlayerPosZS(playerid, 2602.5693, 2846.6775, 10.8203, 178.9892, 0, 16);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 2547.0237, 2807.9585, 10.8203, 1.9542, 0, 16);
					case 1: SetPlayerPosZS(playerid, 2542.6328, 2807.6638, 10.8203, 357.5675, 0, 16);
					case 2: SetPlayerPosZS(playerid, 2542.3662, 2847.7456, 10.8203, 270.1466, 0, 16);
					case 3: SetPlayerPosZS(playerid, 2563.0269, 2847.8167, 10.8203, 94.0516, 0, 16);
					case 4: SetPlayerPosZS(playerid, 2556.9844, 2830.2698, 10.8203, 180.5558, 0, 16);
					case 5: SetPlayerPosZS(playerid, 2557.0317, 2823.3926, 10.8203, 4.1709, 0, 16);
					case 6: SetPlayerPosZS(playerid, 2546.8464, 2824.9849, 10.8203, 267.9766, 0, 16);
				}
			}
			return 1;
		}
		case 16://Карта № 17 LVPD (Интерьер № 3)
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 291.4774, 168.1206, 1007.1794, 2.2168, 3, 17);
					case 1: SetPlayerPosZS(playerid, 300.5723, 172.9836, 1007.1719, 91.2043, 3, 17);
					case 2: SetPlayerPosZS(playerid, 299.9590, 191.2227, 1007.1719, 89.6377, 3, 17);
					case 3: SetPlayerPosZS(playerid, 268.0380, 186.0305, 1008.1719, 0.0235, 3, 17);
					case 4: SetPlayerPosZS(playerid, 257.5944, 186.1285, 1008.1719, 359.7102, 3, 17);
					case 5: SetPlayerPosZS(playerid, 246.1358, 185.6980, 1008.1719, 359.7102, 3, 17);
					case 6: SetPlayerPosZS(playerid, 278.5132, 187.7122, 1007.1719, 181.4452, 3, 17);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 202.1868, 157.7426, 1003.0234, 358.7936, 3, 17);
					case 1: SetPlayerPosZS(playerid, 202.4004, 179.7464, 1003.0333, 182.4087, 3, 17);
					case 2: SetPlayerPosZS(playerid, 211.5217, 186.3520, 1003.0313, 180.5287, 3, 17);
					case 3: SetPlayerPosZS(playerid, 230.0156, 182.5483, 1003.0313, 146.6883, 3, 17);
					case 4: SetPlayerPosZS(playerid, 209.4489, 142.4177, 1003.0234, 271.3962 , 3, 17);
					case 5: SetPlayerPosZS(playerid, 221.8065, 166.2252, 1003.0234, 93.1312, 3, 17);
					case 6: SetPlayerPosZS(playerid, 215.9849, 184.9758, 1003.0313, 216.8992, 3, 17);
				}
			}
			return 1;
		}
		case 17://Карта № 18 Assault
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, -109.2142, 407.8974, 294.2922, 6.3410, 0, 18, 3);
					case 1: SetPlayerPosZS(playerid, -99.4728, 407.9624, 294.2922, 355.6875, 0, 18, 3);
					case 2: SetPlayerPosZS(playerid, -113.8679, 424.2078, 294.2922, 175.2292, 0, 18, 3);
					case 3: SetPlayerPosZS(playerid, -118.8127, 407.4280, 294.2922, 350.6741, 0, 18, 3);
					case 4: SetPlayerPosZS(playerid, -102.7967, 425.2961, 294.2922, 180.5326, 0, 18, 3);
					case 5: SetPlayerPosZS(playerid, -96.0779, 406.5659, 294.2922, 352.2408, 0, 18, 3);
					case 6: SetPlayerPosZS(playerid, -124.3280, 400.5460, 294.2922, 86.5550, 0, 18, 3);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, -102.1838, 351.5178, 299.7194, 178.6292, 0, 18, 3);
					case 1: SetPlayerPosZS(playerid, -121.9057, 350.0982, 296.9857, 179.2559, 0, 18, 3);
					case 2: SetPlayerPosZS(playerid, -163.6763, 352.0838, 299.6694, 184.5826, 0, 18, 3);
					case 3: SetPlayerPosZS(playerid, -103.8116, 310.9590, 296.9857, 358.7975, 0, 18, 3);
					case 4: SetPlayerPosZS(playerid, -117.2137, 310.6255, 294.2922, 78.7217, 0, 18, 3);
					case 5: SetPlayerPosZS(playerid, -166.8753, 316.7287, 296.9894, 265.7600, 0, 18, 3);
					case 6: SetPlayerPosZS(playerid, -151.5862, 330.7936, 294.2922, 94.3885, 0, 18, 3);
				}
			}
			return 1;
		}
		case 18://Карта № 19 Passage
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 723.1660, -2432.2988, 19.1000, 91.8815, 0, 19, 3);
					case 1: SetPlayerPosZS(playerid, 718.7016, -2425.4966, 19.1000, 184.3157, 0, 19, 3);
					case 2: SetPlayerPosZS(playerid, 716.9646, -2441.9041, 19.1000, 358.1939, 0, 19, 3);
					case 3: SetPlayerPosZS(playerid, 722.4321, -2438.2793, 19.1000, 91.5682, 0, 19, 3);
					case 4: SetPlayerPosZS(playerid, 715.5040, -2425.2183, 19.1000, 184.0024, 0, 19, 3);
					case 5: SetPlayerPosZS(playerid, 702.7468, -2425.0701, 22.9734, 181.4957, 0, 19, 3);
					case 6: SetPlayerPosZS(playerid, 702.4230, -2442.1240, 22.9734, 1.0140, 0, 19, 3);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 579.2232, -2453.0413, 19.1000, 93.7384, 0, 19, 3);
					case 1: SetPlayerPosZS(playerid, 579.3845, -2448.0544, 19.1000, 88.0983, 0, 19, 3);
					case 2: SetPlayerPosZS(playerid, 577.4598, -2435.7043, 19.1000, 180.8458, 0, 19, 3);
					case 3: SetPlayerPosZS(playerid, 608.1731, -2465.3569, 19.1000, 0.7007, 0, 19, 3);
					case 4: SetPlayerPosZS(playerid, 575.0811, -2455.1843, 19.1000, 273.2798, 0, 19, 3);
					case 5: SetPlayerPosZS(playerid, 582.3305, -2444.2944, 19.1000, 266.0496, 0, 19, 3);
					case 6: SetPlayerPosZS(playerid, 589.9344, -2460.6174, 19.1000, 272.6531, 0, 19, 3);
				}
			}
			return 1;
		}
		case 19://Карта № 20 Pirate
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(8))
				{
					case 0: SetPlayerPosZS(playerid, 585.3373, -2287.0154, 6.8822, 162.6777, 0, 20, 3);
					case 1: SetPlayerPosZS(playerid, 586.3333, -2282.1375, 9.3332, 253.8914, 0, 20, 3);
					case 2: SetPlayerPosZS(playerid, 581.0327, -2298.1519, 5.8509, 252.0676, 0, 20, 3);
					case 3: SetPlayerPosZS(playerid, 556.2470, -2332.6201, 9.2332, 261.8935, 0, 20, 3);
					case 4: SetPlayerPosZS(playerid, 555.8119, -2337.6885, 6.7822, 172.0222, 0, 20, 3);
					case 5: SetPlayerPosZS(playerid, 552.7449, -2348.9683, 5.7509, 261.6926, 0, 20, 3);
					case 6: SetPlayerPosZS(playerid, 587.9647, -2438.4980, 9.1775, 292.7691, 0, 20, 3);
					case 7: SetPlayerPosZS(playerid, 587.5764, -2433.4565, 6.7322, 21.1861, 0, 20, 3);
				}
			}
			else
			{
				switch(random(8))
				{
					case 0: SetPlayerPosZS(playerid, 687.4833, -2425.6592, 9.1675, 48.2455, 0, 20, 3);
					case 1: SetPlayerPosZS(playerid, 682.5482, -2421.2637, 6.7222, 44.8551, 0, 20, 3);
					case 2: SetPlayerPosZS(playerid, 690.2470, -2389.9939, 9.2732, 92.8517, 0, 20, 3);
					case 3: SetPlayerPosZS(playerid, 689.3505, -2384.5156, 6.8222, 3.9204, 0, 20, 3);
					case 4: SetPlayerPosZS(playerid, 689.4677, -2372.7832, 5.7909, 94.8441, 0, 20, 3);
					case 5: SetPlayerPosZS(playerid, 676.5516, -2277.1863, 9.1975, 161.6409, 0, 20, 3);
					case 6: SetPlayerPosZS(playerid, 674.4941, -2283.4624, 6.7522, 163.8904, 0, 20, 3);
					case 7: SetPlayerPosZS(playerid, 671.2786, -2294.7832, 5.7209, 161.4400, 0, 20, 3);
				}
			}
			return 1;
		}
		case 20://Карта № 21 Бункер
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(8))
				{
					case 0: SetPlayerPosZS(playerid, -1468.2036, 342.4249, 7.1875, 5.1820, 0, 21, 3);
					case 1: SetPlayerPosZS(playerid, -1463.5192, 341.7745, 7.1875, 359.0276, 0, 21, 3);
					case 2: SetPlayerPosZS(playerid, -1462.2399, 354.5602, 7.1875, 267.9030, 0, 21, 3);
					case 3: SetPlayerPosZS(playerid, -1453.7157, 357.6327, 7.1750, 86.5609, 0, 21, 3);
					case 4: SetPlayerPosZS(playerid, -1475.3281, 365.7391, 7.1875, 271.7754, 0, 21, 3);
					case 5: SetPlayerPosZS(playerid, -1474.9325, 363.0510, 7.1875, 268.4412, 0, 21, 3);
					case 6: SetPlayerPosZS(playerid, -1471.6411, 355.9098, 7.1875, 91.7990, 0, 21, 3);
					case 7: SetPlayerPosZS(playerid, -1475.2684, 349.8138, 7.1875, 272.3370, 0, 21, 3);
				}
			}
			else
			{
				switch(random(8))
				{
					case 0: SetPlayerPosZS(playerid, -1472.7787, 381.9625, 7.1875, 273.3567, 0, 21, 3);
					case 1: SetPlayerPosZS(playerid, -1470.2887, 391.4353, 11.4028, 90.7379, 0, 21, 3);
					case 2: SetPlayerPosZS(playerid, -1475.0720, 416.1128, 7.1875, 268.4323, 0, 21, 3);
					case 3: SetPlayerPosZS(playerid, -1454.2529, 440.4333, 7.1875, 177.9344, 0, 21, 3);
					case 4: SetPlayerPosZS(playerid, -1453.9014, 429.2829, 7.1750, 91.1965, 0, 21, 3);
					case 5: SetPlayerPosZS(playerid, -1468.1721, 423.3372, 7.1875, 92.8195, 0, 21, 3);
					case 6: SetPlayerPosZS(playerid, -1453.8365, 393.7198, 7.1750, 90.6824, 0, 21, 3);
					case 7: SetPlayerPosZS(playerid, -1466.5916, 391.5389, 7.1875, 270.5936, 0, 21, 3);
				}
			}
			return 1;
		}
		case 21://Карта № 22 Tropic
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 1359.0991, 2739.0693, 10.8203, 89.0617, 0, 22);
					case 1: SetPlayerPosZS(playerid, 1350.1576, 2727.0898, 10.8203, 13.8844, 0, 22);
					case 2: SetPlayerPosZS(playerid, 1365.3066, 2768.6104, 10.8203, 91.9051 , 0, 22);
					case 3: SetPlayerPosZS(playerid, 1363.9073, 2786.9998, 10.8203, 92.8451, 0, 22);
					case 4: SetPlayerPosZS(playerid, 1362.6538, 2816.3372, 10.8203, 90.3384, 0, 22);
					case 5: SetPlayerPosZS(playerid, 1365.8553, 2839.3501, 10.8203, 105.6919, 0, 22);
					case 6: SetPlayerPosZS(playerid, 1350.2284, 2850.7434, 10.8203, 174.6259, 0, 22);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 1131.8464, 2832.0913, 10.8203, 267.6868, 0, 22);
					case 1: SetPlayerPosZS(playerid, 1145.0818, 2851.9507, 10.8203, 183.0859, 0, 22);
					case 2: SetPlayerPosZS(playerid, 1132.5117, 2802.4648, 10.8203, 280.8469, 0, 22);
					case 3: SetPlayerPosZS(playerid, 1130.3750, 2779.7117, 10.8203, 275.8336, 0, 22);
					case 4: SetPlayerPosZS(playerid, 1131.4641, 2737.8872, 10.8203, 274.2670, 0, 22);
					case 5: SetPlayerPosZS(playerid, 1144.9705, 2727.2622, 10.8281, 2.9411, 0, 22);
					case 6: SetPlayerPosZS(playerid, 1174.2540, 2729.5730, 10.8203, 7.6646, 0, 22);
				}
			}
			return 1;
		}
		case 22://Карта № 23 Tropic 2 | ПОГОДА МОЖЕТ 21 20 Ночь Туман | 22 ночь 23
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(6))
				{
					case 0: SetPlayerPosZS(playerid, 606.4255, -2854.9651, 4.5222, 80.5836, 0, 23, 3);
					case 1: SetPlayerPosZS(playerid, 593.7237, -2873.8538, 4.5319, 327.5255, 0, 23, 3);
					case 2: SetPlayerPosZS(playerid, 582.1116, -2871.0283, 4.7261, 255.2010, 0, 23, 3);
					case 3: SetPlayerPosZS(playerid, 586.4301, -2840.4392, 5.2087, 226.4303, 0, 23, 3);
					case 4: SetPlayerPosZS(playerid, 595.0828, -2853.8076, 4.7550, 340.9104, 0, 23, 3);
					case 5: SetPlayerPosZS(playerid, 606.6105, -2843.6563, 4.7595, 323.1064, 0, 23, 3);
				}
			}
			else
			{
				switch(random(6))
				{
					case 0: SetPlayerPosZS(playerid, 642.7326, -2543.4219, 4.9598, 336.0328, 0, 23, 3);
					case 1: SetPlayerPosZS(playerid, 622.9877, -2516.4548, 4.6578, 218.9246, 0, 23, 3);
					case 2: SetPlayerPosZS(playerid, 629.6804, -2545.5928, 4.5790, 38.5224, 0, 23, 3);
					case 3: SetPlayerPosZS(playerid, 623.1750, -2516.5586, 4.6609, 220.2903, 0, 23, 3);
					case 4: SetPlayerPosZS(playerid, 641.6945, -2518.5295, 4.5403, 265.4671, 0, 23, 3);
					case 5: SetPlayerPosZS(playerid, 626.9108, -2558.9419, 4.4853, 134.5487, 0, 23, 3);
				}
			}
			return 1;
		}
		case 23://Карта № 24 Hail
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 649.8658, -2464.1997, 20.1234, 270.1232, 0, 24, 3);
					case 1: SetPlayerPosZS(playerid, 649.4390, -2461.3027, 20.1234, 274.1966, 0, 24, 3);
					case 2: SetPlayerPosZS(playerid, 666.1961, -2451.3806, 17.7866, 181.7623, 0, 24, 3);
					case 3: SetPlayerPosZS(playerid, 675.0746, -2451.4956, 17.7866, 135.0751, 0, 24, 3);
					case 4: SetPlayerPosZS(playerid, 668.2191, -2472.7019, 17.7944, 358.7738, 0, 24, 3);
					case 5: SetPlayerPosZS(playerid, 675.2627, -2472.2134, 17.7866, 42.0143, 0, 24, 3);
					case 6: SetPlayerPosZS(playerid, 674.9058, -2459.2886, 17.7866, 91.8114, 0, 24, 3);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 531.4281, -2472.3767, 17.7866, 3.5209, 0, 24, 3);
					case 1: SetPlayerPosZS(playerid, 526.3305, -2472.4922, 17.7866, 1.9542, 0, 24, 3);
					case 2: SetPlayerPosZS(playerid, 524.1363, -2465.5071, 17.7866, 273.5934, 0, 24, 3);
					case 3: SetPlayerPosZS(playerid, 530.2406, -2452.4019, 17.7866, 175.2059, 0, 24, 3);
					case 4: SetPlayerPosZS(playerid, 549.9338, -2461.7378, 20.0734, 88.0984, 0, 24, 3);
					case 5: SetPlayerPosZS(playerid, 549.9534, -2464.4758, 20.0734, 91.5217, 0, 24, 3);
					case 6: SetPlayerPosZS(playerid, 525.0762, -2452.7000, 17.7866, 187.7160, 0, 24, 3);
				}
			}
			return 1;
		}
		case 24://Карта № 25
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 631.8361, -2354.2993, 8.9555, 189.6428, 0, 25, 3);
					case 1: SetPlayerPosZS(playerid, 637.6055, -2353.9683, 8.9323, 182.7494, 0, 25, 3);
					case 2: SetPlayerPosZS(playerid, 642.0558, -2354.5864, 8.9013, 175.5427, 0, 25, 3);
					case 3: SetPlayerPosZS(playerid, 646.1591, -2353.9961, 8.8901, 177.4226, 0, 25, 3);
					case 4: SetPlayerPosZS(playerid, 630.2039, -2359.3191, 8.9360, 270.1702, 0, 25, 3);
					case 5: SetPlayerPosZS(playerid, 623.5249, -2362.5261, 8.9203, 181.8094, 0, 25, 3);
					case 6: SetPlayerPosZS(playerid, 617.1478, -2364.5095, 8.8917, 263.8566, 0, 25, 3);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 527.0089, -2358.0151, 8.9958, 271.3768, 0, 25, 3);
					case 1: SetPlayerPosZS(playerid, 529.3119, -2353.8630, 9.0640, 186.4627, 0, 25, 3);
					case 2: SetPlayerPosZS(playerid, 526.8296, -2369.9199, 8.8215, 355.9776, 0, 25, 3);
					case 3: SetPlayerPosZS(playerid, 541.6910, -2360.6924, 8.9601, 89.6652, 0, 25, 3);
					case 4: SetPlayerPosZS(playerid, 538.1790, -2353.8950, 9.0700, 178.6527, 0, 25, 3);
					case 5: SetPlayerPosZS(playerid, 534.6874, -2354.0139, 9.1824, 90.3153, 0, 25, 3);
					case 6: SetPlayerPosZS(playerid, 540.4213, -2366.4778, 8.8711, 268.9170, 0, 25, 3);
				}
			}
			return 1;
		}
		case 25://Карта № 26 RockWat
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 1145.6106, 2114.6934, 143.5078, 268.0289, 0, 26, 3);
					case 1: SetPlayerPosZS(playerid, 1151.9828, 2111.2830, 143.5000, 270.2222, 0, 26, 3);
					case 2: SetPlayerPosZS(playerid, 1164.8333, 2109.8948, 143.5000, 90.3906, 0, 26, 3);
					case 3: SetPlayerPosZS(playerid, 1178.7163, 2108.5283, 143.5000, 81.9305, 0, 26, 3);
					case 4: SetPlayerPosZS(playerid, 1190.4209, 2108.6875, 143.5000, 89.4273, 0, 26, 3);
					case 5: SetPlayerPosZS(playerid, 1202.2351, 2108.7966, 143.5000, 87.2339, 0, 26, 3);
					case 6: SetPlayerPosZS(playerid, 1203.1561, 2115.4470, 143.5000, 93.8139, 0, 26, 3);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 1199.8885, 2059.5144, 143.5000, 93.8373, 0, 26, 3);
					case 1: SetPlayerPosZS(playerid, 1188.6848, 2059.9189, 143.5000, 93.2106, 0, 26, 3);
					case 2: SetPlayerPosZS(playerid, 1167.4872, 2059.7341, 143.5000, 269.5956 , 0, 26, 3);
					case 3: SetPlayerPosZS(playerid, 1152.1545, 2059.3984, 143.5000, 269.2590, 0, 26, 3);
					case 4: SetPlayerPosZS(playerid, 1141.1997, 2056.6536, 143.5000, 263.6190, 0, 26, 3);
					case 5: SetPlayerPosZS(playerid, 1140.9170, 2053.2712, 143.5000, 271.4523, 0, 26, 3);
					case 6: SetPlayerPosZS(playerid, 1148.0132, 2051.7820, 143.5000, 356.0532, 0, 26, 3);
				}
			}
			return 1;
		}
		case 26://Карта № 27 Megapolis
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 1485.8142, 159.4448, 296.3041, 89.3985, 0, 27, 3);
					case 1: SetPlayerPosZS(playerid, 1479.2257, 159.5140, 296.3131, 89.3985, 0, 27, 3);
					case 2: SetPlayerPosZS(playerid, 1490.5043, 165.4379, 296.3034, 92.5318, 0, 27, 3);
					case 3: SetPlayerPosZS(playerid, 1489.6531, 171.4799, 296.3054, 90.9651, 0, 27, 3);
					case 4: SetPlayerPosZS(playerid, 1486.1796, 177.2719, 296.3086, 95.0385, 0, 27, 3);
					case 5: SetPlayerPosZS(playerid, 1479.8442, 177.1983, 296.3174, 89.3985, 0, 27, 3);
					case 6: SetPlayerPosZS(playerid, 1473.9684, 177.2311, 296.3188, 90.6518, 0, 27, 3);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 1349.0107, 155.5658, 296.3790, 184.0494, 0, 27, 3);
					case 1: SetPlayerPosZS(playerid, 1360.3438, 158.0784, 296.5995, 274.6037, 0, 27, 3);
					case 2: SetPlayerPosZS(playerid, 1354.3354, 162.3918, 298.0578, 271.4703, 0, 27, 3);
					case 3: SetPlayerPosZS(playerid, 1354.3910, 176.6943, 298.0500, 271.7836, 0, 27, 3);
					case 4: SetPlayerPosZS(playerid, 1365.1278, 180.7672, 296.3672, 0.7711, 0, 27, 3);
					case 5: SetPlayerPosZS(playerid, 1349.8925, 181.8536, 296.3326, 274.6270, 0, 27, 3);
					case 6: SetPlayerPosZS(playerid, 1364.6865, 161.8379, 296.3931, 180.3129, 0, 27, 3);
				}
			}
			return 1;
		}
		case 27://Карта № 28 Village 
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, -1995.6584, 1957.1033, 1.9972, 0.9676, 0, 28, 3);
					case 1: SetPlayerPosZS(playerid, -1984.9873, 1938.4242, 1.9939, 91.5217, 0, 28, 3);
					case 2: SetPlayerPosZS(playerid, -1994.1111, 1914.6648, 1.9898, 359.7142, 0, 28, 3);
					case 3: SetPlayerPosZS(playerid, -1984.5619, 1901.2384, 1.9874, 93.3784, 0, 28, 3);
					case 4: SetPlayerPosZS(playerid, -1993.2950, 1878.3182, 1.9834, 1.5709, 0, 28, 3);
					case 5: SetPlayerPosZS(playerid, -1987.0011, 1874.6830, 1.9828, 92.7517, 0, 28, 3);
					case 6: SetPlayerPosZS(playerid, -1996.6951, 1891.8983, 7.3431, 9.4043, 0, 28, 3);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, -2126.7319, 1962.4083, 12.6793, 221.5329, 0, 28, 3);
					case 1: SetPlayerPosZS(playerid, -2116.7915, 1968.2594, 12.5982, 231.2697, 0, 28, 3);
					case 2: SetPlayerPosZS(playerid, -2103.1897, 1963.3228, 12.3619, 239.7298, 0, 28, 3);
					case 3: SetPlayerPosZS(playerid, -2132.9553, 1930.9752, 12.4845, 266.3634, 0, 28, 3);
					case 4: SetPlayerPosZS(playerid, -2110.3596, 1913.0924, 11.4037, 285.7904, 0, 28, 3);
					case 5: SetPlayerPosZS(playerid, -2106.4119, 1942.2498, 12.5100, 329.0541, 0, 28, 3);
					case 6: SetPlayerPosZS(playerid, -2100.6643, 1971.5260, 12.3438, 274.5336, 0, 28, 3);
				}
			}
			return 1;
		}
		case 28://Карта № 29 Chinese Quarter
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, -2215.6265, 615.2657, 35.1641, 183.0392, 0, 29);
					case 1: SetPlayerPosZS(playerid, -2223.0820, 610.0251, 35.1641, 270.4601, 0, 29);
					case 2: SetPlayerPosZS(playerid, -2203.3865, 612.6415, 35.1641, 180.5326, 0, 29);
					case 3: SetPlayerPosZS(playerid, -2190.1951, 604.3345, 35.1641, 35.1445, 0, 29);
					case 4: SetPlayerPosZS(playerid, -2213.3926, 622.3636, 44.2422, 94.9918, 0, 29);
					case 5: SetPlayerPosZS(playerid, -2224.0913, 620.9203, 44.2422, 272.3401, 0, 29);
					case 6: SetPlayerPosZS(playerid, -2223.7322, 614.3708, 44.2422, 294.2737, 0, 29);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, -2184.0964, 698.6915, 53.8906, 272.9669, 0, 29);
					case 1: SetPlayerPosZS(playerid, -2174.3684, 707.4346, 53.8906, 105.0421, 0, 29);
					case 2: SetPlayerPosZS(playerid, -2183.6816, 717.1650, 53.8938, 189.3061, 0, 29);
					case 3: SetPlayerPosZS(playerid, -2178.5959, 685.8969, 53.8906, 183.6660, 0, 29);
					case 4: SetPlayerPosZS(playerid, -2174.8091, 633.2390, 49.4375, 23.2378, 0, 29);
					case 5: SetPlayerPosZS(playerid, -2178.3037, 651.7750, 49.4375, 183.3526, 0, 29);
					case 6: SetPlayerPosZS(playerid, -2172.9885, 657.6343, 49.4375, 175.8325, 0, 29);
				}
			}
			return 1;
		}
		case 29://Карта № 30 Opposition
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(6))
				{
					case 0: SetPlayerPosZS(playerid, 375.0094, -1009.6216, 296.0713, 272.6879, 0, 30, 3);
					case 1: SetPlayerPosZS(playerid, 377.3210, -1002.7689, 296.0791, 268.6145, 0, 30, 3);
					case 2: SetPlayerPosZS(playerid, 389.2464, -992.8619, 296.0454, 271.7479, 0, 30, 3);
					case 3: SetPlayerPosZS(playerid, 383.3423, -1014.0501, 296.0454, 271.9167, 0, 30, 3);
					case 4: SetPlayerPosZS(playerid, 383.4048, -1022.3104, 296.0454, 306.7533, 0, 30, 3);
					case 5: SetPlayerPosZS(playerid, 384.3575, -995.3345, 296.0454, 187.5081, 0, 30, 3);
				}
			}
			else
			{
				switch(random(6))
				{
					case 0: SetPlayerPosZS(playerid, 503.8054, -1008.8092, 296.0713, 97.1723, 0, 30, 3);
					case 1: SetPlayerPosZS(playerid, 500.0634, -1015.1061, 296.0791, 89.9656, 0, 30, 3);
					case 2: SetPlayerPosZS(playerid, 495.6155, -1004.1623, 296.0454, 91.2751, 0, 30, 3);
					case 3: SetPlayerPosZS(playerid, 496.5915, -994.8463, 296.0454, 129.6145, 0, 30, 3);
					case 4: SetPlayerPosZS(playerid, 495.5041, -1019.7624, 296.0454, 88.9370, 0, 30, 3);
					case 5: SetPlayerPosZS(playerid, 489.3654, -1020.8271, 296.0454, 1.5162, 0, 30, 3);
				}
			}
			return 1;
		}
		case 30://Карта № 31
		{
			GivePlayerWeaponZS(playerid, 46, 1);
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 317.4221, 1864.6863, 272.2378, 93.4476, 0, 31, 3);
					case 1: SetPlayerPosZS(playerid, 314.3175, 1860.4612, 272.0904, 3.5763, 0, 31, 3);
					case 2: SetPlayerPosZS(playerid, 314.1539, 1868.7571, 272.0968, 186.9342, 0, 31, 3);
					case 3: SetPlayerPosZS(playerid, 306.6062, 1868.0160, 271.7009, 182.9171, 0, 31, 3);
					case 4: SetPlayerPosZS(playerid, 306.8102, 1860.4176, 271.6978, 359.3582, 0, 31, 3);
					case 5: SetPlayerPosZS(playerid, 285.0345, 1860.5135, 270.5595, 359.1010, 0, 31, 3);
					case 6: SetPlayerPosZS(playerid, 290.6925, 1866.7710, 270.8666, 179.6390, 0, 31, 3);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 46.2797, 1858.0739, 272.2655, 273.2057, 0, 31, 3);
					case 1: SetPlayerPosZS(playerid, 49.4461, 1862.1732, 272.1145, 178.3211, 0, 31, 3);
					case 2: SetPlayerPosZS(playerid, 49.3655, 1854.5833, 272.1324, 6.1219, 0, 31, 3);
					case 3: SetPlayerPosZS(playerid, 57.0184, 1854.6058, 271.7322, 4.9248, 0, 31, 3);
					case 4: SetPlayerPosZS(playerid, 56.9762, 1861.9900, 271.7212, 181.6793, 0, 31, 3);
					case 5: SetPlayerPosZS(playerid, 78.7476, 1862.4615, 270.5820, 178.9717, 0, 31, 3);
					case 6: SetPlayerPosZS(playerid, 72.9109, 1855.7031, 270.8994, 4.4996, 0, 31, 3);
				}
			}
			return 1;
		}
		case 31://Карта № 32
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 1759.1227, -1905.3544, 13.5658, 5.1110, 0, 32);
					case 1: SetPlayerPosZS(playerid, 1753.8969, -1893.9949, 13.5571, 269.2301, 0, 32);
					case 2: SetPlayerPosZS(playerid, 1767.4050, -1888.9969, 13.5538, 181.4960, 0, 32);
					case 3: SetPlayerPosZS(playerid, 1755.5544, -1930.6868, 13.5773, 1.9777, 0, 32);
					case 4: SetPlayerPosZS(playerid, 1761.0012, -1911.2721, 13.5691, 92.8453, 0, 32);
					case 5: SetPlayerPosZS(playerid, 1776.9526, -1886.2443, 13.3871, 185.9062, 0, 32);
					case 6: SetPlayerPosZS(playerid, 1783.6775, -1908.7399, 13.3920, 104.1255, 0, 32);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 1707.2224, -1883.8066, 13.5685, 180.8693, 0, 32);
					case 1: SetPlayerPosZS(playerid, 1730.7065, -1891.1248, 13.5627, 180.5559, 0, 32);
					case 2: SetPlayerPosZS(playerid, 1722.8219, -1892.6036, 13.5647, 178.6758, 0, 32);
					case 3: SetPlayerPosZS(playerid, 1724.2855, -1908.4169, 13.5643, 89.6883, 0, 32);
					case 4: SetPlayerPosZS(playerid, 1706.3203, -1928.4895, 13.5687, 273.3035, 0, 32);
					case 5: SetPlayerPosZS(playerid, 1657.5399, -1953.7721, 13.5469, 169.2523, 0, 32);
					case 6: SetPlayerPosZS(playerid, 1724.8074, -1934.2725, 16.4728, 90.6284, 0, 32);
				}
			}
			return 1;
		}
		case 32: //погода может 32 - стоячий туман
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, -181.2726, 52.1634, 5.0000, 344.4869, 0, 33, 3);
					case 1: SetPlayerPosZS(playerid, -174.0658, 43.9572, 6.4978, 248.9756, 0, 33, 3);
					case 2: SetPlayerPosZS(playerid, -167.5910, 41.6228, 6.4978, 68.5501, 0, 33, 3);
					case 3: SetPlayerPosZS(playerid, -174.9413, 47.3429, 9.6931, 162.2939, 0, 33, 3);
					case 4: SetPlayerPosZS(playerid, -165.4443, 43.5064, 9.6931, 158.2767, 0, 33, 3);
					case 5: SetPlayerPosZS(playerid, -162.0175, 35.2189, 5.0000, 159.9792, 0, 33, 3);
					case 6: SetPlayerPosZS(playerid, -180.8635, 40.8952, 5.0000, 157.2153, 0, 33, 3);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, -200.9253, -53.9687, 6.4978, 69.5608, 0, 33, 3);
					case 1: SetPlayerPosZS(playerid, -208.1104, -51.3215, 6.4978, 252.2688, 0, 33, 3);
					case 2: SetPlayerPosZS(playerid, -193.9215, -61.1543, 5.0000, 159.5775, 0, 33, 3);
					case 3: SetPlayerPosZS(playerid, -210.1611, -53.8718, 9.6931, 341.4015, 0, 33, 3);
					case 4: SetPlayerPosZS(playerid, -200.5049, -57.3054, 9.6931, 343.0244, 0, 33, 3);
					case 5: SetPlayerPosZS(playerid, -214.0580, -45.4562, 5.0000, 333.6805, 0, 33, 3);
					case 6: SetPlayerPosZS(playerid, -194.5658, -50.9608, 5.0000, 334.9901, 0, 33, 3);
				}
			}
			return 1;
		}
		case 33:
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(8))
				{
					case 0: SetPlayerPosZS(playerid, -954.1843, 1946.6166, 9.0000, 45.0970, 17, 34);
					case 1: SetPlayerPosZS(playerid, -951.1354, 1946.8871, 9.0000, 356.5065, 17, 34);
					case 2: SetPlayerPosZS(playerid, -961.5493, 1944.6356, 9.0000, 267.2291, 17, 34);
					case 3: SetPlayerPosZS(playerid, -961.7834, 1947.7996, 9.0000, 264.4091, 17, 34);
					case 4: SetPlayerPosZS(playerid, -959.5532, 1955.3351, 9.0000, 180.4350, 17, 34);
					case 5: SetPlayerPosZS(playerid, -955.9582, 1952.0391, 5.0000, 270.0492, 17, 34);
					case 6: SetPlayerPosZS(playerid, -938.8462, 1940.4390, 5.0000, 91.7843, 17, 34);
					case 7: SetPlayerPosZS(playerid, -956.0442, 1931.5400, 5.0000, 270.6993, 17, 34);
				}
			}
			else
			{
				switch(random(8))
				{
					case 0: SetPlayerPosZS(playerid, -953.7863, 1854.0732, 9.0000, 158.2350, 17, 34);
					case 1: SetPlayerPosZS(playerid, -951.3470, 1854.0482, 9.0000, 199.9086, 17, 34);
					case 2: SetPlayerPosZS(playerid, -961.5723, 1854.8719, 9.0000, 267.2994, 17, 34);
					case 3: SetPlayerPosZS(playerid, -961.7819, 1852.6840, 9.0000, 267.2994, 17, 34);
					case 4: SetPlayerPosZS(playerid, -938.4369, 1849.5699, 5.0000, 89.6611, 17, 34);
					case 5: SetPlayerPosZS(playerid, -938.5281, 1847.3328, 5.0000, 84.9610, 17, 34);
					case 6: SetPlayerPosZS(playerid, -956.5523, 1865.7911, 5.0000, 269.8060, 17, 34);
					case 7: SetPlayerPosZS(playerid, -956.8248, 1869.7694, 5.0000, 268.5526, 17, 34);
				}
			}
			return 1;
		}
		case 34:
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 215.4736, 124.3310, 1003.2188, 180.5794, 10, 35);
					case 1: SetPlayerPosZS(playerid, 221.5333, 109.3499, 1003.2188, 2.3144, 10, 35);
					case 2: SetPlayerPosZS(playerid, 230.0738, 113.3810, 1003.2188, 89.7352, 10, 35);
					case 3: SetPlayerPosZS(playerid, 221.9332, 118.4718, 999.1559, 37.4081, 10, 35);
					case 4: SetPlayerPosZS(playerid, 215.2643, 114.7298, 999.0156, 266.7467, 10, 35);
					case 5: SetPlayerPosZS(playerid, 237.3753, 108.6561, 1003.2257, 358.8677, 10, 35);
					case 6: SetPlayerPosZS(playerid, 233.5589, 124.3704, 1003.2188, 183.7126, 10, 35);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 276.0772, 110.5157, 1004.6172, 89.7117, 10, 35);
					case 1: SetPlayerPosZS(playerid, 268.5549, 117.7040, 1004.6172, 96.2917, 10, 35);
					case 2: SetPlayerPosZS(playerid, 262.2425, 110.0425, 1004.6172, 275.8333, 10, 35);
					case 3: SetPlayerPosZS(playerid, 269.1354, 122.1037, 1007.1017, 89.4215, 10, 35);
					case 4: SetPlayerPosZS(playerid, 274.5297, 121.9735, 1004.6172, 273.6633, 10, 35);
					case 5: SetPlayerPosZS(playerid, 272.2272, 119.3178, 1004.6172, 242.9564, 10, 35);
					case 6: SetPlayerPosZS(playerid, 258.2736, 122.1863, 1003.2188, 91.9282, 10, 35);
				}
			}
			return 1;
		}
		case 35:// Train погода может 32 - туман
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7)) 
				{
					case 0: SetPlayerPosZS(playerid, 200.4165, 305.6030, 221.0268, 90.0019, 0, 36, 3);
					case 1: SetPlayerPosZS(playerid, 200.2008, 297.0842, 221.0202, 89.3752, 0, 36, 3);
					case 2: SetPlayerPosZS(playerid, 190.2054, 307.3811, 221.0268, 90.6285, 0, 36, 3);
					case 3: SetPlayerPosZS(playerid, 167.9516, 308.1831, 221.0268, 271.0869, 0, 36, 3);
					case 4: SetPlayerPosZS(playerid, 152.9592, 299.6261, 221.0202, 272.3401, 0, 36, 3);
					case 5: SetPlayerPosZS(playerid, 162.7560, 293.1008, 221.0202, 5.7144, 0, 36, 3);
					case 6: SetPlayerPosZS(playerid, 183.3230, 292.1986, 221.0202, 1.0143, 0, 36, 3);
				}
			}
			else
			{
				switch(random(7)) 
				{
					case 0: SetPlayerPosZS(playerid, 196.0890, 399.4503, 224.8269, 182.1461, 0, 36, 3);
					case 1: SetPlayerPosZS(playerid, 185.3093, 400.2595, 224.8269, 176.1927, 0, 36, 3);
					case 2: SetPlayerPosZS(playerid, 173.0101, 401.0429, 224.8269, 185.9061, 0, 36, 3);
					case 3: SetPlayerPosZS(playerid, 156.4304, 401.5601, 224.8269, 267.6869, 0, 36, 3);
					case 4: SetPlayerPosZS(playerid, 162.4688, 386.2487, 224.8203, 269.5669, 0, 36, 3);
					case 5: SetPlayerPosZS(playerid, 173.1904, 385.7632, 224.8203, 271.7603, 0, 36, 3);
					case 6: SetPlayerPosZS(playerid, 184.2293, 385.5173, 224.8269, 268.9402, 0, 36, 3);
				}
			}
			return 1;
		}
		case 36://Ruins  погода может 6 11 | 32-туман
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 2133.4883, -892.6613, 360.3664, 84.6048, 0, 37, 3);
					case 1: SetPlayerPosZS(playerid, 2117.4070, -902.5394, 360.1378, 336.1905, 0, 37, 3);
					case 2: SetPlayerPosZS(playerid, 2095.5833, -907.2911, 360.5336, 359.0641, 0, 37, 3);
					case 3: SetPlayerPosZS(playerid, 2123.9746, -837.7309, 360.7797, 180.4624, 0, 37, 3);
					case 4: SetPlayerPosZS(playerid, 2096.8208, -830.6341, 360.4353, 182.3658, 0, 37, 3);
					case 5: SetPlayerPosZS(playerid, 2135.9617, -854.2360, 360.7797, 94.6317, 0, 37, 3);
					case 6: SetPlayerPosZS(playerid, 2123.2527, -854.8831, 360.7797, 178.6058, 0, 37, 3);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 2085.9929, -917.0927, 360.9304, 95.2817, 0, 37, 3);
					case 1: SetPlayerPosZS(playerid, 2089.1482, -910.8974, 360.9304, 90.8950, 0, 37, 3);
					case 2: SetPlayerPosZS(playerid, 2088.2200, -887.2921, 360.9304, 93.0884, 0, 37, 3);
					case 3: SetPlayerPosZS(playerid, 2070.5620, -902.8577, 360.9304, 182.0759, 0, 37, 3);
					case 4: SetPlayerPosZS(playerid, 2044.7327, -907.5355, 360.9304, 267.5934, 0, 37, 3);
					case 5: SetPlayerPosZS(playerid, 2072.8716, -927.3815, 360.9304, 358.1474, 0, 37, 3);
					case 6: SetPlayerPosZS(playerid, 2086.8921, -917.9524, 360.9304, 93.0884, 0, 37, 3);
				}
			}
			return 1;
		}
		case 37://Maddy
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 2946.6624, -1433.0616, 176.6780, 89.0379, 0, 38, 3);
					case 1: SetPlayerPosZS(playerid, 2950.3367, -1435.5686, 176.6780, 180.8454, 0, 38, 3);
					case 2: SetPlayerPosZS(playerid, 2939.2239, -1434.8523, 176.6780, 181.4721, 0, 38, 3);
					case 3: SetPlayerPosZS(playerid, 2945.7927, -1436.2214, 184.3062, 180.2187, 0, 38, 3);
					case 4: SetPlayerPosZS(playerid, 2923.3965, -1456.9320, 180.9262, 0.3637, 0, 38, 3);
					case 5: SetPlayerPosZS(playerid, 2965.7527, -1457.2784, 180.9262, 89.9779, 0, 38, 3);
					case 6: SetPlayerPosZS(playerid, 2945.6262, -1440.7628, 176.6780, 178.6520, 0, 38, 3);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 2924.0591, -1525.5541, 180.9262, 272.0263, 0, 38, 3);
					case 1: SetPlayerPosZS(playerid, 2966.6133, -1527.4956, 180.8752, 90.6046, 0, 38, 3);
					case 2: SetPlayerPosZS(playerid, 2946.8235, -1547.3801, 183.9762, 359.4237, 0, 38, 3);
					case 3: SetPlayerPosZS(playerid, 2945.2559, -1549.8892, 176.6730, 270.4362, 0, 38, 3);
					case 4: SetPlayerPosZS(playerid, 2954.0425, -1546.9276, 176.6730, 3.1837, 0, 38, 3);
					case 5: SetPlayerPosZS(playerid, 2946.2249, -1543.3674, 176.6730, 359.4236, 0, 38, 3);
					case 6: SetPlayerPosZS(playerid, 2942.9243, -1547.5814, 176.6730, 2.2436, 0, 38, 3);
				}
			}
			return 1;
		}
		case 38:// Logger погода может //T 6 | W 27
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, -567.9817, -181.1172, 78.4047, 178.9893, 0, 39);
					case 1: SetPlayerPosZS(playerid, -561.0326, -197.1633, 78.4901, 6.3645, 0, 39);
					case 2: SetPlayerPosZS(playerid, -547.9244, -181.9984, 78.4063, 184.3161, 0, 39);
					case 3: SetPlayerPosZS(playerid, -535.2193, -180.3885, 78.4047, 269.5436, 0, 39);
					case 4: SetPlayerPosZS(playerid, -476.6777, -180.3544, 78.2109, 182.7728, 0, 39);
					case 5: SetPlayerPosZS(playerid, -476.7615, -198.1309, 78.2270, 4.8212, 0, 39);
					case 6: SetPlayerPosZS(playerid, -454.1184, -196.6284, 77.0660, 40.2282, 0, 39);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, -436.3871, -64.8883, 58.8750, 90.6754, 0, 39);
					case 1: SetPlayerPosZS(playerid, -440.7452, -84.5125, 59.0078, 90.0488, 0, 39);
					case 2: SetPlayerPosZS(playerid, -498.1754, -65.6643, 61.2415, 273.6639, 0, 39);
					case 3: SetPlayerPosZS(playerid, -498.1075, -65.7587, 64.9880, 84.4554, 0, 39, 3);
					case 4: SetPlayerPosZS(playerid, -574.8043, -71.2153, 64.6388, 272.1439, 0, 39);
					case 5: SetPlayerPosZS(playerid, -479.5228, -98.9576, 61.5328, 264.5603, 0, 39);
					case 6: SetPlayerPosZS(playerid, -537.2213, -103.5440, 63.2969, 272.7069, 0, 39);
				}
			}
			return 1;
		}
		case 39:// IceWorld
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(6))
				{
					case 0: SetPlayerPosZS(playerid, 1289.3727, -1584.4196, 237.6150, 90.6284, 0, 40, 3);
					case 1: SetPlayerPosZS(playerid, 1289.9673, -1544.9844, 237.6150, 88.4117, 0, 40, 3);
					case 2: SetPlayerPosZS(playerid, 1290.5952, -1553.2407, 237.6150, 179.2791, 0, 40, 3);
					case 3: SetPlayerPosZS(playerid, 1280.4623, -1556.6252, 237.6150, 274.2201, 0, 40, 3);
					case 4: SetPlayerPosZS(playerid, 1280.6460, -1574.6553, 237.6150, 275.4735, 0, 40, 3);
					case 5: SetPlayerPosZS(playerid, 1290.5408, -1575.6631, 237.6150, 1.9544, 0, 40, 3);
				}
			}
			else
			{
				switch(random(6))
				{
					case 0: SetPlayerPosZS(playerid, 1336.8352, -1544.6593, 237.6150, 269.8335, 0, 40, 3);
					case 1: SetPlayerPosZS(playerid, 1335.7561, -1554.5298, 237.6150, 180.8460, 0, 40, 3);
					case 2: SetPlayerPosZS(playerid, 1336.5464, -1583.9453, 237.6150, 272.6534, 0, 40, 3);
					case 3: SetPlayerPosZS(playerid, 1336.2570, -1577.7560, 237.6150, 0.0742, 0, 40, 3);
					case 4: SetPlayerPosZS(playerid, 1346.0039, -1572.4167, 237.6150, 95.0151, 0, 40, 3);
					case 5: SetPlayerPosZS(playerid, 1345.2494, -1554.9718, 237.6150, 88.4351, 0, 40, 3);
				}
			}
			return 1;
		}
		case 40:// Factory
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, -2140.8879, -86.3924, 41.5966, 92.2656, 0, 41);
					case 1: SetPlayerPosZS(playerid, -2152.9417, -86.5176, 41.5966, 267.7340, 0, 41);
					case 2: SetPlayerPosZS(playerid, -2145.2766, -97.9734, 35.3203, 272.1206, 0, 41);
					case 3: SetPlayerPosZS(playerid, -2134.0952, -109.0385, 35.3273, 272.4340, 0, 41);
					case 4: SetPlayerPosZS(playerid, -2098.4380, -92.9577 ,35.3273, 96.9657, 0, 41);
					case 5: SetPlayerPosZS(playerid, -2120.8926, -123.5049, 35.3203, 274.9641, 0, 41);
					case 6: SetPlayerPosZS(playerid, -2124.9592, -123.1097, 35.3203, 88.8423, 0, 41);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, -2141.5674, -244.8776, 36.5156, 90.0254, 0, 41);
					case 1: SetPlayerPosZS(playerid, -2162.8142, -244.0624, 36.5156, 269.8805, 0, 41);
					case 2: SetPlayerPosZS(playerid, -2163.0044, -254.2910, 36.5156, 269.8805, 0, 41);
					case 3: SetPlayerPosZS(playerid, -2174.6240, -259.8528, 36.5156, 269.2773, 0, 41);
					case 4: SetPlayerPosZS(playerid, -2167.5667, -235.4235, 36.5156, 356.6981, 0, 41);
					case 5: SetPlayerPosZS(playerid, -2182.2939, -214.1970, 36.5156, 358.5781, 0, 41);
					case 6: SetPlayerPosZS(playerid, -2158.6494, -227.5589, 36.5220, 95.0386, 0, 41);
				}
			}
			return 1;
		}
		case 41:// Mile
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, -1947.1764, -968.9067, 35.8909, 88.4582, 0, 42);
					case 1: SetPlayerPosZS(playerid, -1946.7103, -959.5505, 35.8909, 93.4716, 0, 42);
					case 2: SetPlayerPosZS(playerid, -1962.8092, -959.7029, 35.8909, 268.6032, 0, 42);
					case 3: SetPlayerPosZS(playerid, -1962.4860, -969.0622, 35.8909, 273.9300, 0, 42);
					case 4: SetPlayerPosZS(playerid, -1962.8756, -956.1701, 35.8909, 1.3508, 0, 42);
					case 5: SetPlayerPosZS(playerid, -1946.5626, -956.7122, 35.8909, 2.2909, 0, 42);
					case 6: SetPlayerPosZS(playerid, -1954.0537, -969.1155, 35.8909, 0.0976, 0, 42);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, -1962.9825, -748.7428, 35.8909, 267.3500, 0, 42);
					case 1: SetPlayerPosZS(playerid, -1962.4856, -757.8307, 35.8909, 270.4835, 0, 42);
					case 2: SetPlayerPosZS(playerid, -1946.5194, -757.7596, 35.8909, 88.1217, 0, 42);
					case 3: SetPlayerPosZS(playerid, -1947.3114, -748.1817, 35.8909, 88.4351, 0, 42);
					case 4: SetPlayerPosZS(playerid, -1955.3527, -748.8632, 35.8909, 180.2426, 0, 42);
					case 5: SetPlayerPosZS(playerid, -1962.9718, -761.9155, 35.8909, 183.3760, 0, 42);
					case 6: SetPlayerPosZS(playerid, -1947.6494, -761.7990, 35.8909, 180.5560, 0, 42);
				}
			}
			return 1;
		}
		case 42: //Westwood
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, -62.5776, 1523.1686, 12.7500, 262.6968, 0, 43);
					case 1: SetPlayerPosZS(playerid, -50.6847, 1538.9342, 12.7500, 200.6562, 0, 43);
					case 2: SetPlayerPosZS(playerid, -33.1186, 1535.7540, 12.7500, 164.3326, 0, 43);
					case 3: SetPlayerPosZS(playerid, -53.9692, 1509.5846, 12.7500, 289.0172, 0, 43);
					case 4: SetPlayerPosZS(playerid, -46.0057, 1507.9347, 12.7500, 357.3245, 0, 43);
					case 5: SetPlayerPosZS(playerid, -28.4661, 1509.8234, 12.9597, 270.8437, 0, 43);
					case 6: SetPlayerPosZS(playerid, -19.8992, 1534.2194, 12.7560, 191.5696, 0, 43);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 43.8379, 1525.7373, 12.7560, 170.2627, 0, 43);
					case 1: SetPlayerPosZS(playerid, 27.8668, 1545.9009, 12.7500, 162.4526, 0, 43);
					case 2: SetPlayerPosZS(playerid, 28.5082, 1565.2054, 12.7560, 174.3828, 0, 43);
					case 3: SetPlayerPosZS(playerid, 36.9808, 1518.1682, 12.7500, 43.7214, 0, 43);
					case 4: SetPlayerPosZS(playerid, 11.2996, 1548.8250, 12.7500, 207.9329, 0, 43);
					case 5: SetPlayerPosZS(playerid, -6.5685, 1563.7450, 13.2500, 159.0524, 0, 43);
					case 6: SetPlayerPosZS(playerid, 54.6794, 1533.2197, 12.8622, 105.6686, 0, 43);
				}
			}
			return 1;
		}
		case 43://Dust
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 72.8086, 2163.4414, 226.5291, 91.6386, 0, 44, 3);
					case 1: SetPlayerPosZS(playerid, 61.4244, 2165.4492, 226.5291, 268.3369, 0, 44, 3);
					case 2: SetPlayerPosZS(playerid, 61.6888, 2155.9617, 226.5291, 357.6378, 0, 44, 3);
					case 3: SetPlayerPosZS(playerid, 68.3908, 2156.5806, 226.5291, 2.9645, 0, 44, 3);
					case 4: SetPlayerPosZS(playerid, 60.7267, 2174.7134, 226.5291, 0.7712, 0, 44, 3);
					case 5: SetPlayerPosZS(playerid, 73.9935, 2176.2878, 226.5291, 2.0245, 0, 44, 3);
					case 6: SetPlayerPosZS(playerid, 76.0531, 2218.7944, 229.8051, 247.0300, 0, 44, 3);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 207.8405, 2108.8938, 235.1619, 2.6277, 0, 44, 3);
					case 1: SetPlayerPosZS(playerid, 216.1781, 2113.3254, 235.1541, 92.8686, 0, 44, 3);
					case 2: SetPlayerPosZS(playerid, 216.2509, 2117.4573, 235.1541, 91.9286, 0, 44, 3);
					case 3: SetPlayerPosZS(playerid, 216.7067, 2124.6125, 235.1541, 0.7477, 0, 44, 3);
					case 4: SetPlayerPosZS(playerid, 206.7091, 2121.0925, 235.1619, 359.8077, 0, 44, 3);
					case 5: SetPlayerPosZS(playerid, 216.1127, 2156.1833, 229.8051, 89.1086, 0, 44, 3);
					case 6: SetPlayerPosZS(playerid, 184.5237, 2140.8623, 229.7338, 184.3628, 0, 44, 3);
				}
			}
			return 1;
		}
		case 44://Construction
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 2685.2234, 788.0831, 10.9545, 0.4109, 0, 45);
					case 1: SetPlayerPosZS(playerid, 2682.1892, 820.6546, 10.9545, 182.7726, 0, 45);
					case 2: SetPlayerPosZS(playerid, 2661.6238, 787.4564, 10.9545, 357.5909, 0, 45);
					case 3: SetPlayerPosZS(playerid, 2672.0098, 863.7089, 10.9395, 117.2853, 0, 45);
					case 4: SetPlayerPosZS(playerid, 2676.7874, 898.7193, 10.2203, 118.5387, 0, 45);
					case 5: SetPlayerPosZS(playerid, 2645.1721, 831.7054, 8.8203, 87.5185, 0, 45);
					case 6: SetPlayerPosZS(playerid, 2693.8740, 858.2372, 9.8438, 182.7960, 0, 45);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 2560.4609, 814.0646, 10.9545, 271.0867, 0, 45);
					case 1: SetPlayerPosZS(playerid, 2568.0432, 796.7891, 10.9545, 3.2075, 0, 45);
					case 2: SetPlayerPosZS(playerid, 2559.3386, 793.6122, 10.9545, 313.0737, 0, 45);
					case 3: SetPlayerPosZS(playerid, 2580.9126, 799.6095, 5.3158, 2.2909, 0, 45);
					case 4: SetPlayerPosZS(playerid, 2606.5520, 799.2266, 5.3158, 359.4708, 0, 45);
					case 5: SetPlayerPosZS(playerid, 2581.4675, 798.2504, 10.9545, 2.9410, 0, 45);
					case 6: SetPlayerPosZS(playerid, 2609.4575, 801.6299, 10.9545, 272.0735, 0, 45);
				}
			}
			return 1;
		}
		case 45://Field   погода может T 9 | W 38
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 150.4767, 362.9997, 1.5563, 266.7233, 0, 46, 3);
					case 1: SetPlayerPosZS(playerid, 141.3884, 364.9874, 1.5656, 272.7001, 0, 46, 3);
					case 2: SetPlayerPosZS(playerid, 151.4935, 364.7410, 1.5656, 88.1684, 0, 46, 3);
					case 3: SetPlayerPosZS(playerid, 157.2169, 381.6109, 1.5563, 178.6992, 0, 46, 3);
					case 4: SetPlayerPosZS(playerid, 140.8282, 347.2732, 1.5563, 271.4467, 0, 46, 3);
					case 5: SetPlayerPosZS(playerid, 152.1362, 323.5745, 1.5563, 273.9535, 0, 46, 3);
					case 6: SetPlayerPosZS(playerid, 160.1625, 321.5754, 1.5563, 3.8810, 0, 46, 3);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 257.8738, 353.0391, 1.5616, 94.7486, 0, 46, 3);
					case 1: SetPlayerPosZS(playerid, 247.2542, 352.6006, 1.5616, 270.5070, 0, 46, 3);
					case 2: SetPlayerPosZS(playerid, 258.5677, 355.6928, 1.5563, 89.3752, 0, 46, 3);
					case 3: SetPlayerPosZS(playerid, 254.7978, 376.3735, 1.5563, 132.3023, 0, 46, 3);
					case 4: SetPlayerPosZS(playerid, 254.7732, 368.0643, 1.5563, 90.9419, 0, 46, 3);
					case 5: SetPlayerPosZS(playerid, 250.9826, 392.2261, 1.5563, 91.5686, 0, 46, 3);
					case 6: SetPlayerPosZS(playerid, 237.0301, 393.9188, 1.5563, 182.4361, 0, 46, 3);
				}
			}
			return 1;
		}
		case 46://Backyard
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 2324.7573, 72.2585, 26.4848, 179.6628, 0, 47, 3);
					case 1: SetPlayerPosZS(playerid, 2306.2612, 70.3072, 26.4844, 271.1338, 0, 47, 3);
					case 2: SetPlayerPosZS(playerid, 2316.2222, 63.0667, 26.4823, 181.2063, 0, 47, 3);
					case 3: SetPlayerPosZS(playerid, 2325.2593, 61.2403, 26.4922, 108.1989, 0, 47, 3);
					case 4: SetPlayerPosZS(playerid, 2327.8369, 70.9239, 30.6418, 180.2661, 0, 47, 3);
					case 5: SetPlayerPosZS(playerid, 2306.9607, 74.2337, 29.6413, 267.6870, 0, 47, 3);
					case 6: SetPlayerPosZS(playerid, 2313.5339, 56.2722, 26.4844, 184.3396, 0, 47, 3);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, 2307.8242, 6.3565, 26.4844, 270.5071, 0, 47, 3);
					case 1: SetPlayerPosZS(playerid, 2307.8242, 6.3565, 26.4844, 270.5071, 0, 47, 3);
					case 2: SetPlayerPosZS(playerid, 2329.1982, 23.1953, 26.4844, 89.7355, 0, 47, 3);
					case 3: SetPlayerPosZS(playerid, 2323.0908, 31.4619, 26.4844, 2.6280, 0, 47, 3);
					case 4: SetPlayerPosZS(playerid, 2306.8438, 21.1918, 29.5834, 273.9773, 0, 47, 3);
					case 5: SetPlayerPosZS(playerid, 2329.6816, 8.2167, 31.1641, 89.4455, 0, 47, 3);
					case 6: SetPlayerPosZS(playerid, 2330.0466, 1.0928, 31.1641, 89.4456, 0, 47, 3);
				}
			}
			return 1;
		}
		case 47://pizza in ghetto
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(6))
				{
					case 0: SetPlayerPosZS(playerid, 2377.0369, -1907.5885, 13.4078, 175.2994, 0, 48);
					case 1: SetPlayerPosZS(playerid, 2379.8608, -1885.0381, 13.5469, 184.0495, 0, 48);
					case 2: SetPlayerPosZS(playerid, 2369.9153, -1927.4175, 13.3828, 0.1211, 0, 48);
					case 3: SetPlayerPosZS(playerid, 2384.0789, -1898.5336, 13.5469, 269.5904, 0, 48);
					case 4: SetPlayerPosZS(playerid, 2391.2053, -1898.3820, 13.5469, 268.6504, 0, 48);
					case 5: SetPlayerPosZS(playerid, 2377.1909, -1913.7474, 13.4078, 87.5420, 0, 48);
				}
			}
			else
			{
				switch(random(6))
				{
					case 0: SetPlayerPosZS(playerid, 2444.1936, -1919.5769, 17.5501, 180.9398, 0, 48);
					case 1: SetPlayerPosZS(playerid, 2425.6138, -1949.7369, 18.5500, 1.7114, 0, 48);
					case 2: SetPlayerPosZS(playerid, 2425.7292, -1958.3781, 18.5500, 358.5546, 0, 48);
					case 3: SetPlayerPosZS(playerid, 2437.7969, -1948.2499, 18.5500, 92.2421, 0, 48);
					case 4: SetPlayerPosZS(playerid, 2436.0056, -1922.7611, 13.5469, 91.9524, 0, 48);
					case 5: SetPlayerPosZS(playerid, 2404.5229, -1944.0996, 13.5469, 0.4582, 0, 48);
				}
			}
			return 1;
		}
		case 48://Terminus
		{
			if(ChoiceTeamCheck[playerid][2] == 1)
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, -1978.2260, 154.8700, 27.6940, 181.5193, 0, 49);
					case 1: SetPlayerPosZS(playerid, -1977.9215, 121.9672, 27.6940, 359.1576, 0, 49);
					case 2: SetPlayerPosZS(playerid, -1968.7897, 113.4117, 27.6875, 359.7843, 0, 49);
					case 3: SetPlayerPosZS(playerid, -1969.2034, 123.7903, 27.6875, 359.4709, 0, 49);
					case 4: SetPlayerPosZS(playerid, -1969.3479, 152.3796, 27.6875, 178.3860, 0, 49);
					case 5: SetPlayerPosZS(playerid, -1962.5348, 156.0009, 27.6875, 178.6994, 0, 49);
					case 6: SetPlayerPosZS(playerid, -1969.2969, 161.1393, 27.6875, 182.4594, 0, 49);
				}
			}
			else
			{
				switch(random(7))
				{
					case 0: SetPlayerPosZS(playerid, -2049.6716, 121.4553, 29.0253, 358.8443, 0, 49);
					case 1: SetPlayerPosZS(playerid, -2056.4695, 122.2153, 28.6592, 355.0842, 0, 49);
					case 2: SetPlayerPosZS(playerid, -2049.1255, 148.7376, 28.8359, 179.9293, 0, 49);
					case 3: SetPlayerPosZS(playerid, -2045.3693, 144.9792, 28.8359, 89.0618, 0, 49);
					case 4: SetPlayerPosZS(playerid, -2056.7297, 147.4492, 28.8359, 271.1102, 0, 49);
					case 5: SetPlayerPosZS(playerid, -2058.5005, 160.8043, 28.8359, 181.8093, 0, 49);
					case 6: SetPlayerPosZS(playerid, -2046.1089, 123.8266, 28.9263, 359.4710, 0, 49);
				}
			}
			return 1;
		}
	}
    return 1;
}

public OnPlayerUpdate(playerid)//controls: mouse buttons
{
	new vehicleid = GetPlayerVehicleID(playerid);
    if(vehicleid > 0 && PlayerCheatCheck[playerid] == 0)
    {
        if(EnterVehicle[playerid][1] == 0 && EnterVehicle[playerid][0] != vehicleid) PlayerCheat(playerid, "телепорт в авто #1.7", "Использование Чит Программ [{FF0000}Код: #1.7{CD853F}]");
		else if(EnterVehicle[playerid][1] <= gettime()) EnterVehicle[playerid][1] = 0;
    }
    if(GetPlayerSurfingVehicleID(playerid) == 65535 && GetPlayerSurfingObjectID(playerid) == 65535 && PlayerCheatCheck[playerid] == 0)
    {
        if(SpeedVerTime[playerid] == 0)
        {
	        new Float:ac_vX, Float:ac_vY, Float:ac_vZ;
	    	GetPlayerVelocity(playerid, ac_vX, ac_vY, ac_vZ);
			ac_vX = floatround(VectorSize(ac_vX, ac_vY, 0.0) * 179.28625);
			if(ac_vX > 212.0 && SpeedVer[playerid] < ac_vX) PlayerCheat(playerid, "подкидывание #13.2", "Использование Чит Программ [{FF0000}Код: #13.2{CD853F}]");
			if(SpeedVerTime[playerid] != 0) SpeedVerTime[playerid] = 0;
			SpeedVer[playerid] = ac_vX;
		}
		else if(SpeedVerTime[playerid] <= gettime()) SpeedVerTime[playerid] = 0;
    }
    if(DuelCheck[playerid][12] >= 1 && DuelCheck[playerid][3] == 2)
    {
        new keys[3];
        GetPlayerKeys(playerid, keys[0], keys[1], keys[2]);
        if(DuelCheck[playerid][13] == 2 && DuelCheck[playerid][12] >= 3)
        {
            switch(keys[1])
            {
                case -128:
                {
                    ChoiceItemsCheck[playerid][1] -= 1;
			  		if(ChoiceItemsCheck[playerid][1] <= 0) ChoiceItemsCheck[playerid][1] = 5;
			  		PlayerTextDrawDestroy(playerid, ChoiceItemsPosi[playerid]);
	            	ChoiceItemsPosi[playerid] = InteractionPosition(playerid, PositionLines[1][ChoiceItemsCheck[playerid][1] + 5], 156.5, 155.0);
                }
                case 128:
                {
                    ChoiceItemsCheck[playerid][1] += 1;
	            	if(ChoiceItemsCheck[playerid][1] >= 6) ChoiceItemsCheck[playerid][1] = 1;
	            	PlayerTextDrawDestroy(playerid, ChoiceItemsPosi[playerid]);
	            	ChoiceItemsPosi[playerid] = InteractionPosition(playerid, PositionLines[1][ChoiceItemsCheck[playerid][1] + 5], 156.5, 155.0);
                }
            }
            switch(keys[2])
            {
	            case -128:
	            {
	                new string[17];
	                switch(ChoiceItemsCheck[playerid][1])
			        {
			            case 1:
				  		{
				  		    DuelCheck[playerid][16] -= 1;
				  		    if(DuelCheck[playerid][16] <= 0) DuelCheck[playerid][16] = ClassVehicleDuel[DuelCheck[playerid][7]-1][0];
							if(DuelCheck[playerid][15] != 0) DestroyVehicle(DuelCheck[playerid][15]);
							DuelCheck[playerid][15] = CreateVehicle(ClassVehicleDuel[DuelCheck[playerid][7]-1][DuelCheck[playerid][16]], PossSave[playerid][0], PossSave[playerid][1], PossSave[playerid][2], PossSave[playerid][3], DuelCheck[playerid][17], DuelCheck[playerid][18], -1);
							SetVehicleVirtualWorld(DuelCheck[playerid][15], DuelCheck[playerid][25]);
							LinkVehicleToInterior(DuelCheck[playerid][15], floatround(DuelCameraRace[DuelCheck[playerid][4] - 1][6]));
							TextDrawSetString(DuelInfo[playerid][40], VehicleName[ClassVehicleDuel[DuelCheck[playerid][7]-1][DuelCheck[playerid][16]] - 400]);
						}
			            case 2:
			            {
			                DuelCheck[playerid][17] -= 1;
			                if(DuelCheck[playerid][17] <= - 1) DuelCheck[playerid][17] = 255;
			            	ChangeVehicleColor(DuelCheck[playerid][15], DuelCheck[playerid][17], DuelCheck[playerid][18]);
							format(string, sizeof(string), "~y~%d", DuelCheck[playerid][17]);
							TextDrawSetString(DuelInfo[playerid][41], string);
			            }
			            case 3:
			            {
			                DuelCheck[playerid][18] -= 1;
			                if(DuelCheck[playerid][18] <= - 1) DuelCheck[playerid][18] = 255;
			            	ChangeVehicleColor(DuelCheck[playerid][15], DuelCheck[playerid][17], DuelCheck[playerid][18]);
							format(string, sizeof(string), "~y~%d", DuelCheck[playerid][18]);
							TextDrawSetString(DuelInfo[playerid][42], string);
			            }
			            case 4:
			            {
			                if(PlayerInfo[playerid][pMoney] < 1000)
							{
							    if(PlayerInfo[playerid][pRussifier][1] == 0) TextDrawSetString(DuelInfo[playerid][43], "~r~~h~no dollar");
								else TextDrawSetString(DuelInfo[playerid][43], "~r~~h~®e¦ љoћћapoў");
								return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		  					}
		  					new slot[7];
		     		    	DuelCheck[playerid][21] -= 1000;
							if(DuelCheck[playerid][21] <= - 1) DuelCheck[playerid][21] = 30000;
							if(PlayerInfo[playerid][pMoney] < DuelCheck[playerid][21]) format(slot, sizeof(slot), "~r~~h~");
	                        if(DuelCheck[playerid][21] != 0)
	                        {
	                       		format(string, sizeof(string), "~y~%s$%s", slot, AddCommasToInt(DuelCheck[playerid][21]));
	                            TextDrawSetString(DuelInfo[playerid][43], string);
	                        }
	      					else TextDrawSetString(DuelInfo[playerid][43], "~y~$0");
			            }
			            case 5:
			            {
			                if(DuelCheck[playerid][12] <= 14) return 1;
			            	if(DuelCheck[playerid][23] == 0)
				            {
				                DuelCheck[playerid][23] = 1;
				                if(PlayerInfo[playerid][pRussifier][1] == 0) TextDrawSetString(DuelInfo[playerid][44], "~y~yes");
				                else TextDrawSetString(DuelInfo[playerid][44], "~y~љa");
				            }
				            else
				            {
				                DuelCheck[playerid][23] = 0;
				                if(PlayerInfo[playerid][pRussifier][1] == 0) TextDrawSetString(DuelInfo[playerid][44], "~y~no");
				                else TextDrawSetString(DuelInfo[playerid][44], "~y~®e¦");
				            }
			            }
			        }
	            }
            	case 128:
	            {
	                new string[17];
		            switch(ChoiceItemsCheck[playerid][1])
			        {
			            case 1:
			   			{
                            DuelCheck[playerid][16] += 1;
                            if(DuelCheck[playerid][16] > ClassVehicleDuel[DuelCheck[playerid][7]-1][0] || ClassVehicleDuel[DuelCheck[playerid][7]-1][DuelCheck[playerid][16]] == 0) DuelCheck[playerid][16] = 1;
							if(DuelCheck[playerid][15] != 0) DestroyVehicle(DuelCheck[playerid][15]);
							DuelCheck[playerid][15] = CreateVehicle(ClassVehicleDuel[DuelCheck[playerid][7]-1][DuelCheck[playerid][16]], PossSave[playerid][0], PossSave[playerid][1], PossSave[playerid][2], PossSave[playerid][3], DuelCheck[playerid][17], DuelCheck[playerid][18], -1);
							SetVehicleVirtualWorld(DuelCheck[playerid][15], DuelCheck[playerid][25]);
							LinkVehicleToInterior(DuelCheck[playerid][15], floatround(DuelCameraRace[DuelCheck[playerid][4] - 1][6]));
							TextDrawSetString(DuelInfo[playerid][40], VehicleName[ClassVehicleDuel[DuelCheck[playerid][7]-1][DuelCheck[playerid][16]] - 400]);
						}
			            case 2:
			            {
			                DuelCheck[playerid][17] += 1;
			                if(DuelCheck[playerid][17] >= 256) DuelCheck[playerid][17] = 0;
							ChangeVehicleColor(DuelCheck[playerid][15], DuelCheck[playerid][17], DuelCheck[playerid][18]);
							format(string, sizeof(string), "~y~%d", DuelCheck[playerid][17]);
							TextDrawSetString(DuelInfo[playerid][41], string);
			            }
			            case 3:
			            {
			                DuelCheck[playerid][18] += 1;
			                if(DuelCheck[playerid][18] >= 256) DuelCheck[playerid][18] = 0;
							ChangeVehicleColor(DuelCheck[playerid][15], DuelCheck[playerid][17], DuelCheck[playerid][18]);
							format(string, sizeof(string), "~y~%d", DuelCheck[playerid][18]);
							TextDrawSetString(DuelInfo[playerid][42], string);
			            }
			            case 4:
			            {
			                if(PlayerInfo[playerid][pMoney] < 1000)
							{
							    if(PlayerInfo[playerid][pRussifier][1] == 0) TextDrawSetString(DuelInfo[playerid][43], "~r~~h~no dollar");
								else TextDrawSetString(DuelInfo[playerid][43], "~r~~h~®e¦ љoћћapoў");
								return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		  					}
		  					new slot[7];
			                DuelCheck[playerid][21] += 1000;
							if(DuelCheck[playerid][21] >= 31000) DuelCheck[playerid][21] = 0;
							if(PlayerInfo[playerid][pMoney] < DuelCheck[playerid][21]) format(slot, sizeof(slot), "~r~~h~");
	                        if(DuelCheck[playerid][21] != 0)
	                        {
	                       		format(string, sizeof(string), "~y~%s$%s", slot, AddCommasToInt(DuelCheck[playerid][21]));
	                            TextDrawSetString(DuelInfo[playerid][43], string);
	                        }
	      					else TextDrawSetString(DuelInfo[playerid][43], "~y~$0");
				        }
				        case 5:
				        {
				            if(DuelCheck[playerid][12] <= 14) return 1;
				            if(DuelCheck[playerid][23] == 0)
				            {
				                DuelCheck[playerid][23] = 1;
				                if(PlayerInfo[playerid][pRussifier][1] == 0) TextDrawSetString(DuelInfo[playerid][44], "~y~yes");
				                else TextDrawSetString(DuelInfo[playerid][44], "~y~љa");
				            }
				            else
				            {
				                DuelCheck[playerid][23] = 0;
				                if(PlayerInfo[playerid][pRussifier][1] == 0) TextDrawSetString(DuelInfo[playerid][44], "~y~no");
				                else TextDrawSetString(DuelInfo[playerid][44], "~y~®e¦");
				            }
				        }
			 		}
				}
            }
        }
        if(DuelCheck[playerid][12] <= 5 && DuelCheck[playerid][13] >= 3 && GetPVarInt(playerid, "DuellCheck[3]") == 0 && DuelCheck[playerid][4] != 2)
		{
		    if(DuelCheck[playerid][12] == 1 && DuelCheck[playerid][13] == 4 && keys[0] == 8 && keys[0] != GetPVarInt(playerid, "DuellCheck[2]"))
			{
			    SetPVarInt(playerid, "DuellCheck[3]", 1);
			    SetVehicleSpeed(DuelCheck[playerid][15], 60.0);
				PlayerPlaySound(playerid, 6003, 0.0, 0.0, 0.0);
			    TextDrawShowForPlayer(playerid, Glasses[playerid]);
				if(DuelCheck[playerid][7] <= 2)
				{
	            	TuningVehicle[DuelCheck[playerid][15]][0] = CreateDynamicObject(18694, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, DuelCheck[playerid][25], floatround(DuelCameraRace[DuelCheck[playerid][4] - 1][6]));
	            	TuningVehicle[DuelCheck[playerid][15]][1] = CreateDynamicObject(18694, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, DuelCheck[playerid][25], floatround(DuelCameraRace[DuelCheck[playerid][4] - 1][6]));
	            	AttachDynamicObjectToVehicle(TuningVehicle[DuelCheck[playerid][15]][0], DuelCheck[playerid][15], -0.8, 2.0, -2.0, 0.0, 0.0, 180.0);
	            	AttachDynamicObjectToVehicle(TuningVehicle[DuelCheck[playerid][15]][1], DuelCheck[playerid][15], 0.8, 2.0, -2.0, 0.0, 0.0, 180.0);
	   			}
	  		}
		    else
			{
			    if(DuelCheck[playerid][12] >= 1 && DuelCheck[playerid][13] == 4) SetPVarInt(playerid, "DuellCheck[3]", 1);
				GetPlayerKeys(playerid, keys[0], keys[1], keys[2]);
				SetPVarInt(playerid, "DuellCheck[2]", keys[0]);
	  		}
	 	}
    }
	if(Pause[playerid][0] == 1 && Pause[playerid][1] >= 5)
	{
		new string[40];
		format(string, sizeof(string), "Вы находились на паузе: {4FDF24}%s", Convert(Pause[playerid][1]));
		SendClientMessage(playerid, 0xFFFFFFFF, string);
		Pause[playerid][1] = 0;
 	}
	else Pause[playerid][1] = 0;
	if(InteractionCheck[playerid][0] == 2)
 	{
 	    new weaponid = GetPlayerWeapon(playerid);
		if(weaponid == 0 && !IsPlayerAttachedObjectSlotUsed(playerid, 7)) SetPlayerAttachedObject(playerid, 7, 1654, 5, 0.1, 0, 0, 0, 0, 0);
		else if(weaponid != 0 && IsPlayerAttachedObjectSlotUsed(playerid, 7)) RemovePlayerAttachedObject(playerid, 7);
	}
	if(PlayerInfo[playerid][pBonus][5] == 1)
	{
		new weaponid, weaponsid[4], ammo[4];
		weaponid = GetPlayerWeapon(playerid);
		GetPlayerWeaponData(playerid, 2, weaponsid[0], ammo[0]);
		GetPlayerWeaponData(playerid, 4, weaponsid[1], ammo[1]);
		GetPlayerWeaponData(playerid, 5, weaponsid[2], ammo[2]);
		GetPlayerWeaponData(playerid, 6, weaponsid[3], ammo[3]);
		if(weaponid == 22 && IsPlayerAttachedObjectSlotUsed(playerid, 0)) RemovePlayerAttachedObject(playerid, 0);
		else if(weaponid != 22 && weaponsid[0] == 22 && ammo[0] >= 1 && !IsPlayerAttachedObjectSlotUsed(playerid, 0)) SetPlayerAttachedObject(playerid, 0, 346, 8, -0.079999, -0.039999, 0.109999, -90.100006, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
		if(weaponid == 23 && IsPlayerAttachedObjectSlotUsed(playerid, 0)) RemovePlayerAttachedObject(playerid, 0);
		else if(weaponid != 23 && weaponsid[0] == 23 && ammo[0] >= 1 && !IsPlayerAttachedObjectSlotUsed(playerid, 0)) SetPlayerAttachedObject(playerid, 0, 347, 8, -0.079999, -0.039999, 0.109999, -90.100006, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
		if(weaponid == 24 && IsPlayerAttachedObjectSlotUsed(playerid, 0)) RemovePlayerAttachedObject(playerid, 0);
		else if(weaponid != 24 && weaponsid[0] == 24 && ammo[0] >= 1 && !IsPlayerAttachedObjectSlotUsed(playerid, 0)) SetPlayerAttachedObject(playerid, 0, 348, 8, -0.079999, -0.039999, 0.109999, -90.100006, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
		
		if(weaponid == 28 && IsPlayerAttachedObjectSlotUsed(playerid, 1)) RemovePlayerAttachedObject(playerid, 1);
		else if(weaponid != 28 && weaponsid[1] == 28 && ammo[1] >= 1 && !IsPlayerAttachedObjectSlotUsed(playerid, 1)) SetPlayerAttachedObject(playerid, 1, 352, 7, 0.000000, -0.100000, -0.080000, -95.000000, -10.000000, 0.000000, 1.000000, 1.000000, 1.000000);
		if(weaponid == 29 && IsPlayerAttachedObjectSlotUsed(playerid, 1)) RemovePlayerAttachedObject(playerid, 1);
		else if(weaponid != 29 && weaponsid[1] == 29 && ammo[1] >= 1 && !IsPlayerAttachedObjectSlotUsed(playerid, 1)) SetPlayerAttachedObject(playerid, 1, 353, 7, 0.000000, -0.100000, -0.080000, -95.000000, -10.000000, 0.000000, 1.000000, 1.000000, 1.000000);
		if(weaponid == 32 && IsPlayerAttachedObjectSlotUsed(playerid, 1)) RemovePlayerAttachedObject(playerid, 1);
		else if(weaponid != 32 && weaponsid[1] == 32 && ammo[1] >= 1 && !IsPlayerAttachedObjectSlotUsed(playerid, 1)) SetPlayerAttachedObject(playerid, 1, 372, 7, 0.000000, -0.100000, -0.080000, -95.000000, -10.000000, 0.000000, 1.000000, 1.000000, 1.000000);
		
		if(weaponid == 30 && IsPlayerAttachedObjectSlotUsed(playerid, 2)) RemovePlayerAttachedObject(playerid, 2);
		else if(weaponid != 30 && weaponsid[2] == 30 && ammo[2] >= 1 && !IsPlayerAttachedObjectSlotUsed(playerid, 2)) SetPlayerAttachedObject(playerid, 2, 355, 1, 0.200000, -0.119999, -0.059999, 0.000000, 206.000000, 0.000000, 1.000000, 1.000000, 1.000000);
		if(weaponid == 31 && IsPlayerAttachedObjectSlotUsed(playerid, 2)) RemovePlayerAttachedObject(playerid, 2);
		else if(weaponid != 31 && weaponsid[2] == 31 && ammo[2] >= 1 && !IsPlayerAttachedObjectSlotUsed(playerid, 2)) SetPlayerAttachedObject(playerid, 2, 356, 1, 0.200000, -0.119999, -0.059999, 0.000000, 206.000000, 0.000000, 1.000000, 1.000000, 1.000000);
		if(weaponid == 34 && IsPlayerAttachedObjectSlotUsed(playerid, 3)) RemovePlayerAttachedObject(playerid, 3);
		else if(weaponid != 34 && weaponsid[3] == 34 && ammo[3] >= 1 && !IsPlayerAttachedObjectSlotUsed(playerid, 3)) SetPlayerAttachedObject(playerid, 3, 358, 1, 0.2, -0.13, 0.2, 5, 177, -2, 1, 1, 1);
	}
    if(PlayerInfo[playerid][pBonus][0] >= 1 && GetPVarInt(playerid, "LaserCheck") == 0)
    {
        switch(GetPlayerWeapon(playerid))
        {
            case 22:
            {
                if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) return 1;
                if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) SetPlayerAttachedObject(playerid, 4, InteractionsNumber[3][PlayerInfo[playerid][pBonus][0]], 6, 0.108249, 0.030232, 0.118051, 1.468254, 350.512573, 364.284240);
                else SetPlayerAttachedObject(playerid, 4, InteractionsNumber[3][PlayerInfo[playerid][pBonus][0]], 6, 0.108249, 0.030232, 0.118051, 1.468254, 349.862579, 364.784240);
            }
            case 23:
            {
                if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) return 1;
                if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) SetPlayerAttachedObject(playerid, 4, InteractionsNumber[3][PlayerInfo[playerid][pBonus][0]], 6, 0.108249, 0.030232, 0.118051, 1.468254, 350.512573, 364.284240);
                else SetPlayerAttachedObject(playerid, 4, InteractionsNumber[3][PlayerInfo[playerid][pBonus][0]], 6, 0.108249, 0.030232, 0.118051, 1.468254, 349.862579, 364.784240);
            }
            case 27:
            {
                if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) return 1;
                if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) SetPlayerAttachedObject(playerid, 4, InteractionsNumber[3][PlayerInfo[playerid][pBonus][0]], 6, 0.588246, -0.022766, 0.138052, -11.531745, 347.712585, 352.784271);
                else SetPlayerAttachedObject(playerid, 4, InteractionsNumber[3][PlayerInfo[playerid][pBonus][0]], 6, 0.588246, -0.022766, 0.138052, 1.468254, 350.712585, 352.784271);
            }
            case 30:
            {
                if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) return 1;
                if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) SetPlayerAttachedObject(playerid, 4, InteractionsNumber[3][PlayerInfo[playerid][pBonus][0]], 6, 0.628249, -0.027766, 0.078052, -6.621746, 352.552642, 355.084289);
                else SetPlayerAttachedObject(playerid, 4, InteractionsNumber[3][PlayerInfo[playerid][pBonus][0]], 6, 0.628249, -0.027766, 0.078052, -1.621746, 356.202667, 355.084289);
            }
            case 31:
            {
                if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) return 1;
                if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) SetPlayerAttachedObject(playerid, 4, InteractionsNumber[3][PlayerInfo[playerid][pBonus][0]], 6, 0.528249, -0.020266, 0.068052, -6.621746, 352.552642, 355.084289);
				else SetPlayerAttachedObject(playerid, 4, InteractionsNumber[3][PlayerInfo[playerid][pBonus][0]], 6, 0.528249, -0.020266, 0.068052, -1.621746, 356.202667, 355.084289);
            }
            case 34:
            {
                if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) return 1;
                if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) SetPlayerAttachedObject(playerid, 4, InteractionsNumber[3][PlayerInfo[playerid][pBonus][0]], 6, 0.528249, -0.020266, 0.068052, -6.621746, 352.552642, 355.084289);
                else SetPlayerAttachedObject(playerid, 4, InteractionsNumber[3][PlayerInfo[playerid][pBonus][0]], 6, 0.528249, -0.020266, 0.068052, -1.621746, 356.202667, 355.084289);
            }
            case 29:
            {
                if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) return 1;
                if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) SetPlayerAttachedObject(playerid, 4, InteractionsNumber[3][PlayerInfo[playerid][pBonus][0]], 6, 0.298249, -0.02776, 0.158052, -11.631746, 359.302673, 357.584259);
                else SetPlayerAttachedObject(playerid, 4, InteractionsNumber[3][PlayerInfo[playerid][pBonus][0]], 6, 0.298249, -0.02776, 0.158052, 8.368253, 358.302673, 352.584259);
            }
            default: if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid, 4);
        }
    }
    return 1;
}

stock ProtectionSystem(i)
{
	if(GetPlayerState(i) == 9 && Observation[i][1] == 0 && PlayerCheatCheck[i] == 0 && SpawnCheck[i][0] == 0) return PlayerCheat(i, "невидимость #4", "Использование Чит Программ [{FF0000}Код: #4{CD853F}]");
	if(GetPlayerState(i) == 2 && GetPlayerSpeed(i) >= 500 && PlayerCheatCheck[i] == 0) return PlayerCheat(i, "SpeedHack в авто #1.2", "Использование Чит Программ [{FF0000}Код: #1.2{CD853F}]");
	if(GetPlayerPing(i) >= 600 && PlayerCheatCheck[i] == 0 && PlayerLogged[i] == 1)
	{
	    SetPVarInt(i, "PingWarning[0]", gettime() + 6);
	    if(GetPVarInt(i, "PingWarning[0]") >= gettime()) SetPVarInt(i, "PingWarning[1]", GetPVarInt(i, "PingWarning[1]") + 1);
	    if(GetPVarInt(i, "PingWarning[1]") >= 2) return PlayerCheat(i, "слишком высокий пинг", "Вы были отсоединены от игрового сервера. С причиной: Высокий пинг", 0, 1);
	}
	if(GetPlayerSpecialAction(i) == 2 && (PlayerInfo[i][pAdmin] == 0 || PlayerInfo[i][pVip] == 0) && PlayerCheatCheck[i] == 0) return PlayerCheat(i, "джетпак #8", "Использование Чит Программ [{FF0000}Код: #8{CD853F}]");
	if(AntiBreik[i] == 1 && Spawned[i] == true && SpawnCheck[i][4] == 0 && ChoiceTeamCheck[i][0] == 0 && DuelCheck[i][3] == 0 && IsPlayerInRangeOfPoint(i, 5.0, PosBreik[i][0], PosBreik[i][1], PosBreik[i][2]))//2.0
	{//Защита от AirBreak Код 13 - 1
		AntiBreik[i] = 0;
		if(PlayerInfo[i][pFreeze] == 0)//G26
		{
		    TogglePlayerControllable(i, 1);
		    SetCameraBehindPlayer(i);
		    FrozenCheck[i] = 0;
			if(PlayerInfo[i][pSpawnKill][0] >= 1 && PlayerInfo[i][pPrison] == 0 && PlayerInfo[i][pPassive] == 0)
			{
				GetPlayerPos(i, SpawnKillPos[i][0], SpawnKillPos[i][1], SpawnKillPos[i][2]);
				SpawnCheck[i][3] = PlayerInfo[i][pSpawnKill][0];
			}
			if(ChoiceTeamCheck[i][4] == 1)
			{
				ChoiceTeamCheck[i][4] = 0;
				if(PlayerInfo[i][pInfoText][5] == 0) ShowModelSelectionMenu(i, 0, 2);
				else ShowModelSelectionMenu(i, 257);
			}
  		}
	}
	if(AntiBreik[i] == 0 && Spawned[i] == true && PlayerCheatCheck[i] == 0 && DuelCheck[i][23] == 0)
	{
	    if(!IsPlayerInAnyVehicle(i))
	    {
	    	/*new animlib[32], animname[32];
		    GetAnimationName(GetPlayerAnimationIndex(i), animlib, 32, animname, 32);//20
	        strcmp(animname, "FALL_FALL", true) != 0 && strcmp(animname, "JUMP_GLIDE", true) != 0 && strcmp(animname, "KO_SKID_BACK", true) != 0*/
	        new Float:Pos[3];
	        GetPlayerPos(i, Pos[0], Pos[1], Pos[2]);
			if(!IsPlayerInRangeOfPoint(i, 20.0, PosBreik[i][0], PosBreik[i][1], Pos[2]) /*&& GetPlayerSurfingVehicleID(i) == INVALID_VEHICLE_ID*/) PlayerCheat(i, "AirBreak на ногах #13", "Использование Чит Программ [{FF0000}Код: #13{CD853F}]");
	    }
	    else if(!IsPlayerInRangeOfPoint(i, 23.0, PosBreik[i][0], PosBreik[i][1], PosBreik[i][2]) && GetPlayerSpeed(i) <= 5) PlayerCheat(i, "AirBreak на авто #13", "Использование Чит Программ [{FF0000}Код: #13{CD853F}]");
		GetPlayerPos(i, PosBreik[i][0], PosBreik[i][1], PosBreik[i][2]);
	}
	if(PutVehicle[i][1] != 0 && PutVehicle[i][1] < gettime() && PlayerCheatCheck[i] == 0)
	{
		if(GetPlayerState(i) != PutVehicle[i][0]) return PlayerCheat(i, "NOP InVehicle #16", "Использование Чит Программ [{FF0000}Код: #16{CD853F}]");
		else PutVehicle[i][1] = 0;
	}
	if(RemoveVehicle[i] != 0 && RemoveVehicle[i] < gettime() && PlayerCheatCheck[i] == 0)
	{
	    if(IsPlayerInAnyVehicle(i)) return PlayerCheat(i, "NOP FromVehicle #16.1", "Использование Чит Программ [{FF0000}Код: #16.1{CD853F}]");
	    else RemoveVehicle[i] = 0;
	}
	if(PlayerLogged[i] == 1 && FrozenCheck[i] >= 1 && PlayerCheatCheck[i] == 0 && DuelCheck[i][12] == 0 && Observation[i][1] == 0)
	{
		if(FrozenCheck[i] >= 2)
		{
			FrozenCheck[i] -= 1;
			GetPlayerPos(i, FrozenPos[i][0], FrozenPos[i][1], FrozenPos[i][2]);
		}
		else if(!IsPlayerInRangeOfPoint(i, 2.0, FrozenPos[i][0], FrozenPos[i][1], FrozenPos[i][2])) return PlayerCheat(i, "NOP Controllable #16.2", "Использование Чит Программ [{FF0000}Код: #16.2{CD853F}]");
    }///Защита от телепорта в закрытый автомобиль Код 2
	if(AutoTpCheck[i][0] == 0 && IsPlayerInAnyVehicle(i) && PlayerCheatCheck[i] == 0) return PlayerCheat(i, "телепорт в закрытый автомобиль #1.1", "Использование Чит Программ [{FF0000}Код: #1.1{CD853F}]");
	if(PlayerLogged[i] == 1 && PlayerCheatCheck[i] == 0 && GetPlayerInterior(i) != PlayerInterior[i][0] && AntiBreik[i] == 0 && ChangeMap[i][3] == 0 && PlayerInterior[i][1] < gettime()) return PlayerCheat(i, "не тот интерьер #16.3", "Использование Чит Программ [{FF0000}Код: #16.3{CD853F}]");
	if(PlayerLogged[i] == 1 && Spawned[i] == true && Pause[i][1] <= 3 && HealthCheck[i][0] >= 1 && GmTestCheck[i][2] == 0 && RegistrationHealth[i][0] != 1 && PlayerCheatCheck[i] == 0)
	{//5506
	    new Float:health;
	    HealthCheck[i][0] -= 1;
		GetPlayerHealth(i, health);
		if(HealthCheck[i][0] == 6 && floatround(health) != Health[i])
		{
			if(HealthCheck[i][1] >= 3) return PlayerCheat(i, "пополнение здоровья #11", "Использование Чит Программ [{FF0000}Код: #11{CD853F}]");
			else HealthCheck[i][1] += 1;
		}
		else if(HealthCheck[i][0] == 1)
		{
			if(floatround(health) != Health[i])
			{
				SetPlayerHealth(i, Health[i]);
				HealthCheck[i][0] = 8;
			}
			else HealthCheck[i][0] = 6;
		}
	}
	if(PlayerLogged[i] == 1 && Spawned[i] == true && Pause[i][1] <= 3 && Armour[i][2] >= 1 && GmTestCheck[i][2] == 0 && PlayerCheatCheck[i] == 0)
	{
	    new Float:armour;
	    Armour[i][2] -= 1;
		GetPlayerArmour(i, armour);
	    if(Armour[i][2] == 6 && floatround(armour) != Armour[i][0])
		{
			if(Armour[i][3] >= 3) return PlayerCheat(i, "пополнение брони #12", "Использование Чит Программ [{FF0000}Код: #12{CD853F}]");
			else Armour[i][3] += 1;
		}
		else if(Armour[i][2] == 1)
		{
			GetPlayerArmour(i, armour);
			if(floatround(armour) != Armour[i][0])
			{
				SetPlayerArmour(i, Armour[i][0]);
				Armour[i][2] = 8;
			}
			else Armour[i][2] = 6;
 		}
	}
	if(PlayerCheatCheck[i] != 0) return 1;
	if(WeaponPlayerIgnore[i][1] >= 1) WeaponPlayerIgnore[i][1] -= 1;
	if(WeaponPlayerIgnore[i][0] >= 1) return WeaponPlayerIgnore[i][0] -= 1;
	new slot[2];
	for(new s; s < 13; s ++)
	{
	    GetPlayerWeaponData(i, s, slot[0], slot[1]);
	    if(slot[0] > 0 && WeaponPlayer[i][s] != slot[0])
	    {
	        PlayerCheat(i, "оружие #10", "Использование Чит Программ [{FF0000}Код: #10{CD853F}]");
	        break;
	    }
		if(WeaponPlayerAmmo[i][s] < slot[1] && WeaponPlayerIgnore[i][1] == 0)
		{
			PlayerCheat(i, "прибавление патрон #10.1", "Использование Чит Программ [{FF0000}Код: #10.1{CD853F}]");
			break;
  		}
		else if(WeaponPlayerAmmo[i][s] > slot[1]) WeaponPlayerAmmo[i][s] = slot[1];
		/*if((slot[1] < 0 || slot[1] > 902) && DuelCheck[i][12] == 0 && Pause[i][1] <= 3 && WeaponPlayerIgnore[i][1] == 0)
	    {
	        PlayerCheat(i, "лимит патронов #10.2", "Использование Чит Программ [{FF0000}Код: #10.2{CD853F}]");
	        break;
	    }*/
	}
	return 1;
}

stock GivePlayerWeaponZS(playerid, weaponid, ammo)
{
	switch(weaponid)
 	{
 	    case 1..15, 44..46: ammo = 1;
 	}
 	WeaponPlayerIgnore[playerid][0] = 3;
	WeaponPlayer[playerid][WSlot[weaponid]] = weaponid;
	WeaponPlayerAmmo[playerid][WSlot[weaponid]] = ammo;
	GivePlayerWeapon(playerid, weaponid, ammo);
	return SetPlayerAmmo(playerid, weaponid, ammo);
}
stock ResetPlayerWeaponsZS(playerid)
{
    for(new i; i < 13; i ++)
    {
    	WeaponPlayer[playerid][i] = 0;
		WeaponPlayerAmmo[playerid][i] = 0;
    }
	return ResetPlayerWeapons(playerid);
}
stock SetPlayerAmmoZS(playerid, weaponslot, ammo)
{
	WeaponPlayerAmmo[playerid][WSlot[weaponslot]] += ammo;
	return SetPlayerAmmo(playerid, weaponslot, WeaponPlayerAmmo[playerid][WSlot[weaponslot]]);
}
stock SpawnPlayerZS(playerid)
{
    SpawnCheck[playerid][0] = 1;
    SpawnCheck[playerid][1] = gettime() + 2;
    return SpawnPlayer(playerid);
}
stock TogglePlayerSpectatingZS(playerid, toggle)
{
	if(toggle == 1)
	{
		SpawnCheck[playerid][0] = 1;
		SpawnCheck[playerid][1] = gettime() + 2;
 	}
    return TogglePlayerSpectating(playerid, toggle);
}
stock SetPlayerPosZS(playerid, Float:X, Float:Y, Float:Z, Float: Angle, interiorid, worldid, loadingtextures = 0)// G26
{
	AntiBreik[playerid] = 1;
	PosBreik[playerid][0] = X;
	PosBreik[playerid][1] = Y;
	PosBreik[playerid][2] = Z;
	FrozenPos[playerid][0] = X;
    FrozenPos[playerid][1] = Y;
    FrozenPos[playerid][2] = Z;
    FrozenCheck[playerid] = 3;
	SetPlayerPos(playerid, X, Y, Z);
	SetPlayerFacingAngle(playerid, Angle);
    TogglePlayerControllable(playerid, 0);
    if(Spawned[playerid] == true) SetCameraBehindPlayer(playerid);
    PlayerInterior[playerid][1] = gettime() + 3;
	PlayerInterior[playerid][0] = interiorid;
	SetPlayerInterior(playerid, interiorid);
    if(worldid != GetPlayerVirtualWorld(playerid)) SetPlayerVirtualWorld(playerid, worldid);
	if(loadingtextures >= 1) SpawnCheck[playerid][4] = PlayerInfo[playerid][pSpawnKill][2];
	return 1;
}
stock SetVehiclePosZS(playerid, Float:X, Float:Y, Float:Z, Float: Angle = 0.0)
{
    PosBreik[playerid][0] = X;
	PosBreik[playerid][1] = Y;
	PosBreik[playerid][2] = Z;
	SetCameraBehindPlayer(playerid);
	new vehicleid = GetPlayerVehicleID(playerid);
	SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
	SetVehicleZAngle(vehicleid, Angle);
	return SetVehiclePos(vehicleid, X, Y, Z);
}
stock SetPlayerVelocityZS(playerid, Float:X, Float:Y, Float:Z)
{
    if(SetPlayerVelocity(playerid, X, Y, Z) == 0) return 0;
	SpeedVer[playerid] = floatround(VectorSize(X, Y, 0.0) * 179.28625);
	SpeedVerTime[playerid] = gettime() + 2;
	return 1;
}
stock ShowPlayerDialogZS(playerid, dialogid, style, const caption[], const info[], const button1[], const button2[], soundid = 0)
{
	if(dialogid == -1)
	{
	    DialogueCheck[playerid][0] = 0;
    	DialogueCheck[playerid][1] = 0;
		DialogueCheck[playerid][2] = 0;
		return ShowPlayerDialog(playerid, -1, style, caption, info, button1, button2);
	}
    if(DialogueCheck[playerid][1] == 1) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Сначала закройте предыдущий диалог!", 1085);
    DialogueCheck[playerid][0] = dialogid;
    DialogueCheck[playerid][1] = 1;
	if(ServerConfig[4] == 0) DialogueCheck[playerid][2] = gettime() + 360;
	if(soundid >= 1) PlayerPlaySound(playerid, soundid, 0.0, 0.0, 0.0);
	return ShowPlayerDialog(playerid, dialogid, style, caption, info, button1, button2);
}
stock GetPlayerWeaponAmmo(playerid, weaponid)
{
    new weapondata[2][13];
    for(new i; i < 13; i ++)
	{
		GetPlayerWeaponData(playerid, i, weapondata[0][i], weapondata[1][i]);
		if(weaponid == weapondata[0][i]) return weapondata[1][i];
 	}
    return 0;
}
stock PutPlayerInVehicleZS(playerid, vehicleid, seatid)//Античит на NOP PutPlayerInVehicle Код #16
{
	EnterVehicle[playerid][0] = vehicleid;
	EnterVehicle[playerid][1] = gettime() + 2;
	if(seatid == 0) PutVehicle[playerid][0] = 2;
	else PutVehicle[playerid][0] = 3;
	PutVehicle[playerid][1] = gettime() + 4;
	return PutPlayerInVehicle(playerid, vehicleid, seatid);
}
stock RemovePlayerFromVehicleZS(playerid)//Античит на NOP RemovePlayerFromVehicle Код #16.1
{
	RemoveVehicle[playerid] = gettime() + 5;
	return RemovePlayerFromVehicle(playerid);
}
stock TogglePlayerControllableZS(playerid, toggle, check = 3)//Античит на NOP TogglePlayerControllable Код 16.2-3
{
	if(toggle == 0)
	{
		FrozenCheck[playerid] = check;
		GetPlayerPos(playerid, FrozenPos[playerid][0], FrozenPos[playerid][1], FrozenPos[playerid][2]);
 	}
	else
	{
		FrozenCheck[playerid] = 0;
		AntiBreik[playerid] = 0;
	    FrozenPos[playerid][0] = 0.0;
		FrozenPos[playerid][1] = 0.0;
		FrozenPos[playerid][2] = 0.0;
	}
    return TogglePlayerControllable(playerid, toggle);
}
stock SetPlayerSkinZS(playerid, skinid)//Античит на NOP SetPlayerSkin Код 7.2
{
	if(skinid == 74) skinid = 73;
	SetPlayerSkin(playerid, skinid);
	if(PlayerInfo[playerid][pFreeze] == 0) TogglePlayerControllableZS(playerid, 1);
	if(IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicleZS(playerid);
	return 1;
}
stock SetPlayerInteriorZS(playerid, interiorid)//Античит на NOP SetPlayerInterior Код 7.2
{
    PlayerInterior[playerid][1] = gettime() + 3;
	PlayerInterior[playerid][0] = interiorid;
	return SetPlayerInterior(playerid, interiorid);
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float: fX, Float: fY, Float: fZ)
{
 	if(WeaponPlayerAmmo[playerid][WSlot[weaponid]] > 0)
	{
	    WeaponPlayerIgnore[playerid][1] = 3;
		WeaponPlayerAmmo[playerid][WSlot[weaponid]] -= 1;
 	}
 	if(GetPlayerWeapon(playerid) != weaponid || GetPlayerWeapon(playerid) == 0 || !IsPlayerConnected(playerid) || !(-1 < hittype < 5) || !(21 < weaponid < 39))
 	{
	    PlayerCheat(playerid, "поддельные действия #10.4", "Использование Чит Программ [{FF0000}Код: #10.4{CD853F}]");
	 	return 0;
  	}
	if(weaponid != 38)//Код #10.3 Rapid Fire CLEO
    {
        new count = 0;
        if(weaponid != RapidFire[playerid][1])
		{
			RapidFire[playerid][1] = weaponid;
			RapidFire[playerid][2] = GetPlayerWeaponAmmo(playerid, weaponid);
			count += 1;
  		}
        if(GetPlayerWeaponAmmo(playerid, weaponid) > RapidFire[playerid][2] || GetPlayerWeaponAmmo(playerid, weaponid) < RapidFire[playerid][2])
        {
            RapidFire[playerid][2] = GetPlayerWeaponAmmo(playerid, weaponid);
            RapidFire[playerid][0] = 0;
            count += 1;
        }
        if(GetPlayerWeaponAmmo(playerid, weaponid) != 0 && GetPlayerWeaponAmmo(playerid, weaponid) == RapidFire[playerid][2] && count == 0 && PlayerCheatCheck[playerid] == 0)
        {
            RapidFire[playerid][0] += 1;
            if(RapidFire[playerid][0] >= 5)
            {
                RapidFire[playerid][0] = 0;
                RapidFire[playerid][1] = 0;
                RapidFire[playerid][2] = 0;
				PlayerCheat(playerid, "Rapid Fire #10.3", "Использование Чит Программ [{FF0000}Код: #10.3{CD853F}]");
                return 0;
			}
        }
	}
    new Float:pX, Float:pY, Float:pZ, Float:hX, Float:hY, Float:hZ, Float:cX, Float:cY, Float:cZ;
	GetPlayerPos(hitid, hX, hY, hZ);
    GetPlayerLastShotVectors(playerid, pX, pY, pZ, cX, cY, cZ);
    new Float:S2V_dist = VectorSize(pX-hX, pY-hY, pZ-hZ), carmode = GetPlayerCameraMode(playerid);
	if(PlayerInfo[playerid][pAimingX][0] >= 1 && AimingCheck[playerid][2] < GetTickCount())
	{
		if(S2V_dist < WeaponRange[weaponid - 22] && (carmode == 7 || carmode == 53 || carmode == 55) && hittype == BULLET_HIT_TYPE_PLAYER && AimingCheck[playerid][0] == 0 && PlayerInfo[playerid][pAimingX][0] == 1 && hitid != 65535 && Spawned[hitid] == true && Pause[hitid][1] <= 3 && ForbiddenArea[playerid][0] == 0 && SpawnCheck[hitid][3] == 0 && SpawnCheck[playerid][3] == 0 && ChoiceTeamCheck[playerid][2] != ChoiceTeamCheck[hitid][2])
		{
			AimingCheck[playerid][0] = 1;
			AimingCheck[playerid][1] = 2;
			if(weaponid == 34) TextDrawShowForPlayer(playerid, Aiming[playerid][1]);
			else TextDrawShowForPlayer(playerid, Aiming[playerid][0]);
		}
		else if(AimingCheck[playerid][0] != 0 && hittype != BULLET_HIT_TYPE_PLAYER)
		{
			AimingCheck[playerid][0] = 0;
			AimingCheck[playerid][1] = 0;
			TextDrawHideForPlayer(playerid, Aiming[playerid][0]);
			TextDrawHideForPlayer(playerid, Aiming[playerid][1]);
			TextDrawSetString(Aiming[playerid][0], AimingText);
			TextDrawSetString(Aiming[playerid][1], AimingText);
		}
	}
    if(SpawnCheck[playerid][3] >= 1)
    {
   		SpawnCheck[playerid][3] = 0;
    	GameTextForPlayerZS(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~spawn kill stop", "~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~cЈaў® kњћћ c¦oЈ", 1000, 3);
    }
	if(S2V_dist > WeaponRange[weaponid-22]
	|| ForbiddenArea[playerid][0] >= 2 || SpawnCheck[playerid][3] != 0 || GmTestCheck[playerid][2] != 0 || Spawned[playerid] == false || Pause[playerid][1] >= 3
	|| (hitid != 65535 && ((KillsCheck[hitid][10] == 9 && Armour[hitid][4] != 0)
	|| SpawnCheck[hitid][3] != 0
	|| GmTestCheck[hitid][2] != 0
	|| Pause[hitid][1] >= 3
	|| (DuelCheck[playerid][3] == 0 && PlayerInfo[playerid][pFreeMode] != PlayerInfo[hitid][pFreeMode])
	|| (DuelCheck[playerid][3] == 0 && PlayerInfo[playerid][pPassive] == 1 || PlayerInfo[hitid][pPassive] == 1)))) return 0;
	
	/*if(Spawned[playerid] == true && PlayerInfo[playerid][pFreeMode] == 0 && PlayerInfo[playerid][pBonus][10] == 1 && MegaBullet[playerid] >= 1)
    {
        MegaBullet[playerid] -= 1;
        CreateExplosion(fX, fY, fZ, 0, 5.0); //5528
        if(MegaBullet[playerid] == 1)
        {
            MegaBullet[playerid] = 0;
			PlayerInfo[playerid][pBonus][11] = gettime() + 600;
			GameTextForPlayerZS(playerid, "~n~~g~mega bullet ~r~Off", "~n~~g~Їe™a Јyћ¬ ~r~ўЁk", 2000, 4);
        }
 	}*/
	return 1;
}

public OnPlayerForAll(playerid, line, test, test0)
{
	new rows[2];
    cache_get_row_count(rows[0]);
    switch(line)
	{
	    case 1:
	    {
			new string[287];
	        if(rows[0] == 0)
		    {
			    format(string, sizeof(string), "{FFFFFF}Добро пожаловать на {61dd61}TDM Zones {FFFFFF}сервер\n\nДанный никнейм {61dd61}%s {FFFFFF}зарегистрирован.\nДля входа в аккаунт введите пароль:", PlayerName[playerid]);
		        return ShowPlayerDialogZS(playerid, 1, DIALOG_STYLE_PASSWORD, "Вход в Аккаунт", string, "Войти", "Опции");
		    }
			cache_get_value_name_int(0, "unblock", rows[1]);
			if(getdate() >= rows[1])
			{
				mysql_format(MysqlConnectID, string, sizeof(string), "DELETE FROM blocked WHERE `name`='%s'", PlayerName[playerid]);
				mysql_tquery(MysqlConnectID, string);
				format(string, sizeof(string), "{FFFFFF}Добро пожаловать на {61dd61}TDM Zones {FFFFFF}сервер\n\nДанный никнейм {61dd61}%s {FFFFFF}зарегистрирован.\nДля входа в аккаунт введите пароль:", PlayerName[playerid]);
				ShowPlayerDialogZS(playerid, 1, DIALOG_STYLE_PASSWORD, "Вход в Аккаунт", string, "Войти", "Опции");
			}
			else
			{
				new slot[24], slot0[21], slot1[24], slot2[24];
				cache_get_value_name(0, "name", slot1);
				cache_get_value_name(0, "nameblock", slot);
				cache_get_value_name(0, "dateblock", slot0);
				cache_get_value_name(0, "reason", slot2);
				format(string, sizeof(string), "{FFFFFF}Данный никнейм {668c99}%s {FFFFFF}заблокирован на {668c99}%d {FFFFFF}дней.\nДата Время блокировки: {668c99}%s{FFFFFF}\n\nЗаблокировал администратор: {668c99}%s{FFFFFF}\nПричина: {668c99}%s.", slot1, rows[1] - getdate(), slot0, slot, slot2);
				ShowPlayerDialogZS(playerid, 6, DIALOG_STYLE_MSGBOX, " ", string, "Закрыть", "", 1085);
				KickWithMessage(playerid, "Вы были отсоединены от игрового сервера.", 0x668c99AA);
			}
			return 1;
	    }
	    case 2:
	    {
		    if(rows[0] == 0) return ShowPlayerDialogZS(playerid, 4007, DIALOG_STYLE_INPUT, "Разблокировать игровой аккаунт", "{FFFFFF}Введите никнейм игрока который был заблокирован::\n{FF0000}Данный аккаунт не заблокирован!", "Дальше", "Назад", 1085);
			new string[300], slot[24], slot0[21], slot1[24];
			cache_get_value_name_int(0, "unblock", rows[1]);
			cache_get_value_name(0, "nameblock", slot);
			cache_get_value_name(0, "dateblock", slot0);
			cache_get_value_name(0, "reason", slot1);
			format(string, sizeof(string), "{FFFFFF}Никнейм: %s\nЗаблокировал администратор: %s\n\nОсталось дней: %d\nДата Время блокировки: %s\nПричина: %s", BanInfo[playerid], slot, rows[1] - getdate(), slot0, slot1);
			return ShowPlayerDialogZS(playerid, 4017, DIALOG_STYLE_MSGBOX, "Информация об аккаунте", string, "Дальше", "Назад");
		}
		case 3:
		{
		    if(rows[0] == 0)
		    {
		        TextDrawSetString(DuelInfo[playerid][27], "--:--~n~~n~--:--");
		        return TextDrawSetString(DuelInfo[DuelCheck[playerid][0]][27], "--:--~n~~n~--:--");
		    }
		    new string[147], slot[5], slot1[14];
		    cache_get_value_name_int(0, "played", slot[0]);
		    cache_get_value_name_int(0, "limittime[1]", slot[3]);
		    cache_get_value_name_int(0, "limittime[2]", slot[4]);
		    slot[0] = slot[0] + 1;
		    if(DuelCheck[playerid][20] == 1)
			{
                cache_get_value_name_int(0, "besttime[1]", slot[1]);
		    	cache_get_value_name_int(0, "besttime[2]", slot[2]);
		    	format(string, sizeof(string), "%s:00~n~~n~%s:00", Convert(slot[1]), Convert(slot[2]));
		    	TextDrawSetString(DuelInfo[playerid][27], string);
	    		TextDrawSetString(DuelInfo[DuelCheck[playerid][0]][27], string);
				if(slot[1] > DuelCheck[DuelCheck[playerid][0]][26] && slot[3] >= DuelCheck[DuelCheck[playerid][0]][26])
				{
					strmid(slot1, VehicleName[DuelCheck[DuelCheck[playerid][0]][16] - 400], 0, 10);
					if(strlen(slot1) >= 8) format(slot1, sizeof(slot1), "%s...", slot1);
                    mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE race SET `played`='%d',`besttime[1]`='%d',`bestname[1]`='%s',`vehicle[1]`='%s' WHERE `id`='%d'", slot[0], DuelCheck[DuelCheck[playerid][0]][26], PlayerName[DuelCheck[playerid][0]], slot1, DuelCheck[playerid][4]);
                    mysql_tquery(MysqlConnectID, string);
				}
				if(slot[2] > test && slot[3] >= test)
				{
                    strmid(slot1, VehicleName[ClassVehicleDuel[DuelCheck[playerid][7]-1][DuelCheck[playerid][16]] - 400], 0, 10);
					if(strlen(slot1) >= 8) format(slot1, sizeof(slot1), "%s...", slot1);
                    mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE race SET `played`='%d',`besttime[2]`='%d',`bestname[2]`='%s',`vehicle[2]`='%s' WHERE `id`='%d'", slot[0], test, PlayerName[playerid], slot1, DuelCheck[playerid][4]);
                    mysql_tquery(MysqlConnectID, string);
				}
				return 1;
   			}
			cache_get_value_name_int(0, "besttime[3]", slot[1]);
			cache_get_value_name_int(0, "besttime[4]", slot[2]);
			format(string, sizeof(string), "%s:00~n~~n~%s:00", Convert(slot[1]), Convert(slot[2]));
			TextDrawSetString(DuelInfo[playerid][27], string);
			TextDrawSetString(DuelInfo[DuelCheck[playerid][0]][27], string);
			if(slot[1] > DuelCheck[DuelCheck[playerid][0]][26] && slot[4] >= DuelCheck[DuelCheck[playerid][0]][26])
			{
				strmid(slot1, VehicleName[DuelCheck[DuelCheck[playerid][0]][16] - 400], 0, 10);
				if(strlen(slot1) >= 8) format(slot1, sizeof(slot1), "%s...", slot1);
				mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE race SET `played`='%d',`besttime[3]`='%d',`bestname[3]`='%s',`vehicle[3]`='%s' WHERE `id`='%d'", slot[0], DuelCheck[DuelCheck[playerid][0]][26], PlayerName[DuelCheck[playerid][0]], slot1, DuelCheck[playerid][4]);
				mysql_tquery(MysqlConnectID, string);
			}
			if(slot[2] > test && slot[4] >= test)
			{
				strmid(slot1, VehicleName[ClassVehicleDuel[DuelCheck[playerid][7]-1][DuelCheck[playerid][16]] - 400], 0, 10);
				if(strlen(slot1) >= 8) format(slot1, sizeof(slot1), "%s...", slot1);
				mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE race SET `played`='%d',`besttime[4]`='%d',`bestname[4]`='%s',`vehicle[4]`='%s' WHERE `id`='%d'", slot[0], test, PlayerName[playerid], slot1, DuelCheck[playerid][4]);
				mysql_tquery(MysqlConnectID, string);
			}
		    return 1;
		}
		case 4:
		{
		    if(rows[0] == 0) return TextDrawSetString(DuelInfo[playerid][15], " no information");
		    new string[151], slot[24], slot1[3];
		    cache_get_value_name(0, "created", slot);
		    cache_get_value_name_int(0, "played", slot1[0]);
		    cache_get_value_name_int(0, "liked", slot1[1]);
		    cache_get_value_name_int(0, "dislike", slot1[2]);
		    if(PlayerInfo[playerid][pRussifier][1] == 0) format(string, sizeof(string), " created by: ~g~~h~%s~n~ played: ~g~~h~%s~n~ like: ~g~~h~%s~n~ dislike: ~g~~h~%s", slot, AddCommasToInt(slot1[0]), AddCommasToInt(slot1[1]), AddCommasToInt(slot1[2]));
			else format(string, sizeof(string), " coџљa¦eћ©: ~g~~h~%s~n~ cЁ™pa®o: ~g~~h~%s~n~ Јo®paўњћac©: ~g~~h~%s~n~ ®e Јo®paўњћac©: ~g~~h~%s", slot, AddCommasToInt(slot1[0]), AddCommasToInt(slot1[1]), AddCommasToInt(slot1[2]));
			return TextDrawSetString(DuelInfo[playerid][15], string);
		}
		case 5:
		{
		    if(rows[0] == 0) return 1;
		    new string[58], slot[2];
		    cache_get_value_name_int(0, "liked", slot[0]);
		    cache_get_value_name_int(0, "dislike", slot[1]);
		    if(test == 0) mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE race SET `liked`='%d' WHERE `id`='%d'", slot[0] + 1, DuelCheck[playerid][4]);
		    else mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE race SET `dislike`='%d' WHERE `id`='%d'", slot[1] + 1, DuelCheck[playerid][4]);
		    return mysql_tquery(MysqlConnectID, string);
		}
		case 6:
		{
		    new stringg[108];
		    if(rows[0] == 0)
			{
                switch(test0)
                {
					case 3:
					{
						mysql_format(MysqlConnectID, stringg, sizeof(stringg), "SELECT name,score2,scores2 FROM profile WHERE scorecheck=%d AND scores2>0 ORDER BY scores2 DESC LIMIT 0,10", ChoiceTeamCheck[playerid][6]);
						mysql_tquery(MysqlConnectID, stringg, "OnPlayerForAll", "iiii", playerid, 6, 2, 5);//если нет листа первой команды проверяем вторую
					}
					case 4: for(new x; x < 9; ++ x) TextDrawShowForPlayer(playerid, ScoreArena[playerid][x]);
				}
				return 1;
   			}
		    new string[5][312], name[24], str[31], slot[3], lang = PlayerInfo[playerid][pRussifier][1];
		  	strcat(string[1], TextDrawInfo[99][lang]);
		  	strcat(string[2], TextDrawInfo[102][lang]);
		  	strcat(string[3], TextDrawInfo[100][lang]);
		  	strcat(string[4], TextDrawInfo[101][lang]);
		  	for(new idx; idx < 10; idx ++)
		  	{
		  	    if(idx >= rows[0] || (test0 == 1 && TopList[playerid][1] >= 30 && idx >= 2 || test0 == 2 && TopList[playerid][3] >= 30 && idx >= 2))
				{
				    if(idx != 10 && test0 == 1) TopList[playerid][2] = 1;
		  			if(idx != 10 && test0 == 2) TopList[playerid][4] = 1;
					break;
				}
		  	    cache_get_value_name(idx, "name", name);
		  	    format(str, sizeof(str), "score%d", test);
				cache_get_value_name(idx, str, str);
		  	    sscanf(str, "p<,>dd", slot[1], slot[2]);
		  	    format(str, sizeof(str), "scores%d", test);
				cache_get_value_name_int(idx, str, slot[0]);
		  	    if(test0 == 1) format(str, sizeof(str), "%d~n~~n~", TopList[playerid][1]+idx+1);
                else format(str, sizeof(str), "%d~n~~n~", TopList[playerid][3]+idx+1);
                strcat(string[0], str);
                format(str, sizeof(str), "~n~~n~%s", name);
                strcat(string[1], str);
                format(str, sizeof(str), "~n~~n~%s", AddCommasToInt(slot[0]));
                strcat(string[2], str);
                format(str, sizeof(str), "~n~~n~%s", AddCommasToInt(slot[1]));
                strcat(string[3], str);
                format(str, sizeof(str), "~n~~n~%s", AddCommasToInt(slot[2]));
                strcat(string[4], str);
                slot[0] = 0;
                slot[1] = 0;
				slot[2] = 0;
		  	}
		  	switch(test0)//1 Обновить первый список, 2 Обновить второй список, 3 Обновить первый и второй список и отобразить их
		  	{
		  	    case 1, 3:
		  	    {
		  	        TextDrawSetString(ScoreArena[playerid][4], string[0]);
	            	TextDrawSetString(ScoreArena[playerid][5], string[1]);
	            	TextDrawSetString(ScoreArena[playerid][6], string[2]);
	            	TextDrawSetString(ScoreArena[playerid][7], string[3]);
		        	TextDrawSetString(ScoreArena[playerid][8], string[4]);
		  	        if(test0 == 3)
			  		{
			  			mysql_format(MysqlConnectID, stringg, sizeof(stringg), "SELECT name,score2,scores2 FROM profile WHERE scorecheck=%d AND scores2>0 ORDER BY scores2 DESC LIMIT 0,10", ChoiceTeamCheck[playerid][6]);
					  	mysql_tquery(MysqlConnectID, stringg, "OnPlayerForAll", "iiii", playerid, 6, 2, 4);
		  	    	}
				}
				case 2, 4, 5:
				{
				    TextDrawSetString(ScoreArena[playerid][13], string[0]);
	            	TextDrawSetString(ScoreArena[playerid][14], string[1]);
	            	TextDrawSetString(ScoreArena[playerid][15], string[2]);
	            	TextDrawSetString(ScoreArena[playerid][16], string[3]);
		        	TextDrawSetString(ScoreArena[playerid][17], string[4]);
		        	switch(test0)
		        	{
		        	    case 4: if(test0 == 4) for(new x; x < 18; ++ x) TextDrawShowForPlayer(playerid, ScoreArena[playerid][x]);
		        	    case 5: for(new x = 9; x < 18; ++ x) TextDrawShowForPlayer(playerid, ScoreArena[playerid][x]);
		        	}
				}
		  	}
			return 1;
		}
		case 7: // :top
		{
		    if(rows[0] == 0)
			{
			    if(TopList[playerid][0] == 1)
			    {
			    	for(new x; x < 10; ++ x) TextDrawHideForPlayer(playerid, ListTable[playerid][x]);
            		TopList[playerid][0] = 0;
            		TopList[playerid][1] = 0;
            		TopList[playerid][2] = 0;
           		 	CancelSelectTextDraw(playerid);
			    }
				return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Топ лист не найден!");
   			}
		  	new strin[5][312], slott1[4][32], slot[3], lang = PlayerInfo[playerid][pRussifier][1];
		  	strcat(strin[0], TextDrawInfo[99][lang]);
		  	strcat(strin[1], TextDrawInfo[102][lang]);
		  	strcat(strin[2], TextDrawInfo[100][lang]);
		  	strcat(strin[3], TextDrawInfo[101][lang]);
		  	for(new idx; idx < 10; idx ++)
		  	{
		  	    if(idx >= rows[0])
				{
		  			if(idx != 10) TopList[playerid][2] = 1;
					break;
				}
		  	    cache_get_value_name(idx, "name", slott1[0]);
				cache_get_value_name_int(idx, "deaths", slot[2]);
				cache_get_value_name_int(idx, "kills", slot[1]);
				cache_get_value_name_int(idx, "lastscore", slot[0]);
                format(slott1[1], 32, "~n~~n~%s", slott1[0]);
                strcat(strin[0], slott1[1]);
                format(slott1[1], 32, "~n~~n~%s", AddCommasToInt(slot[0]));
                strcat(strin[1], slott1[1]);
                format(slott1[1], 32, "~n~~n~%s", AddCommasToInt(slot[1]));
                strcat(strin[2], slott1[1]);
                format(slott1[1], 32, "~n~~n~%s", AddCommasToInt(slot[2]));
                strcat(strin[3], slott1[1]);
                format(slott1[1], 32, "%d~n~~n~", TopList[playerid][1]+idx+1);
                strcat(strin[4], slott1[1]);
		  	}
		  	//if(rows[0] != 10) TopList[playerid][2] = 1;
		  	TextDrawSetString(ListTable[playerid][2], strin[4]);
            TextDrawSetString(ListTable[playerid][3], strin[0]);
            TextDrawSetString(ListTable[playerid][4], strin[1]);
            TextDrawSetString(ListTable[playerid][5], strin[2]);
            TextDrawSetString(ListTable[playerid][6], strin[3]);
            if(test == 0)
			{
			    TopList[playerid][0] = 1;
				TopList[playerid][1] = 0;
				if(rows[0] == 10) TopList[playerid][2] = 0;
				for(new x; x < 10; ++ x) TextDrawShowForPlayer(playerid, ListTable[playerid][x]);
				SelectTextDraw(playerid, 0x88AA88FF);
   			}
			return 1;
		}
	}
	return 1;//5588
}

stock SetDuelMenu(playerid, room, number = 0, roomtd = 40)
{
    DuelCheck[playerid][2] = gettime() + 240;
    new lang = PlayerInfo[playerid][pRussifier][1];
    switch(room)
    {
		case 1:
		{
		    switch(DuelCheck[playerid][3])//RaceS 5588
	     	{
		        case 1:
		        {
		            DuelCheck[playerid][3] = 2;// гонка
		            DuelCheck[playerid][4] = 1;// карта
	                DuelCheck[playerid][7] = 1;
	                DuelCheck[playerid][8] = 0;
	                DuelCheck[playerid][9] = 1;
	                DuelCheck[playerid][10] = 1;
	                DuelCheck[playerid][11] = 0;
	                DuelCheck[playerid][16] = 1;
	                DuelCheck[playerid][20] = 1;//  круг назад
                    SetPlayerPosZS(playerid, DuelCameraRace[0][0], DuelCameraRace[0][1], DuelCameraRace[0][2] + 8.0, 0.0, floatround(DuelCameraRace[0][6]), DuelCheck[playerid][25]);
		            SetPlayerCameraPos(playerid, DuelCameraRace[0][0], DuelCameraRace[0][1], DuelCameraRace[0][2]);
					SetPlayerCameraLookAt(playerid, DuelCameraRace[0][3], DuelCameraRace[0][4], DuelCameraRace[0][5]);
					TextDrawSetStringZS(DuelInfo[playerid][3], DuelInfo[playerid][35], DuelText[1][lang], DuelText[18][lang]);
	                TextDrawSetStringZS(DuelInfo[playerid][4], DuelInfo[playerid][36], DuelText[2][lang], DuelText[31][lang]);
					TextDrawSetStringZS(DuelInfo[playerid][7], DuelInfo[playerid][39], DuelText[8][lang], DuelText[19][lang]);
				    TextDrawSetStringZS(DuelInfo[playerid][8], DuelInfo[playerid][40], DuelText[9][lang], DuelText[15][lang]);
				    TextDrawSetStringZS(DuelInfo[playerid][9], DuelInfo[playerid][41], DuelText[10][lang], "~y~5x");
				    TextDrawSetStringZS(DuelInfo[playerid][10], DuelInfo[playerid][42], DuelText[11][lang], "~y~2x");
				    TextDrawSetStringZS(DuelInfo[playerid][11], DuelInfo[playerid][43], DuelText[12][lang], DuelText[16][lang]);
				    TextDrawSetStringZS(DuelInfo[playerid][12], DuelInfo[playerid][44], DuelText[13][lang], DuelText[15][lang]);
					new string[38];
		        	mysql_format(MysqlConnectID, string, sizeof(string), "SELECT * FROM race WHERE `id`='%d'", DuelCheck[playerid][4]);
					return mysql_tquery(MysqlConnectID, string, "OnPlayerForAll", "iii", playerid, 4, 0);
		        }
		        case 2:
		        {
		            DuelCheck[playerid][3] = 1;//       1 перестрелка | 2 гонка
		            DuelCheck[playerid][4] = 1;//       Карта
			        DuelCheck[playerid][7] = 0;//		Оружие
			        DuelCheck[playerid][8] = 100;//     Здоровье
			        DuelCheck[playerid][9] = 0;//       Броня
			        DuelCheck[playerid][10] = 0;// 		Пусто
			        DuelCheck[playerid][11] = 0;// 		Пусто
	                SetPlayerPosZS(playerid, -2715.1350, -282.0984, 7.2060, 76.4541, 0, DuelCheck[playerid][25]);
		            SetPlayerCameraPos(playerid, -2710.325195, -269.955108, 14.167563);
					SetPlayerCameraLookAt(playerid, -2714.584960, -267.421295, 13.509325);
					TextDrawSetStringZS(DuelInfo[playerid][3], DuelInfo[playerid][35], DuelText[1][lang], DuelText[17][lang]);
	                TextDrawSetStringZS(DuelInfo[playerid][4], DuelInfo[playerid][36], DuelText[2][lang], DuelText[34][lang]);
	                TextDrawSetStringZS(DuelInfo[playerid][7], DuelInfo[playerid][39], DuelText[5][lang], "~y~fist");
				    TextDrawSetStringZS(DuelInfo[playerid][8], DuelInfo[playerid][40], DuelText[6][lang], "~y~100%");
				    TextDrawSetStringZS(DuelInfo[playerid][9], DuelInfo[playerid][41], DuelText[7][lang], DuelText[15][lang]);
				    TextDrawSetStringZS(DuelInfo[playerid][10], DuelInfo[playerid][42], "_", "_");
				    TextDrawSetStringZS(DuelInfo[playerid][11], DuelInfo[playerid][43], "_", "_");
		   			TextDrawSetStringZS(DuelInfo[playerid][12], DuelInfo[playerid][44], "_", "_");
					TextDrawSetString(DuelInfo[playerid][15], " created by:~g~~h~ tdm zones");
					return 1;
				}
		    }
		}
		case 2:
		{
			switch(DuelCheck[playerid][3])
		    {
		        case 1:
		        {
		            switch(DuelCheck[playerid][4])
		            {
		                case 1:
		                {
		                    DuelCheck[playerid][4] = 2;
		                    SetPlayerPosZS(playerid, 784.0493, -1308.1243, 13.5538, 90.8909, 0, DuelCheck[playerid][25]);
		                    SetPlayerCameraPos(playerid, 775.072875, -1306.423095, 16.946475);
							SetPlayerCameraLookAt(playerid, 772.688415, -1302.033935, 16.723896);
							TextDrawSetString(DuelInfo[playerid][36], DuelText[35][lang]);
		                }
		                case 2:
		                {
		                    DuelCheck[playerid][4] = 3;
		                    SetPlayerPosZS(playerid, 2541.2524, 2849.4250, 12.2611, 270.7458, 0, DuelCheck[playerid][25]);
		                    SetPlayerCameraPos(playerid, 2543.574218, 2846.258544, 16.336822);
							SetPlayerCameraLookAt(playerid, 2547.799072, 2843.666748, 15.678584);
							TextDrawSetString(DuelInfo[playerid][36], DuelText[36][lang]);
		                }
		                case 3:
		                {
		                    DuelCheck[playerid][4] = 1;
		                    SetPlayerPosZS(playerid, -2715.1350, -282.0984, 7.2060, 76.4541, 0, DuelCheck[playerid][25]);
		                    SetPlayerCameraPos(playerid, -2710.325195, -269.955108, 14.167563);
							SetPlayerCameraLookAt(playerid, -2714.584960, -267.421295, 13.509325);
		  					TextDrawSetString(DuelInfo[playerid][36], DuelText[34][lang]);
		                }
		            }
		            return 1;
		        }
		        case 2:
		        {
		            switch(DuelCheck[playerid][4])
		            {//[3]  гонка [4]  карта [7]  класс авто [8]  collision [9]  ускороение [10] закись азота [11] восстановление [16] Модель машины [20] круг
		                case 1:
		                {
		                    DuelCheck[playerid][3] = 2;// 	гонка
				            DuelCheck[playerid][4] = 2;// 	карта
			                DuelCheck[playerid][7] = 3;// 	класс авто         NO
			                DuelCheck[playerid][8] = 0;//	collision
			                DuelCheck[playerid][9] = 1;//	ускороение
			                DuelCheck[playerid][10] = 0;//	закись азота       NO
			                DuelCheck[playerid][11] = 0;//  восстановление
			                DuelCheck[playerid][16] = 1;
			                DuelCheck[playerid][20] = 1;//  круг назад
							TextDrawSetStringZS(DuelInfo[playerid][4], DuelInfo[playerid][36], DuelText[2][lang], DuelText[32][lang]);
							TextDrawSetStringZS(DuelInfo[playerid][7], DuelInfo[playerid][39], DuelText[8][lang], DuelText[21][lang]);
			                TextDrawSetStringZS(DuelInfo[playerid][8], DuelInfo[playerid][40], DuelText[9][lang], DuelText[15][lang]);
			                TextDrawSetStringZS(DuelInfo[playerid][9], DuelInfo[playerid][41], DuelText[13][lang], DuelText[15][lang]);
                            TextDrawSetStringZS(DuelInfo[playerid][10], DuelInfo[playerid][42], "_", "_");
			                TextDrawSetStringZS(DuelInfo[playerid][11], DuelInfo[playerid][43], "_", "_");
			                TextDrawSetStringZS(DuelInfo[playerid][12], DuelInfo[playerid][44], "_", "_");
		                }
		                case 2:
		                {
		                    DuelCheck[playerid][3] = 2;
				            DuelCheck[playerid][4] = 3;
			                DuelCheck[playerid][7] = 1;
			                DuelCheck[playerid][8] = 0;
			                DuelCheck[playerid][9] = 0;//NO
			                DuelCheck[playerid][10] = 1;
			                DuelCheck[playerid][11] = 0;
			                DuelCheck[playerid][16] = 1;
			                DuelCheck[playerid][20] = 2;//  круг
			                TextDrawSetStringZS(DuelInfo[playerid][4], DuelInfo[playerid][36], DuelText[2][lang], DuelText[33][lang]);
							TextDrawSetStringZS(DuelInfo[playerid][7], DuelInfo[playerid][39], DuelText[8][lang], DuelText[19][lang]);
						    TextDrawSetStringZS(DuelInfo[playerid][8], DuelInfo[playerid][40], DuelText[9][lang], DuelText[15][lang]);
						    TextDrawSetStringZS(DuelInfo[playerid][9], DuelInfo[playerid][41], DuelText[11][lang], "~y~2x");
						    TextDrawSetStringZS(DuelInfo[playerid][10], DuelInfo[playerid][42], DuelText[12][lang], DuelText[16][lang]);
						    TextDrawSetStringZS(DuelInfo[playerid][11], DuelInfo[playerid][43], DuelText[14][lang], "~y~2");
						    TextDrawSetStringZS(DuelInfo[playerid][12], DuelInfo[playerid][44], "_", "_");
		                }
		                case 3:
		                {
							DuelCheck[playerid][3] = 2;// гонка 
				            DuelCheck[playerid][4] = 1;// карта
			                DuelCheck[playerid][7] = 1;
			                DuelCheck[playerid][8] = 0;
			                DuelCheck[playerid][9] = 1;
			                DuelCheck[playerid][10] = 1;
			                DuelCheck[playerid][11] = 0;
			                DuelCheck[playerid][16] = 1;
			                DuelCheck[playerid][20] = 1;//  круг назад
							TextDrawSetStringZS(DuelInfo[playerid][4], DuelInfo[playerid][36], DuelText[2][lang], DuelText[31][lang]);
							TextDrawSetStringZS(DuelInfo[playerid][7], DuelInfo[playerid][39], DuelText[8][lang], DuelText[19][lang]);
			                TextDrawSetStringZS(DuelInfo[playerid][8], DuelInfo[playerid][40], DuelText[9][lang], DuelText[15][lang]);
			                TextDrawSetStringZS(DuelInfo[playerid][9], DuelInfo[playerid][41], DuelText[10][lang], "~y~5x");
			                TextDrawSetStringZS(DuelInfo[playerid][10], DuelInfo[playerid][42], DuelText[11][lang], "~y~2x");
                            TextDrawSetStringZS(DuelInfo[playerid][11], DuelInfo[playerid][43], DuelText[12][lang], DuelText[16][lang]);
			                TextDrawSetStringZS(DuelInfo[playerid][12], DuelInfo[playerid][44], DuelText[13][lang], DuelText[15][lang]);
		                }
				 	}
		            SetPlayerPosZS(playerid, DuelCameraRace[DuelCheck[playerid][4] - 1][0], DuelCameraRace[DuelCheck[playerid][4] - 1][1], DuelCameraRace[DuelCheck[playerid][4] - 1][2] + 8.0, 0.0, floatround(DuelCameraRace[DuelCheck[playerid][4] - 1][6]), DuelCheck[playerid][25]);
					SetPlayerCameraPos(playerid, DuelCameraRace[DuelCheck[playerid][4] - 1][0], DuelCameraRace[DuelCheck[playerid][4] - 1][1], DuelCameraRace[DuelCheck[playerid][4] - 1][2]);
					SetPlayerCameraLookAt(playerid, DuelCameraRace[DuelCheck[playerid][4] - 1][3], DuelCameraRace[DuelCheck[playerid][4] - 1][4], DuelCameraRace[DuelCheck[playerid][4] - 1][5]);
					new string[38];
		        	mysql_format(MysqlConnectID, string, sizeof(string), "SELECT * FROM race WHERE `id`='%d'", DuelCheck[playerid][4]);
					return mysql_tquery(MysqlConnectID, string, "OnPlayerForAll", "iii", playerid, 4, 0);
		        }
		    }
		    return 1;
		}
		case 3:
		{
		    if(number == 1)
  			{
		        switch(DuelCheck[playerid][5])
	        	{
					case 0:
					{
						DuelCheck[playerid][5] = 7;
						TextDrawSetString(DuelInfo[playerid][37], DuelText[37][lang]);
					}
		            case 7:
					{
						DuelCheck[playerid][5] = 9;
						TextDrawSetString(DuelInfo[playerid][37], DuelText[38][lang]);
					}
		            case 9:
					{
						DuelCheck[playerid][5] = 12;
						TextDrawSetString(DuelInfo[playerid][37], DuelText[39][lang]);
					}
					case 12:
					{
						DuelCheck[playerid][5] = 18;
						TextDrawSetString(DuelInfo[playerid][37], DuelText[40][lang]);
					}
					case 18:
					{
					    DuelCheck[playerid][5] = 20;
						TextDrawSetString(DuelInfo[playerid][37], DuelText[41][lang]);
					}
					case 20:
					{
						DuelCheck[playerid][5] = 0;
						TextDrawSetString(DuelInfo[playerid][37],DuelText[42][lang]);
					}
	   			}
	   			return SetPlayerTime(playerid, DuelCheck[playerid][5], 0);
			}
	 		switch(DuelCheck[playerid][6])
			{
				case 42:
				{
					DuelCheck[playerid][6] = 13;
					TextDrawSetString(DuelInfo[playerid][38], DuelText[43][lang]);
				}
				case 13:
				{
					DuelCheck[playerid][6] = 17;
					TextDrawSetString(DuelInfo[playerid][38], DuelText[44][lang]);
				}
				case 17:
				{
					DuelCheck[playerid][6] = 18;
					TextDrawSetString(DuelInfo[playerid][38], DuelText[45][lang]);
				}
				case 18:
				{
					DuelCheck[playerid][6] = 4;
					TextDrawSetString(DuelInfo[playerid][38], DuelText[46][lang]);
				}
				case 4:
				{
					DuelCheck[playerid][6] = 7;
					TextDrawSetString(DuelInfo[playerid][38], DuelText[47][lang]);
				}
				case 7:
				{
					DuelCheck[playerid][6] = 16;
					TextDrawSetString(DuelInfo[playerid][38], DuelText[48][lang]);
				}
				case 16:
				{
					DuelCheck[playerid][6] = 9;
					TextDrawSetString(DuelInfo[playerid][38], DuelText[49][lang]);
				}
				case 9:
				{
					DuelCheck[playerid][6] = 32;
					TextDrawSetString(DuelInfo[playerid][38], DuelText[50][lang]);
				}
				case 32:
				{
					DuelCheck[playerid][6] = 19;
					TextDrawSetString(DuelInfo[playerid][38], DuelText[51][lang]);
				}
				case 19:
				{
					DuelCheck[playerid][6] = 42;
					TextDrawSetString(DuelInfo[playerid][38], DuelText[52][lang]);
				}
			}
			return SetPlayerWeather(playerid, DuelCheck[playerid][6]);
		}
		case 4:
		{
		    switch(number)
		    {
		        case 1:
		        {
		            SetPVarInt(playerid, "DuellCheck[4]", 1);
	            	ShowModelSelectionMenu(playerid, 3);
	            	TextDrawHideForPlayer(playerid, DuelInfo[playerid][0]);
					TextDrawHideForPlayer(playerid, DuelInfo[playerid][1]);
					TextDrawHideForPlayer(playerid, DuelInfo[playerid][2]);
					TextDrawHideForPlayer(playerid, DuelInfo[playerid][3]);
					TextDrawHideForPlayer(playerid, DuelInfo[playerid][4]);
					TextDrawHideForPlayer(playerid, DuelInfo[playerid][5]);
					TextDrawHideForPlayer(playerid, DuelInfo[playerid][6]);
					TextDrawHideForPlayer(playerid, DuelInfo[playerid][7]);
					TextDrawHideForPlayer(playerid, DuelInfo[playerid][8]);
					TextDrawHideForPlayer(playerid, DuelInfo[playerid][9]);
					TextDrawHideForPlayer(playerid, DuelInfo[playerid][10]);
					TextDrawHideForPlayer(playerid, DuelInfo[playerid][11]);
					TextDrawHideForPlayer(playerid, DuelInfo[playerid][12]);
					TextDrawHideForPlayer(playerid, DuelInfo[playerid][13]);
					TextDrawHideForPlayer(playerid, DuelInfo[playerid][14]);
					TextDrawHideForPlayer(playerid, DuelInfo[playerid][15]);
					TextDrawHideForPlayer(playerid, DuelInfo[playerid][35]);
					TextDrawHideForPlayer(playerid, DuelInfo[playerid][36]);
					TextDrawHideForPlayer(playerid, DuelInfo[playerid][37]);
					TextDrawHideForPlayer(playerid, DuelInfo[playerid][38]);
					TextDrawHideForPlayer(playerid, DuelInfo[playerid][39]);
					TextDrawHideForPlayer(playerid, DuelInfo[playerid][40]);
					TextDrawHideForPlayer(playerid, DuelInfo[playerid][41]);
					TextDrawHideForPlayer(playerid, DuelInfo[playerid][42]);
					TextDrawHideForPlayer(playerid, DuelInfo[playerid][43]);
	    			return TextDrawHideForPlayer(playerid, DuelInfo[playerid][44]);
			 	}
			 	case 2:
			 	{
			 	    if(DuelCheck[playerid][4] == 2 || DuelCheck[playerid][4] == 3) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			 	    DuelCheck[playerid][7] += 1;
			 	    DuelCheck[playerid][16] = 1;
			 	    if(DuelCheck[playerid][7] >= 4) DuelCheck[playerid][7] = 1;
			 	    return TextDrawSetString(DuelInfo[playerid][39], DuelText[18+DuelCheck[playerid][7]][lang]);
			 	}
	  		}
		}
		case 5:
  		{
		    switch(number)
		    {
		        case 1:
		        {
		            switch(DuelCheck[playerid][8])
				 	{
				 		case 100: DuelCheck[playerid][8] = 50;
				 		case 50: DuelCheck[playerid][8] = 20;
				 		case 20: DuelCheck[playerid][8] = 100;
	            	}
					new string[8];
					format(string, sizeof(string), "~y~%d%", DuelCheck[playerid][8]);
					return TextDrawSetString(DuelInfo[playerid][40], string);
		        }
		        case 2:
		        {
		            if(DuelCheck[playerid][8] == 0)
					{
						DuelCheck[playerid][8] = 1;
						TextDrawSetString(DuelInfo[playerid][40], DuelText[16][lang]);
					}
		            else
					{
						DuelCheck[playerid][8] = 0;
						TextDrawSetString(DuelInfo[playerid][40], DuelText[15][lang]);
					}
					return 1;
		        }
		    }
		}
		case 6:
		{
			if(number != 1) return 1; //Дуэль оружейный
		    switch(DuelCheck[playerid][9])
			{
				case 100: DuelCheck[playerid][9] = 50;
				case 50: DuelCheck[playerid][9] = 20;
				case 20:
				{
					DuelCheck[playerid][9] = 0;
					return TextDrawSetString(DuelInfo[playerid][41], DuelText[15][lang]);
				}
				case 0: DuelCheck[playerid][9] = 100;
			}
			new string[8];
			format(string, sizeof(string), "~y~%d%", DuelCheck[playerid][9]);
			return TextDrawSetString(DuelInfo[playerid][41], string);
		}
		case 7:
		{
			switch(number)//Гоночный Дуэль
		    {
		        case 1://Ускороени
		        {
		            switch(DuelCheck[playerid][9])//41
		            {
		                case 0:
		                {
		                    DuelCheck[playerid][9] = 1;
		                    TextDrawSetString(DuelInfo[playerid][roomtd], "~y~5x");
		                }
		                case 1:
		                {
		                    DuelCheck[playerid][9] = 2;
		                    TextDrawSetString(DuelInfo[playerid][roomtd], "~y~10x");
		                }
		                case 2:
		                {
		                    DuelCheck[playerid][9] = 0;
							TextDrawSetString(DuelInfo[playerid][roomtd], DuelText[15][lang]);
		                }
					}
					return 1;
		        }
		        case 2://Нитро
		        {
		    		switch(DuelCheck[playerid][10])//42
		    		{
		    		    case 0:
						{
							DuelCheck[playerid][10] = 1;
							TextDrawSetString(DuelInfo[playerid][roomtd], "~y~2x");
		 				}
						case 1:
						{
							DuelCheck[playerid][10] = 2;
							TextDrawSetString(DuelInfo[playerid][roomtd], "~y~5x");
		 				}
						case 2:
						{
							DuelCheck[playerid][10] = 3;
							TextDrawSetString(DuelInfo[playerid][roomtd], "~y~10x");
		 				}
						case 3:
						{
							DuelCheck[playerid][10] = 0;
							TextDrawSetString(DuelInfo[playerid][roomtd], DuelText[15][lang]);
		 				}
					}
					return 1;
				}
				case 3://Востановление
				{
				    switch(DuelCheck[playerid][11])//43
		            {
		            	case 0:
		            	{
		            	    DuelCheck[playerid][11] = 1;
		                	TextDrawSetString(DuelInfo[playerid][roomtd], DuelText[22][lang]);
		            	}
						case 1:
						{
							DuelCheck[playerid][11] = 2;
		                	TextDrawSetString(DuelInfo[playerid][roomtd], DuelText[23][lang]);
						}
						case 2:
						{
						    DuelCheck[playerid][11] = 0;
		                	TextDrawSetString(DuelInfo[playerid][roomtd], DuelText[16][lang]);
						}
				 	}
				 	return 1;
				}
				case 4://круги
				{
					if(DuelCheck[playerid][20] == 1)
		            {
		                DuelCheck[playerid][20] = 2;
		                TextDrawSetString(DuelInfo[playerid][roomtd], DuelText[16][lang]);
		            }
		            else
		            {
		                DuelCheck[playerid][20] = 1;
		                TextDrawSetString(DuelInfo[playerid][roomtd], DuelText[15][lang]);
		            }
		            return 1;
				}
				case 5:
				{
				    DuelCheck[playerid][20] += 2;
				    if(DuelCheck[playerid][20] >= 22) DuelCheck[playerid][20] = 2;
				    new string[6];
				    format(string, sizeof(string), "~y~%d", DuelCheck[playerid][20]);
				    TextDrawSetString(DuelInfo[playerid][roomtd], string);
				}
	 		}
			return 1;
		}
    }
	return 1;//5545 SetDuelMenu 55ra
}

public OnPlayerRequestClass(playerid, classid)
{
	if(ProtectionFlooding[playerid][4] <= 13)
	{
	    ProtectionFlooding[playerid][4] += 1;
	    if(ProtectionFlooding[playerid][4] >= 8) GameTextForPlayerZS(playerid, "~n~~r~Warning~n~flood", "~r~®e Ѓћyљњ¦e", 2000, 4, 1085);
	}
	else if(PlayerCheatCheck[playerid] == 0) IsProtectionFlooding(playerid, "RequestClass", "2.4");
	if(DialogueCheck[playerid][0] == 0 && PlayerLogged[playerid] == 0)
	{
		new string[73+24];
		mysql_format(MysqlConnectID, string, sizeof(string), "SELECT password,password2,salt,salt2 FROM profile WHERE name='%s' LIMIT 1", PlayerName[playerid]);
		mysql_tquery(MysqlConnectID, string, "OnPlayerLogin", "ii", playerid, 1);
	}
    return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	if(ProtectionFlooding[playerid][4] >= 13 && PlayerCheatCheck[playerid] == 0) IsProtectionFlooding(playerid, "RequestSpawn", "2.4");
	else
	{
	    ProtectionFlooding[playerid][4] += 1;
	    if(ProtectionFlooding[playerid][4] >= 8) GameTextForPlayerZS(playerid, "~n~~r~Warning~n~flood", "~r~®e Ѓћyљњ¦e", 2000, 4, 1085);
	}
    if(PlayerLogged[playerid] == 0 || KillsCheck[playerid][0] != 0) return 0;
    return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(Spawned[playerid] == false)
	{
		if(PlayerCheatCheck[playerid] == 0) PlayerCheat(playerid, "Fake-Kill Код: #17", "Использование Чит Программ [{FF0000}Код: #17{CD853F}]", 0, 2);
		return 1;
 	}
    ClearAnimations(playerid);
    Spawned[playerid] = false;
 	Armour[playerid][4] = 0;
 	Health[playerid] = 0;
 	RegistrationHealth[playerid][0] = 0;
	TogglePlayerControllable(playerid, 0);
	SetCameraBehindPlayer(playerid);
	if(SpawnCheck[playerid][3] >= 1) SpawnCheck[playerid][3] = 0;
	new Float:Pos[9];
	GetPlayerCameraPos(playerid, Pos[0], Pos[1], Pos[2]);
	GetPlayerCameraFrontVector(playerid, Pos[3], Pos[4], Pos[5]);
	Pos[6] = Pos[0] + (Pos[3] * 5.0);
	Pos[7] = Pos[1] + (Pos[4] * 5.0);
	Pos[8] = Pos[2] + (Pos[5] * 5.0);
    InterpolateCameraPos(playerid, Pos[0], Pos[1], Pos[2], Pos[0], Pos[1], Pos[2] - 1.0, 3000);
	InterpolateCameraLookAt(playerid, Pos[6], Pos[7], Pos[8], Pos[6], Pos[7], Pos[8] - 1.0, 3000);
    ApplyAnimation(playerid, "PED", "KO_SHOT_FRONT", 4.1, 0, 1, 1, 1, 1);
	/*if(AutoTpCheck[playerid][1] < gettime())
	{
		switch(KillsCheck[playerid][10])
		{
			case 3..6: ApplyAnimation(playerid, "PED", "KO_SHOT_STOM", 4.1, 0, 1, 1, 1, 1);
			case 7..8:
			{
		 		switch(random(3))
 				{
					case 0: ApplyAnimation(playerid, "PED", "KO_SKID_FRONT", 4.1, 0, 1, 1, 1, 1);
					case 1: ApplyAnimation(playerid, "PED", "KD_RIGHT", 4.1, 0, 1, 1, 1, 1);
					case 2: ApplyAnimation(playerid, "PED", "KD_LEFT", 4.1, 0, 1, 1, 1, 1);
				}
			}
 			case 9: ApplyAnimation(playerid, "PED", "KO_SHOT_FACE", 4.1, 0, 1, 1, 1, 1);
			case 37: ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.1, 0, 1, 1, 1, 1);
 			case 51:
 			{
 				switch(random(2))
 				{
					case 0: ApplyAnimation(playerid, "PED", "KO_SKID_FRONT", 4.1, 0, 1, 1, 1, 1);
					case 1: ApplyAnimation(playerid, "PED", "KO_SKID_BACK", 4.1, 0, 1, 1, 1, 1);
 				}
			}
			case 60: ApplyAnimation(playerid, "HEIST9", "CAS_G2_GASKO", 4.1, 0, 1, 1, 1, 1);
			default: ApplyAnimation(playerid, "PED", "KO_SKID_BACK", 4.1, 0, 1, 1, 1, 1);//KO_SHOT_STOM
		}
	}*/
	if(PlayerInfo[playerid][pFreeMode] == 0)
	{
		switch(ChoiceTeamCheck[playerid][6])
		{
 			case 1:
 			{
 				if(ChoiceTeamCheck[playerid][2] == 1) Arena[4] += 1;
				else Arena[3] += 1;
    		}
    		case 2:
			{
 				if(ChoiceTeamCheck[playerid][2] == 1) Arena[11] += 1;
				else Arena[10] += 1;
			}
			case 3:
			{
 				if(ChoiceTeamCheck[playerid][2] == 1) Arena[18] += 1;
				else Arena[17] += 1;
			}
		}
 	}
 	new string[2][100];
	if(killerid == INVALID_PLAYER_ID)//5528 //5535
    {
    	if(KillsCheck[playerid][0] == 0) KillsCheck[playerid][0] = 24; //24
		if(PlayerInfo[playerid][pPassive] == 0)
        {
       		PlayerInfo[playerid][pDeaths] += 1;
       		if(PlayerInfo[playerid][pFreeMode] == 0 && ChoiceTeamCheck[playerid][2] >= 1 && ChoiceTeamCheck[playerid][2] <= 2)
       		{
       		    WeaponsSlotSpawn[playerid][8] += 1;
       		    format(string[1], 22, "%d,%d", WeaponsSlotSpawn[playerid][7], WeaponsSlotSpawn[playerid][8]);
       		    mysql_format(MysqlConnectID, string[0], 100, "UPDATE profile SET score%d='%s',deaths=%d WHERE id=%d", ChoiceTeamCheck[playerid][2], string[1], PlayerInfo[playerid][pDeaths], PlayerInfo[playerid][pRoomAccount]);
       		}
       		else mysql_format(MysqlConnectID, string[0], 63, "UPDATE profile SET deaths=%d WHERE id=%d", PlayerInfo[playerid][pDeaths], PlayerInfo[playerid][pRoomAccount]);
			mysql_tquery(MysqlConnectID, string[0]);
 			if(PlayerInfo[playerid][pMoney] >= 100) MoneyInfoCall(playerid, 100, 1);
  		}
    }
	else
	{
		if(DuelCheck[playerid][12] == 0) KillsCheck[playerid][0] = 8;
		else KillsCheck[playerid][0] = 24;
		if(DuelCheck[killerid][12] != 0 && DuelCheck[playerid][12] != 0 && DuelCheck[killerid][3] == 1 && DuelCheck[playerid][3] == 1)
		{
 		    if(PlayerInfo[killerid][pFreeMode] == 0) SetPlayerTeam(killerid, ChoiceTeamCheck[killerid][2] - 1);
 		    if(PlayerInfo[playerid][pFreeMode] == 0) SetPlayerTeam(playerid, ChoiceTeamCheck[playerid][2] - 1);
 		    for(new x; x < 29; x ++)
 		    {
 		        if(x < 1)
 		        {
 		            DuelCheck[playerid][0] = MAX_PLAYERS;
 		            DuelCheck[killerid][0] = MAX_PLAYERS;
 		        }
 		        else
	 			{
			 		DuelCheck[playerid][x] = 0;
 		        	DuelCheck[killerid][x] = 0;
	  			}
 		    }
			SpawnPlayerZS(killerid);
			TextDrawHideForPlayer(killerid, ArenaInfo[killerid][0]);
			TextDrawHideForPlayer(killerid, ArenaInfo[killerid][10]);
			TextDrawHideForPlayer(playerid, ArenaInfo[playerid][0]);
			TextDrawHideForPlayer(playerid, ArenaInfo[playerid][10]);
		    PlayerInfo[killerid][pDuel][1] += 1;// выйграл
			PlayerInfo[playerid][pDuel][2] += 1;// проиграл
		    UpdateMysql(killerid, 3);
		    UpdateMysql(playerid, 3);
		    AchievementsInfo(12, killerid);
			format(string[0], 73, "Вы проиграли в дуэли игроку {4FDF24}%s{FFFFFF}.", PlayerName[killerid]);
			SendClientMessage(playerid, 0xFFFFFFFF, string[0]);
			format(string[0], 75, "Вы выиграли дуэль над игроком {4FDF24}%s{FFFFFF}.", PlayerName[playerid]);
			return SendClientMessage(killerid, 0xFFFFFFFF, string[0]);
  		}
    	new lang = PlayerInfo[playerid][pRussifier][1];
        TextDrawSetString(InfoKills[playerid][4], PlayerName[killerid]);
        TextDrawSetString(InfoKills[playerid][5], TextDrawInfo[90][lang]);
        
        format(string[0], 4, "%d", Health[killerid]);
        TextDrawSetString(InfoKills[playerid][6], string[0]);
        if(Armour[killerid][0] != 0)
        {
        	TextDrawSetString(InfoKills[playerid][7], TextDrawInfo[91][lang]);
        	format(string[0], 4, "%d", Armour[killerid][0]);
        	TextDrawSetString(InfoKills[playerid][8], string[0]);
		}
		format(string[0], 90, "%s~n~%s~n~", TextDrawInfo[92][lang], WeaponsName[reason]);
		TextDrawSetString(InfoKills[playerid][9], string[0]);
  		format(string[0], 11, "%d vs %d", 0, 0);
		TextDrawSetString(InfoKills[playerid][10], string[0]);
		
  		if(PlayerInfo[killerid][pInteraction][1] == 1) AchievementsInfo(8, killerid);
		PlayerInfo[killerid][pKills] += 1;
  		if(PlayerInfo[killerid][pFreeMode] == 0) WeaponsSlotSpawn[killerid][7] += 1;
        KillInfoPlayer(killerid, playerid, reason, ScoreKill[0]);
		//PlayerPlaySound(killerid, 1132, 0.0, 0.0, 0.0);
    	if(PlayerInfo[killerid][pVip] == 0)
	    {
			if(PlayerInfo[killerid][pLevel][0] >= 5) MoneyInfoCall(killerid, 60, 0);
			else MoneyInfoCall(killerid, 40, 0);
		}
		else MoneyInfoCall(killerid, 120, 0);
		if(reason == 0) AchievementsInfo(16, killerid);
		if(PlayerInfo[killerid][pAchievements][15] == 0 && GetPVarInt(killerid, "Achievements[15]") >= 49)
		{
		    AchievementsInfo(15, killerid);
		    DeletePVar(killerid, "Achievements[15]");
		    DeletePVar(killerid, "AchievementsCH[15]");
  		}
		if(PlayerInfo[killerid][pKills] == 100) AchievementsInfo(9, killerid);
		PlayerInfo[playerid][pDeaths] += 1;
		mysql_format(MysqlConnectID, string[0], 63, "UPDATE profile SET deaths=%d WHERE id=%d", PlayerInfo[playerid][pDeaths], PlayerInfo[playerid][pRoomAccount]);
		mysql_tquery(MysqlConnectID, string[0]);
  		if(PlayerInfo[playerid][pMoney] >= 100) MoneyInfoCall(playerid, 100, 1);
  		if(PlayerInfo[playerid][pFreeMode] == 0)
		{
  			TextDrawHideForPlayer(playerid, ArenaInfo[playerid][0]);
			TextDrawHideForPlayer(playerid, ArenaInfo[playerid][1]);
			TextDrawHideForPlayer(playerid, ArenaInfo[playerid][2]);
			TextDrawHideForPlayer(playerid, ArenaInfo[playerid][10]);
 		    TextDrawHideForPlayer(playerid, ArenaInfo[playerid][11]);
			TextDrawHideForPlayer(playerid, MenuProcurementIcon[playerid][0]);
			TextDrawHideForPlayer(playerid, MenuProcurementIcon[playerid][1]);
		}
		if(OrderKills[playerid][0] >= 1)
		{
  			new str[140];
  			MoneyInfoCall(killerid, OrderKills[playerid][0], 0);
			format(str, sizeof(str), "Заказной игрок {4FDF24}%s {FFFFFF}был убит {4FDF24}%s {FFFFFF}и получил {4FDF24}$%s", PlayerName[playerid], PlayerName[killerid], AddCommasToInt(OrderKills[playerid][0]));
			ABroadCast(0xFFFFFFFF, str, 1, 0);
  			OrderKills[playerid][0] = 0;
  			OrderKills[playerid][1] = 0;
		}
		if(PlayerInfo[killerid][pLevel][1] >= LevelScore[PlayerInfo[killerid][pLevel][0]][0] && PlayerInfo[killerid][pLevel][0] < MAX_LEVEL-1)//5502
  		{
  		    NewLevelCheck[killerid][1] = 4;
  		    PlayerInfo[killerid][pLevel][0] += 1;
  		    lang = PlayerInfo[killerid][pRussifier][1];
  		    SetPlayerScore(killerid, PlayerInfo[killerid][pLevel][0]);
  		    TextDrawLetterSize(ChangeMapp[killerid][5], 0.5, 4.7);
  		    TextDrawShowForPlayer(killerid, ChangeMapp[killerid][5]);
		    TextDrawShowForPlayer(killerid, ChangeMapp[killerid][6]);
		    TextDrawShowForPlayer(killerid, NewLelevT[killerid][0]);
		    format(string[0], 22, TextDrawInfo[104][lang], PlayerInfo[killerid][pLevel][0]);
		    TextDrawSetString(ChangeMapp[killerid][6], string[0]);
		    format(string[0], 25, "%d / %d XP", LevelScore[PlayerInfo[killerid][pLevel][0]][0], LevelScore[PlayerInfo[killerid][pLevel][0]-1][0]);
		    TextDrawSetString(NewLelevT[killerid][0], string[0]);
		    mysql_format(MysqlConnectID, string[0], 85, "UPDATE profile SET level0=%d,kills=%d WHERE id=%d", PlayerInfo[killerid][pLevel][0], PlayerInfo[killerid][pKills], PlayerInfo[killerid][pRoomAccount]);
  		}
  		else mysql_format(MysqlConnectID, string[0], 62, "UPDATE profile SET kills=%d WHERE id=%d", PlayerInfo[killerid][pKills], PlayerInfo[killerid][pRoomAccount]);
		mysql_tquery(MysqlConnectID, string[0]);
		SendDeathMessage(killerid, playerid, reason);
	}
	if(InteractionCheck[playerid][0] == 2)
    {
  		PlayerInfo[playerid][pInteraction][2] += 1;
   	    InteractionCheck[playerid][0] = 0;
        mysql_format(MysqlConnectID, string[0], 65, "UPDATE profile SET interaction[2]=%d WHERE id=%d", PlayerInfo[playerid][pInteraction][2], PlayerInfo[playerid][pRoomAccount]);
        mysql_tquery(MysqlConnectID, string[0]);
	}
	if(ChoiceItemsCheck[playerid][0] == 1) SetDialogResponse(playerid, 0, 1);
	if(SelectionCheck[playerid][0] == 1) ShowModelSelectionMenu(playerid, 255);
	if(PlayerInfo[playerid][pInfoText][3] == 0) TextDrawHideForPlayer(playerid, HealthPure[playerid]);
    return 1;
}

stock KillInfoPlayer(playerid, killerid, weaponid, exp, exp1 = 0)
{
	new check = PlayerInfo[playerid][pInfoText][9];
	if(weaponid < 0 || weaponid >= sizeof(WeaponsName)) weaponid = 20;
	if(check == 0)
	{
		for(new line; line < 4; line ++)
		{
			if(line < 3)
		 	{
		 	    if(killerid != -1)
			 	{
			 		strmid(KillSlot[playerid][line], KillSlot[playerid][line + 1], 0, sizeof(KillSlot));
			 		TextDrawSetString(KillInfo[playerid][line], KillSlot[playerid][line]);
			 		strmid(KillSlot[playerid][line + 4], KillSlot[playerid][line + 5], 0, sizeof(KillSlot));
			 		TextDrawSetString(KillInfo[playerid][line + 4], KillSlot[playerid][line + 4]);
		 		}
		 		strmid(KillSlot[playerid][line + 8], KillSlot[playerid][line + 9], 0, sizeof(KillSlot));
		 		TextDrawSetString(KillInfo[playerid][line + 8], KillSlot[playerid][line + 8]);
		 	}
		}
	}
	new string[126], str[22], slot[2] = {11, 0}, lang = PlayerInfo[playerid][pRussifier][1];
	if(killerid == -1 && ChoiceTeamCheck[playerid][2] >= 1 && ChoiceTeamCheck[playerid][2] <= 2)
	{
	    WeaponsSlotSpawn[playerid][9] += exp1;
	    PlayerInfo[playerid][pLevel][1] += exp1;
		mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET scores%d=%d,level1=%d WHERE id=%d", ChoiceTeamCheck[playerid][2], WeaponsSlotSpawn[playerid][9], PlayerInfo[playerid][pLevel][1], PlayerInfo[playerid][pRoomAccount]);
		mysql_tquery(MysqlConnectID, string);
	    if(check == 1) return 1;
	    format(KillSlot[playerid][11], sizeof(KillSlot), TextDrawInfo[exp][lang], exp1);
 		TextDrawSetString(KillInfo[playerid][11], KillSlot[playerid][11]);
 		for(new x = 8; x < 12; x ++) TextDrawShowForPlayer(playerid, KillInfo[playerid][x]);
 		return SetPVarInt(playerid, "KillInfoTime", gettime() + 3);
	}
	if(check == 0)
	{
		if(weaponid == 49 && IsPlayerInAnyVehicle(playerid)) format(KillSlot[playerid][3], sizeof(KillSlot), "[%s]", VehicleName[GetVehicleModel(GetPlayerVehicleID(killerid)) - 400]);
	 	else format(KillSlot[playerid][3], sizeof(KillSlot), "[%s]", WeaponsName[weaponid]);
	 	TextDrawSetString(KillInfo[playerid][3], KillSlot[playerid][3]);
	 	format(KillSlot[playerid][7], sizeof(KillSlot), "~g~~h~~h~%s  ~w~~h~%d", PlayerName[killerid], exp);
	 	TextDrawSetString(KillInfo[playerid][7], KillSlot[playerid][7]);
 	}
 	slot[1] += exp;
  	if(KillsCheck[killerid][10] == 9)
  	{
  	    slot[0] = 10;
  	    slot[1] += ScoreKill[2];
  	    if(check == 0)
  	    {
			format(KillSlot[playerid][11], sizeof(KillSlot), TextDrawInfo[0][lang], ScoreKill[2]);
 			TextDrawSetString(KillInfo[playerid][11], KillSlot[playerid][11]);
   		}
  	}
   	if(GetPVarInt(playerid, "KillInfoTime") != 0 && GetPVarInt(playerid, "KillInfoTime") >= gettime() + 2)
   	{
   	    slot[1] += ScoreKill[1];
   	    if(check == 0)
   	    {
   			format(KillSlot[playerid][slot[0]], sizeof(KillSlot), TextDrawInfo[1][lang], ScoreKill[1]);
  			TextDrawSetString(KillInfo[playerid][slot[0]], KillSlot[playerid][slot[0]]);
   		}
   	}
 	if(weaponid == 0)
 	{
        slot[0] = 9;
        slot[1] += ScoreKill[6];
        if(check == 0)
        {
			format(KillSlot[playerid][slot[0]], sizeof(KillSlot), TextDrawInfo[37][lang], ScoreKill[6]);
  			TextDrawSetString(KillInfo[playerid][slot[0]], KillSlot[playerid][slot[0]]);
  		}
 	}
 	PlayerInfo[playerid][pLevel][1] += slot[1];
  	if(PlayerInfo[playerid][pFreeMode] == 0 && ChoiceTeamCheck[playerid][2] >= 1 && ChoiceTeamCheck[playerid][2] <= 2)
 	{
 		WeaponsSlotSpawn[playerid][9] += slot[1];
		format(str, sizeof(str), "%d,%d", WeaponsSlotSpawn[playerid][7], WeaponsSlotSpawn[playerid][8]);
		mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET score%d='%s',scores%d=%d,level1=%d WHERE id=%d", ChoiceTeamCheck[playerid][2], str, ChoiceTeamCheck[playerid][2], WeaponsSlotSpawn[playerid][9], PlayerInfo[playerid][pLevel][1], PlayerInfo[playerid][pRoomAccount]);
	}
	else mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET level1=%d WHERE id=%d", PlayerInfo[playerid][pLevel][1], PlayerInfo[playerid][pRoomAccount]);
	mysql_tquery(MysqlConnectID, string);
    if(check == 0) for(new x; x < 12; x ++) TextDrawShowForPlayer(playerid, KillInfo[playerid][x]);
    return SetPVarInt(playerid, "KillInfoTime", gettime() + 3);
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	foreach(new i: Player)
	{
	    if(pickupid == InteractionCheck[i][6] && ChoiceTeamCheck[playerid][2] != ChoiceTeamCheck[i][2] || pickupid == InteractionCheck[i][7] && ChoiceTeamCheck[playerid][2] != ChoiceTeamCheck[i][2] || pickupid == InteractionCheck[i][8] && ChoiceTeamCheck[playerid][2] != ChoiceTeamCheck[i][2])
	    {
	        if(pickupid == InteractionCheck[i][6])
	        {
	            DestroyPickup(InteractionCheck[i][6]);
	            DestroyDynamicObject(InteractionCheck[i][2]);
	    		Delete3DTextLabel(InteractionText[i][0]);
	    		InteractionCheck[i][6] = -1;
	        }
	        if(pickupid == InteractionCheck[i][7])
	        {
	            DestroyPickup(InteractionCheck[i][7]);
	            DestroyDynamicObject(InteractionCheck[i][3]);
	    		Delete3DTextLabel(InteractionText[i][1]);
	    		InteractionCheck[i][7] = -1;
	        }
	        if(pickupid == InteractionCheck[i][8])
	        {
	            DestroyPickup(InteractionCheck[i][8]);
	            DestroyDynamicObject(InteractionCheck[i][4]);
	    		Delete3DTextLabel(InteractionText[i][2]);
	    		InteractionCheck[i][8] = -1;
   			}
	    	PlayerInfo[i][pKills] += 1;
			KillInfoPlayer(i, playerid, 48, ScoreKill[0]);
			AchievementsInfo(10, i);
			if(Health[playerid] >= 0) HealthCheck[playerid][0] = 5;
	    	PlayerPlaySound(playerid, 21001, 0.0, 0.0, 0.0);
	    	new Float:Pos[3];
	    	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	    	CreateExplosion(Pos[0], Pos[1], Pos[2] - 0.8, 11, 0.1);
	    	return SetPlayerHealth(playerid, 0.0);
	    }
	}
    return 1;//5513
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
    if(DuelCheck[playerid][12] >= 1 && DuelCheck[playerid][13] == 4 && IsPlayerInRaceCheckpoint(playerid) && DuelCheck[playerid][3] == 2 && DuelCheck[playerid][23] == 0)
	{
        DuelCheck[playerid][19] += 1;
        GetVehicleZAngle(DuelCheck[playerid][15], PossSave[playerid][3]);
        GetVehiclePos(DuelCheck[playerid][15], PossSave[playerid][0], PossSave[playerid][1], PossSave[playerid][2]);
        switch(DuelCheck[playerid][4])
    	{
        	case 1:
        	{
        	    if(DuelCheck[playerid][9] >= 1)
        	    {
	        	    switch(DuelCheck[playerid][19])
	        	    {
	        	        case 2:
					    {
	    					ObjectLoading[playerid][0] = CreateDynamicObject(3352, -365.10449, 1356.63135, 46.22000, 0.60000, 96.88000, 119.12000, DuelCheck[playerid][25], 0, playerid, 100.0);
	    					SetDynamicObjectMaterial(ObjectLoading[playerid][0], 0, 1631, "landjump", "jumptop1_128", -16711936);
							ObjectLoading[playerid][1] = CreateDynamicObject(3352, -446.48560, 1484.17578, 33.42250, 3.24000, 87.60000, 95.42000, DuelCheck[playerid][25], 0, playerid, 100.0);
	                        SetDynamicObjectMaterial(ObjectLoading[playerid][1], 0, 1631, "landjump", "jumptop1_128", -16711936);
					        DuelCheck[playerid][27] = CreateDynamicCircle(-365.300109, 1357.023925, 4.5, DuelCheck[playerid][25], 0, playerid);
					    }
						case 5:
						{
						    DestroyDynamicArea(DuelCheck[playerid][27]);
						    DuelCheck[playerid][27] = CreateDynamicCircle(-446.410949, 1483.866943, 4.5, DuelCheck[playerid][25], 0, playerid);
							SetDynamicObjectPos(ObjectLoading[playerid][0], -450.32510, 1608.20276, 34.72000);
	                        SetDynamicObjectRot(ObjectLoading[playerid][0], 5.44000, 91.02000, 73.00000);
		 				}
		 				case 6:
		 				{
		 				    DestroyDynamicArea(DuelCheck[playerid][27]);
						    DuelCheck[playerid][27] = CreateDynamicCircle(-450.358764, 1608.077514, 4.5, DuelCheck[playerid][25], 0, playerid);
		 				}
						case 7:
						{
						    DestroyDynamicArea(DuelCheck[playerid][27]);
						    DuelCheck[playerid][27] = CreateDynamicCircle(-433.703582, 1882.415161, 4.5, DuelCheck[playerid][25], 0, playerid);
						    SetDynamicObjectPos(ObjectLoading[playerid][1], -433.64709, 1882.15613, 60.07000);
	                        SetDynamicObjectRot(ObjectLoading[playerid][1], 0.68000, 82.60000, -90.00000);
						}
						case 8:
						{
						    SetDynamicObjectPos(ObjectLoading[playerid][0], -467.91501, 1827.68091, 77.65000);
	                        SetDynamicObjectRot(ObjectLoading[playerid][0], 0.00000, 84.64000, 93.00000);
						}
						case 9:
						{
						    DestroyDynamicArea(DuelCheck[playerid][27]);
						    DuelCheck[playerid][27] = CreateDynamicCircle(-467.876251, 1827.382568, 4.5, DuelCheck[playerid][25], 0, playerid);
						}
						case 13:
						{
						    DestroyDynamicArea(DuelCheck[playerid][27]);
						    DuelCheck[playerid][27] = CreateDynamicCircle(-879.599060, 1953.641235, 4.5, DuelCheck[playerid][25], 0, playerid);
						    SetDynamicObjectPos(ObjectLoading[playerid][0], -879.52759, 1953.39099, 59.16000);
	                        SetDynamicObjectRot(ObjectLoading[playerid][0], -2.00000, 90.00000, -76.00000);
	                        SetDynamicObjectPos(ObjectLoading[playerid][1], -1060.95349, 1837.52905, 50.44000);
	                        SetDynamicObjectRot(ObjectLoading[playerid][1], 4.00000, 101.44000, 214.00000);
						}
						case 15:
						{
						    DestroyDynamicArea(DuelCheck[playerid][27]);
	                        DuelCheck[playerid][27] = CreateDynamicCircle(-1061.311157, 1839.011840, 4.5, DuelCheck[playerid][25], 0, playerid);
						    SetDynamicObjectPos(ObjectLoading[playerid][0], -1341.75989, 1857.68555, 36.70000);
	                        SetDynamicObjectRot(ObjectLoading[playerid][0], 0.00000, 90.48000, -172.96001);
						}
						case 17:
						{
						    DestroyDynamicArea(DuelCheck[playerid][27]);
						    DuelCheck[playerid][27] = CreateDynamicCircle(-1341.103759, 1857.764282, 4.5, DuelCheck[playerid][25], 0, playerid);
						    SetDynamicObjectPos(ObjectLoading[playerid][1], -1789.44275, 2063.09253, 7.60000);
	                        SetDynamicObjectRot(ObjectLoading[playerid][1], 0.00000, 90.00000, 116.00000);
						}
						case 20:
						{
						    DestroyDynamicArea(DuelCheck[playerid][27]);
						    DuelCheck[playerid][27] = CreateDynamicCircle(-1789.226806, 2062.616699, 4.5, DuelCheck[playerid][25], 0, playerid);
						    SetDynamicObjectPos(ObjectLoading[playerid][0], -1970.83411, 2475.16455, 39.06200);
	                        SetDynamicObjectRot(ObjectLoading[playerid][0], -0.10000, 84.84000, 36.00000);
						}
						case 23:
						{
						    DestroyDynamicArea(DuelCheck[playerid][27]);
						    DuelCheck[playerid][27] = CreateDynamicCircle(-1971.334472, 2474.743164, 4.5, DuelCheck[playerid][25], 0, playerid);
						    SetDynamicObjectPos(ObjectLoading[playerid][1], -1999.68921, 2620.85815, 49.63000);
	                        SetDynamicObjectRot(ObjectLoading[playerid][1], 1.02000, 88.32000, -198.66000);
						}
						case 26:
						{
						    DestroyDynamicArea(DuelCheck[playerid][27]);
						    DuelCheck[playerid][27] = CreateDynamicCircle(-1999.273071, 2620.740234, 5.0, DuelCheck[playerid][25], 0, playerid);
						    SetDynamicObjectPos(ObjectLoading[playerid][0], -2270.89478, 2676.80737, 54.38210);
	                        SetDynamicObjectRot(ObjectLoading[playerid][0], 0.00000, -90.00000, 2.00000);
						}
						case 28:
						{
						    DestroyDynamicArea(DuelCheck[playerid][27]);
						    DuelCheck[playerid][27] = CreateDynamicCircle(-2270.443603, 2676.871582, 5.0, DuelCheck[playerid][25], 0, playerid);
						    SetDynamicObjectPos(ObjectLoading[playerid][1], -2689.10400, 2147.22998, 54.37480);
	                        SetDynamicObjectRot(ObjectLoading[playerid][1], 0.00000, -90.00000, 91.00000);
						}
						case 30:
						{
						    DestroyDynamicArea(DuelCheck[playerid][27]);
						    DuelCheck[playerid][27] = CreateDynamicCircle(-2689.063232, 2147.577392, 5.0, DuelCheck[playerid][25], 0, playerid);
						}
						case 35:
						{
						    DestroyDynamicArea(DuelCheck[playerid][27]);
						    DuelCheck[playerid][27] = CreateDynamicCircle(-2700.217529, 1110.887207, 4.5, DuelCheck[playerid][25], 0, playerid);
						    SetDynamicObjectPos(ObjectLoading[playerid][0], -2699.94043, 1111.17322, 41.55150);
	                        SetDynamicObjectRot(ObjectLoading[playerid][0], 0.20000, 101.84000, 46.00000);
						}
						case 43:
						{
						    DestroyDynamicArea(DuelCheck[playerid][27]);
						    DuelCheck[playerid][27] = CreateDynamicCircle(-2673.985351, 2146.833251, 4.5, DuelCheck[playerid][25], 0, playerid);
						    SetDynamicObjectPos(ObjectLoading[playerid][1], -2673.99878, 2147.08716, 54.37480);
	                        SetDynamicObjectRot(ObjectLoading[playerid][1], 0.00000, -90.00000, -90.00000);
						}
						case 46:
						{
						    DestroyDynamicArea(DuelCheck[playerid][27]);
						    DuelCheck[playerid][27] = CreateDynamicCircle(-2265.430175, 2640.176269, 4.5, DuelCheck[playerid][25], 0, playerid);
						    SetDynamicObjectPos(ObjectLoading[playerid][0], -2265.30615, 2640.13940, 54.38210);
	                        SetDynamicObjectRot(ObjectLoading[playerid][0], 0.00000, -90.00000, 182.00000);
						}
						case 48:
						{
						    DestroyDynamicArea(DuelCheck[playerid][27]);
						    DuelCheck[playerid][27] = CreateDynamicCircle(-1904.811889, 2372.275390, 4.5, DuelCheck[playerid][25], 0, playerid);
						    SetDynamicObjectPos(ObjectLoading[playerid][1], -1904.74280, 2372.01929, 47.01280);
	                        SetDynamicObjectRot(ObjectLoading[playerid][1], 0.90000, 98.70000, -69.00000);
						}
						case 50:
						{
	                        DestroyDynamicArea(DuelCheck[playerid][27]);
						    DuelCheck[playerid][27] = CreateDynamicCircle(-1506.979614, 1844.073974, 4.5, DuelCheck[playerid][25], 0, playerid);
						    SetDynamicObjectPos(ObjectLoading[playerid][0], -1506.65906, 1844.10095, 29.48000);
	                        SetDynamicObjectRot(ObjectLoading[playerid][0], -0.02000, -86.58000, -177.00000);
						}
						case 55:
						{
	                        DestroyDynamicArea(DuelCheck[playerid][27]);
						    DuelCheck[playerid][27] = CreateDynamicCircle(-854.128112, 1859.392089, 5.0, DuelCheck[playerid][25], 0, playerid);
						    SetDynamicObjectPos(ObjectLoading[playerid][1], -854.22137, 1859.80237, 59.16000);
	                        SetDynamicObjectRot(ObjectLoading[playerid][1], 2.00000, 90.00000, 99.00000);
						}
						case 59:
						{
	                        DestroyDynamicArea(DuelCheck[playerid][27]);
						    DuelCheck[playerid][27] = CreateDynamicCircle(-480.055297, 1929.832519, 4.5, DuelCheck[playerid][25], 0, playerid);
						    SetDynamicObjectPos(ObjectLoading[playerid][0], -480.08871, 1929.67639, 85.31000);
	                        SetDynamicObjectRot(ObjectLoading[playerid][0], -2.00000, 91.00000, -88.00000);
	                        SetDynamicObjectPos(ObjectLoading[playerid][1], -423.86301, 1795.10229, 69.07000);
	                        SetDynamicObjectRot(ObjectLoading[playerid][1], 0.00000, 95.00000, 93.00000);
						}
						case 61:
						{
						    DestroyDynamicArea(DuelCheck[playerid][27]);
						    DuelCheck[playerid][27] = CreateDynamicCircle(-423.771301, 1795.037109, 4.5, DuelCheck[playerid][25], 0, playerid);
						}
						case 62:
						{
						    DestroyDynamicArea(DuelCheck[playerid][27]);
						    DuelCheck[playerid][27] = CreateDynamicCircle(-450.172851, 1608.728759, 4.5, DuelCheck[playerid][25], 0, playerid);
						    SetDynamicObjectPos(ObjectLoading[playerid][0], -450.32510, 1608.20276, 34.76000);
	                        SetDynamicObjectRot(ObjectLoading[playerid][0], -5.00000, 89.00000, -109.00000);
	                        SetDynamicObjectPos(ObjectLoading[playerid][1], -401.10101, 1427.83777, 36.98000);
	                        SetDynamicObjectRot(ObjectLoading[playerid][1], -1.00000, 84.00000, -64.00000);
		 				}
						case 65:
						{
						    DestroyDynamicArea(DuelCheck[playerid][27]);
						    DuelCheck[playerid][27] = CreateDynamicCircle(-401.195587, 1428.112304, 4.5, DuelCheck[playerid][25], 0, playerid);
						}
	        	    }
	  			}
				switch(DuelCheck[playerid][19])
				{
				    case 34:
				    {
						if(DuelCheck[playerid][20] == 1) SetPlayerRaceCheckpoint(playerid, 1, -2682.0933, 1272.0378, 54.7593, -2682.0933, 1272.0378, 54.7593, 23.0);
						else SetPlayerRaceCheckpoint(playerid, floatround(DuelRacePoint1[DuelCheck[playerid][19]][0]), DuelRacePoint1[DuelCheck[playerid][19]][1], DuelRacePoint1[DuelCheck[playerid][19]][2], DuelRacePoint1[DuelCheck[playerid][19]][3], DuelRacePoint1[DuelCheck[playerid][19] + 1][1], DuelRacePoint1[DuelCheck[playerid][19] + 1][2], DuelRacePoint1[DuelCheck[playerid][19] + 1][3], DuelRacePoint1[DuelCheck[playerid][19]][4]);
                        return 1;
					}
				    case 35:
				    {
				        if(DuelCheck[playerid][20] == 2)
				        {
				            DuelCheck[playerid][28] = 2;
				            NewLevelCheck[playerid][0] = gettime() + 2;
				            TextDrawLetterSize(ChangeMapp[playerid][5], 0.5, 3.5);
				            TextDrawShowForPlayer(playerid, ChangeMapp[playerid][5]);
							TextDrawShowForPlayer(playerid, ChangeMapp[playerid][6]);
							PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
                            if(PlayerInfo[playerid][pRussifier][1] == 0) TextDrawSetString(ChangeMapp[playerid][6], "lap 2/2");
							else TextDrawSetString(ChangeMapp[playerid][6], "kpy™ 2/2");
				            return SetPlayerRaceCheckpoint(playerid, floatround(DuelRacePoint1[DuelCheck[playerid][19]][0]), DuelRacePoint1[DuelCheck[playerid][19]][1], DuelRacePoint1[DuelCheck[playerid][19]][2], DuelRacePoint1[DuelCheck[playerid][19]][3], DuelRacePoint1[DuelCheck[playerid][19] + 1][1], DuelRacePoint1[DuelCheck[playerid][19] + 1][2], DuelRacePoint1[DuelCheck[playerid][19] + 1][3], DuelRacePoint1[DuelCheck[playerid][19]][4]);
						}
						else SetRaceFinish(playerid, 80.0);
                        return 1;
					}
				    case 69: return SetRaceFinish(playerid, 50.0);
  					default: return SetPlayerRaceCheckpoint(playerid, floatround(DuelRacePoint1[DuelCheck[playerid][19]][0]), DuelRacePoint1[DuelCheck[playerid][19]][1], DuelRacePoint1[DuelCheck[playerid][19]][2], DuelRacePoint1[DuelCheck[playerid][19]][3], DuelRacePoint1[DuelCheck[playerid][19] + 1][1], DuelRacePoint1[DuelCheck[playerid][19] + 1][2], DuelRacePoint1[DuelCheck[playerid][19] + 1][3], DuelRacePoint1[DuelCheck[playerid][19]][4]);
				}
				return 1;
 			}
 			case 2:
 			{
 			    switch(DuelCheck[playerid][19])
				{
				    case 1:
					{
						ObjectLoading[playerid][0] = CreateDynamicObject(3352, -2263.35620, -1936.52075, 255.50230,   -9.00000, 110.00000, 14.00000);
						SetDynamicObjectMaterial(ObjectLoading[playerid][0], 0, 1631, "landjump", "jumptop1_128", -65536);
						ObjectLoading[playerid][1] = CreateDynamicObject(3352, -2260.13452, -1935.96729, 254.33749,   -11.00000, 111.00000, 14.00000);
						SetDynamicObjectMaterial(ObjectLoading[playerid][1], 0, 1631, "landjump", "jumptop1_128", -65536);
						ObjectLoading[playerid][2] = CreateDynamicObject(3352, -2257.12061, -1935.48962, 253.21400,   -12.00000, 111.00000, 13.00000);
						SetDynamicObjectMaterial(ObjectLoading[playerid][2], 0, 1631, "landjump", "jumptop1_128", -65536);
						ObjectLoading[playerid][3] = CreateDynamicObject(3352, -2253.62549, -1934.99817, 251.55251,   -15.00000, 118.00000, 13.00000);
						SetDynamicObjectMaterial(ObjectLoading[playerid][3], 0, 1631, "landjump", "jumptop1_128", -65536);
						ObjectLoading[playerid][4] = CreateDynamicObject(3352, -2250.24414, -1934.50952, 249.69460,   -15.00000, 118.00000, 13.00000);
						SetDynamicObjectMaterial(ObjectLoading[playerid][4], 0, 1631, "landjump", "jumptop1_128", -65536);
						DuelCheck[playerid][27] = CreateDynamicCircle(-2257.208007, -1935.636840, 8.0, DuelCheck[playerid][25], 0, playerid);
 					}
					case 2: DestroyDynamicArea(DuelCheck[playerid][27]);
					case 4:
					{
					    DestroyDynamicObject(ObjectLoading[playerid][0]);
					    DestroyDynamicObject(ObjectLoading[playerid][1]);
					    DestroyDynamicObject(ObjectLoading[playerid][2]);
					    DestroyDynamicObject(ObjectLoading[playerid][3]);
					    DestroyDynamicObject(ObjectLoading[playerid][4]);
					}
				}
    			switch(DuelCheck[playerid][19])
				{
    				case 17:
					{
						if(DuelCheck[playerid][20] == 2) SetPlayerRaceCheckpoint(playerid, floatround(DuelRacePoint2[DuelCheck[playerid][19] + 5][0]), DuelRacePoint2[DuelCheck[playerid][19] + 5][1], DuelRacePoint2[DuelCheck[playerid][19] + 5][2], DuelRacePoint2[DuelCheck[playerid][19] + 5][3], DuelRacePoint2[DuelCheck[playerid][19] + 6][1], DuelRacePoint2[DuelCheck[playerid][19] + 6][2], DuelRacePoint2[DuelCheck[playerid][19] + 6][3], DuelRacePoint2[DuelCheck[playerid][19] + 5][4]);
						else SetRaceFinish(playerid, 40.0);
						return 1;
	 				}
    				case 19: return SetRaceFinish(playerid, 40.0);
    				default:
				    {
				    	if(DuelCheck[playerid][20] == 2 && DuelCheck[playerid][19] >= 13)
						{
						    DuelCheck[playerid][28] = 2;
							SetPlayerRaceCheckpoint(playerid, floatround(DuelRacePoint2[DuelCheck[playerid][19] + 5][0]), DuelRacePoint2[DuelCheck[playerid][19] + 5][1], DuelRacePoint2[DuelCheck[playerid][19] + 5][2], DuelRacePoint2[DuelCheck[playerid][19] + 5][3], DuelRacePoint2[DuelCheck[playerid][19] + 6][1], DuelRacePoint2[DuelCheck[playerid][19] + 6][2], DuelRacePoint2[DuelCheck[playerid][19] + 6][3], DuelRacePoint2[DuelCheck[playerid][19] + 5][4]);
						}
						else SetPlayerRaceCheckpoint(playerid, floatround(DuelRacePoint2[DuelCheck[playerid][19]][0]), DuelRacePoint2[DuelCheck[playerid][19]][1], DuelRacePoint2[DuelCheck[playerid][19]][2], DuelRacePoint2[DuelCheck[playerid][19]][3], DuelRacePoint2[DuelCheck[playerid][19] + 1][1], DuelRacePoint2[DuelCheck[playerid][19] + 1][2], DuelRacePoint2[DuelCheck[playerid][19] + 1][3], DuelRacePoint2[DuelCheck[playerid][19]][4]);
						return 1;
					}
				}
				return 1;
 			}
 			case 3:
 			{
 			    switch(DuelCheck[playerid][19])//55ra
				{
				    case 5:
				    {
				        DuelCheck[playerid][28] += 1;
				        if(DuelCheck[playerid][28] < DuelCheck[playerid][20] + 1)
				        {
				            new string[12];
				            DuelCheck[playerid][19] = 0;
				            NewLevelCheck[playerid][0] = gettime() + 2;
				            PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
				            TextDrawLetterSize(ChangeMapp[playerid][5], 0.5, 3.5);
				            TextDrawShowForPlayer(playerid, ChangeMapp[playerid][5]);
							TextDrawShowForPlayer(playerid, ChangeMapp[playerid][6]);
							if(PlayerInfo[playerid][pRussifier][1] == 0) format(string, sizeof(string), "lap %d/%d", DuelCheck[playerid][28], DuelCheck[playerid][20]);
							else format(string, sizeof(string), "kpy™ %d/%d", DuelCheck[playerid][28], DuelCheck[playerid][20]);
							TextDrawSetString(ChangeMapp[playerid][6], string);
				            return SetPlayerRaceCheckpoint(playerid, floatround(DuelRacePoint3[1][0]), DuelRacePoint3[1][1], DuelRacePoint3[1][2], DuelRacePoint3[1][3], DuelRacePoint3[2][2], DuelRacePoint3[2][2], DuelRacePoint3[2][3], DuelRacePoint3[1][4]);
						}
						else SetRaceFinish(playerid, 40.0);
						return 1;
				    }
				    default:
				    {
				        if(DuelCheck[playerid][19] == 4 && DuelCheck[playerid][28] + 1 == DuelCheck[playerid][20] + 1) SetPlayerRaceCheckpoint(playerid, 1, DuelRacePoint3[DuelCheck[playerid][19]][1], DuelRacePoint3[DuelCheck[playerid][19]][2], DuelRacePoint3[DuelCheck[playerid][19]][3], DuelRacePoint3[DuelCheck[playerid][19]][1], DuelRacePoint3[DuelCheck[playerid][19]][2], DuelRacePoint3[DuelCheck[playerid][19]][3], DuelRacePoint3[DuelCheck[playerid][19]][4]);
						else SetPlayerRaceCheckpoint(playerid, floatround(DuelRacePoint3[DuelCheck[playerid][19]][0]), DuelRacePoint3[DuelCheck[playerid][19]][1], DuelRacePoint3[DuelCheck[playerid][19]][2], DuelRacePoint3[DuelCheck[playerid][19]][3], DuelRacePoint3[DuelCheck[playerid][19]][1], DuelRacePoint3[DuelCheck[playerid][19]][2], DuelRacePoint3[DuelCheck[playerid][19]][3], DuelRacePoint3[DuelCheck[playerid][19]][4]);
						return 1;
				    }
				}
 			    return 1;
 			}
 		}
 		return 1;
    }
	return 1;
}

stock SetVehicleSpeed(vehicleid, Float:speed)
{
	new Float: Pos[6];
	GetVehicleZAngle(vehicleid, Pos[2]);
	GetVehicleVelocity(vehicleid, Pos[3], Pos[4], Pos[5]);
	Pos[0] = speed / 100 * floatsin( - Pos[2], degrees);
	Pos[1] = speed / 100 * floatcos( - Pos[2], degrees);
	return SetVehicleVelocity(vehicleid, Pos[0], Pos[1], Pos[5]);
}

stock SetRaceFinish(playerid, Float:speed)//RaceS
{
	//Если добавить 4 игрока на гонке, то сохранять значения первого игрока в переменную, а второму её показывать и к ней прибавлять свой счет
    if(DuelCheck[DuelCheck[playerid][0]][19] == DuelCheck[playerid][19] && DuelCheck[playerid][22] == 0)
    {
        DuelCheck[playerid][22] = 1;
        DuelCheck[DuelCheck[playerid][0]][22] = 2;
    }
    DuelCheck[playerid][11] = 0;
    DuelCheck[playerid][22] += 1;
    DuelCheck[DuelCheck[playerid][0]][22] += 1;
    SetPlayerDrunkLevel(playerid, 2400);
    DisablePlayerRaceCheckpoint(playerid);
    DestroyDynamicObject(ObjectLoading[playerid][0]);
    DestroyDynamicObject(ObjectLoading[playerid][1]);
    DestroyDynamicArea(DuelCheck[playerid][27]);
    DisableRemoteVehicleCollisions(playerid, 1);
    PlayerPlaySound(playerid, 28000, 0.0, 0.0, 0.0);
    TextDrawHideForPlayer(playerid, ArenaInfo[playerid][8]);
    TextDrawHideForPlayer(playerid, ArenaInfo[playerid][9]);
    switch(DuelCheck[playerid][4])
    {
        case 1:
        {
            if(DuelCheck[playerid][20] == 1)
            {
                SetPlayerCameraPos(playerid, -2664.936279, 1245.362548, 57.029846);
				SetPlayerCameraLookAt(playerid, -2667.760742, 1249.477172, 56.725345);
            }
            else
            {
                SetPlayerCameraPos(playerid, -314.428894, 1530.657104, 75.687759);
				SetPlayerCameraLookAt(playerid, -312.245605, 1526.162841, 75.875213);
			}
        }
        case 2:
        {
            if(DuelCheck[playerid][20] == 1)
            {
                SetPlayerCameraPos(playerid, -2386.662841, -2209.300292, 37.531578);
                SetPlayerCameraLookAt(playerid, -2383.846191, -2205.337890, 36.362804);
            }
            else
            {
                SetPlayerCameraPos(playerid, -2435.357910, -1929.214111, 307.760955);
                SetPlayerCameraLookAt(playerid, -2438.524414, -1925.477294, 306.755859);
            }
        }
        case 3:
		{
 			SetPlayerCameraPos(playerid, -1398.961669, -183.483245, 1045.066284);
 			SetPlayerCameraLookAt(playerid, -1398.477416, -188.444534, 1044.677612);
		}
    }
    SetVehicleSpeed(DuelCheck[playerid][15], speed);
    new string[66], slot[14], slot1[14];
	if(DuelCheck[playerid][22] == 1)
	{
	    DuelCheck[playerid][26] = DuelCheck[playerid][12];
        PlayerInfo[playerid][pDuel][1] += 1;
	    DuelCheck[playerid][24] = 898 - DuelCheck[playerid][12];
	    DuelCheck[DuelCheck[playerid][0]][24] = 898 - DuelCheck[playerid][12];
	    DuelCheck[playerid][12] = 895;
	    DuelCheck[DuelCheck[playerid][0]][12] = 895;
	    DuelCheck[playerid][23] = 2;
	    format(string, sizeof(string), "%s~n~~n~%s", PlayerName[playerid], PlayerName[DuelCheck[playerid][0]]);
	    TextDrawSetString(DuelInfo[playerid][24], string);
	    TextDrawSetString(DuelInfo[DuelCheck[playerid][0]][24], string);
		strmid(slot, VehicleName[ClassVehicleDuel[DuelCheck[playerid][7]-1][DuelCheck[playerid][16]] - 400], 0, 10);
		if(strlen(slot) >= 8) format(slot, sizeof(slot), "%s...", slot);
		strmid(slot1, VehicleName[ClassVehicleDuel[DuelCheck[DuelCheck[playerid][0]][7]-1][DuelCheck[DuelCheck[playerid][0]][16]] - 400], 0, 10);
		if(strlen(slot1) >= 8) format(slot1, sizeof(slot1), "%s...", slot1);
		format(string, sizeof(string), "%s~n~~n~%s", slot, slot1);
		TextDrawSetString(DuelInfo[playerid][25], string);
        TextDrawSetString(DuelInfo[DuelCheck[playerid][0]][25], string);
	    if(DuelCheck[playerid][21] != 0)
		{
		    MoneyInfoCall(playerid, DuelCheck[playerid][21], 0);
		    format(string, sizeof(string), "~g~~h~$%s~n~~n~", AddCommasToInt(DuelCheck[playerid][21]));
		    if(DuelCheck[DuelCheck[playerid][0]][21] != 0) format(string, sizeof(string), "%s~r~~h~$-%s", string, AddCommasToInt(DuelCheck[DuelCheck[playerid][0]][21]));
			else format(string, sizeof(string), "~w~%s$0", string);
  		}
  		else
  		{
  		    if(DuelCheck[DuelCheck[playerid][0]][21] != 0) format(string, sizeof(string), "$0~n~~n~~r~~h~$-%s", AddCommasToInt(DuelCheck[DuelCheck[playerid][0]][21]));
			else format(string, sizeof(string), "$0~n~~n~$0");
  		}
	    TextDrawSetString(DuelInfo[playerid][28], string);
	    TextDrawSetString(DuelInfo[DuelCheck[playerid][0]][28], string);
		UpdateMysql(playerid, 3);
		AchievementsInfo(13, playerid);
	}
	else
	{
	    PlayerInfo[playerid][pDuel][2] += 1;
		format(string, sizeof(string), "%s:00~n~~n~%s:00", Convert(DuelCheck[DuelCheck[playerid][0]][26]), Convert(DuelCheck[playerid][12] - DuelCheck[playerid][24]));
		TextDrawSetString(DuelInfo[playerid][26], string);
	    TextDrawSetString(DuelInfo[DuelCheck[playerid][0]][26], string);
	    mysql_format(MysqlConnectID, string, sizeof(string), "SELECT * FROM race WHERE `id`='%d'", DuelCheck[playerid][4]);
		mysql_tquery(MysqlConnectID, string, "OnPlayerForAll", "iii", playerid, 3, DuelCheck[playerid][12] - DuelCheck[playerid][24]);
	    if(DuelCheck[playerid][21] != 0) MoneyInfoCall(playerid, DuelCheck[playerid][21], 1);
		DuelCheck[playerid][12] = 20;
	    DuelCheck[DuelCheck[playerid][0]][12] = 20;
	    DuelCheck[playerid][13] = 5;
	    DuelCheck[DuelCheck[playerid][0]][13] = 5;
		UpdateMysql(playerid, 3);
	}
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)//G40
{
    if(areaid == DuelCheck[playerid][27] && DuelCheck[playerid][9] >= 1)
    {
	    new vehicleid = GetPlayerVehicleID(playerid);
	    switch(DuelCheck[playerid][9])
	    {
	    	case 1:
			{
				if(DuelCheck[playerid][4] == 2) SetVehicleSpeed(vehicleid, 10.0);
				else SetVehicleSpeed(vehicleid, GetPlayerSpeed(playerid, 140.0) + 0.1);
			}
			case 2: SetVehicleSpeed(vehicleid, GetPlayerSpeed(playerid, 160.0) + 0.1);
		}
		PlayerPlaySound(playerid, 6003, 0.0, 0.0, 0.0);//6003 40408 | 14800
    	return TextDrawShowForPlayer(playerid, Glasses[playerid]);
	}
	if(areaid == ForbiddenArea[playerid][1] && ForbiddenArea[playerid][0] != 0)
	{
	    ForbiddenArea[playerid][0] = 0;
	    TextDrawHideForPlayer(playerid, ChangeMapp[playerid][5]);
		TextDrawHideForPlayer(playerid, ChangeMapp[playerid][6]);
		TextDrawHideForPlayer(playerid, NewLelevT[playerid][0]);
		TextDrawHideForPlayer(playerid, Glasses[playerid]);
	}
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
    if(areaid == DuelCheck[playerid][27] && DuelCheck[playerid][9] >= 1) return TextDrawHideForPlayer(playerid, Glasses[playerid]);
	if(areaid == ForbiddenArea[playerid][1] && PlayerInfo[playerid][pPrison] == 0 && ChangeMap[playerid][2] == 0 && AntiBreik[playerid] == 0 && Spawned[playerid] == true && DuelCheck[playerid][3] == 0)
	{
	    ForbiddenArea[playerid][0] = 14;
	    TextDrawShowForPlayer(playerid, ChangeMapp[playerid][5]);
		TextDrawShowForPlayer(playerid, ChangeMapp[playerid][6]);
		TextDrawShowForPlayer(playerid, NewLelevT[playerid][0]);
		TextDrawBoxColor(Glasses[playerid], 0x00000033);
		TextDrawShowForPlayer(playerid, Glasses[playerid]);
		if(PlayerInfo[playerid][pRussifier][1] == 0) TextDrawSetString(ChangeMapp[playerid][6], "return to the combat area");
		else TextDrawSetString(ChangeMapp[playerid][6], "ўep®њ¦ec© ў џo®y љeќc¦ўњ¬");
		TextDrawSetString(NewLelevT[playerid][0], "time 10");
	}
	return 1;
} 

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
    if(ProtectionFlooding[playerid][4] >= 13 && PlayerCheatCheck[playerid] == 0) return IsProtectionFlooding(playerid, "ClickPlayer", "2.4");
	else
	{
	    ProtectionFlooding[playerid][4] += 1;
	    if(ProtectionFlooding[playerid][4] >= 8) GameTextForPlayerZS(playerid, "~n~~r~Warning~n~flood", "~r~®e Ѓћyљњ¦e", 2000, 4, 1085);
	}
	if(playerid == clickedplayerid) return 1;
	if(!IsPlayerConnected(clickedplayerid)) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным ID не найден!");
	if(PlayerLogged[clickedplayerid] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не зашел в свой аккаунт!");
    return SetDialogResponse(playerid, 11, clickedplayerid, 1);
}

stock TextDrawSetStringZS(Text:text, Text:text2, const string[], const string2[])
{
	new str[25];
    strmid(str, string, 0, strlen(string));
    TextDrawSetString(text, str);
    strmid(str, string2, 0, strlen(string2));
    return TextDrawSetString(text2, str);
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if(ProtectionFlooding[playerid][3] >= 40 && PlayerCheatCheck[playerid] == 0) return IsProtectionFlooding(playerid, "TextDraw", "2.3");
 	else
 	{
 	    ProtectionFlooding[playerid][3] += 1;
 	    if(ProtectionFlooding[playerid][3] >= 35) GameTextForPlayerZS(playerid, "~r~Warning~n~flood", "~r~®e Ѓћyљњ¦e", 2000, 4, 1085);
 	}
 	if(ChoiceTeamCheck[playerid][0] == 1)
 	{
		if(clickedid == ChoiceTeam[playerid][1])
		{
		    if(ChoiceTeamCheck[playerid][1] == 0)
		    {
		        if(ChoiceTeamCheck[playerid][6] == 1 && Arena[6] < Arena[5] || ChoiceTeamCheck[playerid][6] == 2 && Arena[13] < Arena[12] || ChoiceTeamCheck[playerid][6] == 3 && Arena[20] < Arena[19]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> В данный момент данная команда переполнена!", 1085);
		        switch(ChoiceTeamCheck[playerid][6])
		        {
		            case 1: Arena[5] += 1;
		 			case 2: Arena[12] += 1;
		 			case 3: Arena[19] += 1;
	 			}
	    		SetPlayerTeam(playerid, 0);
	    		ChoiceTeamCheck[playerid][1] = 1;
	    		ChoiceTeamCheck[playerid][2] = 1;
	    		ChoiceTeamCheck[playerid][3] = 0;
	    		PlayerPlaySound(playerid, 1138, 0.0, 0.0, 0.0);
	    		if(TimeInput[playerid] <= 70) TimeInput[playerid] = 300;
				if(PlayerInfo[playerid][pYourSkin][1] == 0) SetPlayerSkin(playerid, SkinChoice[0][0]);
	            else SetPlayerSkinZS(playerid, PlayerInfo[playerid][pYourSkin][0]);
	            TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][10]);
	            TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][11]);
	            new lang = PlayerInfo[playerid][pRussifier][1];
	            TextDrawSetString(ChoiceTeam[playerid][3], TextDrawInfo[50][lang]);
	           	return TextDrawSetString(ChoiceTeam[playerid][11], TextDrawInfo[54][lang]);
		    }
		    if(PlayerInfo[playerid][pYourSkin][1] == 1) return GameTextForPlayerZS(playerid, "~n~~r~your skin", "~r~cўoќ ckњ®", 2000, 4, 1085);
			ChoiceTeamCheck[playerid][3] -= 1;
			PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
			if(ChoiceTeamCheck[playerid][3] < 0) ChoiceTeamCheck[playerid][3] = 12;
			return SetPlayerSkin(playerid, SkinChoice[ChoiceTeamCheck[playerid][2]-1][ChoiceTeamCheck[playerid][3]]);
		}
		else if(clickedid == ChoiceTeam[playerid][2])
		{
		    if(ChoiceTeamCheck[playerid][1] == 0)
		    {
		        if(ChoiceTeamCheck[playerid][6] == 1 && Arena[5] < Arena[6] || ChoiceTeamCheck[playerid][6] == 2 && Arena[12] < Arena[13] || ChoiceTeamCheck[playerid][6] == 3 && Arena[19] < Arena[20]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> В данный момент данная команда переполнена!", 1085);
		        switch(ChoiceTeamCheck[playerid][6])
		        {
		            case 1: Arena[6] += 1;
	 				case 2: Arena[13] += 1;
	 				case 3: Arena[20] += 1;
	 			}
				SetPlayerTeam(playerid, 1);
	    		ChoiceTeamCheck[playerid][1] = 1;
	    		ChoiceTeamCheck[playerid][2] = 2;
	    		ChoiceTeamCheck[playerid][3] = 0;
	    		PlayerPlaySound(playerid, 1138, 0.0, 0.0, 0.0);
	    		if(TimeInput[playerid] <= 70) TimeInput[playerid] = 300;
				if(PlayerInfo[playerid][pYourSkin][1] == 0) SetPlayerSkin(playerid, SkinChoice[1][0]);
	            else SetPlayerSkinZS(playerid, PlayerInfo[playerid][pYourSkin][0]);
	            TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][10]);
	            TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][11]);
	            new lang = PlayerInfo[playerid][pRussifier][1];
	            TextDrawSetString(ChoiceTeam[playerid][3], TextDrawInfo[50][lang]);
	           	return TextDrawSetString(ChoiceTeam[playerid][11], TextDrawInfo[54][lang]);
			}
			if(PlayerInfo[playerid][pYourSkin][1] == 1) return GameTextForPlayerZS(playerid, "~n~~r~your skin", "~r~cўoќ ckњ®", 2000, 4, 1085);
			ChoiceTeamCheck[playerid][3] += 1;
			PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
			if(ChoiceTeamCheck[playerid][3] >= 13) ChoiceTeamCheck[playerid][3] = 0;
			return SetPlayerSkin(playerid, SkinChoice[ChoiceTeamCheck[playerid][2]-1][ChoiceTeamCheck[playerid][3]]);
		}
		else if(clickedid == ChoiceTeam[playerid][7])
		{
			if(ChoiceTeamCheck[playerid][1] == 0)
		    {
		        if(ChoiceTeamCheck[playerid][6] == 1 && Arena[6] < Arena[5] || ChoiceTeamCheck[playerid][6] == 2 && Arena[13] < Arena[12] || ChoiceTeamCheck[playerid][6] == 3 && Arena[20] < Arena[19]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> В данный момент данная команда переполнена!", 1085);
		        switch(ChoiceTeamCheck[playerid][6])
		        {
		            case 1: Arena[5] += 1;
		 			case 2: Arena[12] += 1;
		 			case 3: Arena[19] += 1;
	 			}
	    		SetPlayerTeam(playerid, 0);
	    		ChoiceTeamCheck[playerid][1] = 1;
	    		ChoiceTeamCheck[playerid][2] = 1;
	    		ChoiceTeamCheck[playerid][3] = 0;
	    		PlayerPlaySound(playerid, 1138, 0.0, 0.0, 0.0);
	    		if(TimeInput[playerid] <= 70) TimeInput[playerid] = 300;
				if(PlayerInfo[playerid][pYourSkin][1] == 0) SetPlayerSkin(playerid, SkinChoice[0][0]);
	            else SetPlayerSkinZS(playerid, PlayerInfo[playerid][pYourSkin][0]);
	            TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][10]);
	            TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][11]);
	            new lang = PlayerInfo[playerid][pRussifier][1];
	            TextDrawSetString(ChoiceTeam[playerid][3], TextDrawInfo[50][lang]);
	           	return TextDrawSetString(ChoiceTeam[playerid][11], TextDrawInfo[54][lang]);
		    }
		    /*if(ChoiceTeamCheck[playerid][1] == 1 && (PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pVip] == 3))
			{
	  			if(Arena[6] < Arena[5]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> В данный момент данная команда переполнена!", 1085);
	            if(Arena[6] >= 1) Arena[6] -= 1;
				Arena[5] += 1;
	    		SetPlayerTeam(playerid, 0);
	    		ChoiceTeamCheck[playerid][1] = 1;
	    		ChoiceTeamCheck[playerid][2] = 1;
	    		ChoiceTeamCheck[playerid][3] = 0;
	    		PlayerPlaySound(playerid, 1138, 0.0, 0.0, 0.0);
				if(PlayerInfo[playerid][pYourSkin][1] == 0) SetPlayerSkin(playerid, SkinChoice[1][0]);
	            else SetPlayerSkinZS(playerid, PlayerInfo[playerid][pYourSkin][0]);
			}*/
		    return 1;
		}
		else if(clickedid == ChoiceTeam[playerid][8])
		{
			if(ChoiceTeamCheck[playerid][1] == 0)
		    {
				if(ChoiceTeamCheck[playerid][6] == 1 && Arena[5] < Arena[6] || ChoiceTeamCheck[playerid][6] == 2 && Arena[12] < Arena[13] || ChoiceTeamCheck[playerid][6] == 3 && Arena[19] < Arena[20]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> В данный момент данная команда переполнена!", 1085);
		        switch(ChoiceTeamCheck[playerid][6])
		        {
		            case 1: Arena[6] += 1;
	 				case 2: Arena[13] += 1;
	 				case 3: Arena[20] += 1;
	 			}
				SetPlayerTeam(playerid, 1);
	    		ChoiceTeamCheck[playerid][1] = 1;
	    		ChoiceTeamCheck[playerid][2] = 2;
	    		ChoiceTeamCheck[playerid][3] = 0;
	    		PlayerPlaySound(playerid, 1138, 0.0, 0.0, 0.0);
	    		if(TimeInput[playerid] <= 70) TimeInput[playerid] = 300;
				if(PlayerInfo[playerid][pYourSkin][1] == 0) SetPlayerSkin(playerid, SkinChoice[1][0]);
	            else SetPlayerSkinZS(playerid, PlayerInfo[playerid][pYourSkin][0]);
	            TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][10]);
	            TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][11]);
	            new lang = PlayerInfo[playerid][pRussifier][1];
	            TextDrawSetString(ChoiceTeam[playerid][3], TextDrawInfo[50][lang]);
	           	return TextDrawSetString(ChoiceTeam[playerid][11], TextDrawInfo[54][lang]);
			}
			/*if(ChoiceTeamCheck[playerid][1] == 1 && (PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pVip] == 3))
			{
	            if(Arena[5] < Arena[6]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> В данный момент данная команда переполнена!", 1085);
	            if(Arena[5] >= 1) Arena[5] -= 1;
				Arena[6] += 1;
				SetPlayerTeam(playerid, 1);
	    		ChoiceTeamCheck[playerid][1] = 1;
	    		ChoiceTeamCheck[playerid][2] = 2;
	    		ChoiceTeamCheck[playerid][3] = 0;
	    		PlayerPlaySound(playerid, 1138, 0.0, 0.0, 0.0);
				if(PlayerInfo[playerid][pYourSkin][1] == 0) SetPlayerSkin(playerid, SkinChoice[0][0]);
	            else SetPlayerSkinZS(playerid, PlayerInfo[playerid][pYourSkin][0]);
			}*/
			return 1;
		}
		else if(clickedid == ChoiceTeam[playerid][9])
		{
			new string[80], info[15];
		    PlayerOnline[1] += 1;
		    TimeInput[playerid] = 0;
		    SetPlayerTeam(playerid, 255);
		    CancelSelectTextDraw(playerid);
			switch(ChoiceTeamCheck[playerid][6])
			{
	  			case 1:
	  			{
	  				if(PlayerOnline[2] >= 1) PlayerOnline[2] -= 1;
	  				if(ChoiceTeamCheck[playerid][2] == 1 && Arena[5] >= 1) Arena[5] -= 1;
					else if(ChoiceTeamCheck[playerid][2] == 2 && Arena[6] >= 1) Arena[6] -= 1;
	  			}
	  			case 2:
				{
	  				if(PlayerOnline[3] >= 1) PlayerOnline[3] -= 1;
	  				if(ChoiceTeamCheck[playerid][2] == 1 && Arena[12] >= 1) Arena[12] -= 1;
					else if(ChoiceTeamCheck[playerid][2] == 2 && Arena[13] >= 1) Arena[13] -= 1;
				}
				case 3:
				{
	  				if(PlayerOnline[4] >= 1) PlayerOnline[4] -= 1;
	  				if(ChoiceTeamCheck[playerid][2] == 1 && Arena[19] >= 1) Arena[19] -= 1;
					else if(ChoiceTeamCheck[playerid][2] == 2 && Arena[20] >= 1) Arena[20] -= 1;
				}
			}
			PlayerInfo[playerid][pFreeMode] = 1;
		    ChoiceTeamCheck[playerid][0] = 0;
			ChoiceTeamCheck[playerid][1] = 0;
			ChoiceTeamCheck[playerid][2] = 256;
			ChoiceTeamCheck[playerid][3] = 0;
			ChoiceTeamCheck[playerid][4] = 0;
			ChoiceTeamCheck[playerid][5] = 0;
			ChoiceTeamCheck[playerid][6] = 0;
			ChoiceTeamCheck[playerid][7] = 0;
	   	    mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET freemode='%d' WHERE id='%d'", PlayerInfo[playerid][pFreeMode], PlayerInfo[playerid][pRoomAccount]);
			mysql_tquery(MysqlConnectID, string);
			SpawnPlayerZS(playerid);
			TeamColor(playerid);
			GangZoneHideForPlayer(playerid, ServerCheck[0]);
			for(new x; x < 17; x ++) TextDrawHideForPlayer(playerid, ChoiceTeam[playerid][x]);
		    if(PlayerInfo[playerid][pAdmin] >= 2) info = "Администратор";
			else if(PlayerInfo[playerid][pVip] >= 2) info = "VIP игрок";
			format(string, sizeof(string), "%s %s (ID: %d) вошел в Cвободный режим", info, PlayerName[playerid], playerid);
	        return ABroadCast(0xC3C3C3AA, string, 0, 4);
		}
		else if(clickedid == ChoiceTeam[playerid][12]) return ShowPlayerDialogZS(playerid, 143, DIALOG_STYLE_LIST, "Особенности игры", "Пройти полную помощь", "Выбрать", "Отмена");
		else if((clickedid == ChoiceTeam[playerid][14] || clickedid == ChoiceTeam[playerid][15]) && ServerHelpInfo[playerid][1] == 1 && PlayerInfo[playerid][pServerHelp][0] == 0)
	 	{
	 	  	if(PlayerInfo[playerid][pRussifier][1] == 0)
	  		{
	  		    PlayerInfo[playerid][pRussifier][1] = 1;
			  	TextDrawSetString(ChoiceTeam[playerid][16], "c¦њћ©");
	 	  	}
	 	  	else
	 	  	{
	 	  	    PlayerInfo[playerid][pRussifier][1] = 0;
	 	  	    TextDrawSetString(ChoiceTeam[playerid][16], "style");
	 	  	}
	        return 1;
	 	}
		else if(clickedid == ChoiceTeam[playerid][11])
		{
		    if(ServerHelpInfo[playerid][1] == 3)
			{
	  			ServerHelpInfo[playerid][2] = 0;
		    	ServerHelpInfo[playerid][0] = gettime()+1;
		    	TextDrawHideForPlayer(playerid, ChoiceTeam[playerid][10]);
	            TextDrawHideForPlayer(playerid, ChoiceTeam[playerid][11]);
			    return 1;
			}
			new string[108];
	        if(PlayerInfo[playerid][pAutoBuyWeapon][4] == 1)
	        {
				for(new x = 0; x < 4; x ++)
				{
				    if(PlayerInfo[playerid][pAutoBuyWeapon][x] == 0) continue;
					WeaponsSlotSpawn[playerid][6] += MenuBuy[PlayerInfo[playerid][pAutoBuyWeapon][x] - 22][2];
				}
				if(PlayerInfo[playerid][pMoney] < WeaponsSlotSpawn[playerid][6] || WeaponsSlotSpawn[playerid][6] == 0)
				{
					if(WeaponsSlotSpawn[playerid][6] != 0)
					{
	   					format(string, sizeof(string), "У вас недостаточно средств для автоматической закупки %s", AddCommasToInt(WeaponsSlotSpawn[playerid][6]));
						SendClientMessageZS(playerid, COLOR_RED, string, 1085);
	 				}
					PlayerInfo[playerid][pAutoBuyWeapon][4] = 0;
					WeaponsSlotSpawn[playerid][6] = 0;
					ChoiceTeamCheck[playerid][4] = 1;
					new str[16];
					format(str, sizeof(str), "%d,%d,%d,%d,%d", PlayerInfo[playerid][pAutoBuyWeapon][0], PlayerInfo[playerid][pAutoBuyWeapon][1], PlayerInfo[playerid][pAutoBuyWeapon][2], PlayerInfo[playerid][pAutoBuyWeapon][3], PlayerInfo[playerid][pAutoBuyWeapon][4]);
					mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET autobuyweapon='%s' WHERE id=%d", str, PlayerInfo[playerid][pRoomAccount]);
					mysql_tquery(MysqlConnectID, string);
	    		}
				else
	   			{
	   				ChoiceTeamCheck[playerid][4] = 0;
	   				MoneyInfoCall(playerid, WeaponsSlotSpawn[playerid][6], 1);
	       			for(new x = 0; x < 4; x ++)
					{
	   					if(PlayerInfo[playerid][pAutoBuyWeapon][x] == 0) continue;
						WeaponsSlotSpawn[playerid][x] = PlayerInfo[playerid][pAutoBuyWeapon][x];
					}
	   				WeaponsSlotSpawn[playerid][6] = 0;
				}
	        }
			else ChoiceTeamCheck[playerid][4] = 1;
			if(PlayerInfo[playerid][pInfoText][5] == 1 || ChoiceTeamCheck[playerid][4] == 0) CancelSelectTextDraw(playerid);
			TimeInput[playerid] = 0;
			ChoiceTeamCheck[playerid][0] = 0;
			ChoiceTeamCheck[playerid][1] = 0;
			ChoiceTeamCheck[playerid][5] = 0;
			switch(ChoiceTeamCheck[playerid][6])
			{
			    case 1: ChoiceTeamCheck[playerid][7] = Arena[0];
			    case 2: ChoiceTeamCheck[playerid][7] = Arena[7];
			    case 3: ChoiceTeamCheck[playerid][7] = Arena[14];
			}
			SpawnPlayerZS(playerid);
			TeamColor(playerid);
			if(ChoiceTeamCheck[playerid][2] == 1) PlayerColor[playerid] = 0x559FCDFF;
			else PlayerColor[playerid] = 0xF4AC50FF;
	        mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET scorecheck=%d,score1='0,0',score2='0,0',scores1=0,scores2=0 WHERE id=%d", ChoiceTeamCheck[playerid][6], PlayerInfo[playerid][pRoomAccount]);
			mysql_tquery(MysqlConnectID, string);
			for(new x; x < 17; x ++) TextDrawHideForPlayer(playerid, ChoiceTeam[playerid][x]);
			return 1;
		}
		else if(ChoiceTeamCheck[playerid][5] == 1 && (clickedid == ChoiceTeam[playerid][25] || clickedid == ChoiceTeam[playerid][26] || clickedid == ChoiceTeam[playerid][27]))
		{
		    if(clickedid == ChoiceTeam[playerid][25])
		    {
			    if(PlayerOnline[2] >= 64) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Данное лобби уже полностью заполнено!", 1085);
			    ChoiceTeamCheck[playerid][5] = 0;
			    ChoiceTeamCheck[playerid][6] = 1;
			    PlayerOnline[2] += 1;
		    }
		    else if(clickedid == ChoiceTeam[playerid][26])
		    {
		    	if(PlayerOnline[3] >= 64) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Данное лобби уже полностью заполнено!", 1085);
		    	ChoiceTeamCheck[playerid][5] = 0;
		    	ChoiceTeamCheck[playerid][6] = 2;
	        	PlayerOnline[3] += 1;
		    }
		    else if(clickedid == ChoiceTeam[playerid][27])
		    {
		        if(PlayerOnline[4] >= 64) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Данное лобби уже полностью заполнено!", 1085);
		    	ChoiceTeamCheck[playerid][5] = 0;
		    	ChoiceTeamCheck[playerid][6] = 3;
	        	PlayerOnline[4] += 1;
		    }
		    for(new x; x < 33; x ++)
		    {
		        if(x <= 8) TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][x]);
				else if(x == 9) x = 17;
				if(x >= 17) TextDrawHideForPlayer(playerid, ChoiceTeam[playerid][x]);
		    }
	        TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][12]);
	        new lang = PlayerInfo[playerid][pRussifier][1];
	 		TextDrawSetString(ChoiceTeam[playerid][3], TextDrawInfo[49][lang]);
	 		TextDrawSetString(ChoiceTeam[playerid][7], TextDrawInfo[51][lang]);
	 		TextDrawSetString(ChoiceTeam[playerid][8], TextDrawInfo[52][lang]);
			if(PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pVip] >= 2)
	 		{
				TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][6]);
				TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][9]);
				TextDrawSetString(ChoiceTeam[playerid][9], TextDrawInfo[53][lang]);
			}
		    return 1;
		}
	}
	if(ChangeMap[playerid][3] == 1)
	{
		if(clickedid == ChangeMapp[playerid][0]) return ShowPlayerDialogZS(playerid, 4014, DIALOG_STYLE_INPUT, "Смена карты", "{FFFFFF}Введите номер карты, которую хотите посмотреть:", "Выбрать", "Отмена");
		else if(clickedid == ChangeMapp[playerid][1] || clickedid == ChangeMapp[playerid][2])
		{
		    if(clickedid == ChangeMapp[playerid][1])
		    {
		    	ChangeMap[playerid][4] -= 1;//5513
		    	if(ChangeMap[playerid][4] <= -1) ChangeMap[playerid][4] = MAX_MAPS-1;
		    }
		    else
		    {
		        ChangeMap[playerid][4] += 1;
		    	if(ChangeMap[playerid][4] >= MAX_MAPS) ChangeMap[playerid][4] = 0;
		    }
		    ArenaMapCamera(playerid, ChangeMap[playerid][4]);
			SetPlayerVirtualWorld(playerid, ChangeMap[playerid][4]+1);
			SetPlayerInteriorZS(playerid, MapSettings[ChangeMap[playerid][4]][Preset][2]);
			SetPlayerTime(playerid, MapSettings[ChangeMap[playerid][4]][Preset][3], 0);
			SetPlayerWeather(playerid, MapSettings[ChangeMap[playerid][4]][Preset][4]);
			new string[27];
			if(PlayerInfo[playerid][pRussifier][1] == 0) format(string, sizeof(string), "%s %d", MapSettings[ChangeMap[playerid][4]][Name], ChangeMap[playerid][4]);
			else format(string, sizeof(string), "%s %d", MapSettings[ChangeMap[playerid][4]][Name1], ChangeMap[playerid][4]);
		    return TextDrawSetString(ChangeMapp[playerid][0], string);
		}
	    else if(clickedid == ChangeMapp[playerid][3]) return ShowPlayerDialogZS(playerid, 4024, DIALOG_STYLE_LIST, "Выберите лобби", "Сменить карту лобби 1\nСменить карту лобби 2\nСменить карту лобби 3", "Выбрать", "Назад");
	 	else if(clickedid == ChangeMapp[playerid][4])
	 	{
	 	    if(ChoiceTeamCheck[playerid][6] == 1 && Arena[2] != 0 || ChoiceTeamCheck[playerid][6] == 2 && Arena[9] != 0 || ChoiceTeamCheck[playerid][6] == 3 && Arena[16] != 0) return SendClientMessageZS(playerid, COLOR_RED, "Пожалуйста подождите несколько секунд.", 1085);
	 		ChangeMap[playerid][3] = 0;
	        ChangeMap[playerid][4] = 0;
	        CancelSelectTextDraw(playerid);
	        TogglePlayerSpectatingZS(playerid, 0);
	        TextDrawHideForPlayer(playerid, ChangeMapp[playerid][0]);
	        TextDrawHideForPlayer(playerid, ChangeMapp[playerid][1]);
	        TextDrawHideForPlayer(playerid, ChangeMapp[playerid][2]);
	        TextDrawHideForPlayer(playerid, ChangeMapp[playerid][3]);
	        TextDrawHideForPlayer(playerid, ChangeMapp[playerid][4]);
	        return TextDrawHideForPlayer(playerid, DuelInfo[playerid][34]);
	 	}
 	}
 	if(clickedid == MenuSelection[playerid][6])// >>
	{
	    if(SelectionCheck[playerid][2] > SelectionCheck[playerid][3]) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		SelectionCheck[playerid][2] += 1;
		mS_ShowPlayerMPs(playerid);
		PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
		new string[9];
		format(string, sizeof(string), "%02d/%02d", SelectionCheck[playerid][2], SelectionCheck[playerid][3]);
		return TextDrawSetString(MenuSelection[playerid][5], string);
    }
    if(clickedid == MenuSelection[playerid][4])// <<
	{
		if(SelectionCheck[playerid][2] < 0) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		SelectionCheck[playerid][2] -= 1;
		mS_ShowPlayerMPs(playerid);
		PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0);
		new string[9];
		format(string, sizeof(string), "%02d/%02d", SelectionCheck[playerid][2], SelectionCheck[playerid][3]);
		return TextDrawSetString(MenuSelection[playerid][5], string);
	}
	if(clickedid == MenuSelection[playerid][7] && ChoiceTeamCheck[playerid][0] == 0 && SelectionCheck[playerid][0] == 1)
	{
	    new string[63+15], str[15];
	    if(PlayerInfo[playerid][pAutoBuyWeapon][4] == 0)
	    {
 			for(new x = 0; x < 4; x ++)
 			{
    			if(PlayerInfo[playerid][pAutoBuyWeapon][x] == 0) continue;
				WeaponsSlotSpawn[playerid][6] += MenuBuy[PlayerInfo[playerid][pAutoBuyWeapon][x] - 22][2];
			}
			if(PlayerInfo[playerid][pMoney] < WeaponsSlotSpawn[playerid][6] || WeaponsSlotSpawn[playerid][6] == 0)
			{
			    if(WeaponsSlotSpawn[playerid][6] != 0)
			    {
			    	format(string, sizeof(string), "У вас недостаточно средств для автоматической закупки %s", AddCommasToInt(WeaponsSlotSpawn[playerid][6]));
   					SendClientMessageZS(playerid, COLOR_RED, string, 1085);
   				}
   				else SendClientMessageZS(playerid, COLOR_RED, "Все слоты не могут быть пустыми!", 1085);
                PlayerInfo[playerid][pAutoBuyWeapon][4] = 0;
				WeaponsSlotSpawn[playerid][6] = 0;
  		    }
  		    else
  		    {
	            MoneyInfoCall(playerid, WeaponsSlotSpawn[playerid][6], 1);
	            for(new x = 0; x < 4; x ++)
	            {
	                if(PlayerInfo[playerid][pAutoBuyWeapon][x] == 0) continue;
	            	GivePlayerWeaponZS(playerid, PlayerInfo[playerid][pAutoBuyWeapon][x], MenuBuy[PlayerInfo[playerid][pAutoBuyWeapon][x] - 22][1]);
					WeaponsSlotSpawn[playerid][x] = PlayerInfo[playerid][pAutoBuyWeapon][x];
	            }
				WeaponsSlotSpawn[playerid][6] = 0;
		        PlayerInfo[playerid][pAutoBuyWeapon][4] = 1;
		        TextDrawSetString(MenuSelection[playerid][7], "LD_CHAT:thumbup");
	        }
	    }
	    else
	    {
	        WeaponsSlotSpawn[playerid][6] = 0;
	        PlayerInfo[playerid][pAutoBuyWeapon][4] = 0;
	        TextDrawSetString(MenuSelection[playerid][7], "LD_CHAT:thumbdn");
	    }
		format(str, sizeof(str), "%d,%d,%d,%d,%d", PlayerInfo[playerid][pAutoBuyWeapon][0], PlayerInfo[playerid][pAutoBuyWeapon][1], PlayerInfo[playerid][pAutoBuyWeapon][2], PlayerInfo[playerid][pAutoBuyWeapon][3], PlayerInfo[playerid][pAutoBuyWeapon][4]);
		mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET autobuyweapon='%s' WHERE id='%d'", str, PlayerInfo[playerid][pRoomAccount]);
		return mysql_tquery(MysqlConnectID, string);
	}
	if(clickedid == MenuSelection[playerid][8] && ChoiceTeamCheck[playerid][0] == 0 && SelectionCheck[playerid][0] == 1)
	{
	    switch(SelectionCheck[playerid][7])
	    {
	        case 1:
	        {
	            if(PlayerInfo[playerid][pClassWeapons][4] == 0)
	            {
	                if(PlayerInfo[playerid][pClassWeapons][0] == PlayerInfo[playerid][pClassWeapons][1]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Слоты не могут быть одинаковыми!", 1085);
	                if(PlayerInfo[playerid][pClassWeapons][5] == 1) PlayerInfo[playerid][pClassWeapons][5] = 0;
	                PlayerInfo[playerid][pClassWeapons][4] = 1;
	                TextDrawSetString(MenuSelection[playerid][8], "LD_CHAT:thumbup");
	            }
	            else
	            {
	                PlayerInfo[playerid][pClassWeapons][4] = 0;
	                TextDrawSetString(MenuSelection[playerid][8], "LD_CHAT:thumbdn");
	            }
	            return UpdateMysql(playerid, 1);
	        }
	        case 2:
	        {
	            if(PlayerInfo[playerid][pClassWeapons][5] == 0)
	            {
	                if(PlayerInfo[playerid][pClassWeapons][2] == PlayerInfo[playerid][pClassWeapons][3]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Слоты не могут быть одинаковыми!", 1085);
					if(PlayerInfo[playerid][pClassWeapons][4] == 1) PlayerInfo[playerid][pClassWeapons][4] = 0;
					PlayerInfo[playerid][pClassWeapons][5] = 1;
	                TextDrawSetString(MenuSelection[playerid][8], "LD_CHAT:thumbup");
	            }
	            else
	            {
	                PlayerInfo[playerid][pClassWeapons][5] = 0;
	                TextDrawSetString(MenuSelection[playerid][8], "LD_CHAT:thumbdn");
	            }
	            return UpdateMysql(playerid, 1);
	        }
	    }
	    if(SelectionCheck[playerid][5] == 2 && PlayerInfo[playerid][pLevel][1] <= LevelScore[3][0]) return 1;
		if(SelectionCheck[playerid][5] == 0)
		{
		    if(PlayerInfo[playerid][pServerHelp][2] <= 2)
		    {
		        SelectionCheck[playerid][5] = 2;
				return ShowPlayerDialogZS(playerid, 141, DIALOG_STYLE_MSGBOX, "Автоматическая закупка оружия", "{FFFFFF}С помощью данной функции вам не придется каждый раз покупать оружие после завершения матча.\nВам даются слоты, в которые вы можете поместить любое оружие из списка, цены указаны под оружием.\nДля очищения слота, нажмите на оружие которое выбрано в слоте.", "Дальше", "Отмена");
  			}
		    SelectionCheck[playerid][5] = 1;
	  		new string[30];
	  		format(string, sizeof(string), " slot: ~g~~h~%s", WeaponsName[PlayerInfo[playerid][pAutoBuyWeapon][0]]);
	        TextDrawSetString(MenuSelection[playerid][10], string);
			format(string, sizeof(string), " slot: ~g~~h~%s", WeaponsName[PlayerInfo[playerid][pAutoBuyWeapon][1]]);
			TextDrawSetString(MenuSelection[playerid][11], string);
			if(PlayerInfo[playerid][pVip] >= 3)
			{
			    TextDrawLetterSize(MenuSelection[playerid][9], 0.5, 5.6);
				format(string, sizeof(string), " slot: ~g~~h~%s", WeaponsName[PlayerInfo[playerid][pAutoBuyWeapon][2]]);
				TextDrawSetString(MenuSelection[playerid][12], string);
				format(string, sizeof(string), " slot: ~g~~h~%s", WeaponsName[PlayerInfo[playerid][pAutoBuyWeapon][3]]);
				TextDrawSetString(MenuSelection[playerid][13], string);
				TextDrawShowForPlayer(playerid, MenuSelection[playerid][12]);
		    	TextDrawShowForPlayer(playerid, MenuSelection[playerid][13]);
   			}
   			else TextDrawLetterSize(MenuSelection[playerid][9], 0.5, 2.5);
   			TextDrawShowForPlayer(playerid, MenuSelection[playerid][9]);
		    TextDrawShowForPlayer(playerid, MenuSelection[playerid][10]);
		    TextDrawShowForPlayer(playerid, MenuSelection[playerid][11]);
		}
		else
		{
		    SelectionCheck[playerid][5] = 0;
		    TextDrawHideForPlayer(playerid, MenuSelection[playerid][9]);
		    TextDrawHideForPlayer(playerid, MenuSelection[playerid][10]);
		    TextDrawHideForPlayer(playerid, MenuSelection[playerid][11]);
		    TextDrawHideForPlayer(playerid, MenuSelection[playerid][12]);
		    TextDrawHideForPlayer(playerid, MenuSelection[playerid][13]);
		}
		return 1;
	}
	if(SelectionCheck[playerid][5] == 1 && SelectionCheck[playerid][7] == 0)
	{
		if(clickedid == MenuSelection[playerid][10])
		{
			new string[30];
			SelectionCheck[playerid][6] = 1;
			TextDrawSetString(MenuSelection[playerid][10], " slot: ~r~~h~rec");
			format(string, sizeof(string), " slot: ~g~~h~%s", WeaponsName[PlayerInfo[playerid][pAutoBuyWeapon][1]]);
			TextDrawSetString(MenuSelection[playerid][11], string);
			format(string, sizeof(string), " slot: ~g~~h~%s", WeaponsName[PlayerInfo[playerid][pAutoBuyWeapon][2]]);
			TextDrawSetString(MenuSelection[playerid][12], string);
			format(string, sizeof(string), " slot: ~g~~h~%s", WeaponsName[PlayerInfo[playerid][pAutoBuyWeapon][3]]);
			return TextDrawSetString(MenuSelection[playerid][13], string);
		}
		else if(clickedid == MenuSelection[playerid][11])
		{
			new string[30];
			SelectionCheck[playerid][6] = 2;
			format(string, sizeof(string), " slot: ~g~~h~%s", WeaponsName[PlayerInfo[playerid][pAutoBuyWeapon][0]]);
			TextDrawSetString(MenuSelection[playerid][10], string);
			TextDrawSetString(MenuSelection[playerid][11], " slot: ~r~~h~rec");
			format(string, sizeof(string), " slot: ~g~~h~%s", WeaponsName[PlayerInfo[playerid][pAutoBuyWeapon][2]]);
			TextDrawSetString(MenuSelection[playerid][12], string);
			format(string, sizeof(string), " slot: ~g~~h~%s", WeaponsName[PlayerInfo[playerid][pAutoBuyWeapon][3]]);
			return TextDrawSetString(MenuSelection[playerid][13], string);
		}
		else if(clickedid == MenuSelection[playerid][12])
		{
			if(PlayerInfo[playerid][pVip] <= 2) return SendClientMessageZS(playerid, COLOR_RED, "У вас должен быть 3 VIP статус для доступа к данным слотам!", 1085);
			new string[30];
			SelectionCheck[playerid][6] = 3;
			format(string, sizeof(string), " slot: ~g~~h~%s", WeaponsName[PlayerInfo[playerid][pAutoBuyWeapon][0]]);
			TextDrawSetString(MenuSelection[playerid][10], string);
			format(string, sizeof(string), " slot: ~g~~h~%s", WeaponsName[PlayerInfo[playerid][pAutoBuyWeapon][1]]);
			TextDrawSetString(MenuSelection[playerid][11], string);
			TextDrawSetString(MenuSelection[playerid][12], " slot: ~r~~h~rec");
			format(string, sizeof(string), " slot: ~g~~h~%s", WeaponsName[PlayerInfo[playerid][pAutoBuyWeapon][3]]);
			return TextDrawSetString(MenuSelection[playerid][13], string);
		}
		else if(clickedid == MenuSelection[playerid][13])
		{
			if(PlayerInfo[playerid][pVip] <= 2) return SendClientMessageZS(playerid, COLOR_RED, "У вас должен быть 3 VIP статус для доступа к данным слотам!", 1085);
			new string[30];
			SelectionCheck[playerid][6] = 4;
			format(string, sizeof(string), " slot: ~g~~h~%s", WeaponsName[PlayerInfo[playerid][pAutoBuyWeapon][0]]);
			TextDrawSetString(MenuSelection[playerid][10], string);
			format(string, sizeof(string), " slot: ~g~~h~%s", WeaponsName[PlayerInfo[playerid][pAutoBuyWeapon][1]]);
			TextDrawSetString(MenuSelection[playerid][11], string);
			format(string, sizeof(string), " slot: ~g~~h~%s", WeaponsName[PlayerInfo[playerid][pAutoBuyWeapon][2]]);
			TextDrawSetString(MenuSelection[playerid][12], string);
			return TextDrawSetString(MenuSelection[playerid][13], " slot: ~r~~h~rec");
		}
	}
	if(clickedid == MenuSelection[playerid][14] && SelectionCheck[playerid][0] == 1)
	{
	    switch(SelectionCheck[playerid][7])
	    {
	        case 1:
	        {
	            PlayerInfo[playerid][pClassWeapons][0] -= 1;
	            if(PlayerInfo[playerid][pClassWeapons][0] < - 0) PlayerInfo[playerid][pClassWeapons][0] = 3;
	            switch(PlayerInfo[playerid][pClassWeapons][0])
        		{
        			case 0: TextDrawSetString(MenuSelection[playerid][10], "slot I:  ~r~~h~NO GADGET");
					case 1: TextDrawSetString(MenuSelection[playerid][10], "slot I:  ~g~~h~MEDIC PACK");
					case 2: TextDrawSetString(MenuSelection[playerid][10], "slot I:  ~g~~h~DEFIBRILLATOR");
					case 3: TextDrawSetString(MenuSelection[playerid][10], "slot I:  ~g~~h~MEDIC BAG");
     			}
	    		if(PlayerInfo[playerid][pClassWeapons][4] == 1)
				{
					PlayerInfo[playerid][pClassWeapons][4] = 0;
					TextDrawSetString(MenuSelection[playerid][8], "LD_CHAT:thumbdn");
				}
	    		return UpdateMysql(playerid, 1);
	        }
	        case 2:
	        {
	        	PlayerInfo[playerid][pClassWeapons][2] -= 1;
	            if(PlayerInfo[playerid][pClassWeapons][2] < - 0) PlayerInfo[playerid][pClassWeapons][2] = 2;
	            switch(PlayerInfo[playerid][pClassWeapons][2])
	            {
             		case 0: TextDrawSetString(MenuSelection[playerid][10], "slot I:  ~r~~h~NO GADGET");
					case 1: TextDrawSetString(MenuSelection[playerid][10], "slot I:  ~g~~h~AMMO PACK");
					case 2: TextDrawSetString(MenuSelection[playerid][10], "slot I:  ~g~~h~AMMO BOX");
	  			}
				if(PlayerInfo[playerid][pClassWeapons][5] == 1)
				{
					PlayerInfo[playerid][pClassWeapons][5] = 0;
					TextDrawSetString(MenuSelection[playerid][8], "LD_CHAT:thumbdn");
				}
				return UpdateMysql(playerid, 1);
	        }
	    }
	    return 1;
 	}
 	if(clickedid == MenuSelection[playerid][15] && SelectionCheck[playerid][0] == 1)
	{
	    switch(SelectionCheck[playerid][7])
	    {
	        case 1:
	        {
	            PlayerInfo[playerid][pClassWeapons][0] += 1;
	            if(PlayerInfo[playerid][pClassWeapons][0] >= 4) PlayerInfo[playerid][pClassWeapons][0] = 0;
             	switch(PlayerInfo[playerid][pClassWeapons][0])
        		{
        			case 0: TextDrawSetString(MenuSelection[playerid][10], "slot I:  ~r~~h~NO GADGET");
					case 1: TextDrawSetString(MenuSelection[playerid][10], "slot I:  ~g~~h~MEDIC PACK");
					case 2: TextDrawSetString(MenuSelection[playerid][10], "slot I:  ~g~~h~DEFIBRILLATOR");
					case 3: TextDrawSetString(MenuSelection[playerid][10], "slot I:  ~g~~h~MEDIC BAG");
     			}
	    		if(PlayerInfo[playerid][pClassWeapons][4] == 1)
				{
					PlayerInfo[playerid][pClassWeapons][4] = 0;
					TextDrawSetString(MenuSelection[playerid][8], "LD_CHAT:thumbdn");
				}
				return UpdateMysql(playerid, 1);
	        }
	        case 2:
	        {
	            PlayerInfo[playerid][pClassWeapons][2] += 1;
	            if(PlayerInfo[playerid][pClassWeapons][2] >= 3) PlayerInfo[playerid][pClassWeapons][2] = 0;
	            switch(PlayerInfo[playerid][pClassWeapons][2])
	            {
             		case 0: TextDrawSetString(MenuSelection[playerid][10], "slot I:  ~r~~h~NO GADGET");
					case 1: TextDrawSetString(MenuSelection[playerid][10], "slot I:  ~g~~h~AMMO PACK");
					case 2: TextDrawSetString(MenuSelection[playerid][10], "slot I:  ~g~~h~AMMO BOX");
	  			}
				if(PlayerInfo[playerid][pClassWeapons][5] == 1)
				{
					PlayerInfo[playerid][pClassWeapons][5] = 0;
					TextDrawSetString(MenuSelection[playerid][8], "LD_CHAT:thumbdn");
	            }
				return UpdateMysql(playerid, 1);
	        }
	    }
	    return 1;
 	}
 	if(clickedid == MenuSelection[playerid][16] && SelectionCheck[playerid][0] == 1)
	{
	    switch(SelectionCheck[playerid][7])
	    {
	        case 1:
	        {
	            PlayerInfo[playerid][pClassWeapons][1] -= 1;
	            if(PlayerInfo[playerid][pClassWeapons][1] < - 0) PlayerInfo[playerid][pClassWeapons][1] = 3;
	            switch(PlayerInfo[playerid][pClassWeapons][1])
        		{
        			case 0: TextDrawSetString(MenuSelection[playerid][11], "slot II:  ~r~~h~NO GADGET");
					case 1: TextDrawSetString(MenuSelection[playerid][11], "slot II:  ~g~~h~MEDIC PACK");
					case 2: TextDrawSetString(MenuSelection[playerid][11], "slot II:  ~g~~h~DEFIBRILLATOR");
					case 3: TextDrawSetString(MenuSelection[playerid][11], "slot II:  ~g~~h~MEDIC BAG");
     			}
	    		if(PlayerInfo[playerid][pClassWeapons][4] == 1)
				{
					PlayerInfo[playerid][pClassWeapons][4] = 0;
					TextDrawSetString(MenuSelection[playerid][8], "LD_CHAT:thumbdn");
				}
	    		return UpdateMysql(playerid, 1);
	        }
	        case 2:
	        {
	            PlayerInfo[playerid][pClassWeapons][3] -= 1;
	            if(PlayerInfo[playerid][pClassWeapons][3] < - 0) PlayerInfo[playerid][pClassWeapons][3] = 2;
	            switch(PlayerInfo[playerid][pClassWeapons][3])
	            {
          	 		case 0: TextDrawSetString(MenuSelection[playerid][11], "slot II: ~r~~h~NO GADGET");
					case 1: TextDrawSetString(MenuSelection[playerid][11], "slot II: ~g~~h~AMMO PACK");
					case 2: TextDrawSetString(MenuSelection[playerid][11], "slot II: ~g~~h~AMMO BOX");
	  			}
				if(PlayerInfo[playerid][pClassWeapons][5] == 1)
				{
					PlayerInfo[playerid][pClassWeapons][5] = 0;
					TextDrawSetString(MenuSelection[playerid][8], "LD_CHAT:thumbdn");
				}
				return UpdateMysql(playerid, 1);
	        }
	    }
	    return 1;
 	}
 	if(clickedid == MenuSelection[playerid][17] && SelectionCheck[playerid][0] == 1)
	{
	    switch(SelectionCheck[playerid][7])
	    {
	        case 1:
	        {
	            PlayerInfo[playerid][pClassWeapons][1] += 1;
	            if(PlayerInfo[playerid][pClassWeapons][1] >= 4) PlayerInfo[playerid][pClassWeapons][1] = 0;
	            switch(PlayerInfo[playerid][pClassWeapons][1])
        		{
        			case 0: TextDrawSetString(MenuSelection[playerid][11], "slot II:  ~r~~h~NO GADGET");
					case 1: TextDrawSetString(MenuSelection[playerid][11], "slot II:  ~g~~h~MEDIC PACK");
					case 2: TextDrawSetString(MenuSelection[playerid][11], "slot II:  ~g~~h~DEFIBRILLATOR");
					case 3: TextDrawSetString(MenuSelection[playerid][11], "slot II:  ~g~~h~MEDIC BAG");
     			}
	    		if(PlayerInfo[playerid][pClassWeapons][4] == 1)
				{
					PlayerInfo[playerid][pClassWeapons][4] = 0;
					TextDrawSetString(MenuSelection[playerid][8], "LD_CHAT:thumbdn");
	            }
	    		return UpdateMysql(playerid, 1);
	        }
	        case 2:
	        {
	            PlayerInfo[playerid][pClassWeapons][3] += 1;
	            if(PlayerInfo[playerid][pClassWeapons][3] >= 3) PlayerInfo[playerid][pClassWeapons][3] = 0;
	            switch(PlayerInfo[playerid][pClassWeapons][3])
	            {
             		case 0: TextDrawSetString(MenuSelection[playerid][11], "slot II: ~r~~h~NO GADGET");
					case 1: TextDrawSetString(MenuSelection[playerid][11], "slot II: ~g~~h~AMMO PACK");
					case 2: TextDrawSetString(MenuSelection[playerid][11], "slot II: ~g~~h~AMMO BOX");
	  			}
				if(PlayerInfo[playerid][pClassWeapons][5] == 1)
				{
					PlayerInfo[playerid][pClassWeapons][5] = 0;
					TextDrawSetString(MenuSelection[playerid][8], "LD_CHAT:thumbdn");
	            }
				return UpdateMysql(playerid, 1);
	        }
	    }
	    return 1;
 	}
	if(clickedid == DuelInfo[playerid][3] && DuelCheck[playerid][2] != 0 && DuelCheck[playerid][1] == 0) return SetDuelMenu(playerid, 1);
	if(clickedid == DuelInfo[playerid][4] && DuelCheck[playerid][2] != 0 && DuelCheck[playerid][1] == 0) return SetDuelMenu(playerid, 2);
	if(clickedid == DuelInfo[playerid][5] || clickedid == ChangeMapp[playerid][14])
	{
	    if(ChangeMap[playerid][0] == 1)
	    {
	        if(ChangeMap[playerid][1] == 1 || ChangeMap[playerid][0] == 9 || ChangeMap[playerid][0] == 16) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	        new nom = ChangeMap[playerid][1];
	 	    switch(nom)
	 	    {
	 	        case 1..7: if(ChangeMapAccount[nom-1] >= 1) ChangeMapAccount[nom-1] -= 1;
	 	    	case 8:
	 			{
	 			    new lang = PlayerInfo[playerid][pRussifier][1];
	 			    if(ClientCheck[playerid] == 1) TextDrawSetString(ChangeMapp[playerid][33], TextDrawInfo[71][lang]);
	 				else TextDrawSetString(DuelInfo[playerid][13], TextDrawInfo[71][lang]);
		        }
		        case 9..22: if(ChangeMapAccount[nom-2] >= 1) ChangeMapAccount[nom-2] -= 1;
			}
	 	    switch(ChoiceTeamCheck[playerid][6])
	 	    {
				case 1:
				{
				    ChangeMap[playerid][1] = 1;
					ChangeMapAccount[0] += 1;
 				}
				case 2:
				{
				    ChangeMap[playerid][1] = 9;
					ChangeMapAccount[7] += 1;
				}
				case 3:
				{
				    ChangeMap[playerid][1] = 16;
					ChangeMapAccount[14] += 1;
				}
	 	    }
	 	    return 1;
	    }
 		if(DuelCheck[playerid][2] == 0 || DuelCheck[playerid][1] != 0) return 1;
        return SetDuelMenu(playerid, 3, 1);
	}
	if(clickedid == DuelInfo[playerid][6] || clickedid == ChangeMapp[playerid][15])
	{
		if(ChangeMap[playerid][0] == 1)
	 	{
	 	    if(ChangeMap[playerid][1] == 2 || ChangeMap[playerid][0] == 10 || ChangeMap[playerid][0] == 17) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	 	    new nom = ChangeMap[playerid][1];
	 	    switch(nom)
	 	    {
	 	        case 1..7: if(ChangeMapAccount[nom-1] >= 1) ChangeMapAccount[nom-1] -= 1;
	 	    	case 8:
	 			{
	 			    new lang = PlayerInfo[playerid][pRussifier][1];
	 			    if(ClientCheck[playerid] == 1) TextDrawSetString(ChangeMapp[playerid][33], TextDrawInfo[71][lang]);
	 				else TextDrawSetString(DuelInfo[playerid][13], TextDrawInfo[71][lang]);
		        }
		        case 9..22: if(ChangeMapAccount[nom-2] >= 1) ChangeMapAccount[nom-2] -= 1;
			}
	        switch(ChoiceTeamCheck[playerid][6])
	 	    {
				case 1:
				{
				    ChangeMap[playerid][1] = 2;
					ChangeMapAccount[1] += 1;
 				}
				case 2:
				{
				    ChangeMap[playerid][1] = 10;
					ChangeMapAccount[8] += 1;
				}
				case 3:
				{
				    ChangeMap[playerid][1] = 17;
					ChangeMapAccount[15] += 1;
				}
	 	    }
	        return 1;
	    }
	    if(DuelCheck[playerid][2] == 0 || DuelCheck[playerid][1] != 0) return 1;
        return SetDuelMenu(playerid, 3, 2);
	}
    if(clickedid == DuelInfo[playerid][7] || clickedid == ChangeMapp[playerid][16])
    {
        if(ChangeMap[playerid][0] == 1)
	 	{
	 	    if(ChangeMap[playerid][1] == 3 || ChangeMap[playerid][0] == 11 || ChangeMap[playerid][0] == 18) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	 	    new nom = ChangeMap[playerid][1];
	 	    switch(nom)
	 	    {
	 	        case 1..7: if(ChangeMapAccount[nom-1] >= 1) ChangeMapAccount[nom-1] -= 1;
	 	    	case 8:
	 			{
	 			    new lang = PlayerInfo[playerid][pRussifier][1];
	 			    if(ClientCheck[playerid] == 1) TextDrawSetString(ChangeMapp[playerid][33], TextDrawInfo[71][lang]);
	 				else TextDrawSetString(DuelInfo[playerid][13], TextDrawInfo[71][lang]);
		        }
		        case 9..22: if(ChangeMapAccount[nom-2] >= 1) ChangeMapAccount[nom-2] -= 1;
			}
	        switch(ChoiceTeamCheck[playerid][6])
	 	    {
				case 1:
				{
				    ChangeMap[playerid][1] = 3;
					ChangeMapAccount[2] += 1;
 				}
				case 2:
				{
				    ChangeMap[playerid][1] = 11;
					ChangeMapAccount[9] += 1;
				}
				case 3:
				{
				    ChangeMap[playerid][1] = 18;
					ChangeMapAccount[16] += 1;
				}
	 	    }
	        return 1;
	 	}
        if(DuelCheck[playerid][2] == 0 || DuelCheck[playerid][1] != 0) return 1;
        return SetDuelMenu(playerid, 4, DuelCheck[playerid][3]);
    }
    if(clickedid == DuelInfo[playerid][8] || clickedid == ChangeMapp[playerid][17])
    {
        if(ChangeMap[playerid][0] == 1)
	 	{
	 	    if(ChangeMap[playerid][1] == 4 || ChangeMap[playerid][0] == 12 || ChangeMap[playerid][0] == 19) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	 	    new nom = ChangeMap[playerid][1];
	 	    switch(nom)
	 	    {
	 	        case 1..7: if(ChangeMapAccount[nom-1] >= 1) ChangeMapAccount[nom-1] -= 1;
	 	    	case 8:
	 			{
	 			    new lang = PlayerInfo[playerid][pRussifier][1];
	 			    if(ClientCheck[playerid] == 1) TextDrawSetString(ChangeMapp[playerid][33], TextDrawInfo[71][lang]);
	 				else TextDrawSetString(DuelInfo[playerid][13], TextDrawInfo[71][lang]);
		        }
		        case 9..22: if(ChangeMapAccount[nom-2] >= 1) ChangeMapAccount[nom-2] -= 1;
			}
	        switch(ChoiceTeamCheck[playerid][6])
	 	    {
				case 1:
				{
				    ChangeMap[playerid][1] = 4;
					ChangeMapAccount[3] += 1;
 				}
				case 2:
				{
				    ChangeMap[playerid][1] = 12;
					ChangeMapAccount[10] += 1;
				}
				case 3:
				{
				    ChangeMap[playerid][1] = 19;
					ChangeMapAccount[17] += 1;
				}
	 	    }
	        return 1;
	 	}
        if(DuelCheck[playerid][2] == 0 || DuelCheck[playerid][1] != 0) return 1;
        return SetDuelMenu(playerid, 5, DuelCheck[playerid][3]);//collision car
	}
    if(clickedid == DuelInfo[playerid][9] || clickedid == ChangeMapp[playerid][18])
    {
        if(ChangeMap[playerid][0] == 1)
	 	{
	 	    if(ChangeMap[playerid][1] == 5 || ChangeMap[playerid][0] == 13 || ChangeMap[playerid][0] == 20) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	 	    new nom = ChangeMap[playerid][1];
	 	    switch(nom)
	 	    {
	 	        case 1..7: if(ChangeMapAccount[nom-1] >= 1) ChangeMapAccount[nom-1] -= 1;
	 	    	case 8:
	 			{
	 			    new lang = PlayerInfo[playerid][pRussifier][1];
         			if(ClientCheck[playerid] == 1) TextDrawSetString(ChangeMapp[playerid][33], TextDrawInfo[71][lang]);
	 				else TextDrawSetString(DuelInfo[playerid][13], TextDrawInfo[71][lang]);
		        }
		        case 9..22: if(ChangeMapAccount[nom-2] >= 1) ChangeMapAccount[nom-2] -= 1;
			}
	        switch(ChoiceTeamCheck[playerid][6])
	 	    {
				case 1:
				{
				    ChangeMap[playerid][1] = 5;
					ChangeMapAccount[4] += 1;
 				}
				case 2:
				{
				    ChangeMap[playerid][1] = 13;
					ChangeMapAccount[11] += 1;
				}
				case 3:
				{
				    ChangeMap[playerid][1] = 20;
					ChangeMapAccount[18] += 1;
				}
	 	    }
	        return 1;
	 	}
        if(DuelCheck[playerid][2] == 0 || DuelCheck[playerid][1] != 0) return 1;//
		switch(DuelCheck[playerid][3])//55RA
		{
		    case 1: SetDuelMenu(playerid, 6, 1);
		    case 2:
		    {// 1 - ускороени 2 - нитро 3 - востановление 4 - круги
		        switch(DuelCheck[playerid][4])
		        {
		            case 1: SetDuelMenu(playerid, 7, 1, 41);
		            case 2: SetDuelMenu(playerid, 7, 4, 41);
		            case 3: SetDuelMenu(playerid, 7, 2, 41);
		        }
		    }
		}
		return 1;
	}
	if(clickedid == DuelInfo[playerid][10] || clickedid == ChangeMapp[playerid][19])
	{
	    if(ChangeMap[playerid][0] == 1)
	 	{
	 	    if(ChangeMap[playerid][1] == 6 || ChangeMap[playerid][0] == 14 || ChangeMap[playerid][0] == 21) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	 	    new nom = ChangeMap[playerid][1];
	 	    switch(nom)
	 	    {
	 	        case 1..7: if(ChangeMapAccount[nom-1] >= 1) ChangeMapAccount[nom-1] -= 1;
	 	    	case 8:
	 			{
	 			    new lang = PlayerInfo[playerid][pRussifier][1];
	 			    if(ClientCheck[playerid] == 1) TextDrawSetString(ChangeMapp[playerid][33], TextDrawInfo[71][lang]);
	 				else TextDrawSetString(DuelInfo[playerid][13], TextDrawInfo[71][lang]);
		        }
		        case 9..22: if(ChangeMapAccount[nom-2] >= 1) ChangeMapAccount[nom-2] -= 1;
			}
	        switch(ChoiceTeamCheck[playerid][6])
	 	    {
				case 1:
				{
				    ChangeMap[playerid][1] = 6;
					ChangeMapAccount[5] += 1;
 				}
				case 2:
				{
				    ChangeMap[playerid][1] = 14;
					ChangeMapAccount[12] += 1;
				}
				case 3:
				{
				    ChangeMap[playerid][1] = 21;
					ChangeMapAccount[19] += 1;
				}
	 	    }
	        return 1;
	 	}
	    if(DuelCheck[playerid][2] == 0 || DuelCheck[playerid][1] != 0 || DuelCheck[playerid][4] == 2) return 1;
	    switch(DuelCheck[playerid][3])//55RA
		{
		    case 2:
		    {
		        switch(DuelCheck[playerid][4])
		        {
		            case 1..2: SetDuelMenu(playerid, 7, 2, 42);
		            case 3: SetDuelMenu(playerid, 7, 3, 42);
		        }
		    }
  		}
	    return 1;
	}
    if(clickedid == DuelInfo[playerid][11] || clickedid == ChangeMapp[playerid][32])
	{
	    if(ChangeMap[playerid][0] == 1)
	 	{
	 	    if(ChangeMap[playerid][1] == 7 || ChangeMap[playerid][0] == 15 || ChangeMap[playerid][0] == 22) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	 	    new nom = ChangeMap[playerid][1];
	 	    switch(nom)
	 	    {
	 	        case 1..7: if(ChangeMapAccount[nom-1] >= 1) ChangeMapAccount[nom-1] -= 1;
	 	    	case 8:
	 			{
	 			    new lang = PlayerInfo[playerid][pRussifier][1];
	 			    if(ClientCheck[playerid] == 1) TextDrawSetString(ChangeMapp[playerid][33], TextDrawInfo[71][lang]);
	 				else TextDrawSetString(DuelInfo[playerid][13], TextDrawInfo[71][lang]);
		        }
		        case 9..22: if(ChangeMapAccount[nom-2] >= 1) ChangeMapAccount[nom-2] -= 1;
			}
	        switch(ChoiceTeamCheck[playerid][6])
	 	    {
				case 1:
				{
				    ChangeMap[playerid][1] = 7;
					ChangeMapAccount[6] += 1;
 				}
				case 2:
				{
				    ChangeMap[playerid][1] = 15;
					ChangeMapAccount[13] += 1;
				}
				case 3:
				{
				    ChangeMap[playerid][1] = 22;
					ChangeMapAccount[20] += 1;
				}
	 	    }
	        return 1; 
	 	}
	 	if(DuelCheck[playerid][2] == 0 || DuelCheck[playerid][1] != 0 || DuelCheck[playerid][4] == 2) return 1;
	 	switch(DuelCheck[playerid][3])//55RA
		{
		    case 2:
		    {
		        switch(DuelCheck[playerid][4])
		        {
		            case 1..2: SetDuelMenu(playerid, 7, 3, 43);
		            case 3: SetDuelMenu(playerid, 7, 5, 43);
		        }
		    }
  		}
		return 1;
	}
	if(clickedid == DuelInfo[playerid][12] && DuelCheck[playerid][2] != 0 && DuelCheck[playerid][1] == 0 && DuelCheck[playerid][4] != 2) return SetDuelMenu(playerid, 7, 4, 44);
	if((clickedid == DuelInfo[playerid][13]) && DuelCheck[playerid][2] != 0 && DuelCheck[playerid][1] == 0) return ShowPlayerDialogZS(playerid, 118, DIALOG_STYLE_INPUT, "Выбор соперника I", "{FFFFFF}Введите ID игрока которого хотите вызвать на дуэль:", "Выбрать", "Отмена");
	if((clickedid == ChangeMapp[playerid][33] || clickedid == DuelInfo[playerid][13]) && ChangeMap[playerid][0] == 1)
	{
	    if(ChangeMap[playerid][1] == 8) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
    	new nom = ChangeMap[playerid][1], lang = PlayerInfo[playerid][pRussifier][1];
	    switch(nom)
	    {
     		case 1..7: if(ChangeMapAccount[nom-1] >= 1) ChangeMapAccount[nom-1] -= 1;
     		case 9..22: if(ChangeMapAccount[nom-2] >= 1) ChangeMapAccount[nom-2] -= 1;
		}
		ChangeMap[playerid][1] = 8;
	 	if(ClientCheck[playerid] == 1) TextDrawSetString(ChangeMapp[playerid][33], TextDrawInfo[39][lang]);
	 	else TextDrawSetString(DuelInfo[playerid][13], TextDrawInfo[39][lang]);
	 	return 1;
 	}
 	if((clickedid == ChangeMapp[playerid][40] || clickedid == DuelInfo[playerid][12]) && ChangeMap[playerid][0] == 1 && (ChoiceTeamCheck[playerid][6] == 1 && Arena[2] >= 7 || ChoiceTeamCheck[playerid][6] == 2 && Arena[9] >= 7 || ChoiceTeamCheck[playerid][6] == 3 && Arena[16] >= 7))
  	{
  	    if(ChangeMap[playerid][1] == 0) return SendClientMessageZS(playerid, COLOR_RED, "Для начала проголосуйте за карту.", 1085);
  	    if(ClientCheck[playerid] == 1)
  	    {
			for(new x = 11; x < 34; ++ x) TextDrawHideForPlayer(playerid, ChangeMapp[playerid][x]);
  			TextDrawHideForPlayer(playerid, ChangeMapp[playerid][40]);
  		}
  		else
	    {
  			TextDrawHideForPlayer(playerid, DuelInfo[playerid][46]);
    		TextDrawHideForPlayer(playerid, DuelInfo[playerid][47]);
    		for(new x = 5; x < 14; ++ x) TextDrawHideForPlayer(playerid, DuelInfo[playerid][x]);
    		TextDrawHideForPlayer(playerid, DuelInfo[playerid][37]);
    		TextDrawHideForPlayer(playerid, DuelInfo[playerid][38]);
    		TextDrawHideForPlayer(playerid, DuelInfo[playerid][39]);
    		TextDrawHideForPlayer(playerid, DuelInfo[playerid][40]);
    		TextDrawHideForPlayer(playerid, DuelInfo[playerid][41]);
    		TextDrawHideForPlayer(playerid, DuelInfo[playerid][42]);
    		TextDrawHideForPlayer(playerid, DuelInfo[playerid][43]);
  		}
		ChangeMap[playerid][0] = 0;
        ChangeMap[playerid][2] = 3;
        TopList[playerid][1] = 0;
  		TopList[playerid][2] = 0;
  		TopList[playerid][3] = 0;
  		TopList[playerid][4] = 0;
  		new string[108];
  		mysql_format(MysqlConnectID, string, sizeof(string), "SELECT name,score1,scores1 FROM profile WHERE scorecheck=%d AND scores1>0 ORDER BY scores1 DESC LIMIT 0,10", ChoiceTeamCheck[playerid][6]);
    	mysql_tquery(MysqlConnectID, string, "OnPlayerForAll", "iiii", playerid, 6, 1, 3);
	}
	if(ChangeMap[playerid][2] >= 2)
	{
		if(clickedid == ScoreArena[playerid][2])
		{
			if(TopList[playerid][1] <= 1) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		    else TopList[playerid][1] -= 10;
		    if(TopList[playerid][2] == 1) TopList[playerid][2] = 0;
			new string[110];
	    	format(string, sizeof(string), "SELECT name,score1,scores1 FROM profile WHERE scorecheck=%d AND scores1>0 ORDER BY scores1 DESC LIMIT %d,%d", ChoiceTeamCheck[playerid][6], TopList[playerid][1], TopList[playerid][1]+10);
			return mysql_tquery(MysqlConnectID, string, "OnPlayerForAll", "iiii", playerid, 6, 1, 1);
		}
		if(clickedid == ScoreArena[playerid][3])
		{
		    if(TopList[playerid][2] == 1 || TopList[playerid][1] >= 30) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	        TopList[playerid][1] += 10;
	        new string[110];
			format(string, sizeof(string), "SELECT name,score1,scores1 FROM profile WHERE scorecheck=%d AND scores1>0 ORDER BY scores1 DESC LIMIT %d,%d", ChoiceTeamCheck[playerid][6], TopList[playerid][1], TopList[playerid][1]+10);
			return mysql_tquery(MysqlConnectID, string, "OnPlayerForAll", "iiii", playerid, 6, 1, 1);
		}
		if(clickedid == ScoreArena[playerid][11])
		{
			if(TopList[playerid][3] <= 1) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		    else TopList[playerid][3] -= 10;
		    if(TopList[playerid][4] == 1) TopList[playerid][4] = 0;
			new string[110];
	    	format(string, sizeof(string), "SELECT name,score2,scores2 FROM profile WHERE scorecheck=%d AND scores2>0 ORDER BY scores2 DESC LIMIT %d,%d", ChoiceTeamCheck[playerid][6], TopList[playerid][3], TopList[playerid][3]+10);
			return mysql_tquery(MysqlConnectID, string, "OnPlayerForAll", "iiii", playerid, 6, 2, 2);
		}
		if(clickedid == ScoreArena[playerid][12])
		{
		    if(TopList[playerid][4] == 1 || TopList[playerid][3] >= 30) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	        TopList[playerid][3] += 10;
	        new string[110];
			format(string, sizeof(string), "SELECT name,score2,scores2 FROM profile WHERE scorecheck=%d AND scores2>0 ORDER BY scores2 DESC LIMIT %d,%d", ChoiceTeamCheck[playerid][6], TopList[playerid][3], TopList[playerid][3]+10);
			return mysql_tquery(MysqlConnectID, string, "OnPlayerForAll", "iiii", playerid, 6, 2, 2);
		}
	}
	if((clickedid == RevivalText[playerid][2] || clickedid == RevivalText[playerid][3]) && PlayerInfo[playerid][pFreeMode] == 0 && Revival[playerid][1] != 0 && DuelCheck[playerid][12] == 0 && Spawned[playerid] == false)
 	{
		if(clickedid == RevivalText[playerid][2])
		{
	  		KillInfoPlayer(Revival[playerid][0], -1, 0, 68, ScoreKill[7]);
			PossSave[playerid][6] = 2.0;
	        PossSave[playerid][4] = float(PlayerInterior[playerid][0]);
	        PossSave[playerid][5] = float(GetPlayerVirtualWorld(playerid));
	        GetPlayerFacingAngle(playerid, PossSave[playerid][3]);
			GetPlayerPos(playerid, PossSave[playerid][0], PossSave[playerid][1], PossSave[playerid][2]);
	        KillsCheck[playerid][0] = 0;
	        KillsCheck[playerid][1] = 0;
	        Revival[playerid][0] = 0;
	        Revival[playerid][1] = 0;
	        Revival[playerid][2] = 30;
			SpawnCheck[playerid][0] = 1;
			SpawnCheck[playerid][1] = gettime()+2;
			SetPlayerHealth(playerid, 100.0);
			RegistrationHealth[playerid][0] = 6;
			for(new x; x < 19; x ++)
  			{
   				if(x <= 11) KillsCheck[playerid][x] = 0;
  				TextDrawHideForPlayer(playerid, InfoKills[playerid][x]);
  				if(x >= 12 && x <= 18) TextDrawBoxColor(InfoKills[playerid][x], -16777080);
			}
  		}
		else
		{
			Revival[playerid][0] = MAX_PLAYERS;
			Revival[playerid][1] = 0;
			KillsCheck[playerid][0] = 5;
			KillsCheck[playerid][11] = 1;
		}
        CancelSelectTextDraw(playerid);
        for(new x; x < 4; ++ x) TextDrawHideForPlayer(playerid, RevivalText[playerid][x]);
		return 1;
 	}
 	if(TopList[playerid][0] == 1)
 	{
		if(clickedid == ListTable[playerid][7])
		{
		    if(TopList[playerid][2] == 1) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		    new string[120];
		    TopList[playerid][1] += 10;
			format(string, sizeof(string), "SELECT name,deaths,kills,lastscore FROM profile WHERE lastscore>10 ORDER BY lastscore DESC LIMIT %d,%d", TopList[playerid][1], TopList[playerid][1]+10);
	    	return mysql_tquery(MysqlConnectID, string, "OnPlayerForAll", "iii", playerid, 7, 1);
		}
		else if(clickedid == ListTable[playerid][8])//:top
		{
			new string[120];
		    if(TopList[playerid][1] <= 1) return PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		    else TopList[playerid][1] -= 10;
		    if(TopList[playerid][2] == 1) TopList[playerid][2] = 0;
			format(string, sizeof(string), "SELECT name,deaths,kills,lastscore FROM profile WHERE lastscore>10 ORDER BY lastscore DESC LIMIT %d,%d", TopList[playerid][1], TopList[playerid][1]+10);
	    	return mysql_tquery(MysqlConnectID, string, "OnPlayerForAll", "iii", playerid, 7, 1);
		}
		else if(clickedid == ListTable[playerid][9])
		{
			TopList[playerid][1] = 0;
			TopList[playerid][2] = 0;
			return mysql_tquery(MysqlConnectID, "SELECT name,deaths,kills,lastscore FROM profile WHERE lastscore>10 ORDER BY lastscore DESC LIMIT 0,10", "OnPlayerForAll", "iii", playerid, 7, 1);
		}
	}
	if(clickedid == Text:INVALID_TEXT_DRAW)
    {
        if(DuelCheck[playerid][2] >= 1 && DuelCheck[playerid][12] == 0)
        {
            if(DuelCheck[playerid][1] != 0 || GetPVarInt(playerid, "DuellCheck[4]") != 0 || DuelCheck[playerid][1] >= 2) return SelectTextDraw(playerid, 0x88AA88FF);
            for(new x; x < 45; ++ x)
			{
				if(x < 29)
				{
					if(x < 1) DuelCheck[playerid][0] = MAX_PLAYERS;
					else DuelCheck[playerid][x] = 0;
				}
				if(x <= 15) TextDrawHideForPlayer(playerid, DuelInfo[playerid][x]);
				else if(x >= 35) TextDrawHideForPlayer(playerid, DuelInfo[playerid][x]);
            }
            DeletePVar(playerid, "DuellCheck[4]");
			SpawnPlayerZS(playerid);
			return 1;
        }
        if(ChangeMap[playerid][2] >= 2 || ChoiceTeamCheck[playerid][0] == 1) return SelectTextDraw(playerid, 0x88AA88FF);
		if(ChangeMap[playerid][3] == 1)
        {
            if(ChoiceTeamCheck[playerid][6] == 1 && Arena[2] != 0 || ChoiceTeamCheck[playerid][6] == 2 && Arena[9] != 0 || ChoiceTeamCheck[playerid][6] == 3 && Arena[16] != 0)
			{
			    SelectTextDraw(playerid, 0x88AA88FF);
				return SendClientMessageZS(playerid, COLOR_RED, "Пожалуйста подождите несколько секунд.", 1085);
   			}
        	ChangeMap[playerid][3] = 0;
            ChangeMap[playerid][4] = 0;
            CancelSelectTextDraw(playerid);
            TogglePlayerSpectatingZS(playerid, 0);
            TextDrawHideForPlayer(playerid, ChangeMapp[playerid][0]);
	        TextDrawHideForPlayer(playerid, ChangeMapp[playerid][1]);
	        TextDrawHideForPlayer(playerid, ChangeMapp[playerid][2]);
	        TextDrawHideForPlayer(playerid, ChangeMapp[playerid][3]);
	        TextDrawHideForPlayer(playerid, ChangeMapp[playerid][4]);
	        return TextDrawHideForPlayer(playerid, DuelInfo[playerid][34]);
        }
        if(Revival[playerid][1] == 1)
        {
	        new string[83];
	    	format(string, sizeof(string), "Игрок {4FDF24}%s {FFFFFF}отказался от медицинской помощи.", PlayerName[playerid]);
	        SendClientMessage(Revival[playerid][0], 0xFFFFFFAA, string);
			Revival[playerid][0] = MAX_PLAYERS;
			Revival[playerid][1] = 0;
			CancelSelectTextDraw(playerid);
			for(new x; x < 9; ++ x) TextDrawHideForPlayer(playerid, RevivalText[playerid][x]);
			return 1;
        }
        if(TopList[playerid][0] == 1)//:top
        {
            for(new x; x < 10; ++ x) TextDrawHideForPlayer(playerid, ListTable[playerid][x]);
            TopList[playerid][0] = 0;
            TopList[playerid][1] = 0;
            return TopList[playerid][2] = 0;
        }
  		if(SelectionCheck[playerid][0] == 1)
  		{
  		    switch(SelectionCheck[playerid][1])
  		    {
				case 0, 2, 4: return ShowModelSelectionMenu(playerid, 255);
				case 1:
				{
				    new string[99];
				    ShowModelSelectionMenu(playerid, 255);
					strcat(string, "Выборочный выбор скина\nПрописной выбор скина\n");
	                if(PlayerInfo[playerid][pYourSkin][1] == 0) strcat(string, "Свой скин на детматче:\t[{FF3535}Отключен{FFFFFF}]");
	                else strcat(string, "Свой скин на детматче:\t[{10F441}Включен{FFFFFF}]");
					return ShowPlayerDialogZS(playerid, 7173, DIALOG_STYLE_LIST, "Сменить скин", string, "Сменить", "Назад");
				}
  		    }
		}
		return 1;
	}
    return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText: playertextid)
{
	if(ProtectionFlooding[playerid][3] >= 40 && PlayerCheatCheck[playerid] == 0) return IsProtectionFlooding(playerid, "PlayerTextDraw", "2.3");
 	else
 	{
 	    ProtectionFlooding[playerid][3] += 1;
 	    if(ProtectionFlooding[playerid][3] >= 35) GameTextForPlayerZS(playerid, "~n~~r~Warning~n~flood", "~r~®e Ѓћyљњ¦e", 2000, 4, 1085);
 	}
	if((SelectionCheck[playerid][0] == 0) || (SelectionCheck[playerid][5] == 2) || (ServerHelpInfo[playerid][1] == 3) || (SelectionCheck[playerid][8] == 5)) return 1;
	for(new x; x < 24; ++ x)
	{
	    if(playertextid != gSelectionItems[playerid][x]) continue;
		switch(SelectionCheck[playerid][1])
  		{
    		case 0:
    		{
				switch(gSelectionItemsTag[playerid][x])
				{
					case 0:
					{
						if(SelectionCheck[playerid][5] == 1)
						{
							if(PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] == 22)//5543
							{
								PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] = 0;
								TextDrawSetString(MenuSelection[playerid][9 + SelectionCheck[playerid][6]], " slot: ~r~~h~Off");
							}
							else
							{
								TextDrawSetString(MenuSelection[playerid][9 + SelectionCheck[playerid][6]], " slot: ~g~~h~9mm");
								PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] = 22;
							}
							new string[63+15], str[15];
							format(str, sizeof(str), "%d,%d,%d,%d,%d", PlayerInfo[playerid][pAutoBuyWeapon][0], PlayerInfo[playerid][pAutoBuyWeapon][1], PlayerInfo[playerid][pAutoBuyWeapon][2], PlayerInfo[playerid][pAutoBuyWeapon][3], PlayerInfo[playerid][pAutoBuyWeapon][4]);
							mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `autobuyweapon`='%s' WHERE `id`='%d'", str, PlayerInfo[playerid][pRoomAccount]);
							return mysql_tquery(MysqlConnectID, string);
						}
						if(WeaponsSlotSpawn[playerid][0] == 22) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже покупали данный вид оружия.", 1085);
						if(PlayerInfo[playerid][pMoney] < MenuBuy[0][2]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки данного оружия.", 1085);
						MoneyInfoCall(playerid, MenuBuy[0][2], 1);
						WeaponsSlotSpawn[playerid][0] = 22;
						GivePlayerWeaponZS(playerid, 22, MenuBuy[0][1]);
						PlayerPlaySound(playerid, 36401, 0.0, 0.0, 0.0);
					}
					case 1:
					{
						if(SelectionCheck[playerid][5] == 1)
						{
							if(PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] == 23)
							{
								PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] = 0;
								TextDrawSetString(MenuSelection[playerid][9 + SelectionCheck[playerid][6]], " slot: ~r~~h~Off");
							}
							else
							{
								TextDrawSetString(MenuSelection[playerid][9 + SelectionCheck[playerid][6]], " slot: ~g~~h~Silenced 9mm");
								PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] = 23;
							}
							new string[63+15], str[15];
							format(str, sizeof(str), "%d,%d,%d,%d,%d", PlayerInfo[playerid][pAutoBuyWeapon][0], PlayerInfo[playerid][pAutoBuyWeapon][1], PlayerInfo[playerid][pAutoBuyWeapon][2], PlayerInfo[playerid][pAutoBuyWeapon][3], PlayerInfo[playerid][pAutoBuyWeapon][4]);
							mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `autobuyweapon`='%s' WHERE `id`='%d'", str, PlayerInfo[playerid][pRoomAccount]);
							return mysql_tquery(MysqlConnectID, string);
						}
						if(WeaponsSlotSpawn[playerid][0] == 23) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже покупали данный вид оружия.", 1085);
						if(PlayerInfo[playerid][pMoney] < MenuBuy[1][2]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки данного оружия.", 1085);
						WeaponsSlotSpawn[playerid][0] = 23;
						MoneyInfoCall(playerid, MenuBuy[1][2], 1);
						GivePlayerWeaponZS(playerid, 23, MenuBuy[1][1]);
						PlayerPlaySound(playerid, 36401, 0.0, 0.0, 0.0);
					}
					case 2:
					{
						if(SelectionCheck[playerid][5] == 1)
						{
							if(PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] == 24)
							{
								PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] = 0;
								TextDrawSetString(MenuSelection[playerid][9 + SelectionCheck[playerid][6]], " slot: ~r~~h~Off");
							}
							else
							{
								TextDrawSetString(MenuSelection[playerid][9 + SelectionCheck[playerid][6]], " slot: ~g~~h~Desert Eagle");
								PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] = 24;
							}
							new string[63+15], str[15];
							format(str, sizeof(str), "%d,%d,%d,%d,%d", PlayerInfo[playerid][pAutoBuyWeapon][0], PlayerInfo[playerid][pAutoBuyWeapon][1], PlayerInfo[playerid][pAutoBuyWeapon][2], PlayerInfo[playerid][pAutoBuyWeapon][3], PlayerInfo[playerid][pAutoBuyWeapon][4]);
							mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `autobuyweapon`='%s' WHERE `id`='%d'", str, PlayerInfo[playerid][pRoomAccount]);
							return mysql_tquery(MysqlConnectID, string);
						}
						if(WeaponsSlotSpawn[playerid][0] == 24) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже покупали данный вид оружия.", 1085);
						if(PlayerInfo[playerid][pMoney] < MenuBuy[2][2]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки данного оружия.", 1085);
						WeaponsSlotSpawn[playerid][0] = 24;
						MoneyInfoCall(playerid, MenuBuy[2][2], 1);
						GivePlayerWeaponZS(playerid, 24, MenuBuy[2][1]);
						PlayerPlaySound(playerid, 36401, 0.0, 0.0, 0.0);
					}
					case 3:
					{
						if(SelectionCheck[playerid][5] == 1)
						{
							if(PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] == 25)
							{
								PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] = 0;
								TextDrawSetString(MenuSelection[playerid][9 + SelectionCheck[playerid][6]], " slot: ~r~~h~Off");
							}
							else
							{
								TextDrawSetString(MenuSelection[playerid][9 + SelectionCheck[playerid][6]], " slot: ~g~~h~Shotgun");
								PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] = 25;
							}
							new string[63+15], str[15];
							format(str, sizeof(str), "%d,%d,%d,%d,%d", PlayerInfo[playerid][pAutoBuyWeapon][0], PlayerInfo[playerid][pAutoBuyWeapon][1], PlayerInfo[playerid][pAutoBuyWeapon][2], PlayerInfo[playerid][pAutoBuyWeapon][3], PlayerInfo[playerid][pAutoBuyWeapon][4]);
							mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `autobuyweapon`='%s' WHERE `id`='%d'", str, PlayerInfo[playerid][pRoomAccount]);
							return mysql_tquery(MysqlConnectID, string);
						}
						if(WeaponsSlotSpawn[playerid][1] == 25) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже покупали данный вид оружия.", 1085);
						if(PlayerInfo[playerid][pMoney] < MenuBuy[3][2]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки данного оружия.", 1085);
						WeaponsSlotSpawn[playerid][1] = 25;
						MoneyInfoCall(playerid, MenuBuy[3][2], 1);
						GivePlayerWeaponZS(playerid, 25, MenuBuy[3][1]);
						PlayerPlaySound(playerid, 36401, 0.0, 0.0, 0.0);
					}
					case 4:
					{
						if(SelectionCheck[playerid][5] == 1)
						{
							if(PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] == 26)
							{
								PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] = 0;
								TextDrawSetString(MenuSelection[playerid][9 + SelectionCheck[playerid][6]], " slot: ~r~~h~Off");
							}
							else
							{
								TextDrawSetString(MenuSelection[playerid][9 + SelectionCheck[playerid][6]], " slot: ~g~~h~Sawnoff Shotgun");
								PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] = 26;
							}
							new string[63+15], str[15];
							format(str, sizeof(str), "%d,%d,%d,%d,%d", PlayerInfo[playerid][pAutoBuyWeapon][0], PlayerInfo[playerid][pAutoBuyWeapon][1], PlayerInfo[playerid][pAutoBuyWeapon][2], PlayerInfo[playerid][pAutoBuyWeapon][3], PlayerInfo[playerid][pAutoBuyWeapon][4]);
							mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `autobuyweapon`='%s' WHERE `id`='%d'", str, PlayerInfo[playerid][pRoomAccount]);
							return mysql_tquery(MysqlConnectID, string);
						}
						if(WeaponsSlotSpawn[playerid][1] == 26) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже покупали данный вид оружия.", 1085);
						if(PlayerInfo[playerid][pMoney] < MenuBuy[4][2]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки данного оружия.", 1085);
						WeaponsSlotSpawn[playerid][1] = 26;
						MoneyInfoCall(playerid, MenuBuy[4][2], 1);
						GivePlayerWeaponZS(playerid, 26, MenuBuy[4][1]);
						PlayerPlaySound(playerid, 36401, 0.0, 0.0, 0.0);
					}
					case 5:
					{
						if(SelectionCheck[playerid][5] == 1)
						{
							if(PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] == 27)
							{
								PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] = 0;
								TextDrawSetString(MenuSelection[playerid][9 + SelectionCheck[playerid][6]], " slot: ~r~~h~Off");
							}
							else
							{
								TextDrawSetString(MenuSelection[playerid][9 + SelectionCheck[playerid][6]], " slot: ~g~~h~Combat Shot");
								PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] = 27;
							}
							new string[63+15], str[15];
							format(str, sizeof(str), "%d,%d,%d,%d,%d", PlayerInfo[playerid][pAutoBuyWeapon][0], PlayerInfo[playerid][pAutoBuyWeapon][1], PlayerInfo[playerid][pAutoBuyWeapon][2], PlayerInfo[playerid][pAutoBuyWeapon][3], PlayerInfo[playerid][pAutoBuyWeapon][4]);
							mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `autobuyweapon`='%s' WHERE `id`='%d'", str, PlayerInfo[playerid][pRoomAccount]);
							return mysql_tquery(MysqlConnectID, string);
						}
						if(WeaponsSlotSpawn[playerid][1] == 27) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже покупали данный вид оружия.", 1085);
						if(PlayerInfo[playerid][pMoney] < MenuBuy[5][2]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки данного оружия.", 1085);
						WeaponsSlotSpawn[playerid][1] = 27;
						MoneyInfoCall(playerid, MenuBuy[5][2], 1);
						GivePlayerWeaponZS(playerid, 27, MenuBuy[5][1]);
						PlayerPlaySound(playerid, 36401, 0.0, 0.0, 0.0);
					}
					case 6:
					{
						if(SelectionCheck[playerid][5] == 1)
						{
							if(PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] == 28)
							{
								PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] = 0;
								TextDrawSetString(MenuSelection[playerid][9 + SelectionCheck[playerid][6]], " slot: ~r~~h~Off");
							}
							else
							{
								TextDrawSetString(MenuSelection[playerid][9 + SelectionCheck[playerid][6]], " slot: ~g~~h~Micro Uzi");
								PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] = 28;
							}
							new string[63+15], str[15];
							format(str, sizeof(str), "%d,%d,%d,%d,%d", PlayerInfo[playerid][pAutoBuyWeapon][0], PlayerInfo[playerid][pAutoBuyWeapon][1], PlayerInfo[playerid][pAutoBuyWeapon][2], PlayerInfo[playerid][pAutoBuyWeapon][3], PlayerInfo[playerid][pAutoBuyWeapon][4]);
							mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `autobuyweapon`='%s' WHERE `id`='%d'", str, PlayerInfo[playerid][pRoomAccount]);
							return mysql_tquery(MysqlConnectID, string);
						}
						if(WeaponsSlotSpawn[playerid][2] == 28) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже покупали данный вид оружия.", 1085);
						if(PlayerInfo[playerid][pMoney] < MenuBuy[6][2]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки данного оружия.", 1085);
						WeaponsSlotSpawn[playerid][2] = 28;
						MoneyInfoCall(playerid, MenuBuy[6][2], 1);
						GivePlayerWeaponZS(playerid, 28, MenuBuy[6][1]);
						PlayerPlaySound(playerid, 36401, 0.0, 0.0, 0.0);
					}
					case 7:
					{
						if(SelectionCheck[playerid][5] == 1)
						{
							if(PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] == 29)
							{
								PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] = 0;
								TextDrawSetString(MenuSelection[playerid][9 + SelectionCheck[playerid][6]], " slot: ~r~~h~Off");
							}
							else
							{
								TextDrawSetString(MenuSelection[playerid][9 + SelectionCheck[playerid][6]], " slot: ~g~~h~MP5");
								PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] = 29;
							}
							new string[63+15], str[15];
							format(str, sizeof(str), "%d,%d,%d,%d,%d", PlayerInfo[playerid][pAutoBuyWeapon][0], PlayerInfo[playerid][pAutoBuyWeapon][1], PlayerInfo[playerid][pAutoBuyWeapon][2], PlayerInfo[playerid][pAutoBuyWeapon][3], PlayerInfo[playerid][pAutoBuyWeapon][4]);
							mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `autobuyweapon`='%s' WHERE `id`='%d'", str, PlayerInfo[playerid][pRoomAccount]);
							return mysql_tquery(MysqlConnectID, string);
						}
						if(WeaponsSlotSpawn[playerid][2] == 29) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже покупали данный вид оружия.", 1085);
						if(PlayerInfo[playerid][pMoney] < MenuBuy[7][2]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки данного оружия.", 1085);
						WeaponsSlotSpawn[playerid][2] = 29;
						MoneyInfoCall(playerid, MenuBuy[7][2], 1);
						GivePlayerWeaponZS(playerid, 29, MenuBuy[7][1]);
						PlayerPlaySound(playerid, 36401, 0.0, 0.0, 0.0);
					}
					case 8:
					{
						if(SelectionCheck[playerid][5] == 1)
						{
							if(PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] == 32)
							{
								PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] = 0;
								TextDrawSetString(MenuSelection[playerid][9 + SelectionCheck[playerid][6]], " slot: ~r~~h~Off");
							}
							else
							{
								TextDrawSetString(MenuSelection[playerid][9 + SelectionCheck[playerid][6]], " slot: ~g~~h~Tec-9");
								PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] = 32;
							}
							new string[63+15], str[15];
							format(str, sizeof(str), "%d,%d,%d,%d,%d", PlayerInfo[playerid][pAutoBuyWeapon][0], PlayerInfo[playerid][pAutoBuyWeapon][1], PlayerInfo[playerid][pAutoBuyWeapon][2], PlayerInfo[playerid][pAutoBuyWeapon][3], PlayerInfo[playerid][pAutoBuyWeapon][4]);
							mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `autobuyweapon`='%s' WHERE `id`='%d'", str, PlayerInfo[playerid][pRoomAccount]);
							return mysql_tquery(MysqlConnectID, string);
						}
						if(WeaponsSlotSpawn[playerid][2] == 32) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже покупали данный вид оружия.", 1085);
						if(PlayerInfo[playerid][pMoney] < MenuBuy[10][2]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки данного оружия.", 1085);
						WeaponsSlotSpawn[playerid][2] = 32;
						MoneyInfoCall(playerid, MenuBuy[10][2], 1);
						GivePlayerWeaponZS(playerid, 32, MenuBuy[10][1]);
						PlayerPlaySound(playerid, 36401, 0.0, 0.0, 0.0);
					}
					case 9:
					{
						if(SelectionCheck[playerid][5] == 1)
						{
							if(PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] == 30)
							{
								PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] = 0;
								TextDrawSetString(MenuSelection[playerid][9 + SelectionCheck[playerid][6]], " slot: ~r~~h~Off");
							}
							else
							{
								TextDrawSetString(MenuSelection[playerid][9 + SelectionCheck[playerid][6]], " slot: ~g~~h~AK-47");
								PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] = 30;
							}
							new string[63+15], str[15];
							format(str, sizeof(str), "%d,%d,%d,%d,%d", PlayerInfo[playerid][pAutoBuyWeapon][0], PlayerInfo[playerid][pAutoBuyWeapon][1], PlayerInfo[playerid][pAutoBuyWeapon][2], PlayerInfo[playerid][pAutoBuyWeapon][3], PlayerInfo[playerid][pAutoBuyWeapon][4]);
							mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `autobuyweapon`='%s' WHERE `id`='%d'", str, PlayerInfo[playerid][pRoomAccount]);
							return mysql_tquery(MysqlConnectID, string);
						}
						if(WeaponsSlotSpawn[playerid][3] == 30) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже покупали данный вид оружия.", 1085);
						if(PlayerInfo[playerid][pMoney] < MenuBuy[8][2]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки данного оружия.", 1085);
						WeaponsSlotSpawn[playerid][3] = 30;
						MoneyInfoCall(playerid, MenuBuy[8][2], 1);
						GivePlayerWeaponZS(playerid, 30, MenuBuy[8][1]);
						PlayerPlaySound(playerid, 36401, 0.0, 0.0, 0.0);
					}
					case 10:
					{
						if(SelectionCheck[playerid][5] == 1)
						{
							if(PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] == 31)
							{
								PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] = 0;
								TextDrawSetString(MenuSelection[playerid][9 + SelectionCheck[playerid][6]], " slot: ~r~~h~Off");
							}
							else
							{
								TextDrawSetString(MenuSelection[playerid][9 + SelectionCheck[playerid][6]], " slot: ~g~~h~M4");
								PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] = 31;
							}
							new string[63+15], str[15];
							format(str, sizeof(str), "%d,%d,%d,%d,%d", PlayerInfo[playerid][pAutoBuyWeapon][0], PlayerInfo[playerid][pAutoBuyWeapon][1], PlayerInfo[playerid][pAutoBuyWeapon][2], PlayerInfo[playerid][pAutoBuyWeapon][3], PlayerInfo[playerid][pAutoBuyWeapon][4]);
							mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `autobuyweapon`='%s' WHERE `id`='%d'", str, PlayerInfo[playerid][pRoomAccount]);
							return mysql_tquery(MysqlConnectID, string);
						}
						if(WeaponsSlotSpawn[playerid][3] == 31) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже покупали данный вид оружия.", 1085);
						if(PlayerInfo[playerid][pMoney] < MenuBuy[9][2]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки данного оружия.", 1085);
						WeaponsSlotSpawn[playerid][3] = 31;
						MoneyInfoCall(playerid, MenuBuy[9][2], 1);
						GivePlayerWeaponZS(playerid, 31, MenuBuy[9][1]);
						PlayerPlaySound(playerid, 36401, 0.0, 0.0, 0.0);
					}
					case 11:
					{
						if(SelectionCheck[playerid][5] == 1)
						{
							if(PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] == 33)
							{
								PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] = 0;
								TextDrawSetString(MenuSelection[playerid][9 + SelectionCheck[playerid][6]], " slot: ~r~~h~Off");
							}
							else
							{
								TextDrawSetString(MenuSelection[playerid][9 + SelectionCheck[playerid][6]], " slot: ~g~~h~Country Rifle");
								PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] = 33;
							}
							new string[63+15], str[15];
							format(str, sizeof(str), "%d,%d,%d,%d,%d", PlayerInfo[playerid][pAutoBuyWeapon][0], PlayerInfo[playerid][pAutoBuyWeapon][1], PlayerInfo[playerid][pAutoBuyWeapon][2], PlayerInfo[playerid][pAutoBuyWeapon][3], PlayerInfo[playerid][pAutoBuyWeapon][4]);
							mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `autobuyweapon`='%s' WHERE `id`='%d'", str, PlayerInfo[playerid][pRoomAccount]);
							return mysql_tquery(MysqlConnectID, string);
						}
						if(WeaponsSlotSpawn[playerid][4] == 33) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже покупали данный вид оружия.", 1085);
						if(PlayerInfo[playerid][pMoney] < MenuBuy[11][2]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки данного оружия.", 1085);
						WeaponsSlotSpawn[playerid][4] = 33;
						MoneyInfoCall(playerid, MenuBuy[11][2], 1);
						GivePlayerWeaponZS(playerid, 33, MenuBuy[11][1]);
						PlayerPlaySound(playerid, 36401, 0.0, 0.0, 0.0);
					}
					case 12:
					{
						if(SelectionCheck[playerid][5] == 1)
						{
							if(PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] == 34)
							{
								PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] = 0;
								TextDrawSetString(MenuSelection[playerid][9 + SelectionCheck[playerid][6]], " slot: ~r~~h~Off");
							}
							else
							{
								TextDrawSetString(MenuSelection[playerid][9 + SelectionCheck[playerid][6]], " slot: ~g~~h~Sniper Rifle");
								PlayerInfo[playerid][pAutoBuyWeapon][SelectionCheck[playerid][6] - 1] = 34;
							}
							new string[63+15], str[15];
							format(str, sizeof(str), "%d,%d,%d,%d,%d", PlayerInfo[playerid][pAutoBuyWeapon][0], PlayerInfo[playerid][pAutoBuyWeapon][1], PlayerInfo[playerid][pAutoBuyWeapon][2], PlayerInfo[playerid][pAutoBuyWeapon][3], PlayerInfo[playerid][pAutoBuyWeapon][4]);
							mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `autobuyweapon`='%s' WHERE `id`='%d'", str, PlayerInfo[playerid][pRoomAccount]);
							return mysql_tquery(MysqlConnectID, string);
						}
						if(WeaponsSlotSpawn[playerid][4] == 34) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже покупали данный вид оружия.", 1085);
						if(PlayerInfo[playerid][pMoney] < MenuBuy[12][2]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки данного оружия.", 1085);
						WeaponsSlotSpawn[playerid][4] = 34;
						MoneyInfoCall(playerid, MenuBuy[12][2], 1);
						GivePlayerWeaponZS(playerid, 34, MenuBuy[12][1]);
						PlayerPlaySound(playerid, 36401, 0.0, 0.0, 0.0);
					}
					case 13:
					{
						if(SelectionCheck[playerid][5] != 0) return 1;
						if(WeaponsSlotSpawn[playerid][5] == 16) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже покупали данный вид оружия.", 1085);
						if(PlayerInfo[playerid][pMoney] < MenuBuy[13][2]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки данного оружия.", 1085);
						WeaponsSlotSpawn[playerid][5] = 16;
						MoneyInfoCall(playerid, MenuBuy[13][2], 1);
						GivePlayerWeaponZS(playerid, 16, MenuBuy[13][1]);
						PlayerPlaySound(playerid, 36401, 0.0, 0.0, 0.0);
					}
					case 14:
					{
						if(SelectionCheck[playerid][5] != 0) return 1;
						if(WeaponsSlotSpawn[playerid][5] == 17) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже покупали данный вид оружия.", 1085);
						if(PlayerInfo[playerid][pMoney] < MenuBuy[14][2]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки данного оружия.", 1085);
						WeaponsSlotSpawn[playerid][5] = 17;
						MoneyInfoCall(playerid, MenuBuy[14][2], 1);
						GivePlayerWeaponZS(playerid, 17, MenuBuy[14][1]);
						PlayerPlaySound(playerid, 36401, 0.0, 0.0, 0.0);
					}
					case 15:
					{//5516
						if(SelectionCheck[playerid][5] != 0) return 1;
						if(PlayerInfo[playerid][pLevel][0] <= 10) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Данный вид оружия временно недоступен.", 1085);
						if(WeaponsSlotSpawn[playerid][5] == 18) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже покупали данный вид оружия.", 1085);
						if(PlayerInfo[playerid][pMoney] < MenuBuy[15][2]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки данного оружия.", 1085);
						WeaponsSlotSpawn[playerid][5] = 18;
						MoneyInfoCall(playerid, MenuBuy[15][2], 1);
						GivePlayerWeaponZS(playerid, 18, MenuBuy[15][1]);
						PlayerPlaySound(playerid, 36401, 0.0, 0.0, 0.0);
					}
					case 16:
					{
						if(SelectionCheck[playerid][5] != 0) return 1;
						if(PlayerInfo[playerid][pVip] == 0 && PlayerInfo[playerid][pInteraction][0] >= 3 || PlayerInfo[playerid][pVip] >= 2 && PlayerInfo[playerid][pInteraction][0] >= 10) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже покупали медицинскую аптечку.", 1085);
						if(PlayerInfo[playerid][pMoney] < MenuBuy[16][2]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки данного оружия.", 1085);
						PlayerInfo[playerid][pInteraction][0] += 1;
						MoneyInfoCall(playerid, MenuBuy[16][2], 1);
						new string[61+22], str[22];
						format(str, sizeof(str), "%d,%d,%d,%d,%d,%d,%d", PlayerInfo[playerid][pInteraction][0], PlayerInfo[playerid][pInteraction][1], PlayerInfo[playerid][pInteraction][2], PlayerInfo[playerid][pInteraction][3], PlayerInfo[playerid][pInteraction][4], PlayerInfo[playerid][pInteraction][5], PlayerInfo[playerid][pInteraction][6]);
						mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `interaction`='%s' WHERE `id`='%d'", str, PlayerInfo[playerid][pRoomAccount]);
						mysql_tquery(MysqlConnectID, string);
						SendClientMessageZS(playerid, 0xFFFFFFFF, "Вы успешно приобрели: {10F441}Медицинскую аптечку{FFFFFF}, для использования нажмите на кнопку {10F441}Y{FFFFFF}.", 1138);
					}
					case 17:
					{
						if(SelectionCheck[playerid][5] != 0) return 1;
						if(GetPVarInt(playerid, "ArmorCheck") == 0)
						{
							SetPVarInt(playerid, "ArmorCheck", 1);
							if(ClientCheck[playerid] == 1)
							{
								PlayerTextDrawSetString(playerid, gSelectionItems[playerid][18], "mdl-2000:weapon17");
								PlayerTextDrawSetString(playerid, gSelectionItems[playerid][19], "mdl-2000:weapon17");
								PlayerTextDrawSetString(playerid, gSelectionItems[playerid][20], "mdl-2000:weapon17");
							}
							else
							{
								PlayerTextDrawHide(playerid, gSelectionItems[playerid][18]);
								PlayerTextDrawHide(playerid, gSelectionItems[playerid][19]);
								PlayerTextDrawHide(playerid, gSelectionItems[playerid][20]);
								PlayerTextDrawSetPreviewModel(playerid, gSelectionItems[playerid][18], floatround(PositionWeaponID[17][0]));
								PlayerTextDrawSetPreviewRot(playerid, gSelectionItems[playerid][18], PositionWeaponID[17][1], PositionWeaponID[17][2], PositionWeaponID[17][3], PositionWeaponID[17][4]);
								PlayerTextDrawSetPreviewModel(playerid, gSelectionItems[playerid][19], floatround(PositionWeaponID[17][0]));
								PlayerTextDrawSetPreviewRot(playerid, gSelectionItems[playerid][19], PositionWeaponID[17][1], PositionWeaponID[17][2], PositionWeaponID[17][3], PositionWeaponID[17][4]);
								PlayerTextDrawSetPreviewModel(playerid, gSelectionItems[playerid][20], floatround(PositionWeaponID[17][0]));
								PlayerTextDrawSetPreviewRot(playerid, gSelectionItems[playerid][20], PositionWeaponID[17][1], PositionWeaponID[17][2], PositionWeaponID[17][3], PositionWeaponID[17][4]);
								PlayerTextDrawShow(playerid, gSelectionItems[playerid][18]);
								PlayerTextDrawShow(playerid, gSelectionItems[playerid][19]);
								PlayerTextDrawShow(playerid, gSelectionItems[playerid][20]);
							}
						}
						else
						{
							SetPVarInt(playerid, "ArmorCheck", 0);
							if(ClientCheck[playerid] == 1)
							{
								PlayerTextDrawSetString(playerid, gSelectionItems[playerid][18], "mdl-2000:weapon18");
								PlayerTextDrawSetString(playerid, gSelectionItems[playerid][19], "mdl-2000:weapon19");
								PlayerTextDrawSetString(playerid, gSelectionItems[playerid][20], "mdl-2000:weapon20");
							}
							else
							{
								PlayerTextDrawHide(playerid, gSelectionItems[playerid][18]);
								PlayerTextDrawHide(playerid, gSelectionItems[playerid][19]);
								PlayerTextDrawHide(playerid, gSelectionItems[playerid][20]);
								PlayerTextDrawSetPreviewModel(playerid, gSelectionItems[playerid][18], floatround(PositionWeaponID[18][0]));
								PlayerTextDrawSetPreviewRot(playerid, gSelectionItems[playerid][18], PositionWeaponID[18][1], PositionWeaponID[18][2], PositionWeaponID[18][3], PositionWeaponID[18][4]);
								PlayerTextDrawSetPreviewModel(playerid, gSelectionItems[playerid][19], floatround(PositionWeaponID[19][0]));
								PlayerTextDrawSetPreviewRot(playerid, gSelectionItems[playerid][19], PositionWeaponID[19][1], PositionWeaponID[19][2], PositionWeaponID[19][3], PositionWeaponID[19][4]);
								PlayerTextDrawSetPreviewModel(playerid, gSelectionItems[playerid][20], floatround(PositionWeaponID[20][0]));
								PlayerTextDrawSetPreviewRot(playerid, gSelectionItems[playerid][20], PositionWeaponID[20][1], PositionWeaponID[20][2], PositionWeaponID[20][3], PositionWeaponID[20][4]);
								PlayerTextDrawShow(playerid, gSelectionItems[playerid][18]);
								PlayerTextDrawShow(playerid, gSelectionItems[playerid][19]);
								PlayerTextDrawShow(playerid, gSelectionItems[playerid][20]);
							}
						}
					}
					case 18:
					{
						if(SelectionCheck[playerid][5] != 0) return 1;
						if(GetPVarInt(playerid, "ArmorCheck") == 1)
						{
							if(PlayerInfo[playerid][pVip] == 0 && PlayerInfo[playerid][pInteraction][4] >= 3 || PlayerInfo[playerid][pVip] >= 2 && PlayerInfo[playerid][pInteraction][4] >= 10) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже покупали бронежилет.", 1085);
							if(PlayerInfo[playerid][pMoney] < MenuBuy[20][2]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки.", 1085);
							PlayerInfo[playerid][pInteraction][4] += 1;
							MoneyInfoCall(playerid, MenuBuy[20][2], 1);
							new string[61+22], str[22];
							format(str, sizeof(str), "%d,%d,%d,%d,%d,%d,%d", PlayerInfo[playerid][pInteraction][0], PlayerInfo[playerid][pInteraction][1], PlayerInfo[playerid][pInteraction][2], PlayerInfo[playerid][pInteraction][3], PlayerInfo[playerid][pInteraction][4], PlayerInfo[playerid][pInteraction][5], PlayerInfo[playerid][pInteraction][6]);
							mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `interaction`='%s' WHERE `id`='%d'", str, PlayerInfo[playerid][pRoomAccount]);
							mysql_tquery(MysqlConnectID, string);
							SendClientMessageZS(playerid, 0xFFFFFFFF, "Вы успешно приобрели стандартный {10F441}Бронежилет{FFFFFF}, для использования нажмите на кнопку {10F441}Y{FFFFFF}.", 1138);
						}
						else
						{
							if(Armour[playerid][4] >= 1) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже покупали шлем.", 1085);
							if(PlayerInfo[playerid][pMoney] < MenuBuy[17][2]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки данного оружия.", 1085);
							Armour[playerid][4] = 100;
							MoneyInfoCall(playerid, MenuBuy[17][2], 1);
							SetPlayerAttachedObjectZS(playerid, 19514);
							SendClientMessageZS(playerid, 0xFFFFFFFF, "Вы успешно приобрели: {10F441}Шлем.", 1138);
						}
					}
					case 19:
					{
						if(SelectionCheck[playerid][5] != 0) return 1;
						if(GetPVarInt(playerid, "ArmorCheck") == 1)
						{
							if(PlayerInfo[playerid][pVip] == 0 && PlayerInfo[playerid][pInteraction][5] >= 3 || PlayerInfo[playerid][pVip] >= 2 && PlayerInfo[playerid][pInteraction][5] >= 10) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже покупали бронежилет.", 1085);
							if(PlayerInfo[playerid][pMoney] < MenuBuy[21][2]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки.", 1085);
							PlayerInfo[playerid][pInteraction][5] += 1;
							MoneyInfoCall(playerid, MenuBuy[21][2], 1);
							SendClientMessageZS(playerid, 0xFFFFFFFF, "Вы успешно приобрели тяжелый {10F441}Бронежилет{FFFFFF}, для использования нажмите на кнопку {10F441}Y{FFFFFF}.", 1138);
						}
						else
						{
							if(PlayerInfo[playerid][pVip] == 0 && PlayerInfo[playerid][pInteraction][2] >= 3 || PlayerInfo[playerid][pVip] >= 2 && PlayerInfo[playerid][pInteraction][2] >= 10) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже покупали Динамит.", 1085);
							if(PlayerInfo[playerid][pMoney] < MenuBuy[18][2]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки дополнительных боеприпасов.", 1085);
							PlayerInfo[playerid][pInteraction][2] += 1;
							MoneyInfoCall(playerid, MenuBuy[18][2], 1);
							SendClientMessageZS(playerid, 0xFFFFFFFF, "Вы успешно приобрели: {10F441}Динамит, и липкий Динамит{FFFFFF}, для использования нажмите на кнопку {10F441}Y{FFFFFF}", 1138);
						}
						new string[61+22], str[22];
						format(str, sizeof(str), "%d,%d,%d,%d,%d,%d,%d", PlayerInfo[playerid][pInteraction][0], PlayerInfo[playerid][pInteraction][1], PlayerInfo[playerid][pInteraction][2], PlayerInfo[playerid][pInteraction][3], PlayerInfo[playerid][pInteraction][4], PlayerInfo[playerid][pInteraction][5], PlayerInfo[playerid][pInteraction][6]);
						mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `interaction`='%s' WHERE `id`='%d'", str, PlayerInfo[playerid][pRoomAccount]);
						mysql_tquery(MysqlConnectID, string);
					}
					case 20:
					{
						if(SelectionCheck[playerid][5] != 0) return 1;
						if(GetPVarInt(playerid, "ArmorCheck") == 1)
						{
							if(PlayerInfo[playerid][pVip] == 0 && PlayerInfo[playerid][pInteraction][6] >= 3 || PlayerInfo[playerid][pVip] >= 2 && PlayerInfo[playerid][pInteraction][6] >= 10) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже покупали бронежилет.", 1085);
							if(PlayerInfo[playerid][pMoney] < MenuBuy[22][2]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки.", 1085);
							PlayerInfo[playerid][pInteraction][6] += 1;
							MoneyInfoCall(playerid, MenuBuy[22][2], 1);
							SendClientMessageZS(playerid, 0xFFFFFFFF, "Вы успешно приобрели сверхтяжелый {10F441}Бронежилет{FFFFFF}, для использования нажмите на кнопку {10F441}Y{FFFFFF}.", 1138);
						}
						else
						{
							if(PlayerInfo[playerid][pVip] == 0 && PlayerInfo[playerid][pInteraction][3] >= 3 || PlayerInfo[playerid][pVip] >= 2 && PlayerInfo[playerid][pInteraction][3] >= 10) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже покупали Наземную мину.", 1085);
							if(PlayerInfo[playerid][pMoney] < MenuBuy[19][2]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки дополнительных боеприпасов.", 1085);
							PlayerInfo[playerid][pInteraction][3] += 1;
							MoneyInfoCall(playerid, MenuBuy[19][2], 1);
							SendClientMessageZS(playerid, 0xFFFFFFFF, "Вы успешно приобрели: {10F441}Наземную мину{FFFFFF}, для использования нажмите на кнопку {10F441}Y{FFFFFF}", 1138);
						}
						new string[61+22], str[22];
						format(str, sizeof(str), "%d,%d,%d,%d,%d,%d,%d", PlayerInfo[playerid][pInteraction][0], PlayerInfo[playerid][pInteraction][1], PlayerInfo[playerid][pInteraction][2], PlayerInfo[playerid][pInteraction][3], PlayerInfo[playerid][pInteraction][4], PlayerInfo[playerid][pInteraction][5], PlayerInfo[playerid][pInteraction][6]);
						mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `interaction`='%s' WHERE `id`='%d'", str, PlayerInfo[playerid][pRoomAccount]);
						mysql_tquery(MysqlConnectID, string);
					}
					case 21:
					{
						if(SelectionCheck[playerid][8] == 5 || SelectionCheck[playerid][7] == 2 || SelectionCheck[playerid][5] != 0) return 1;
						if(SelectionCheck[playerid][8] == 1)
						{
							SelectionCheck[playerid][7] = 0;
							SelectionCheck[playerid][8] = 0;
							TextDrawHideForPlayer(playerid, MenuSelection[playerid][9]);
							TextDrawHideForPlayer(playerid, MenuSelection[playerid][10]);
							TextDrawHideForPlayer(playerid, MenuSelection[playerid][11]);
							TextDrawHideForPlayer(playerid, MenuSelection[playerid][14]);
							TextDrawHideForPlayer(playerid, MenuSelection[playerid][15]);
							TextDrawHideForPlayer(playerid, MenuSelection[playerid][16]);
							TextDrawHideForPlayer(playerid, MenuSelection[playerid][17]);
							TextDrawLetterSize(MenuSelection[playerid][9], 0.500000, 6.100000);
							TextDrawSetSelectable(MenuSelection[playerid][10], true);
							TextDrawSetSelectable(MenuSelection[playerid][11], true);
							if(PlayerInfo[playerid][pLevel][0] >= 3)
							{
								TextDrawSetString(MenuSelection[playerid][8], "LD_CHAT:badchat");
								TextDrawShowForPlayer(playerid, MenuSelection[playerid][7]);
							}
							else TextDrawHideForPlayer(playerid, MenuSelection[playerid][8]);
						}
						else
						{
							SelectionCheck[playerid][8] = 5;
							ShowPlayerDialogZS(playerid, 121, DIALOG_STYLE_MSGBOX, "Гаджет I", "{FFFFFF}Медицинский портфель, позволяет спасти поверженных товарищей.\nВ правом углу вы можете выбрать содержимое гаджета.\n\nДефибриллятор - позволяет спасать товарищей электрическим током.\nПодойдите в приседе и удерживайте правую кнопку Мыши + LALT.", "Дальше", "Назад");
						}
						return 1;
					}
					case 22://55155
					{
						if(SelectionCheck[playerid][8] == 5 || SelectionCheck[playerid][7] == 1 || SelectionCheck[playerid][5] != 0) return 1;
						if(SelectionCheck[playerid][8] == 1)
						{
							SelectionCheck[playerid][7] = 0;
							SelectionCheck[playerid][8] = 0;
							TextDrawHideForPlayer(playerid, MenuSelection[playerid][9]);
							TextDrawHideForPlayer(playerid, MenuSelection[playerid][10]);
							TextDrawHideForPlayer(playerid, MenuSelection[playerid][11]);
							TextDrawHideForPlayer(playerid, MenuSelection[playerid][14]);
							TextDrawHideForPlayer(playerid, MenuSelection[playerid][15]);
							TextDrawHideForPlayer(playerid, MenuSelection[playerid][16]);
							TextDrawHideForPlayer(playerid, MenuSelection[playerid][17]);
							TextDrawLetterSize(MenuSelection[playerid][9], 0.500000, 6.100000);
							TextDrawSetSelectable(MenuSelection[playerid][10], true);
							TextDrawSetSelectable(MenuSelection[playerid][11], true);
							if(PlayerInfo[playerid][pLevel][0] >= 3)
							{
								TextDrawSetString(MenuSelection[playerid][8], "LD_CHAT:badchat");
								TextDrawShowForPlayer(playerid, MenuSelection[playerid][7]);
							}
							else TextDrawHideForPlayer(playerid, MenuSelection[playerid][8]);
						}
						else
						{
							SelectionCheck[playerid][8] = 5;
							ShowPlayerDialogZS(playerid, 122, DIALOG_STYLE_MSGBOX, "Гаджет II", "{FFFFFF}С помощью боеприпасов, бойцы находящиеся поблизости, смогут запастись всем, необходимым для любых видов оружия и гаджетов.\nВ правом углу вы можете выбрать содержимое гаджета.\n\nБоенабор - одноразовый набор, позволяющий немного пополнить запас одному товарищу.\nБоеприпасы - позволяют пополнить весь запас выбранного оружия.", "Дальше", "Назад");
						}
					}
				}
				ShowModelSelectionMenu(playerid, 256, 2);
			}
   			case 1:
		    {
		    	new string[64], str[7];
			    ShowModelSelectionMenu(playerid, 255);
	    		PlayerInfo[playerid][pYourSkin][0] = gSelectionItemsTag[playerid][x];
				if(PlayerInfo[playerid][pFreeMode] == 1 && GetPlayerSkin(playerid) != gSelectionItemsTag[playerid][x]) SetPlayerSkinZS(playerid, gSelectionItemsTag[playerid][x]);
				else if(PlayerInfo[playerid][pYourSkin][1] == 1) SetPlayerSkinZS(playerid, gSelectionItemsTag[playerid][x]);
				format(string, sizeof(string), "{FFFFFF}Вы успешно изменили свой скин на {10F441}%d{FFFFFF}.", gSelectionItemsTag[playerid][x]);
	   			ShowPlayerDialogZS(playerid, 7193, DIALOG_STYLE_MSGBOX, "Сменить скин", string, "Назад", "Закрыть");
	   			format(str, sizeof(str), "%d,%d", PlayerInfo[playerid][pYourSkin][0], PlayerInfo[playerid][pYourSkin][1]);
				mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `yourskin`='%s' WHERE `id`='%d'", str, PlayerInfo[playerid][pRoomAccount]);
				mysql_tquery(MysqlConnectID, string);
			}
		 	case 2:
		    {
		  		if(AutoCheck[playerid] != 0) DestroyVehicle(AutoCheck[playerid]);
 			  	new string[52], Float: Pos[4];
           		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		     	GetPlayerFacingAngle(playerid, Pos[3]);
       			AutoCheck[playerid] = CreateVehicle(gSelectionItemsTag[playerid][x], Pos[0], Pos[1], Pos[2], Pos[3], random(255), random(255), -1);
       			SetVehicleVirtualWorld(AutoCheck[playerid], GetPlayerVirtualWorld(playerid));
       			format(string, sizeof(string), "FM %dX%d", playerid, GetPlayerVirtualWorld(playerid));
				SetVehicleNumberPlate(AutoCheck[playerid], string);
				PutPlayerInVehicle(playerid, AutoCheck[playerid], 0);
				SetVehicleParamsEx(AutoCheck[playerid], 1, 0, 0, 0, 0, 0, 0);
				ShowModelSelectionMenu(playerid, 255);
				format(string, sizeof(string), "Автомобиль {10F441}%d {FFFFFF}был успешно создан.", gSelectionItemsTag[playerid][x]);
    			SendClientMessage(playerid, 0xFFFFFFFF, string);
	    	}
	    	case 3:
		    {
      			new string[21], slot;
				if(gSelectionItemsTag[playerid][x] >= 16) slot = 7;
    			DuelCheck[playerid][7] = floatround(PositionWeaponID[gSelectionItemsTag[playerid][x]+slot][5]);
				SetPVarInt(playerid, "DuellCheck[4]", 0);
   				ShowModelSelectionMenu(playerid, 255, 1);
   				for(new z; z < 45; ++ z)
   				{
   				    if(x != 14) TextDrawShowForPlayer(playerid, DuelInfo[playerid][z]);
   				    if(z == 15) z = 34;
   				}
				format(string, sizeof(string), "~y~%s", WeaponsName[DuelCheck[playerid][7]]);
				TextDrawSetString(DuelInfo[playerid][39], string);
    		}
			case 4:
			{
   				new VehicleID = GetPlayerVehicleID(playerid);
   				if(VehicleID <= 0)
				{
					ShowModelSelectionMenu(playerid, 255, 0);
					SendClientMessage(playerid, -1, "Вы должны находиться в траспорте!");
				}
   				else AddVehicleComponent(VehicleID, gSelectionItemsTag[playerid][x]);
			}
   		}
   		break;
	}
	return 1;
}

public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
    /*if(ChatTimeStop[playerid] > gettime())
	{
	    ChatTimeStop[playerid] = gettime()+3;
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		ProtectionFlooding[playerid][2] += 1;
		if(ProtectionFlooding[playerid][2] >= 8) return IsProtectionFlooding(playerid, "командами", "2.2");
		else SendClientMessage(playerid, COLOR_RED, "Не пишите команды слишком часто!");
		return 0;
	}
	else ChatTimeStop[playerid] = gettime() + 3;*/
	if(PlayerCheatCheck[playerid] == 1 || AntiBreik[playerid] == 1 || PlayerLogged[playerid] == 0 || ChangeMap[playerid][2] != 0 || flags >= 2 && PlayerInfo[playerid][pAdmin] < flags) return 0;
	if(Spawned[playerid] == false)
	{
 		SendClientMessageZS(playerid, COLOR_RED, "Вы не можете использовать команды в данный момент, вы не заспавлены!", 1085);
 		return 0;
 	}
	if(PlayerInfo[playerid][pPrison] >= 1)
	{
		SendClientMessageZS(playerid, COLOR_RED, "Вы не можете использовать команды в данный момент, вы находитесь в Тюрьме!", 1085);
		return 0;
 	}
	if(DuelCheck[playerid][3] != 0)
	{
		SendClientMessageZS(playerid, COLOR_RED, "Вы не можете использовать команды в данный момент, вы находитесь на Дуэли!", 1085);
		return 0;
 	}
	if(TuningCheck[playerid] == 1)
	{
		SendClientMessageZS(playerid, COLOR_RED, "Вы не можете использовать команды в данный момент, вы находитесь в Тюнинг салоне!", 1085);
    	return 0;
 	}
	if(SelectionCheck[playerid][0] >= 1)
	{
		SendClientMessageZS(playerid, COLOR_RED, "Вы не можете использовать команды в данный момент, у вас открыт меню выбора!", 1085);
    	return 0;
 	}
	if(ChoiceItemsCheck[playerid][0] == 1)
	{
		SendClientMessageZS(playerid, COLOR_RED, "Вы не можете использовать команды в данный момент, у вас открыт меню взаимодействий!", 1085);
    	return 0;
 	}
	if(ForbiddenArea[playerid][0] != 0)
	{
		SendClientMessage(playerid, COLOR_RED, "Сначала вернитесь в зону действий!");
	    return 0;
 	}
	return 1;
}
public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags)
{
	if(result == -1)
	{
		SendClientMessage(playerid, 0xFFFFFFFF, "SERVER: Unknown command.");
		return 0;
 	}
    return 1;
}

cmd:vadm(playerid, params[])
{
    if(sscanf(params, "iii", params[0], params[1], params[2])) return SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /vadm ID игрока | уровень(0-5) | кол-во дней (0 - бессрочно)");
    if(params[1] > 5 || params[1] < 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы ввели неверный уровень административных прав, используйте от 0 и до 5.");
    if(params[2] < 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Максимум от 0 до ....");
    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным тобой ID не найден!");
   	if(PlayerLogged[params[0]] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не зашел в свой аккаунт!");
	new string[110];
	format(string, sizeof(string), "Администратор %s (ID: %d) выдал вам Административные права %d уровня на %d дней", PlayerName[playerid], playerid, params[1], params[2]);
    SendClientMessage(params[0], 0x1E90FFAA, string);
    PlayerInfo[params[0]][pAdmin] = params[1];
    PlayerInfo[params[0]][pAdminTime] = getdate()+params[2];
    
	format(string, sizeof(string), "Вы выдали Административные права %d уровня на %d дней игроку %s (ID: %d)", params[1], params[2], PlayerName[params[0]], params[0]);
	SendClientMessage(playerid, 0x10F441AA, string);
	mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET admin=%d,admintime=%d WHERE id=%d", params[1], getdate()+params[2], PlayerInfo[params[0]][pRoomAccount]);
	return mysql_tquery(MysqlConnectID, string);
}
cmd:vvip(playerid, params[])
{
    if(sscanf(params, "iii", params[0], params[1], params[2])) return SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /vvip ID игрока | уровень(0-3) | кол-во дней (0 - бессрочно)");
    if(params[1] > 3 || params[1] < 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы ввели неверный уровень VIP привилегий, используйте от 0 и до 3.");
    if(params[2] < 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Максимум от 0 до ....");
    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным тобой ID не найден!");
   	if(PlayerLogged[params[0]] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не зашел в свой аккаунт!");
	new string[98];
	format(string, sizeof(string), "Администратор %s (ID: %d) выдал вам VIP права %d уровня на %d дней", PlayerName[playerid], playerid, params[1], params[2]);
    SendClientMessage(params[0], 0x1E90FFAA, string);
    PlayerInfo[params[0]][pVip] = params[1];
    PlayerInfo[params[0]][pVipTime] = getdate()+params[2];
    
	format(string, sizeof(string), "Вы выдали VIP права %d уровня на %d дней игроку %s (ID: %d)", params[1], params[2], PlayerName[params[0]], params[0]);
	SendClientMessage(playerid, 0x10F441AA, string);
	mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET vip=%d,viptime=%d WHERE id=%d", params[1], getdate()+params[2], PlayerInfo[params[0]][pRoomAccount]);
	return mysql_tquery(MysqlConnectID, string);
}
flags:alevel(4);
cmd:alevel(playerid, params[])
{
    if(sscanf(params, "iii", params[0], params[1], params[2])) return SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /alevel ID игрока | тип (0 level | 1 XP) | кол во");
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным тобой ID не найден!");
   	if(PlayerLogged[params[0]] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не зашел в свой аккаунт!");
   	if(params[1] < 0 && params[1] > 2) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> тип (0 level | 1 XP)!");
   	if(params[1] == 0 && params[2] > MAX_LEVEL-1) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Максимальный level 20!");
	new string[89];
	format(string, sizeof(string), "Ваш ранг был изменен администратором %s [ID: %d] на {10F441}%d", PlayerName[playerid], playerid, params[1]);
    SendClientMessage(params[0], 0x1E90FFAA, string);
    if(params[1] == 0) format(string, sizeof(string), "Вы выдали игроку %s [ID: %d] %d ранг", PlayerName[params[0]], params[0], params[2]);
    else format(string, sizeof(string), "Вы выдали игроку %s [ID: %d] %d EXP", PlayerName[params[0]], params[0], params[2]);
	SendClientMessage(playerid, 0x10F441AA, string);
	PlayerInfo[params[0]][pLevel][params[1]] = params[2];
	if(params[1] == 0) SetPlayerScore(params[0], params[2]);
	mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET level%d=%d WHERE id=%d", params[1], params[2], PlayerInfo[params[0]][pRoomAccount]);
	return mysql_tquery(MysqlConnectID, string);
}
flags:money(4);
cmd:money(playerid, params[])
{
    if(sscanf(params, "ii", params[0], params[1])) return SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /уденьги [ID игрока] [количество денег]");
	if(params[1] > 1000000000) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы ввели неверную сумму денег. Используйте от 0 до 1 000 0000 $");
    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным тобой ID не найден!");
    if(PlayerLogged[params[0]] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не зашел в свой аккаунт!");
	MoneyInfoCall(params[0], params[1], 0);
	PlayerPlaySound(params[0], 4201, 0.0, 0.0, 0.0);
	new string[105];
	format(string, sizeof(string), "Администратор %s [ID: %d] выдал вам сумму денег в размере {10F441}%d$", PlayerName[playerid], playerid, params[1]);
    SendClientMessage(params[0], 0x1e90ffAA, string);
	format(string, sizeof(string), "Вы выдали игроку %s [ID: %d] сумму денег в размере %d$", PlayerName[params[0]], params[0], params[1]);
	return SendClientMessage(playerid,0x10F441AA, string);
}

cmd:award(playerid, params[])
{
	if(sscanf(params, "ii", params[0], params[1])) return SendClientMessage(playerid, 0xFFFFFFAA, "ID игрока | Cумма вознаграждения");
	if(params[1] < 100 || params[1] > 30000) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Максимальная сумма от $100 до $30 000!");
	if(PlayerInfo[playerid][pMoney] < params[1]) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> У вас нет столько средств!");
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным ID не найден!");
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным ID не найден!");
	if(PlayerLogged[params[0]] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не зашел в свой аккаунт!");
	if(Spawned[params[0]] == false) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не заспавнился!");
	if(OrderKills[params[0]][0] >= 1) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данного игрока уже кто-то заказал!");
	MoneyInfoCall(playerid, params[1], 1);
	OrderKills[params[0]][0] = params[1];
	OrderKills[params[0]][1] = gettime()+6*60;
	new string[76+22+10];
	format(string, sizeof(string), "За голову {4FDF24}%s {FFFFFF}назначено вознаграждение в размере {4FDF24}%s$", PlayerName[params[0]], AddCommasToInt(OrderKills[params[0]][0]));
 	return ABroadCast(0xFFFFFFFF, string, 1, 0);
}
cmd:client(playerid, params[])
{
    if(ClientCheck[playerid] == 1)
	{
		ClientCheck[playerid] = 0;
		SendClientMessage(playerid, -1, "Включен функционал клиента 0.3.7");
 	}
    else
	{
		ClientCheck[playerid] = 1;
		SendClientMessage(playerid, -1, "Включен функционал клиента 0.3.8 | 0.3 DL");
  	}
	return 1;
}
flags:re(2);
cmd:re(playerid, params[])
{
    if(sscanf(params, "i", Observation[playerid][0])) return SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /re [ID игрока]");
    if(!IsPlayerConnected(Observation[playerid][0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным ID не найден!");
	if(Observation[playerid][0] == playerid) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете наблюдать за самим собой!");
	if(PlayerLogged[Observation[playerid][0]] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не зашел в свой аккаунт!");
	if(Spawned[Observation[playerid][0]] == false) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не заспавнился!");
	if((DuelCheck[Observation[playerid][0]][2] != 0) || (DuelCheck[Observation[playerid][0]][12] >= 1 && DuelCheck[Observation[playerid][0]][13] != 4)) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находится в настройках дуэля!");
	if(PlayerInfo[playerid][pFreeMode] == 0)
	{
 		MenuProcurementTime[playerid] = 0;
 		TextDrawHideForPlayer(playerid, MenuProcurementIcon[playerid][0]);
 		TextDrawHideForPlayer(playerid, MenuProcurementIcon[playerid][1]);
 		TextDrawHideForPlayer(playerid, ArenaInfo[playerid][10]);
 		TextDrawHideForPlayer(playerid, ArenaInfo[playerid][11]);
	}
	else
	{
		PossSave[playerid][6] = 1.0;
 		PossSave[playerid][4] = float(PlayerInterior[playerid][0]);
	    PossSave[playerid][5] = float(GetPlayerVirtualWorld(playerid));
	    GetPlayerFacingAngle(playerid, PossSave[playerid][3]);
		GetPlayerPos(playerid, PossSave[playerid][0], PossSave[playerid][1], PossSave[playerid][2]);
	}
	Observation[playerid][1] = 1;
	Spawned[playerid] = false;
	TextDrawShowForPlayer(playerid, ArenaInfo[playerid][0]);
	TextDrawShowForPlayer(playerid, ArenaInfo[playerid][1]);
	TextDrawShowForPlayer(playerid, ArenaInfo[playerid][2]);
	TextDrawShowForPlayer(playerid, ArenaInfo[playerid][3]);
	if(PlayerInfo[playerid][pInfoText][3] == 0) TextDrawHideForPlayer(playerid, HealthPure[playerid]);
	DestroyDynamicArea(ForbiddenArea[playerid][1]);
	TextDrawShowForPlayer(playerid, MenuProcurementIcon[playerid][1]);
	if(PlayerInfo[playerid][pRussifier][1] == 0) TextDrawSetString(MenuProcurementIcon[playerid][1], "Stop~n~Spectate~n~~k~~PED_SPRINT~");
	else TextDrawSetString(MenuProcurementIcon[playerid][1], "ўЁќ¦њ њџ~n~®a—ћ«љe®њ¬~n~~k~~PED_SPRINT~");
	TextDrawShowForPlayer(playerid, ArenaInfo[playerid][3]);
	SetPlayerInteriorZS(playerid, GetPlayerInterior(Observation[playerid][0]));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(Observation[playerid][0]));
	TogglePlayerSpectatingZS(playerid, 1);
	if(IsPlayerInAnyVehicle(Observation[playerid][0]))
	{
		Observation[playerid][2] = 2;
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(Observation[playerid][0]));
	}
	else
	{
 		Observation[playerid][2] = 1;
		PlayerSpectatePlayer(playerid, Observation[playerid][0]);
	}
	return 1;
}
cmd:duel(playerid, params[])
{
	if(FrozenCheck[playerid] == 1) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете использовать данную команду пока заморожены!");
	if(PlayerInfo[playerid][pDuel][0] == 1) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> У вас закрыт доступ к вызову игроков на дуэль!");
	DuelCheck[playerid][0] = MAX_PLAYERS;
	DuelCheck[playerid][1] = 0;
 	DuelCheck[playerid][2] = gettime() + 240;
 	DuelCheck[playerid][3] = 1;// 		1 перестрелка | 2 гонка
    DuelCheck[playerid][4] = 1;//		Карта
    DuelCheck[playerid][5] = 9;//		Время
    DuelCheck[playerid][6] = 13;//		Погода
    DuelCheck[playerid][7] = 0;//		Оружие
    DuelCheck[playerid][8] = 100;//     Здоровье
    DuelCheck[playerid][9] = 0;//       Броня
    DuelCheck[playerid][10] = 0;// 		Пусто
    DuelCheck[playerid][11] = 0;// 		Пусто
    DuelCheck[playerid][20] = 0;// 		Пусто
    DuelCheck[playerid][12] = 0;
    DuelCheck[playerid][13] = 0;
    DuelCheck[playerid][14] = 0;
    DuelCheck[playerid][15] = 0;
    DuelCheck[playerid][16] = 0;
    DuelCheck[playerid][17] = 0;
    DuelCheck[playerid][18] = 0;
    DuelCheck[playerid][19] = 0;
    DuelCheck[playerid][21] = 0;
    DuelCheck[playerid][22] = 0;
    DuelCheck[playerid][23] = 0;
    DuelCheck[playerid][24] = 0;
    DuelCheck[playerid][25] = 500 + playerid;
    DuelCheck[playerid][26] = 0;
    DuelCheck[playerid][27] = 0;
    DuelCheck[playerid][28] = 0;
	SetPlayerInteriorZS(playerid, 0);
	TogglePlayerControllableZS(playerid, 0);
	new lang = PlayerInfo[playerid][pRussifier][1];
	SetPlayerVirtualWorld(playerid, DuelCheck[playerid][25]);
	SetPlayerTime(playerid, DuelCheck[playerid][5], 0);
	SetPlayerWeather(playerid, DuelCheck[playerid][6]);
	if(PlayerInfo[playerid][pServerHelp][1] == 0)//RaceS
	{
 		SetPVarInt(playerid, "DuelHelp[0]", 1);
 		SetPVarInt(playerid, "DuelHelp[1]", gettime() + 2);
		ShowPlayerDialogZS(playerid, 142, DIALOG_STYLE_MSGBOX, "Помощь по Дуэлю I", "{FFFFFF}Добро пожаловать в настройки Дуэля.\n\nДуэль это поединок между двумя игроками, цель которого — удовлетворить желание одного из дуэлянтов.\nЕсть три класса дуэля: Пистолетный, Гоночный, Мастер оружия.\nВ каждом классе дуэля вы можете выбрать Класс дуэля, место проведения дуэля(карта), Время, Погоду.", "Дальше", "");
	}
	else
	{
		SelectTextDraw(playerid, 0x88AA88FF);
		TextDrawShowForPlayer(playerid, DuelInfo[playerid][0]);
		TextDrawShowForPlayer(playerid, DuelInfo[playerid][1]);
		TextDrawShowForPlayer(playerid, DuelInfo[playerid][2]);
		TextDrawShowForPlayer(playerid, DuelInfo[playerid][3]);
		TextDrawShowForPlayer(playerid, DuelInfo[playerid][4]);
		TextDrawShowForPlayer(playerid, DuelInfo[playerid][5]);
		TextDrawShowForPlayer(playerid, DuelInfo[playerid][6]);
		TextDrawShowForPlayer(playerid, DuelInfo[playerid][7]);
		TextDrawShowForPlayer(playerid, DuelInfo[playerid][8]);
		TextDrawShowForPlayer(playerid, DuelInfo[playerid][9]);
		TextDrawShowForPlayer(playerid, DuelInfo[playerid][10]);
		TextDrawShowForPlayer(playerid, DuelInfo[playerid][11]);
		TextDrawShowForPlayer(playerid, DuelInfo[playerid][12]);
		TextDrawShowForPlayer(playerid, DuelInfo[playerid][13]);
		TextDrawShowForPlayer(playerid, DuelInfo[playerid][15]);
		TextDrawShowForPlayer(playerid, DuelInfo[playerid][35]);
		TextDrawShowForPlayer(playerid, DuelInfo[playerid][36]);
		TextDrawShowForPlayer(playerid, DuelInfo[playerid][37]);
		TextDrawShowForPlayer(playerid, DuelInfo[playerid][38]);
		TextDrawShowForPlayer(playerid, DuelInfo[playerid][39]);
		TextDrawShowForPlayer(playerid, DuelInfo[playerid][40]);
		TextDrawShowForPlayer(playerid, DuelInfo[playerid][41]);
		TextDrawShowForPlayer(playerid, DuelInfo[playerid][42]);
		TextDrawShowForPlayer(playerid, DuelInfo[playerid][43]);
		TextDrawShowForPlayer(playerid, DuelInfo[playerid][44]);
	}
	if(PlayerInfo[playerid][pInfoText][3] == 0) TextDrawHideForPlayer(playerid, HealthPure[playerid]);
	if(PlayerInfo[playerid][pPassive] == 1)
	{
		TextDrawHideForPlayer(playerid, ArenaInfo[playerid][1]);
		TextDrawHideForPlayer(playerid, ArenaInfo[playerid][11]);
	}
	if(PlayerInfo[playerid][pFreeMode] == 0)
	{
		MenuProcurementTime[playerid] = 0;
	 	TextDrawHideForPlayer(playerid, MenuProcurementIcon[playerid][0]);
	 	TextDrawHideForPlayer(playerid, MenuProcurementIcon[playerid][1]);
		if(PlayerInfo[playerid][pInfoText][0] == 0)
		{
			TextDrawHideForPlayer(playerid, ArenaInfo[playerid][0]);
			TextDrawHideForPlayer(playerid, ArenaInfo[playerid][1]);
			TextDrawHideForPlayer(playerid, ArenaInfo[playerid][2]);
			TextDrawHideForPlayer(playerid, ArenaInfo[playerid][10]);
			TextDrawHideForPlayer(playerid, ArenaInfo[playerid][11]);
		}
	}
	TextDrawSetString(DuelInfo[playerid][13], " ...");
	TextDrawSetString(DuelInfo[playerid][1], DuelText[0][lang]);
	if(PlayerInfo[playerid][pRussifier][1] == 0)
	{
		TextDrawSetString(DuelInfo[playerid][2], " playlist~y~ off");
		TextDrawSetString(DuelInfo[playerid][15], " created by:~g~~h~ tdm zones");
	}
	else
	{
 		TextDrawSetString(DuelInfo[playerid][2], " Јћeќћњc¦~y~ ўЁk");
 		TextDrawSetString(DuelInfo[playerid][15], " coџљa¦eћ©:~g~~h~ tdm zones");
	}
	TextDrawSetStringZS(DuelInfo[playerid][3], DuelInfo[playerid][35], DuelText[1][lang], DuelText[17][lang]);
	TextDrawSetStringZS(DuelInfo[playerid][4], DuelInfo[playerid][36], DuelText[2][lang], DuelText[34][lang]);
	TextDrawSetStringZS(DuelInfo[playerid][5], DuelInfo[playerid][37], DuelText[3][lang], DuelText[38][lang]);
	TextDrawSetStringZS(DuelInfo[playerid][6], DuelInfo[playerid][38], DuelText[4][lang], DuelText[43][lang]);
	TextDrawSetStringZS(DuelInfo[playerid][7], DuelInfo[playerid][39], DuelText[5][lang], "~y~fist");
	TextDrawSetStringZS(DuelInfo[playerid][8], DuelInfo[playerid][40], DuelText[6][lang], "~y~100%");
 	TextDrawSetStringZS(DuelInfo[playerid][9], DuelInfo[playerid][41], DuelText[7][lang], DuelText[15][lang]);
 	TextDrawSetStringZS(DuelInfo[playerid][10], DuelInfo[playerid][42], "_", "_");
 	TextDrawSetStringZS(DuelInfo[playerid][11], DuelInfo[playerid][43], "_", "_");
 	TextDrawSetStringZS(DuelInfo[playerid][12], DuelInfo[playerid][44], "_", "_");
	if(SpawnCheck[playerid][3] >= 1) SpawnCheck[playerid][3] = 0;
	SetPlayerPosZS(playerid, -2715.1350, -282.0984, 7.2060, 76.4541, 0, DuelCheck[playerid][25]);
	SetPlayerCameraPos(playerid, -2710.325195, -269.955108, 14.167563);
 	return SetPlayerCameraLookAt(playerid, -2714.584960, -267.421295, 13.509325);
}
flags:acar(2);
cmd:acar(playerid, params[])
{
	if(FrozenCheck[playerid] == 1) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете использовать данную команду пока заморожены!");
	if(GetPlayerVirtualWorld(playerid) != 202 || PlayerInfo[playerid][pFreeMode] != 1 || GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Создавать автомобили можно только в Свободном режиме!");
    if(sscanf(params, "i", params[0])) return SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /aacar [ID автомобиля]");
	if(params[0] < 400 || params[0] > 609) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Номер машины не может быть меньше 400 и больше чем 609!");
	switch(params[0])
	{
		case 537, 538, 569, 570, 590, 606, 607, 608: return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете создать данный вид транспорта!");
	}
	new string[48], Float: Pos[4];
	if(AutoCheck[playerid] != 0) DestroyVehicle(AutoCheck[playerid]);
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	GetPlayerFacingAngle(playerid, Pos[3]);
	AutoCheck[playerid] = CreateVehicle(params[0], Pos[0] + 3.0, Pos[1], Pos[2], Pos[3], random(255), random(255), -1);
	SetVehicleVirtualWorld(AutoCheck[playerid], 202);
	format(string, sizeof(string), "FM %dX%d", playerid, GetPlayerVirtualWorld(playerid));
	SetVehicleNumberPlate(AutoCheck[playerid], string);
	PutPlayerInVehicleZS(playerid, AutoCheck[playerid], 0);
	SetVehicleParamsEx(AutoCheck[playerid], 1, 0, 0, 0, 0, 0, 0);
	format(string, sizeof(string), "Автомобиль ID: {4FDF24}%d {FFFFFF}был создан.", params[0]);
	return SendClientMessage(playerid, 0xFFFFFFFF, string);
}
cmd:aspawn(playerid, params[])
{
    if(PlayerInfo[playerid][pVip] < 3 && PlayerInfo[playerid][pAdmin] < 2) return 1;
    if(sscanf(params, "is[21]", params[0], params[1])) return SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /aspawn [ID игрока] [причина]");
    if(strlen(params[1]) <= 2 || strlen(params[1]) >= 20) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Слишком длинная или короткая причина!");
    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным ID не найден!");
   	if(PlayerLogged[params[0]] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не зашел в свой аккаунт!");
	if(Spawned[params[0]] == false) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не заспавнился!");
	if(Pause[params[0]][1] >= 3) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находиться на паузе!");
	if(DuelCheck[params[0]][3] != 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находится на дуэли!");
	if(params[0] != playerid && (PlayerInfo[playerid][pVip] >= 2 && (PlayerInfo[playerid][pVip] < PlayerInfo[params[0]][pVip] || PlayerInfo[playerid][pVip] == PlayerInfo[params[0]][pVip]) || PlayerInfo[playerid][pAdmin] >= 2 && (PlayerInfo[playerid][pAdmin] < PlayerInfo[params[0]][pAdmin] || PlayerInfo[playerid][pAdmin] == PlayerInfo[params[0]][pAdmin]))) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете выполнить данные действия над этим игроком, он выше вас по статусу!");
	new string[164], info[17], date[3];
	getdate(date[0], date[1], date[2]);
	if(PlayerInfo[playerid][pAdmin] >= 2) format(info, sizeof(info), "администратором");
	else if(PlayerInfo[playerid][pVip] >= 1) format(info, sizeof(info), "VIP игроком");
    format(string, sizeof(string), "Игрок %s (ID: %d) был заспавлин %s %s (ID: %d) | %s", PlayerName[params[0]], params[0], info, PlayerName[playerid], playerid, params[1]);
	ABroadCast(0xC3C3C3AA, string, 0, 3);
    format(string, sizeof(string), "Вы {4FDF24}%s {FFFFFF}были отправлены на спавн %s: {4FDF24}%s | %s | %d/%02d/%02d", PlayerName[params[0]], info, PlayerName[playerid], params[1], date[2], date[1], date[0]);
    SendClientMessage(params[0], 0xFFFFFFAA, string);
    format(string, sizeof(string), "Игрок {4FDF24}%s (ID: %d) {FFFFFF}был отправлен на спавн, причина {4FDF24}%s", PlayerName[params[0]], params[0], params[1]);
    SendClientMessage(playerid, 0xFFFFFFAA, string);
    return SpawnPlayerZS(params[0]);
}
flags:a(2);
cmd:a(playerid, params[])
{
    if(PlayerInfo[playerid][pMuted] != 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете использовать Общий чат в данный момент!");
    if(sscanf(params, "s[65]", params[0])) return SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /a [текст сообщения]");
    if(strlen(params[0]) < 2 || strlen(params[0]) > 63) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Слишком длинный или короткий текст сообщения!");
	new string[111];
	format(string, sizeof(string), "[A]: >> %s (ID: %d): %s", PlayerName[playerid], playerid, params[0]);
    return ABroadCast(0x61dd61AA, string, 0, 2);
}
cmd:r(playerid, params[])
{
    if(PlayerInfo[playerid][pFreeMode] == 1) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Для пользования командным чатом вы должны быть в режиме Детматча");
    if(PlayerInfo[playerid][pMuted] != 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете использовать Общий чат в данный момент!");
	if(sscanf(params, "s[65]", params[0])) return SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /r [текст сообщения]");
    if(strlen(params[0]) < 2 || strlen(params[0]) > 63) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Слишком длинный или короткий текст сообщения!");
	new string[130];
    format(string, sizeof(string), "[КМ]: >> %s (ID: %d): {00BFFF}%s", PlayerName[playerid], playerid, params[0]);
	ABroadCast(0x008B8BAA, string, 2, ChoiceTeamCheck[playerid][2]);
    format(string, sizeof(string), "Командный чат (%d) %s (ID: %d): {808080}%s", ChoiceTeamCheck[playerid][2], PlayerName[playerid], playerid, params[0]);
    return ABroadCast(0xC3C3C3AA, string, 3, 0);
}
cmd:g(playerid, params[])
{
    //if(PlayerInfo[playerid][pFreeMode] == 1) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Для пользования командным чатом вы должны быть в режиме Детматча");
    if(PlayerInfo[playerid][pMuted] != 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете использовать Общий чат в данный момент!");
	if(sscanf(params, "s[65]", params[0])) return SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /g [текст сообщения]");
    if(strlen(params[0]) < 2 || strlen(params[0]) > 63) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Слишком длинный или короткий текст сообщения!");
	new string[129];
	format(string, sizeof(string), "[Б]: >> %s (ID: %d): {FFCD00}%s", PlayerName[playerid], playerid, params[0]);
	ABroadCast(0xADFF2FAA, string, 6, 0, playerid);
	format(string, sizeof(string), "Чат банды #%d %s (ID: %d): {808080}%s", PlayerInfo[playerid][pGang][0], PlayerName[playerid], playerid, params[0]);
    return ABroadCast(0xC3C3C3AA, string, 7, 0);
}
flags:weapdel(3);
cmd:weapdel(playerid, params[])
{
    if(sscanf(params, "is[21]", params[0], params[1])) return SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /weapdel [ID игрока] [причина]");
    if(strlen(params[1]) <= 2 || strlen(params[1]) >= 20) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Слишком длинная или короткая причина!");
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным ID не найден!");
   	if(PlayerLogged[params[0]] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не зашел в свой аккаунт!");
    if(Spawned[params[0]] == false) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не заспавнился!");
    if(DuelCheck[params[0]][3] != 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находится на дуэли!");
	if(params[0] != playerid && (PlayerInfo[playerid][pVip] >= 2 && (PlayerInfo[playerid][pVip] < PlayerInfo[params[0]][pVip] || PlayerInfo[playerid][pVip] == PlayerInfo[params[0]][pVip]) || PlayerInfo[playerid][pAdmin] >= 2 && (PlayerInfo[playerid][pAdmin] < PlayerInfo[params[0]][pAdmin] || PlayerInfo[playerid][pAdmin] == PlayerInfo[params[0]][pAdmin]))) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете выполнить данные действия над этим игроком, он выше вас по статусу!");
	/*if(PlayerInfo[playerid][pFloodCmd] >= 1)
	{
		ProtectionFlooding[playerid][1] += 1;
		if(ProtectionFlooding[playerid][1] >= 6) return IsProtectionFlooding(playerid, "разоружить", "2.1");
		else IsProtectionFlooding(playerid, "_", "0", 16);
		return SendClientMessage(playerid, 0xFFFFFFAA, "Пожалуйста подождите несколько секунд!");
	}
	else
	{
		ProtectionFlooding[playerid][1] += 1;
		ProtectionFlooding[playerid][5] = 10;
		if(ProtectionFlooding[playerid][1] >= 2) IsProtectionFlooding(playerid, "_", "0", 16);
	}*/
	new string[151], date[3];
 	getdate(date[0], date[1], date[2]);
	format(string, sizeof(string), "Игрок %s (ID: %d) был разоружен администратором %s (ID: %d) | %s", PlayerName[params[0]], params[0], PlayerName[playerid], playerid, params[1]);
	ABroadCast(0xC3C3C3AA, string, 0, 3);
	ResetPlayerWeaponsZS(params[0]);
	format(string, sizeof(string), "Вы {4FDF24}%s {FFFFFF}были разоружены администратором: {4FDF24}%s | %s | %d/%02d/%02d", PlayerName[params[0]], PlayerName[playerid], params[1], date[2], date[1], date[0]);
	SendClientMessage(params[0], 0xFFFFFFAA, string);
	format(string, sizeof(string), "Игрок {4FDF24}%s (ID: %d) {FFFFFF}был разоружен, причина {4FDF24}%s", PlayerName[params[0]], params[0], params[1]);
	return SendClientMessage(playerid, 0xFFFFFFAA, string);
}
cmd:slap(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pVip] < 3) return 1;
    if(sscanf(params, "is[21]", params[0], params[1])) return SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /slap [ID игрока] [причина]");
    if(strlen(params[1]) <= 2 || strlen(params[1]) >= 20) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Слишком длинная или короткая причина!");
    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным ID не найден!");
   	if(PlayerLogged[params[0]] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не зашел в свой аккаунт!");
    if(Spawned[params[0]] == false) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не заспавнился!");
    if(Pause[params[0]][1] >= 3) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находиться на паузе!");
    if(FrozenCheck[params[0]] == 1) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок заморожен!");
    if(DuelCheck[params[0]][3] != 0) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находится на дуэли!", 1085);
    if(params[0] != playerid && (PlayerInfo[playerid][pVip] >= 2 && (PlayerInfo[playerid][pVip] < PlayerInfo[params[0]][pVip] || PlayerInfo[playerid][pVip] == PlayerInfo[params[0]][pVip]) || PlayerInfo[playerid][pAdmin] >= 2 && (PlayerInfo[playerid][pAdmin] < PlayerInfo[params[0]][pAdmin] || PlayerInfo[playerid][pAdmin] == PlayerInfo[params[0]][pAdmin]))) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете выполнить данные действия над этим игроком, он выше вас по статусу!");
	/*if(PlayerInfo[playerid][pFloodCmd] >= 1)
	{
		ProtectionFlooding[playerid][1] += 1;
		if(ProtectionFlooding[playerid][1] >= 6) return IsProtectionFlooding(playerid, "пнуть", "2.1");
		else IsProtectionFlooding(playerid, "_", "0", 16);
		return SendClientMessage(playerid, 0xFFFFFFAA, "Пожалуйста подождите несколько секунд!");
	}
	else
	{
		ProtectionFlooding[playerid][1] += 1;
		ProtectionFlooding[playerid][5] = 10;
		if(ProtectionFlooding[playerid][1] >= 2) IsProtectionFlooding(playerid, "_", "0", 16);
	}*/
	new string[149], info[17], date[3], Float:Pos[3];
	getdate(date[0], date[1], date[2]);
	if(PlayerInfo[playerid][pAdmin] >= 2) format(info, sizeof(info), "администратором");
	else if(PlayerInfo[playerid][pVip] >= 1) format(info, sizeof(info), "VIP игроком");
	format(string, sizeof(string), "Игрок %s (ID: %d) был пнут %s %s (ID: %d) | %s", PlayerName[params[0]], params[0], info, PlayerName[playerid], playerid, params[1]);
	ABroadCast(0xC3C3C3AA, string, 0, 3);
	if(IsPlayerInAnyVehicle(params[0]))
 	{
		GetVehicleVelocity(GetPlayerVehicleID(params[0]), Pos[0], Pos[1], Pos[2]);
		SetVehicleVelocity(GetPlayerVehicleID(params[0]), Pos[0], Pos[1], 0.3);
	}
	else
	{
 		if(PlayerInterior[params[0]][0] == 0)
 		{
			GetPlayerPos(params[0], Pos[0], Pos[1], Pos[2]);
			SetPlayerPos(params[0], Pos[0], Pos[1], Pos[2] + 5.0);
		}
		else
		{
 			GetPlayerVelocity(params[0], Pos[0], Pos[1], Pos[2]);
			SetPlayerVelocityZS(params[0], Pos[0], Pos[1], 5.0);
		}
	}
	format(string, sizeof(string), "Вы {4FDF24}%s {FFFFFF}были пнуты %s: {4FDF24}%s | %s | %d/%02d/%02d", PlayerName[params[0]], info, PlayerName[playerid], params[1], date[2], date[1], date[0]);
	SendClientMessage(params[0], 0xFFFFFFAA, string);
 	format(string, sizeof(string), "Игрок {4FDF24}%s (ID: %d) {FFFFFF}был пнут, причина {4FDF24}%s", PlayerName[params[0]], params[0], params[1]);
	return SendClientMessage(playerid, 0xFFFFFFAA, string);
}
cmd:slapcar(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pVip] < 3) return 1;
    if(sscanf(params, "is[21]", params[0], params[1])) return SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /slapcar [ID игрока] [причина]");
    if(strlen(params[1]) <= 2 || strlen(params[1]) >= 20) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Слишком длинная или короткая причина!");
    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным ID не найден!");
   	if(PlayerLogged[params[0]] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не зашел в свой аккаунт!");
    if(Spawned[params[0]] == false) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не заспавнился!");
   	if(!IsPlayerInAnyVehicle(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок не заходиться в автомобиле!");
	if(DuelCheck[params[0]][3] != 0) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находится на дуэли!", 1085);
	if(FrozenCheck[params[0]] == 1) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок заморожен!");
	if(params[0] != playerid && (PlayerInfo[playerid][pVip] >= 2 && (PlayerInfo[playerid][pVip] < PlayerInfo[params[0]][pVip] || PlayerInfo[playerid][pVip] == PlayerInfo[params[0]][pVip]) || PlayerInfo[playerid][pAdmin] >= 2 && (PlayerInfo[playerid][pAdmin] < PlayerInfo[params[0]][pAdmin] || PlayerInfo[playerid][pAdmin] == PlayerInfo[params[0]][pAdmin]))) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете выполнить данные действия над этим игроком, он выше вас по статусу!");
	/*if(PlayerInfo[playerid][pFloodCmd] >= 1)
	{
		ProtectionFlooding[playerid][1] += 1;
		if(ProtectionFlooding[playerid][1] >= 6) return IsProtectionFlooding(playerid, "авыкинуть", "2.1");
		else IsProtectionFlooding(playerid, "_", "0", 16);
		return SendClientMessage(playerid, 0xFFFFFFAA, "Пожалуйста подождите несколько секунд!");
	}
	else
	{
		ProtectionFlooding[playerid][1] += 1;
		ProtectionFlooding[playerid][5] = 10;
		if(ProtectionFlooding[playerid][1] >= 2) IsProtectionFlooding(playerid, "_", "0", 16);
	}*/
	new string[166], info[17], date[3];
	getdate(date[0], date[1], date[2]);
	if(PlayerInfo[playerid][pAdmin] >= 2) format(info, sizeof(info), "администратором");
	else if(PlayerInfo[playerid][pVip] >= 1) format(info, sizeof(info), "VIP игроком");
	format(string, sizeof(string), "Игрок %s (ID: %d) был выкинут из автомобиля %s %s (ID: %d) | %s", PlayerName[params[0]], params[0], info, PlayerName[playerid], playerid, params[1]);
	ABroadCast(0xC3C3C3AA, string, 0, 3);
	RemovePlayerFromVehicleZS(params[0]);
	format(string, sizeof(string), "Вы {4FDF24}%s {FFFFFF}были выкинуты из автомобиля %s: {4FDF24}%s | %s | %d/%02d/%02d", PlayerName[params[0]], info, PlayerName[playerid], params[1], date[2], date[1], date[0]);
	SendClientMessage(params[0], 0xFFFFFFAA, string);
	format(string, sizeof(string), "Игрок {4FDF24}%s (ID: %d) {FFFFFF}был выкинут из автомобиля, причина {4FDF24}%s", PlayerName[params[0]], params[0], params[1]);
	return SendClientMessage(playerid, 0xFFFFFFAA, string);
}
flags:ip(4);
cmd:ip(playerid, params[])
{
    if(sscanf(params, "i", params[0])) return SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /ip [ID игрока]");
    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным тобой ID не найден!");
	if(PlayerInfo[playerid][pAdmin] < PlayerInfo[params[0]][pAdmin]) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете выполнить данные действия над этим игроком, он выше вас по статусу!");
	if(PlayerInfo[playerid][pAdmin] == PlayerInfo[params[0]][pAdmin] && params[0] != playerid) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете выполнить данные действия над этим игроком, он такого же уровня как и вы!");
	new string[103], playerip[16], version[10];
	GetPlayerIp(params[0], playerip, sizeof(playerip));
	GetPlayerVersion(params[0], version, sizeof(version));
	format(string, sizeof(string), "IP адрес игрока: {4FDF24}%s (ID: %d) | %s | %s | %s", PlayerName[params[0]], params[0], PlayerIp[params[0]], playerip, version);
	return SendClientMessage(playerid, 0xFFFFFFAA, string);
}
cmd:cc(playerid, params[])
{
    if(PlayerInfo[playerid][pVip] < 2 && PlayerInfo[playerid][pVip] < 2) return 1;
	for(new i; i < 50; i ++) SendClientMessageToAll(0x00000000, "");
 	new string[63];
 	if(PlayerInfo[playerid][pVip] == 0) format(string, sizeof(string), "Общий чат был очищен администратором %s", PlayerName[playerid]);
	else format(string, sizeof(string), "Общий чат был очищен Vip игроком %s", PlayerName[playerid]);
 	return SendClientMessageToAll(0x009390AA, string);
}
cmd:occ(playerid, params[])
{
	for(new i; i < 50; i ++) SendClientMessage(playerid, 0x00000000, "");
	return 1;
}
flags:ar(2);
cmd:ar(playerid, params[])
{
    if(PlayerInfo[playerid][pMuted] != 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете использовать Общий чат в данный момент!");
    if(sscanf(params, "is[65]", params[0], params[1])) return SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /ar [ID игрока] [текст ответа]");
    if(strlen(params[1]) < 2 || strlen(params[1]) > 63) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Слишком длинный или короткий текст сообщения!");
	if(params[0] == playerid) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете самому себе ответить!");
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным ID не найден!");
	if(PlayerLogged[params[0]] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не зашел в свой аккаунт!");
	if(Spawned[params[0]] == false) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не заспавнился!");
	if(Pause[params[0]][1] >= 3) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находиться на паузе!");
	new string[169];
    format(string, sizeof(string), "Ответ от администратора {4FDF24}%s (ID: %d) | %s", PlayerName[playerid], playerid, params[1]);
    SendClientMessage(params[0], 0xFFFFFFFF, string);
    PlayerPlaySound(params[0], 1085, 0.0, 0.0, 0.0);
	format(string, sizeof(string), "Ответ от администратора %s (ID: %d) игроку %s (ID: %d) | %s", PlayerName[playerid], playerid, PlayerName[params[0]], params[0], params[1]);
    return ABroadCast(0xC3C3C3FF, string, 0, 2);
}
flags:asay(2);
cmd:asay(playerid, params[])
{
    if(PlayerInfo[playerid][pMuted] != 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете использовать Общий чат в данный момент!");
    if(sscanf(params, "s[65]", params[0])) return SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /asay [сообщение]");
    if(strlen(params[0]) < 2 || strlen(params[0]) > 63) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Слишком длинный или короткий текст сообщения!");
	/*if(PlayerInfo[playerid][pFloodCmd] >= 1)
    {
   		ProtectionFlooding[playerid][1] += 1;
   		if(ProtectionFlooding[playerid][1] >= 6) return IsProtectionFlooding(playerid, "отадм", "2.1");
   		else IsProtectionFlooding(playerid, "_", "0", 16);
   		return SendClientMessage(playerid, 0xFFFFFFAA, "Пожалуйста подождите несколько секунд!");
	}
	else
	{
		ProtectionFlooding[playerid][1] += 1;
		ProtectionFlooding[playerid][5] = 10;
		if(ProtectionFlooding[playerid][1] >= 2) IsProtectionFlooding(playerid, "_", "0", 16);
	}*/
	new string[114];
    format(string, sizeof(string), "Администратор {4FDF24}%s: %s", PlayerName[playerid], params[0]);
    return ABroadCast(0xFFFFFFAA, string, 1, 0);
}
cmd:admins(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pVip] < 2) return 1;
    foreach(new i: Player)
    {
    	if(PlayerInfo[i][pAdmin] >= 2)
    	{
   			new string[130], slot[22], slot0[21];
    		if(Pause[i][1] >= 3) format(slot, sizeof(slot), "| На паузе: %s", Convert(Pause[i][1]));
			if(Observation[i][0] != MAX_PLAYERS) format(slot0, sizeof(slot0), "| наблюдает за: %d", Observation[i][0]);
			format(string, sizeof(string), "Администратор {4FDF24}%d {FFFFFF}уровня {4FDF24}%s (ID: %d) %s %s", PlayerInfo[i][pAdmin], PlayerName[i], i, slot, slot0);
			SendClientMessage(playerid, 0xFFFFFFFF, string);
		}
		else SendClientMessage(playerid, 0xFFFFFFFF, "В данный момент нет не одного Администратора.");
	}
	return 1;
}
cmd:vips(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pVip] < 2) return 1;
    foreach(new i: Player)
    {
    	if(PlayerInfo[i][pVip] >= 2)
    	{
   			new string[103], slot[22];
    		if(Pause[i][1] >= 3) format(slot, sizeof(slot), "| На паузе: %s", Convert(Pause[i][1]));
			format(string, sizeof(string), "VIP игрок {4FDF24}%d {FFFFFF}уровня {4FDF24}%s (ID: %d) %s", PlayerInfo[i][pVip], PlayerName[i], i, slot);
			SendClientMessage(playerid, 0xFFFFFFFF, string);
		}
		else SendClientMessage(playerid, 0xFFFFFFFF, "В данный момент нет не одного VIP игрока.");
	}
	return 1;
}
flags:team(3);
cmd:team(playerid, params[])
{
    if(sscanf(params, "ii", params[0], params[1])) return SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /team [ID игрока] [ID команды | Team 1: 0 | Team 2: 1]");
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным ID не найден!");
	if(params[1] < 0 || params[1] > 1) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Номер команды не может быть меньше 0 и не больше 1!");
	if(PlayerLogged[params[0]] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не зашел в свой аккаунт!");
	if(PlayerInfo[params[0]][pFreeMode] == 1) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находиться в Свободном режиме.");
	if(Spawned[params[0]] == false) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не заспавнился!");
	if(Pause[params[0]][1] >= 3) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находиться на паузе!");
	if(PlayerInfo[params[0]][pPrison] >= 1) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находиться в Тюрьме!");
	if(params[1] == ChoiceTeamCheck[params[0]][2] - 1) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок итак находится в данный команде!");
	if(DuelCheck[params[0]][3] != 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находится на дуэли!");
	switch(ChoiceTeamCheck[params[0]][6])
	{
		case 1:
		{
			if(PlayerOnline[2] >= 1) PlayerOnline[2] -= 1;
			if(ChoiceTeamCheck[params[0]][2] == 1 && Arena[5] >= 1) Arena[5] -= 1;
			else if(ChoiceTeamCheck[params[0]][2] == 2 && Arena[6] >= 1) Arena[6] -= 1;
		}
		case 2:
		{
			if(PlayerOnline[3] >= 1) PlayerOnline[3] -= 1;
			if(ChoiceTeamCheck[params[0]][2] == 1 && Arena[12] >= 1) Arena[12] -= 1;
			else if(ChoiceTeamCheck[params[0]][2] == 2 && Arena[13] >= 1) Arena[13] -= 1;
		}
		case 3:
		{
			if(PlayerOnline[4] >= 1) PlayerOnline[4] -= 1;
			if(ChoiceTeamCheck[params[0]][2] == 1 && Arena[19] >= 1) Arena[19] -= 1;
			else if(ChoiceTeamCheck[params[0]][2] == 2 && Arena[20] >= 1) Arena[20] -= 1;
		}
	}
	ChoiceTeamCheck[params[0]][2] = params[1] + 1;
	SetPlayerTeam(params[0], params[1]);
    new string[164], str[22];
	if(ChoiceTeamCheck[params[0]][2] == 1)
	{
	    PlayerColor[params[0]] = 0x559FCDFF;
		format(str, 22, "%d,%d", WeaponsSlotSpawn[params[0]][7], WeaponsSlotSpawn[params[0]][8]);
		mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET scorecheck=%d,score1='%s',score2='0,0',scores1=%d,scores2=0 WHERE id=%d", ChoiceTeamCheck[params[0]][6], str, WeaponsSlotSpawn[params[0]][9], PlayerInfo[params[0]][pRoomAccount]);
	}
	else
	{
	    PlayerColor[params[0]] = 0xF4AC50FF;
	    format(str, 22, "%d,%d", WeaponsSlotSpawn[params[0]][7], WeaponsSlotSpawn[params[0]][8]);
		mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET scorecheck=%d,score1='0,0',score2='%s',scores1=0,scores2=%d WHERE id=%d", ChoiceTeamCheck[params[0]][6], str, WeaponsSlotSpawn[params[0]][9], PlayerInfo[params[0]][pRoomAccount]);
	}
	mysql_tquery(MysqlConnectID, string);
	ChoiceTeamCheck[params[0]][3] = 0;
	switch(ChoiceTeamCheck[params[0]][6])
	{
		case 1:
		{
			PlayerOnline[2] += 1;
			if(ChoiceTeamCheck[params[0]][2] == 1) Arena[5] += 1;
			else if(ChoiceTeamCheck[params[0]][2] == 2) Arena[6] += 1;
		}
		case 2:
		{
			PlayerOnline[3] += 1;
			if(ChoiceTeamCheck[params[0]][2] == 1) Arena[12] += 1;
			else if(ChoiceTeamCheck[params[0]][2] == 2) Arena[13] += 1;
		}
		case 3:
		{
			PlayerOnline[4] += 1;
			if(ChoiceTeamCheck[params[0]][2] == 1) Arena[19] += 1;
			else if(ChoiceTeamCheck[params[0]][2] == 2) Arena[20] += 1;
		}
	}
	SpawnPlayerZS(params[0]);
	PlayerPlaySound(params[0], 1385, 0.0, 0.0, 0.0);
	TeamColor(params[0]);
	format(string, sizeof(string), "Администратор %s перевел игрока %s за команду номер %d", PlayerName[playerid], PlayerName[params[0]], params[1]);
	ABroadCast(0x009390AA, string, 1, 1);
	if(PlayerInfo[params[0]][pMessage][5] == 1) SendClientMessage(params[0], 0x009390AA, string);
	return 1;
}
flags:tppos(3);
cmd:tppos(playerid, params[])
{
	new Float:Pos[4], string[120], vehicleid = GetPlayerVehicleID(playerid), world[2] = {-1, -1};
    sscanf(params, "p<,>fffdd", Pos[0], Pos[1], Pos[2], world[0], world[1]);
    if(Pos[0] == 0.0 && Pos[1] == 0.0)
	{
		SendClientMessage(playerid, -1, "/tppos: X | Y | Z | не обязательно (World | Interiors), для смены только внутренних миров, используйте число -1 на X Y Z");
		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		GetPlayerFacingAngle(playerid, Pos[3]);
		format(string, sizeof(string), "Player %.4f, %.4f, %.4f, %.4f, %d, %d", Pos[0], Pos[1], Pos[2], Pos[3], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		SendClientMessage(playerid, -1, string);
		if(IsPlayerInAnyVehicle(playerid))
		{
		    GetVehiclePos(vehicleid, Pos[0], Pos[1], Pos[2]);
			GetVehicleZAngle(vehicleid, Pos[3]);
			format(string, sizeof(string), "Vehicle %.4f, %.4f, %.4f, %.4f, %d, %d", Pos[0], Pos[1], Pos[2], Pos[3], GetVehicleVirtualWorld(vehicleid), GetPlayerInterior(playerid));
			SendClientMessage(playerid, -1, string);
		}
		SendClientMessage(playerid, -1, "");
		return 1;
 	}
	if(Pos[0] == -1.0 && Pos[1] == -1.0)
	{
	    format(string, sizeof(string), "Был World: %d, INT: %d | {4FDF24}Стал World: %d, INT: %d", GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), world[0], world[1]);
 		SendClientMessage(playerid, -1, string);
 		if(IsPlayerInAnyVehicle(playerid))
 		{
 			SetVehicleVirtualWorld(vehicleid, world[0]);
    		LinkVehicleToInterior(vehicleid, world[1]);
 		}
		SetPlayerVirtualWorld(playerid, world[0]);
		SetPlayerInterior(playerid, world[1]);
		return 1;
	}
	if(world[0] == -1) world[0] = GetPlayerVirtualWorld(playerid);
	if(world[1] == -1) world[1] = GetPlayerInterior(playerid);
    format(string, sizeof(string), "Телепорт по координатам [X: %.4f | Y: %.4f | Z: %.4f | World: %d | INT: %d]", Pos[0], Pos[1], Pos[2], world[0], world[1]);
 	SendClientMessage(playerid, -1, string);
 	if(IsPlayerInAnyVehicle(playerid)) SetVehiclePos(playerid, Pos[0], Pos[1], Pos[2]);
	else SetPlayerPosZS(playerid, Pos[0], Pos[1], Pos[2], 0.0, world[0], world[1]);
	return 1;
}
flags:gm(2);
cmd:gm(playerid, params[])
{
    if(sscanf(params, "i", GmTestCheck[playerid][1])) return SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /gm [ID игрока]");
    if(!IsPlayerConnected(GmTestCheck[playerid][1])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным ID не найден!");
    if(PlayerLogged[GmTestCheck[playerid][1]] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не зашел в свой аккаунт!");
    if(Spawned[GmTestCheck[playerid][1]] == false) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не заспавнился!");
    if(IsPlayerInAnyVehicle(GmTestCheck[playerid][1])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находиться в автомобиле!");
    if(GmTestCheck[playerid][0] >= 1) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы уже кого то проверяете на Gm Test!");
	if(GmTestCheck[GmTestCheck[playerid][1]][2] == 1) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данного игрока уже кто то проверяет на Gm Test!");
	if(Pause[GmTestCheck[playerid][1]][1] >= 3) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находиться на паузе");
	if(AntiBreik[GmTestCheck[playerid][1]] != 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находиться на паузе");
	if(FrozenCheck[GmTestCheck[playerid][1]] == 1) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок заморожен!");
	GmTestCheck[playerid][0] = 4;
	GmTestCheck[playerid][2] = Health[GmTestCheck[playerid][1]];
	SetPlayerHealth(GmTestCheck[playerid][1], 100.0);
	SetPlayerArmour(GmTestCheck[playerid][1], 0.0);
	new Float: Pos[3];
	GetPlayerPos(GmTestCheck[playerid][1], Pos[0], Pos[1], Pos[2]);
	return CreateExplosionForPlayer(GmTestCheck[playerid][1], Pos[0], Pos[1], Pos[2], 12, 1.0);
}
flags:aweapon(3);
cmd:aweapon(playerid, params[])
{
    if(sscanf(params, "iii", params[0], params[1], params[2])) return SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /aweapon [ID игрока] [ID оружия] [кол-во патрон]");
	if(params[1] < 1 || params[1] > 46) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы ввели неверный ID оружия!");
    if(params[1] >= 19 && params[1] <= 21) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете выдать данный вид оружия!");
    if(params[2] < 1 || params[2] > 900) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Кол-во патрон Не должно быть меньше 1 и больше 900 патрон");

	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным ID не найден!");
	if(PlayerInfo[params[0]][pPrison] >= 1) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете выдать оружие данному игроку пока он в Тюрьме!");
 	if(IsPlayerInAnyVehicle(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок заходиться в автомобиле!");
	if(PlayerInfo[params[0]][pPassive] == 1) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> У данного игрока включен пассивный режим!");
 	if(DuelCheck[params[0]][3] != 0) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находится на дуэли!", 1085);
 	if(PlayerLogged[params[0]] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не зашел в свой аккаунт!");
	if(Spawned[params[0]] == false) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не заспавнился!");
	if(Pause[params[0]][1] >= 3) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находиться на паузе!");
	//if(PlayerInfo[params[0]][pFreeMode] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находиться не в свободном режиме!");
	new string[114];
	format(string, sizeof(string), "Администратор %s (ID: %d) выдал оружие %s игроку %s (ID: %d)", PlayerName[playerid], playerid, WeaponsName[params[1]], PlayerName[params[0]], params[0]);
	ABroadCast(0xC3C3C3AA, string, 0, 3);
	GivePlayerWeaponZS(params[0], params[1], params[2]);
	format(string, sizeof(string), "Администратор {4FDF24}%s (ID: %d) {FFFFFF}выдам вам оружие {4FDF24}%s", PlayerName[playerid], playerid, WeaponsName[params[1]]);
	return SendClientMessage(params[0], 0xFFFFFFAA, string);
}
flags:freeze(2);
cmd:freeze(playerid, params[])
{
    if(sscanf(params, "is[21]", params[0], params[1])) return SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /freeze [ID игрока] [причина (Если игрок не заморожен)]");
    if(FrozenCheck[params[0]] == 0 && strlen(params[1]) <= 2 || strlen(params[1]) >= 20) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Слишком длинная или короткая причина!");
    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным ID не найден!");
	if(PlayerLogged[params[0]] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не зашел в свой аккаунт!");
	if(Spawned[params[0]] == false) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не заспавнился!");
	if(DuelCheck[params[0]][3] != 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находится на дуэли!");
	if(params[0] == playerid) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете самого себя заморозить!");
	if(params[0] != playerid && (PlayerInfo[playerid][pVip] >= 2 && (PlayerInfo[playerid][pVip] < PlayerInfo[params[0]][pVip] || PlayerInfo[playerid][pVip] == PlayerInfo[params[0]][pVip]) || PlayerInfo[playerid][pAdmin] >= 2 && (PlayerInfo[playerid][pAdmin] < PlayerInfo[params[0]][pAdmin] || PlayerInfo[playerid][pAdmin] == PlayerInfo[params[0]][pAdmin]))) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете выполнить данные действия над этим игроком, он выше вас по статусу!");
	/*if(PlayerInfo[playerid][pFloodCmd] >= 1)
	{
		ProtectionFlooding[playerid][1] += 1;
		if(ProtectionFlooding[playerid][1] >= 6) return IsProtectionFlooding(playerid, "заморозить", "2.1");
		else IsProtectionFlooding(playerid, "_", "0", 16);
		return SendClientMessage(playerid, 0xFFFFFFAA, "Пожалуйста подождите несколько секунд!");
	}
 	else
 	{
		ProtectionFlooding[playerid][1] += 1;
		ProtectionFlooding[playerid][5] = 10;
		if(ProtectionFlooding[playerid][1] >= 2) IsProtectionFlooding(playerid, "_", "0", 16);
	}*/
	new string[118];
	if(FrozenCheck[params[0]] == 0)
	{
		TogglePlayerControllableZS(params[0], 0);
		PlayerInfo[params[0]][pFreeze] = 1;
		PlayerPlaySound(params[0], 1085, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "Администратор %s заморозил игрока %s. С причиной: %s", PlayerName[playerid], PlayerName[params[0]], params[1]);
		ABroadCast(0x009390AA, string, 1, 1);
		if(PlayerInfo[params[0]][pMessage][5] == 1) SendClientMessage(params[0], 0x009390AA, string);
		SendClientMessage(params[0], 0xFFFFFFAA, "Вы были {FF0000}заморожены {FFFFFF}и не можете двигаться!");
		GameTextForPlayerZS(params[0], "~n~~w~ You were ~r~Frozen", "~n~~w~ ‹Ё —Ёћњ ~r~џaЇopo›e®Ё", 3000, 4);
	}
	else
	{
		TogglePlayerControllableZS(params[0], 1);
		PlayerInfo[params[0]][pFreeze] = 0;
		PlayerPlaySound(params[0], 1053, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "Администратор %s разморозил игрока %s", PlayerName[playerid], PlayerName[params[0]]);
		ABroadCast(0x009390AA, string, 1, 1);
		if(PlayerInfo[params[0]][pMessage][5] == 1) SendClientMessage(params[0], 0x009390AA, string);
		SendClientMessage(params[0], 0xFFFFFFAA, "Вы были {4FDF24}разморожены {FFFFFF}и можете двигаться!");
		GameTextForPlayerZS(params[0], "~n~~w~ You were ~g~Defrosted", "~n~~w~ ‹Ё —Ёћњ ~g~paџЇopo›e®Ё", 3000, 4);
	}
	mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `freeze`='%d' WHERE `id`='%d'", PlayerInfo[params[0]][pFreeze], PlayerInfo[params[0]][pRoomAccount]);
	return mysql_tquery(MysqlConnectID, string);
}
flags:mute(2);
cmd:mute(playerid, params[])
{
    if(sscanf(params, "iis[21]", params[0], params[1], params[2]))
	{
		SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /mute [ID игрока] [время 1-120 мин] [причина]");
		return SendClientMessage(playerid, 0xFFFFFFAA, "30м: 30, 1ч: 60, 2ч: 120, 3ч: 180, 4ч: 240, 5ч: 300, 6ч: 360, 7ч: 420, 8ч: 480, 9ч: 540, 10ч: 600");
 	}
    if(PlayerInfo[params[0]][pMuted] == 0 && params[1] < 1 || (params[1] > 300 && PlayerInfo[playerid][pAdmin] <= 4 || PlayerInfo[playerid][pAdmin] >= 4 && params[1] > 600))
	{
		SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы ввели неверное время заглушки. Используйте время от 1 до 120");
		return SendClientMessage(playerid, 0xFFFFFFAA, "30м: 30, 1ч: 60, 2ч: 120, 3ч: 180, 4ч: 240, 5ч: 300, 6ч: 360, 7ч: 420, 8ч: 480, 9ч: 540, 10ч: 600");
    }
    if(PlayerInfo[params[0]][pMuted] == 0 && strlen(params[2]) <= 2 || strlen(params[2]) >= 20) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Слишком длинная или короткая причина!");
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным ID не найден!");
	if(PlayerLogged[params[0]] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не зашел в свой аккаунт!");
	if(Spawned[params[0]] == false) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не заспавнился!");
	if(params[0] == playerid) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете самому себя закрыть доступ к Общему чату!");
	if(params[0] != playerid && (PlayerInfo[playerid][pVip] >= 2 && (PlayerInfo[playerid][pVip] < PlayerInfo[params[0]][pVip] || PlayerInfo[playerid][pVip] == PlayerInfo[params[0]][pVip]) || PlayerInfo[playerid][pAdmin] >= 2 && (PlayerInfo[playerid][pAdmin] < PlayerInfo[params[0]][pAdmin] || PlayerInfo[playerid][pAdmin] == PlayerInfo[params[0]][pAdmin]))) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете выполнить данные действия над этим игроком, он выше вас по статусу!");
    /*if(PlayerInfo[playerid][pFloodCmd] >= 1)
	{
		ProtectionFlooding[playerid][1] += 1;
		if(ProtectionFlooding[playerid][1] >= 6) return IsProtectionFlooding(playerid, "заглушить", "2.1");
		else IsProtectionFlooding(playerid, "_", "0", 16);
		return SendClientMessage(playerid, 0xFFFFFFAA, "Пожалуйста подождите несколько секунд!");
	}
	else
	{
		ProtectionFlooding[playerid][1] += 1;
		ProtectionFlooding[playerid][5] = 10;
		if(ProtectionFlooding[playerid][1] >= 2) IsProtectionFlooding(playerid, "_", "0", 16);
	}*/
	new string[151];
	if(PlayerInfo[params[0]][pMuted] == 0)
	{
		PlayerInfo[params[0]][pMuted] = params[1] * 60;
		PlayerPlaySound(params[0], 1085, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "Администратор %s запретил использовать Общий чат на %d секунд игроку %s С причиной: %s", PlayerName[playerid], params[1], PlayerName[params[0]], params[2]);
		ABroadCast(0x009390AA, string, 1, 1);
		if(PlayerInfo[params[0]][pMessage][5] == 1) SendClientMessage(params[0], 0x009390AA, string);
		GameTextForPlayerZS(params[0], "~n~~w~ The Chat Is ~r~Closed", "~n~~w~ ѓoc¦yЈ k o—ЎeЇy ¤a¦y —Ёћ ~r~џakpЁ¦", 3000, 4);
	}
	else
	{
		PlayerInfo[params[0]][pMuted] = 0;
		PlayerPlaySound(params[0], 1053, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "Администратор %s снял заглушку с игрока %s", PlayerName[playerid], PlayerName[params[0]]);
		ABroadCast(0x009390AA, string, 1, 1);
		if(PlayerInfo[params[0]][pMessage][5] == 1) SendClientMessage(params[0], 0x009390AA, string);
		GameTextForPlayerZS(params[0], "~n~~w~ The chat is ~g~Open", "~n~~w~ ѓoc¦yЈ k o—ЎeЇy ¤a¦y —Ёћ ~g~O¦kpЁ¦", 3000, 4);
	}
	mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `muted`='%d' WHERE `id`='%d'", PlayerInfo[params[0]][pMuted], PlayerInfo[params[0]][pRoomAccount]);
	return mysql_tquery(MysqlConnectID, string);
}
flags:jail(2);
cmd:jail(playerid, params[])
{
    if(sscanf(params, "iis[21]", params[0], params[1], params[2]))
	{
		SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /jail [ID игрока] [время] [причина]");
		return SendClientMessage(playerid, 0xFFFFFFAA, "30м: 30, 1ч: 60, 2ч: 120, 3ч: 180, 4ч: 240, 5ч: 300, 6ч: 360, 7ч: 420, 8ч: 480, 9ч: 540, 10ч: 600");
 	}
	if(PlayerInfo[params[0]][pPrison] == 0 && params[1] < 1 || (params[1] > 300 && PlayerInfo[playerid][pAdmin] <= 4 || PlayerInfo[playerid][pAdmin] >= 4 && params[1] > 600))
	{
	    SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы ввели неверное время. Используйте время от 0 до 120");
        return SendClientMessage(playerid, 0xFFFFFFAA, "30м: 30, 1ч: 60, 2ч: 120, 3ч: 180, 4ч: 240, 5ч: 300, 6ч: 360, 7ч: 420, 8ч: 480, 9ч: 540, 10ч: 600");
	}
	if(PlayerInfo[params[0]][pPrison] == 0 && strlen(params[2]) <= 2 || strlen(params[2]) >= 20) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Слишком длинная или короткая причина!");
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным ID не найден!");
	if(PlayerLogged[params[0]] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не зашел в свой аккаунт!");
	if(Spawned[params[0]] == false) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не заспавнился!");
	if(Pause[params[0]][1] >= 3) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находиться в АФК!");
	if(DuelCheck[params[0]][3] != 0) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находится на дуэли!", 1085);
	if(params[0] == playerid) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете самого себя посадить в Тюрьму!");
	if(params[0] != playerid && (PlayerInfo[playerid][pVip] >= 2 && (PlayerInfo[playerid][pVip] < PlayerInfo[params[0]][pVip] || PlayerInfo[playerid][pVip] == PlayerInfo[params[0]][pVip]) || PlayerInfo[playerid][pAdmin] >= 2 && (PlayerInfo[playerid][pAdmin] < PlayerInfo[params[0]][pAdmin] || PlayerInfo[playerid][pAdmin] == PlayerInfo[params[0]][pAdmin]))) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете выполнить данные действия над этим игроком, он выше вас по статусу!");
	/*if(PlayerInfo[playerid][pFloodCmd] >= 1)
	{
		ProtectionFlooding[playerid][1] += 1;
		if(ProtectionFlooding[playerid][1] >= 6) return IsProtectionFlooding(playerid, "втюрьму", "2.1");
		else IsProtectionFlooding(playerid, "_", "0", 16);
		return SendClientMessage(playerid, 0xFFFFFFAA, "Пожалуйста подождите несколько секунд!");
	}
	else
	{
		ProtectionFlooding[playerid][1] += 1;
		ProtectionFlooding[playerid][5] = 10;
		if(ProtectionFlooding[playerid][1] >= 2) IsProtectionFlooding(playerid, "_", "0", 16);
	}*/
	new string[138];
	if(PlayerInfo[params[0]][pPrison] == 0)
	{
	    if(PlayerInfo[params[0]][pFreeMode] == 0) PrisonCheckArena[params[0]] = 10;
		PlayerInfo[params[0]][pPrison] = params[1] * 60;
	 	SpawnPlayerZS(params[0]);
		PlayerPlaySound(params[0], 1085, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "Администратор %s посадил игрока %s в тюрьму на %d минут. С причиной: %s", PlayerName[playerid], PlayerName[params[0]], params[1], params[2]);
		ABroadCast(-1, string, 1, 1);
		if(PlayerInfo[params[0]][pMessage][5] == 1) SendClientMessage(params[0], 0x009390AA, string);
		GameTextForPlayerZS(params[0], "~n~~w~You~r~ Jailed", "~n~~w~‹Ё —Ёћњ Јoca›e®Ё ў ~r~¦«p©Їy", 3000, 4);
		if(SelectionCheck[params[0]][0] == 1) ShowModelSelectionMenu(params[0], 255);
		if(ChoiceItemsCheck[params[0]][0] == 1) SetDialogResponse(params[0], 0, 1);
		if(PlayerInfo[params[0]][pInfoText][0] == 0 && PlayerInfo[params[0]][pFreeMode] == 0)
		{
			TextDrawHideForPlayer(params[0], ArenaInfo[params[0]][0]);
			TextDrawHideForPlayer(params[0], ArenaInfo[params[0]][1]);
			TextDrawHideForPlayer(params[0], ArenaInfo[params[0]][2]);
			TextDrawHideForPlayer(params[0], ArenaInfo[params[0]][11]);
			TextDrawHideForPlayer(params[0], ArenaInfo[params[0]][12]);
		}
		if(MenuProcurementTime[params[0]] != 0)
		{
			MenuProcurementTime[params[0]] = 0;
			TextDrawHideForPlayer(params[0], MenuProcurementIcon[params[0]][0]);
			TextDrawHideForPlayer(params[0], MenuProcurementIcon[params[0]][1]);
		}
        ForbiddenArea[params[0]][0] = 0;
	    DestroyDynamicArea(ForbiddenArea[params[0]][1]);
	}
	else
	{
	    if(PlayerInfo[params[0]][pFreeMode] == 0 && PrisonCheckArena[params[0]] == 0) ChoiceTeamCheck[params[0]][0] = 1;
	    PrisonCheckArena[params[0]] = 0;
		PlayerInfo[params[0]][pPrison] = 0;
		SpawnPlayerZS(params[0]);
		TextDrawHideForPlayer(params[0], ArenaInfo[params[0]][0]);
		TextDrawHideForPlayer(params[0], ArenaInfo[params[0]][10]);
		PlayerPlaySound(params[0], 1053, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "Администратор %s выпустил игрока %s из тюрьмы", PlayerName[playerid], PlayerName[params[0]]);
		ABroadCast(-1, string, 1, 1);
		if(PlayerInfo[params[0]][pMessage][5] == 1) SendClientMessage(params[0], 0x009390AA, string);
		GameTextForPlayerZS(params[0], "~n~~w~ You released from ~g~Рrison", "~n~~w~ ‹Ё —Ёћњ ўЁЈyЎe®Ё њџ ~g~Џ«p©ЇЁ", 3000, 4);
	}
	mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `prison`='%d' WHERE `id`='%d'", PlayerInfo[params[0]][pPrison], PlayerInfo[params[0]][pRoomAccount]);
	return mysql_tquery(MysqlConnectID, string);
}
flags:ahp(3);
cmd:ahp(playerid, params[])
{
    if(sscanf(params, "ii", params[0], params[1])) return SendClientMessage(playerid, 0xFFFFFFAA, "Использование: /ahp [ID игрока] [количество]");
    if(params[1] < 1 || params[1] > 100) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Используйте кол-во здоровья от 1 до 100");
    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным ID не найден!");
	if(PlayerInfo[params[0]][pPassive] == 1) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> У данного игрока включен пассивный режим!");
	if(PlayerLogged[params[0]] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не зашел в свой аккаунт!");
	if(Spawned[params[0]] == false) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не заспавнился!");
	if(Pause[params[0]][1] >= 3) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находиться на паузе!");
	if(DuelCheck[params[0]][3] != 0) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находится на дуэли!", 1085);
	HealthCheck[params[0]][0] = 5;
	Health[params[0]] = params[1];
	SetPlayerHealth(params[0], params[1]);
	PlayerPlaySound(params[0], 1053, 0.0, 0.0, 0.0);
	new string[100];
 	format(string, sizeof(string), "Администратор {4FDF24}%s (ID: %d) {FFFFFF}выдал вам здоровье {4FDF24}%d", PlayerName[playerid], playerid, params[1]);
	SendClientMessage(params[0], 0xFFFFFFAA, string);
  	format(string, sizeof(string), "Вы выдали здоровье {4FDF24}%d {FFFFFF}игроку {4FDF24}%s (ID: %d)", params[1], PlayerName[params[0]], params[0]);
	SendClientMessage(playerid, 0xFFFFFFAA, string);
	format(string, sizeof(string), "Администратор %s (ID: %d) выдали здоровье %d игроку %s (ID: %d)", PlayerName[playerid], playerid, params[1], PlayerName[params[0]], params[0]);
	return ABroadCast(0xC3C3C3FF, string, 0, 4);
}
flags:aar(3);
cmd:aar(playerid, params[])
{
    if(sscanf(params, "iii", params[0], params[1], params[2])) return SendClientMessage(playerid, 0xFFFFFFAA, "Использование: /aar [ID игрока] [количество] [тип 1 - 3]");
    if(params[1] < 0 || params[1] > 100) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Используйте кол-во брони от 0 до 100");
	if(params[1] != 0 && params[2] < 1 || params[2] > 3) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Используйте тип брони от 1 до 3");
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным ID не найден!");
	if(PlayerLogged[params[0]] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не зашел в свой аккаунт!");
	if(Spawned[params[0]] == false) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не заспавнился!");
	if(Pause[params[0]][1] >= 3) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находиться в АФК!");
 	if(DuelCheck[params[0]][3] != 0) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находится на дуэли!", 1085);
	Armour[params[0]][2] = 5;
	Armour[params[0]][0] = params[1];
	if(params[1] != 0) Armour[params[0]][1] = params[2];
	else Armour[params[0]][1] = 0;
	SetPlayerArmour(params[0], params[1]);
	PlayerPlaySound(params[0], 1053, 0.0, 0.0, 0.0);
	new string[118];
	format(string, sizeof(string), "Администратор {4FDF24}%s (ID: %d) {FFFFFF}выдал вам броню {4FDF24}%d {FFFFFF}тип {4FDF24}%d", PlayerName[playerid], playerid, params[1], params[2]);
	SendClientMessage(params[0], 0xFFFFFFAA, string);
	format(string, sizeof(string), "Вы выдали броню {4FDF24}%d {FFFFFF}тип {4FDF24}%d {FFFFFF}игроку {4FDF24}%s (ID: %d)", params[1], params[2], PlayerName[params[0]], params[0]);
	SendClientMessage(playerid, 0xFFFFFFAA, string);
	format(string, sizeof(string), "Администратор %s (ID: %d) выдали броню %d тип %d игроку %s (ID: %d)", PlayerName[playerid], playerid, params[1], params[2], PlayerName[params[0]], params[0]);
	return ABroadCast(0xC3C3C3FF, string, 0, 4);
}
flags:akills(3);
cmd:akills(playerid, params[])
{
    if(sscanf(params, "is[21]", params[0], params[1])) return SendClientMessage(playerid, 0xFFFFFFAA, "Использование: /akills [ID игрока] [причина]");
    if(strlen(params[1]) <= 2 || strlen(params[1]) >= 20) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Слишком длинная или короткая причина!");
    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным ID не найден!");
	if(PlayerLogged[params[0]] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не зашел в свой аккаунт!");
	if(Spawned[params[0]] == false) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не заспавнился!");
	if(Pause[params[0]][1] >= 3) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находиться в АФК!");
	if(DuelCheck[params[0]][3] != 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находится на дуэли!");
    if(params[0] != playerid && (PlayerInfo[playerid][pVip] >= 2 && (PlayerInfo[playerid][pVip] < PlayerInfo[params[0]][pVip] || PlayerInfo[playerid][pVip] == PlayerInfo[params[0]][pVip]) || PlayerInfo[playerid][pAdmin] >= 2 && (PlayerInfo[playerid][pAdmin] < PlayerInfo[params[0]][pAdmin] || PlayerInfo[playerid][pAdmin] == PlayerInfo[params[0]][pAdmin]))) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете выполнить данные действия над этим игроком, он выше вас по статусу!");
	/*if(PlayerInfo[playerid][pFloodCmd] >= 1)
	{
		ProtectionFlooding[playerid][1] += 1;
		if(ProtectionFlooding[playerid][1] >= 6) return IsProtectionFlooding(playerid, "аубить", "2.1");
		else IsProtectionFlooding(playerid, "_", "0", 16);
		return SendClientMessage(playerid, 0xFFFFFFAA, "Пожалуйста подождите несколько секунд!");
	}
	else
	{
		ProtectionFlooding[playerid][1] += 1;
		ProtectionFlooding[playerid][5] = 10;
		if(ProtectionFlooding[playerid][1] >= 2) IsProtectionFlooding(playerid, "_", "0", 16);
	}*/
	new string[146], date[3];
	getdate(date[0], date[1], date[2]);
	KillsCheck[params[0]][10] = 60;
	SetPlayerHealth(params[0], 0.0);
	format(string, sizeof(string), "Игрок %s (ID: %d) был убит администратором %s (ID: %d) | %s", PlayerName[params[0]], params[0], PlayerName[playerid], playerid, params[1]);
	ABroadCast(0xC3C3C3AA, string, 0, 3);
	format(string, sizeof(string), "Вы {4FDF24}%s {FFFFFF}были убиты администратором: {4FDF24}%s | %s | %d/%02d/%02d", PlayerName[params[0]], PlayerName[playerid], params[1], date[2], date[1], date[0]);
	SendClientMessage(params[0], 0xFFFFFFAA, string);
 	format(string, sizeof(string), "Игрок {4FDF24}%s (ID: %d) {FFFFFF}был убит, причина {4FDF24}%s", PlayerName[params[0]], params[0], params[1]);
	return SendClientMessage(playerid, 0xFFFFFFAA, string);
}
flags:nskin(2);
cmd:nskin(playerid, params[])
{
    if(sscanf(params, "ii", params[0], params[1])) return SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /nskin [ID игрока] [ID скина]");
    if(params[1] > 311 || params[1] < 0 || params[1] == 74) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы указали неправильный ID скина используйте ID скина от 0 до 311.");
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным ID не найден!");
	if(PlayerLogged[params[0]] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не зашел в свой аккаунт!");
	if(Spawned[params[0]] == false) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не заспавнился!");
	SetPlayerSkinZS(params[0], params[1]);
	PlayerPlaySound(params[0], 1138, 0.0, 0.0, 0.0);
	new string[112];
	format(string, sizeof(string), "Администратор %s (ID: %d) изменил скин на %d игроку %s (ID: %d)", PlayerName[playerid], playerid, params[1], PlayerName[params[0]], params[0]);
	ABroadCast(0xC3C3C3FF, string, 0, 4);
	format(string, sizeof(string), "Администратор {4FDF24}%s (ID: %d) {FFFFFF}изменил ваш скин на {4FDF24}%d", PlayerName[playerid], playerid, params[1]);
 	SendClientMessage(params[0], 0xFFFFFFAA, string);
	format(string, sizeof(string), "Вы изменили скин игроку {4FDF24}%s (ID: %d) {FFFFFF}на {4FDF24}%d", PlayerName[params[0]], params[0], params[1]);
	return SendClientMessage(playerid, 0xFFFFFFAA, string);
}
flags:ban(3);
cmd:ban(playerid, params[])
{
    if(sscanf(params, "iis[21]", params[0], params[1], params[2])) return SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /ban [ID игрока] [кол-во дней (1-31)] [причина]");
	if(params[1] > 31 || params[1] < 1) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы указали неверное количество дней блокировки игрока. Используйте от 1 и до 31 дней блокировки.");
	if(strlen(params[2]) <= 2 || strlen(params[2]) >= 20) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Слишком длинная или короткая причина!");
    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным ID не найден!");
    if(PlayerLogged[params[0]] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не зашел в свой аккаунт!");
	if(params[0] == playerid) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете самого себя заблокировать!");
    if(params[0] != playerid && (PlayerInfo[playerid][pVip] >= 2 && (PlayerInfo[playerid][pVip] < PlayerInfo[params[0]][pVip] || PlayerInfo[playerid][pVip] == PlayerInfo[params[0]][pVip]) || PlayerInfo[playerid][pAdmin] >= 2 && (PlayerInfo[playerid][pAdmin] < PlayerInfo[params[0]][pAdmin] || PlayerInfo[playerid][pAdmin] == PlayerInfo[params[0]][pAdmin]))) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете выполнить данные действия над этим игроком, он выше вас по статусу!");
	/*if(PlayerInfo[playerid][pFloodCmd] >= 1)
	{
		ProtectionFlooding[playerid][1] += 1;
		if(ProtectionFlooding[playerid][1] >= 6) return IsProtectionFlooding(playerid, "ban", "2.1");
		else IsProtectionFlooding(playerid, "_", "0", 16);
		return SendClientMessage(playerid, 0xFFFFFFAA, "Пожалуйста подождите несколько секунд!");
 	}
	else
 	{
     	ProtectionFlooding[playerid][1] += 1;
		ProtectionFlooding[playerid][5] = 10;
		if(ProtectionFlooding[playerid][1] >= 2) IsProtectionFlooding(playerid, "_", "0", 16);
 	}*/
	new string[208], date[6], slot[25];
	getdate(date[0], date[1], date[2]);
	gettime(date[3], date[4], date[5]);
	format(slot, sizeof(slot), "%02d/%02d/%d %d:%d:%d", date[2], date[1], date[0], date[3], date[4], date[5]);
	format(string, sizeof(string), "INSERT INTO blocked (`name`,`nameblock`,`dateblock`,`unblock`,`reason`) VALUES ('%s','%s','%s','%d','%s')", PlayerName[params[0]], PlayerName[playerid], slot, getdate() + params[1], params[2]);
	mysql_tquery(MysqlConnectID, string);
	format(string, sizeof(string), "Администратор: %s заблокировал игрока %s на %d дней С причиной: %s", PlayerName[playerid], PlayerName[params[0]], params[1], params[2]);
	ABroadCast(0x009390AA, string, 1, 1);
	if(PlayerInfo[params[0]][pMessage][5] == 1) SendClientMessage(params[0], 0x009390AA, string);
	return KickWithMessage(params[0], "Вы были отсоединены от игрового сервера.");
}
flags:sban(4);
cmd:sban(playerid, params[])
{
    if(sscanf(params, "iis[21]", params[0], params[1], params[2])) return SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /sban [ID игрока] [кол-во дней (1-31)] [причина]");
	if(params[1] > 31 || params[1] < 1) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы указали неверное количество дней блокировки игрока. Используйте от 1 и до 31 дней блокировки.");
	if(strlen(params[2]) <= 2 || strlen(params[2]) >= 20) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Слишком длинная или короткая причина!");
    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным ID не найден!");
    if(PlayerLogged[params[0]] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не зашел в свой аккаунт!");
	if(params[0] == playerid) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете самого себя заблокировать!");
    if(params[0] != playerid && (PlayerInfo[playerid][pVip] >= 2 && (PlayerInfo[playerid][pVip] < PlayerInfo[params[0]][pVip] || PlayerInfo[playerid][pVip] == PlayerInfo[params[0]][pVip]) || PlayerInfo[playerid][pAdmin] >= 2 && (PlayerInfo[playerid][pAdmin] < PlayerInfo[params[0]][pAdmin] || PlayerInfo[playerid][pAdmin] == PlayerInfo[params[0]][pAdmin]))) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете выполнить данные действия над этим игроком, он выше вас по статусу!");
	/*if(PlayerInfo[playerid][pFloodCmd] >= 1)
	{
		ProtectionFlooding[playerid][1] += 1;
		if(ProtectionFlooding[playerid][1] >= 6) return IsProtectionFlooding(playerid, "sban", "2.1");
		else IsProtectionFlooding(playerid, "_", "0", 16);
		return SendClientMessage(playerid, 0xFFFFFFAA, "Пожалуйста подождите несколько секунд!");
 	}
	else
 	{
     	ProtectionFlooding[playerid][1] += 1;
		ProtectionFlooding[playerid][5] = 10;
		if(ProtectionFlooding[playerid][1] >= 2) IsProtectionFlooding(playerid, "_", "0", 16);
 	}*/
	new string[208], date[6], slot[25];
	getdate(date[0], date[1], date[2]);
	gettime(date[3], date[4], date[5]);
	format(slot, sizeof(slot), "%02d/%02d/%d %d:%d:%d", date[2], date[1], date[0], date[3], date[4], date[5]);
	format(string, sizeof(string), "INSERT INTO blocked (`name`,`nameblock`,`dateblock`,`unblock`,`reason`) VALUES ('%s','%s','%s','%d','%s')", PlayerName[params[0]], PlayerName[playerid], slot, getdate() + params[1], params[2]);
	mysql_tquery(MysqlConnectID, string);
	format(string, sizeof(string), "Администратор: %s (ID: %d) бесшумно заблокировал игрока %s (ID: %d) на %d дней | %s", PlayerName[playerid], playerid, PlayerName[params[0]], params[0], params[1], params[2]);
	ABroadCast(0xC3C3C3AA, string, 0, 4);
	return KickWithMessage(params[0]);
}
flags:kick(2);
cmd:kick(playerid, params[])
{
    if(sscanf(params, "is[21]", params[0], params[1])) return SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /kick [ID игрока] [причина]");
    if(strlen(params[1]) <= 2 || strlen(params[1]) >= 20) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Слишком длинная или короткая причина!");
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным ID не найден!");
 	if(params[0] == playerid) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете самого себя кикнуть!");
    if(params[0] != playerid && (PlayerInfo[playerid][pVip] >= 2 && (PlayerInfo[playerid][pVip] < PlayerInfo[params[0]][pVip] || PlayerInfo[playerid][pVip] == PlayerInfo[params[0]][pVip]) || PlayerInfo[playerid][pAdmin] >= 2 && (PlayerInfo[playerid][pAdmin] < PlayerInfo[params[0]][pAdmin] || PlayerInfo[playerid][pAdmin] == PlayerInfo[params[0]][pAdmin]))) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете выполнить данные действия над этим игроком, он выше вас по статусу!");
	/*if(PlayerInfo[playerid][pFloodCmd] >= 1)
	{
		ProtectionFlooding[playerid][1] += 1;
		if(ProtectionFlooding[playerid][1] >= 6) return IsProtectionFlooding(playerid, "kick", "2.1");
		else IsProtectionFlooding(playerid, "_", "0", 16);
		return SendClientMessage(playerid, 0xFFFFFFAA, "Пожалуйста подождите несколько секунд!");
	}
	else
   	{
  		ProtectionFlooding[playerid][1] += 1;
  		ProtectionFlooding[playerid][5] = 10;
		if(ProtectionFlooding[playerid][1] >= 2) IsProtectionFlooding(playerid, "_", "0", 16);
	}*/
	new string[118];
	format(string, sizeof(string), "Администратор %s кикнул(а) игрока %s. С причиной: %s", PlayerName[playerid], PlayerName[params[0]], params[1]);
	ABroadCast(0x009390AA, string, 1, 1);
    if(PlayerInfo[params[0]][pMessage][5] == 1) SendClientMessage(params[0], 0x009390AA, string);
	PlayerPlaySound(params[0], 31202, 0.0, 0.0, 0.0);
	return KickWithMessage(params[0], "Вы были отсоединены от игрового сервера.");
}
flags:skick(4);
cmd:skick(playerid, params[])
{
    if(sscanf(params, "is[21]", params[0], params[1])) return SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /skick [ID игрока] [причина]");
    if(strlen(params[1]) <= 2 || strlen(params[1]) >= 20) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Слишком длинная или короткая причина!");
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным ID не найден!");
 	if(params[0] == playerid) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете самого себя кикнуть!");
    if(params[0] != playerid && (PlayerInfo[playerid][pVip] >= 2 && (PlayerInfo[playerid][pVip] < PlayerInfo[params[0]][pVip] || PlayerInfo[playerid][pVip] == PlayerInfo[params[0]][pVip]) || PlayerInfo[playerid][pAdmin] >= 2 && (PlayerInfo[playerid][pAdmin] < PlayerInfo[params[0]][pAdmin] || PlayerInfo[playerid][pAdmin] == PlayerInfo[params[0]][pAdmin]))) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете выполнить данные действия над этим игроком, он выше вас по статусу!");
	/*if(PlayerInfo[playerid][pFloodCmd] >= 1)
	{
		ProtectionFlooding[playerid][1] += 1;
		if(ProtectionFlooding[playerid][1] >= 6) return IsProtectionFlooding(playerid, "skick", "2.1");
		else IsProtectionFlooding(playerid, "_", "0", 16);
		return SendClientMessage(playerid, 0xFFFFFFAA, "Пожалуйста подождите несколько секунд!");
	}
	else
   	{
  		ProtectionFlooding[playerid][1] += 1;
  		ProtectionFlooding[playerid][5] = 10;
		if(ProtectionFlooding[playerid][1] >= 2) IsProtectionFlooding(playerid, "_", "0", 16);
	}*/
	new string[134];
	format(string, sizeof(string), "Администратор: %s (ID: %d) бесшумно кикнул игрока %s (ID: %d) | %s", PlayerName[playerid], playerid, PlayerName[params[0]], params[0], params[1]);
	ABroadCast(0xC3C3C3AA, string, 0, 4);
	return Kick(params[0]);
}
flags:gettp(2);
cmd:gettp(playerid, params[])
{
    if(sscanf(params, "i", params[0])) return SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /gettp [ID игрока]");
    if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным ID не найден!");
    if(PlayerLogged[params[0]] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не зашел в свой аккаунт!");
   	if(Spawned[params[0]] == false) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не заспавнился!");
   	if(Pause[params[0]][1] >= 3) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находиться в АФК!");
    if(DuelCheck[params[0]][3] != 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находится на дуэли!");
	if(params[0] == playerid) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете самого себя телепортировать к себе!");
    if(params[0] != playerid && (PlayerInfo[playerid][pVip] >= 2 && (PlayerInfo[playerid][pVip] < PlayerInfo[params[0]][pVip] || PlayerInfo[playerid][pVip] == PlayerInfo[params[0]][pVip]) || PlayerInfo[playerid][pAdmin] >= 2 && (PlayerInfo[playerid][pAdmin] < PlayerInfo[params[0]][pAdmin] || PlayerInfo[playerid][pAdmin] == PlayerInfo[params[0]][pAdmin]))) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете выполнить данные действия над этим игроком, он выше вас по статусу!");
	/*if(PlayerInfo[playerid][pFloodCmd] >= 1)
	{
		ProtectionFlooding[playerid][1] += 1;
		if(ProtectionFlooding[playerid][1] >= 6) return IsProtectionFlooding(playerid, "gettp", "2.1");
		else IsProtectionFlooding(playerid, "_", "0", 6);
		return SendClientMessage(playerid, 0xFFFFFFAA, "Пожалуйста подождите несколько секунд!");
	}
	else
	{
		ProtectionFlooding[playerid][1] += 1;
		ProtectionFlooding[playerid][5] = 10;
		if(ProtectionFlooding[playerid][1] >= 4) IsProtectionFlooding(playerid, "_", "0", 6);
	}*/
 	new Float:Pos[4];
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	GetPlayerFacingAngle(playerid, Pos[3]);
	if(IsPlayerInAnyVehicle(params[0]))
	{
 		if(FrozenCheck[params[0]] == 1) FrozenCheck[params[0]] = 3;
 		SetPlayerInteriorZS(params[0], GetPlayerInterior(playerid));
 		SetPlayerVirtualWorld(params[0], GetPlayerVirtualWorld(playerid));
 		SetVehiclePosZS(params[0], Pos[0], Pos[1] + 2.0, Pos[2], Pos[3]);
	}
	else SetPlayerPosZS(params[0], Pos[0], Pos[1] + 1.5, Pos[2], Pos[3], GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
	new string[114];
	format(string, sizeof(string), "Администратор {4FDF24}%s (ID: %d) {FFFFFF}телепортировал вас ксебе.", PlayerName[playerid], playerid);
    SendClientMessage(params[0], 0xFFFFFFAA, string);
	format(string, sizeof(string), "Вы телепортировали игрока {4FDF24}%s (ID: %d) {FFFFFF}к себе.", PlayerName[params[0]], params[0]);
	SendClientMessage(playerid, 0xFFFFFFAA, string);
	format(string, sizeof(string), "Администратор %s (ID: %d) телепортировал игрока %s (ID: %d) к себе", PlayerName[playerid], playerid, PlayerName[params[0]], params[0]);
	return ABroadCast(0xC3C3C3AA, string, 0, 2);
}
cmd:gotp(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pVip] < 3) return 1;
    if(FrozenCheck[playerid] == 1) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете использовать данную команду пока заморожены!");
    if(sscanf(params, "i", params[0])) return SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /gotp [ID игрока]");
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным ID не найден!");
 	if(PlayerLogged[params[0]] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не зашел в свой аккаунт!");
	if(Spawned[params[0]] == false) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не заспавнился!");
	if(DuelCheck[params[0]][3] != 0) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находится на дуэли!", 1085);
	if(params[0] == playerid) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете сам к себе телепортироваться!");
    if(params[0] != playerid && (PlayerInfo[playerid][pVip] >= 2 && (PlayerInfo[playerid][pVip] < PlayerInfo[params[0]][pVip] || PlayerInfo[playerid][pVip] == PlayerInfo[params[0]][pVip]) || PlayerInfo[playerid][pAdmin] >= 2 && (PlayerInfo[playerid][pAdmin] < PlayerInfo[params[0]][pAdmin] || PlayerInfo[playerid][pAdmin] == PlayerInfo[params[0]][pAdmin]))) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете выполнить данные действия над этим игроком, он выше вас по статусу!");
	/*if(PlayerInfo[playerid][pFloodCmd] >= 1)
	{
		ProtectionFlooding[playerid][1] += 1;
		if(ProtectionFlooding[playerid][1] >= 6) return IsProtectionFlooding(playerid, "gotp", "2.1");
   		else IsProtectionFlooding(playerid, "_", "0", 6);
		return SendClientMessage(playerid, 0xFFFFFFAA, "Пожалуйста подождите несколько секунд!");
 	}
 	else
    {
  		ProtectionFlooding[playerid][1] += 1;
  		ProtectionFlooding[playerid][5] = 10;
		if(ProtectionFlooding[playerid][1] >= 4) IsProtectionFlooding(playerid, "_", "0", 6);
	}*/
  	new string[115], Float:Pos[4], info[16];
   	if(PlayerInfo[playerid][pAdmin] >= 2) format(info, sizeof(info), "Администратор");
	else if(PlayerInfo[playerid][pVip] >= 1) format(info, sizeof(info), "VIP игроком");
	GetPlayerPos(params[0], Pos[0], Pos[1], Pos[2]);
	GetPlayerFacingAngle(params[0], Pos[3]);
 	if(IsPlayerInAnyVehicle(playerid))
	{
	 	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(params[0]));
		SetPlayerInteriorZS(playerid, GetPlayerInterior(params[0]));
		SetVehiclePosZS(playerid, Pos[0], Pos[1] + 2.0, Pos[2], Pos[3]);
 	}
 	else SetPlayerPosZS(playerid, Pos[0], Pos[1] + 1.5, Pos[2], Pos[3], GetPlayerInterior(params[0]), GetPlayerVirtualWorld(params[0]));
	format(string, sizeof(string), "%s {4FDF24}%s (ID: %d) {FFFFFF}телепортировался к вам.", info, PlayerName[playerid], playerid);
	SendClientMessage(params[0], 0xFFFFFFAA, string);
	format(string, sizeof(string), "Вы телепортировались к игроку {4FDF24}%s (ID: %d)", PlayerName[params[0]], params[0]);
	SendClientMessage(playerid, 0xFFFFFFAA, string);
	format(string, sizeof(string), "%s %s (ID: %d) телепортировался к игроку %s (ID: %d)", info, PlayerName[playerid], playerid, PlayerName[params[0]], params[0]);
	return ABroadCast(0xC3C3C3AA, string, 0, 4);
}
flags:wslot(2);
cmd:wslot(playerid, params[])
{
    if(sscanf(params, "i", params[0])) return SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /wslot ID игрока");
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным ID не найден!");
	new string[40*13], str[42], slot[2];
    for(new x; x < 13; x ++)
	{
	    GetPlayerWeaponData(params[0], x, slot[0], slot[1]);
	    format(str, sizeof(str), "#%d - ID:%d %d\n", x, slot[0], slot[1]);
	    strcat(string, str);
 	}
 	ShowPlayerDialogZS(playerid, 0, DIALOG_STYLE_MSGBOX, "wslot", string, "Закрыть", "");
	return 1;
}
cmd:pm(playerid, params[])
{
    if(PlayerInfo[playerid][pMuted] != 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете использовать данную команду в данный момент!");
	if(PlayerInfo[playerid][pMessage][1] == 1) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы запретили отправлять личные сообщения!");
	if(GetPVarInt(playerid, "Message") > gettime()) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Отправлять личные сообщение возможно только 1 раз в 15 секунд!");
    if(sscanf(params, "is[65]", params[0], params[1])) return SendClientMessage(playerid, 0xFFFFFFAA, "Используйте: /pm [ID игрока] [текст сообщения]");
    if(strlen(params[1]) <= 1 || strlen(params[1]) >= 64) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Слишком длинный или короткий текст сообщения!");
	if(!IsPlayerConnected(params[0])) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок с указанным ID не найден!");
 	if(PlayerLogged[params[0]] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не зашел в свой аккаунт!");
	if(Spawned[params[0]] == false) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не заспавнился!");
	if(Pause[params[0]][1] >= 3) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок находиться в АФК!");
 	//if(params[0] == playerid) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете самому себе отправить Личное сообщение!");
    if(PlayerInfo[params[0]][pMessage][1] == 1) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок запретил отправлять себе личные сообщения!");
	new string[164];
	format(string, sizeof(string), "Личное сообщение отправлено: {4FDF24}%s (ID: %d) | %s", PlayerName[params[0]], params[0], params[1]);
    SendClientMessageZS(playerid, 0xFFFFFFFF, string, 1138);
	format(string, sizeof(string), "Личное сообщение от: {4FDF24}%s (ID: %d) | %s", PlayerName[playerid], playerid, params[1]);
	SendClientMessageZS(params[0], 0xFFFFFFFF, string, 40405);
	return SetPVarInt(playerid, "Message", gettime() + 15);
}
cmd:free(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pVip] < 3) return 1;
	if(InteractionCheck[playerid][0] != 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Бомба или наземная мина в данный момент не была активирована!");
	if(FrozenCheck[playerid] == 1) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Вы не можете использовать данную команду пока заморожены!");
	new string[110];
	if(PlayerInfo[playerid][pFreeMode] == 0) format(string, sizeof(string), "{FFFFFF}Вы хотите перейти в {4FDF24}Свободный режим{FFFFFF}, в данный момент человек(а) {4FDF24}%d{FFFFFF}.", PlayerOnline[1]);
	else format(string, sizeof(string), "{FFFFFF}Вы хотите перейти на {4FDF24}Детматч{FFFFFF}, в данный момент человек(а) {4FDF24}%d{FFFFFF}.", PlayerOnline[2] + PlayerOnline[3] + PlayerOnline[4]);
	return ShowPlayerDialogZS(playerid, 117, DIALOG_STYLE_MSGBOX, "Свободный режим", string, "Дальше", "Отмена");
}
cmd:menu(playerid, params[]) return SetDialogResponse(playerid, 1);

stock FindSpecifiersInStringBy_seriu(message[])
{
    new message_length = strlen(message);
    for(new i; i < message_length; i ++) if(message[i] == 0x25) message[i] = 0x23;
    return 1;
}

stock SetDialogResponse(playerid, dialogid, style = 0, check = 0)
{
    switch(dialogid)
    {
        case 0:
        {
        	new lang = PlayerInfo[playerid][pRussifier][1];
            switch(style)
            {
                case 1:
                {
				    if(ChoiceItemsCheck[playerid][4] == 1) ClearAnimations(playerid);
					for(new x; x < 16; x ++) 
					{
						if(x < 6) ChoiceItemsCheck[playerid][x] = 0;
						TextDrawHideForPlayer(playerid, ChoiceItems[playerid][x]);
					}
		        	TextDrawHideForPlayer(playerid, DuelInfo[playerid][14]);
		        	TextDrawHideForPlayer(playerid, DuelInfo[playerid][34]);
		        	PlayerTextDrawDestroy(playerid, ChoiceItemsPosi[playerid]);
		        	if(PlayerInfo[playerid][pInfoText][0] == 0 && PlayerInfo[playerid][pFreeMode] == 0)
					{
						TextDrawShowForPlayer(playerid, ArenaInfo[playerid][0]);
						TextDrawShowForPlayer(playerid, ArenaInfo[playerid][10]);
					}
					return 1;
                }
                case 2://5567
                {
                	new string[17];
                	if(check == 1) ChoiceItemsCheck[playerid][3] = ChoiceItemsCheck[playerid][2];
                	PlayerTextDrawDestroy(playerid, ChoiceItemsPosi[playerid]);
 			     	if(check != 2)
				 	{
                        ChoiceItemsCheck[playerid][2] = 1;
					 	ChoiceItemsPosi[playerid] = InteractionPosition(playerid, PositionLines[0][0]);
	 			    }
	 			    else ChoiceItemsPosi[playerid] = InteractionPosition(playerid, PositionLines[0][5]);
 					ChoiceItemsCheck[playerid][1] = 4;
    				ChoiceItemsCheck[playerid][5] = 1;
					format(string, sizeof(string), "%s %d/2", TextDrawInfo[21][lang], ChoiceItemsCheck[playerid][5]);
					TextDrawSetString(ChoiceItems[playerid][15], string);
					if(PlayerInfo[playerid][pLevel][1] >= LevelScore[1][0])
					{
						format(string, sizeof(string), "%d", PlayerInfo[playerid][pBonus][6]);
						TextDrawSetStringZS(ChoiceItems[playerid][2], ChoiceItems[playerid][9], TextDrawInfo[22][lang], string);
					}
     				else TextDrawSetStringZS(ChoiceItems[playerid][2], ChoiceItems[playerid][9], TextDrawInfo[22][lang], TextDrawInfo[42][lang]);
     				if(PlayerInfo[playerid][pLevel][1] >= LevelScore[5][0])
	        		{
          				if(PlayerInfo[playerid][pBonus][2] != 0)
	            		{
             				format(string, sizeof(string), "%d", PlayerInfo[playerid][pBonus][2]);
             				TextDrawSetStringZS(ChoiceItems[playerid][3], ChoiceItems[playerid][10], TextDrawInfo[23][lang], string);
   	            		}
   	            		else TextDrawSetStringZS(ChoiceItems[playerid][3], ChoiceItems[playerid][10], TextDrawInfo[23][lang], TextDrawInfo[40][lang]);
			  		}
       				else TextDrawSetStringZS(ChoiceItems[playerid][3], ChoiceItems[playerid][10], TextDrawInfo[23][lang], TextDrawInfo[42][lang]);
  	        		if(PlayerInfo[playerid][pLevel][1] >= LevelScore[7][0])
        			{
         				if(PlayerInfo[playerid][pBonus][3] != 0)
         				{
          					format(string, sizeof(string), "%d", PlayerInfo[playerid][pBonus][3]);
          					TextDrawSetStringZS(ChoiceItems[playerid][4], ChoiceItems[playerid][11], TextDrawInfo[24][lang], string);
	            		}
						else TextDrawSetStringZS(ChoiceItems[playerid][4], ChoiceItems[playerid][11], TextDrawInfo[24][lang], TextDrawInfo[40][lang]);
					}
     				else TextDrawSetStringZS(ChoiceItems[playerid][4], ChoiceItems[playerid][11], TextDrawInfo[24][lang], TextDrawInfo[42][lang]);
     				if(PlayerInfo[playerid][pLevel][1] >= LevelScore[4][0])//бандам
         			{
						if(PlayerInfo[playerid][pBonus][1] != 0)
      					{
    						format(string, sizeof(string), "%d", PlayerInfo[playerid][pBonus][1]);
    						TextDrawSetStringZS(ChoiceItems[playerid][5], ChoiceItems[playerid][12], TextDrawInfo[25][lang], string);
      					}
      					else TextDrawSetStringZS(ChoiceItems[playerid][5], ChoiceItems[playerid][12], TextDrawInfo[25][lang], TextDrawInfo[40][lang]);
   					}
     				else TextDrawSetStringZS(ChoiceItems[playerid][5], ChoiceItems[playerid][12], TextDrawInfo[25][lang], TextDrawInfo[42][lang]);
					if(PlayerInfo[playerid][pLevel][1] >= LevelScore[3][0])
					{
					    if(PlayerInfo[playerid][pBonus][0] == 0) TextDrawSetStringZS(ChoiceItems[playerid][6], ChoiceItems[playerid][13], TextDrawInfo[26][lang], TextDrawInfo[40][lang]);
					    else TextDrawSetStringZS(ChoiceItems[playerid][6], ChoiceItems[playerid][13], TextDrawInfo[26][lang], TextDrawInfo[26+PlayerInfo[playerid][pBonus][0]][lang]);
					}
					else TextDrawSetStringZS(ChoiceItems[playerid][6], ChoiceItems[playerid][13], TextDrawInfo[26][lang], TextDrawInfo[42][lang]);
					if(PlayerInfo[playerid][pLevel][1] >= LevelScore[8][0])
					{
						if(PlayerInfo[playerid][pBonus][4] != 0)
						{
							format(string, sizeof(string), "%d", PlayerInfo[playerid][pBonus][4]);
							TextDrawSetStringZS(ChoiceItems[playerid][7], ChoiceItems[playerid][14], TextDrawInfo[33][lang], string);
						}
						else TextDrawSetStringZS(ChoiceItems[playerid][7], ChoiceItems[playerid][14], TextDrawInfo[33][lang], TextDrawInfo[40][lang]);
					}
					else TextDrawSetStringZS(ChoiceItems[playerid][7], ChoiceItems[playerid][14], TextDrawInfo[33][lang], TextDrawInfo[42][lang]);
     				return 1;
                }//5567
                case 3:
                {
                    new string[17];
                    PlayerTextDrawDestroy(playerid, ChoiceItemsPosi[playerid]);
                    if(check == 1)
					{
						ChoiceItemsCheck[playerid][2] = 9;
						ChoiceItemsPosi[playerid] = InteractionPosition(playerid, PositionLines[0][2]);
	 				}
	 				else ChoiceItemsPosi[playerid] = InteractionPosition(playerid, PositionLines[0][0]);
                	ChoiceItemsCheck[playerid][5] = 2;
			        format(string, sizeof(string), "%s %d/2", TextDrawInfo[21][lang], ChoiceItemsCheck[playerid][5]);
  	        		TextDrawSetString(ChoiceItems[playerid][15], string);
			        if(PlayerInfo[playerid][pLevel][1] >= LevelScore[10][0])
			        {
          				if(PlayerInfo[playerid][pBonus][5] == 0) TextDrawSetStringZS(ChoiceItems[playerid][2], ChoiceItems[playerid][9], TextDrawInfo[34][lang], TextDrawInfo[40][lang]);
          				else TextDrawSetStringZS(ChoiceItems[playerid][2], ChoiceItems[playerid][9], TextDrawInfo[34][lang], TextDrawInfo[41][lang]);
			        }
			        else TextDrawSetStringZS(ChoiceItems[playerid][2], ChoiceItems[playerid][9], TextDrawInfo[34][lang], TextDrawInfo[42][lang]);
					if(PlayerInfo[playerid][pLevel][1] >= LevelScore[2][0])
     				{
						if(PlayerInfo[playerid][pBonus][8] == 0) TextDrawSetStringZS(ChoiceItems[playerid][3], ChoiceItems[playerid][10], TextDrawInfo[36][lang], TextDrawInfo[40][lang]);
						else TextDrawSetStringZS(ChoiceItems[playerid][3], ChoiceItems[playerid][10], TextDrawInfo[36][lang], TextDrawInfo[41][lang]);
					}
					else TextDrawSetStringZS(ChoiceItems[playerid][3], ChoiceItems[playerid][10], TextDrawInfo[36][lang], TextDrawInfo[42][lang]);
					if(PlayerInfo[playerid][pLevel][1] >= LevelScore[9][0])
			        {
	        			if(PlayerInfo[playerid][pBonus][7] == 0) TextDrawSetStringZS(ChoiceItems[playerid][4], ChoiceItems[playerid][11], TextDrawInfo[35][lang], TextDrawInfo[40][lang]);
		        		else TextDrawSetStringZS(ChoiceItems[playerid][4], ChoiceItems[playerid][11], TextDrawInfo[35][lang], TextDrawInfo[41][lang]);
					}
					else TextDrawSetStringZS(ChoiceItems[playerid][4], ChoiceItems[playerid][11], TextDrawInfo[35][lang], TextDrawInfo[42][lang]);
					TextDrawSetStringZS(ChoiceItems[playerid][5], ChoiceItems[playerid][12], "_", "_");
     				TextDrawSetStringZS(ChoiceItems[playerid][6], ChoiceItems[playerid][13], "_", "_");
     				TextDrawSetStringZS(ChoiceItems[playerid][7], ChoiceItems[playerid][14], "_", "_");
                }
            }
            return 1;
        }
		case 1:
		{
			if(PlayerOnline[2] >= 36 || ServerConfig[2] == 0) ShowPlayerDialogZS(playerid, 2228, DIALOG_STYLE_LIST, "Главное меню", "Статистика персонажа\nНастройки\nБанды\nПомощь\nДостижение\nОнлайн радио\nДоп возможности\nСвязь с администрацией\nТоп лисп\nСменить сервер", "Выбрать", "Отмена");
   			else ShowPlayerDialogZS(playerid, 2228, DIALOG_STYLE_LIST, "Главное меню", "Статистика персонажа\nНастройки\nБанды\nПомощь\nДостижение\nОнлайн радио\nДоп возможности\nСвязь с администрацией\nТоп лисп", "Выбрать", "Отмена");
			return 1;
		}
		case 2:
        {
            new string[451];
            strcat(string, "Сменить пароль\t\nРедактировать HUD\n");
			if(PlayerInfo[playerid][pVip] >= 2 || PlayerInfo[playerid][pAdmin] >= 2) strcat(string, "Дополнительные функции\n");
			if(PlayerInfo[playerid][pMessage][1] == 0) strcat(string, "Прием личных сообщений\t[{61dd61}Включен{FFFFFF}]\n");
			else strcat(string, "Прием личных сообщений\t[{f44747}Отключен{FFFFFF}]\n");
			if(PlayerInfo[playerid][pDuel][0] == 0) strcat(string, "Прием вызовов на дуэль\t[{61dd61}Включен{FFFFFF}]\n");
			else strcat(string, "Прием вызовов на дуэль\t[{f44747}Отключен{FFFFFF}]\n");
			if(PlayerInfo[playerid][pDuel][3] == 0) strcat(string, "Ставки на бой на вас\t[{61dd61}Включена{FFFFFF}]\n");
			else strcat(string, "Ставки на бой на вас\t[{f44747}Отключена{FFFFFF}]\n");
			if(PlayerInfo[playerid][pBindingIp] == 0) strcat(string, "Привязка по IP адресу\t[{f44747}Отключена{FFFFFF}]\n");
			else strcat(string, "Привязка по IP адресу\t[{61dd61}Включена{FFFFFF}]\n");
			if(strlen(PlayerInfo[playerid][pPass1]) >= 2) strcat(string, "Дополнительный пароль\t[{61dd61}Включен{FFFFFF}]\nАнти спавн килл\t[{61dd61}%d секунд{FFFFFF}]\nАнти проваливания\t[{61dd61}%d секунд{FFFFFF}]\n");
			else strcat(string, "Дополнительный пароль\t[{f44747}Отключен{FFFFFF}]\nАнти спавн килл\t[{61dd61}%d секунд{FFFFFF}]\nАнти проваливания\t[{61dd61}%d секунд{FFFFFF}]\n");
			if(PlayerInfo[playerid][pMessage][5] == 0) strcat(string, "Действие администраторов\t[{61dd61}Включены{FFFFFF}]");
			else strcat(string, "Действие администраторов\t[{f44747}Отключены{FFFFFF}]");
			format(string, sizeof(string), string, PlayerInfo[playerid][pSpawnKill][0], PlayerInfo[playerid][pSpawnKill][2]);
			return ShowPlayerDialogZS(playerid, 71, DIALOG_STYLE_TABLIST, "Настройки", string, "Выбрать", "Назад");
        }
        case 3:
        {
   			new string[775];
			if(PlayerInfo[playerid][pInfoText][0] == 0) strcat(string, "Таблица счет команд\t[{61dd61}Включена{FFFFFF}]\n");
			else strcat(string, "Таблица счет команд\t[{f44747}Отключена{FFFFFF}]\n");
			switch(PlayerInfo[playerid][pInfoText][1])
			{
   				case 0: strcat(string, "Таблица нанесения урона\t[{f44747}Отключена{FFFFFF}]\n");
   				case 1: strcat(string, "Таблица нанесения урона\t[{61dd61}Включена{FFFFFF}]\n");
   				case 2: strcat(string, "Таблица нанесения урона\t[{61dd61}Включена + пинг{FFFFFF}]\n");
			}
   			if(PlayerInfo[playerid][pInfoText][2] == 0) strcat(string, "Счетчик FSP\t[{61dd61}Включен{FFFFFF}]\n");
			else strcat(string, "Счетчик FSP\t[{f44747}Отключен{FFFFFF}]\n");
   			if(PlayerInfo[playerid][pInfoText][5] == 0) strcat(string, "Оружейное меню\t[{61dd61}TextDraw{FFFFFF}]\n");
   			else strcat(string, "Оружейное меню\t[{61dd61}Диалог{FFFFFF}]\n");
			if(PlayerInfo[playerid][pInfoText][3] == 0) strcat(string, "Показатель здоровье\t[{61dd61}Включены{FFFFFF}]\n");
   			else strcat(string, "Показатель здоровье\t[{f44747}Отключены{FFFFFF}]\n");
   			if(PlayerInfo[playerid][pInfoText][4] == 0) strcat(string, "Спидометр\t[{61dd61}Включен{FFFFFF}]\n");
  			else strcat(string, "Спидометр\t[{f44747}Отключен{FFFFFF}]\n");
			if(PlayerInfo[playerid][pInfoText][6] == 0) strcat(string, "Эффект от очков\t[{61dd61}Включен{FFFFFF}]\n");
  			else strcat(string, "Эффект от очков\t[{f44747}Отключен{FFFFFF}]\n");
			if(PlayerInfo[playerid][pInfoText][7] == 0) strcat(string, "Текущее время\t[{61dd61}Включено{FFFFFF}]\n");
			else strcat(string, "Текущее время\t[{f44747}Отключено{FFFFFF}]\n");
			if(PlayerInfo[playerid][pInfoText][12] == 0) strcat(string, "Меню взаимодействий\t[{61dd61}TextDraw{FFFFFF}]\n");
   			else strcat(string, "Меню взаимодействий\t[{61dd61}Диалог{FFFFFF}]\n"); 
			if(PlayerInfo[playerid][pAimingX][0] >= 1)
			{
				if(PlayerInfo[playerid][pAimingX][0] == 1) strcat(string, "Указатель попадания\t[{61dd61}Стиль I{FFFFFF}]\n");
				else strcat(string, "Указатель попадания\t[{61dd61}Стиль II{FFFFFF}]\n");
			}
			else strcat(string, "Указатель попадания\t[{f44747}Отключен{FFFFFF}]\n");
			if(PlayerInfo[playerid][pRussifier][0] == 0) strcat(string, "Русификатор GameText\t[{f44747}Отключен{FFFFFF}]\n");
			else strcat(string, "Русификатор GameText\t[{61dd61}Включен{FFFFFF}]\n");
			if(PlayerInfo[playerid][pRussifier][1] == 0) strcat(string, "Русификатор TextDraw\t[{f44747}Отключен{FFFFFF}]\n");
			else strcat(string, "Русификатор TextDraw\t[{61dd61}Включен{FFFFFF}]\n");
			if(PlayerInfo[playerid][pInfoText][8] == 1) strcat(string, "Денежные уведомления\t[{f44747}Отключены{FFFFFF}]\n");
			else strcat(string, "Денежные уведомления\t[{61dd61}Включены{FFFFFF}]\n");
            if(PlayerInfo[playerid][pInfoText][9] == 1) strcat(string, "Уведомление о убийстве\t[{f44747}Отключены{FFFFFF}]\n");
			else strcat(string, "Уведомление о убийстве\t[{61dd61}Включены{FFFFFF}]\n");
			if(PlayerInfo[playerid][pInfoText][10] != 3)
			{
			    switch(PlayerInfo[playerid][pInfoText][10])
	   			{
				    case 0: strcat(string, "Уведомление о достижение\t[{61dd61}Включены TD{FFFFFF}]\n");
				    case 1: strcat(string, "Уведомление о достижение\t[{61dd61}Включены TD + Chat{FFFFFF}]\n");
				    case 2: strcat(string, "Уведомление о достижение\t[{61dd61}Включены Chat{FFFFFF}]\n");
				}
			}
			else strcat(string, "Уведомление о достижение\t[{f44747}Отключены{FFFFFF}]\n");
			if(PlayerInfo[playerid][pInfoText][11] == 1) strcat(string, "Топ игроков в конце раунда\t[{f44747}Отключен{FFFFFF}]");
			else strcat(string, "Топ игроков в конце раунда\t[{61dd61}Включен{FFFFFF}]");
			return ShowPlayerDialogZS(playerid, 7102, DIALOG_STYLE_TABLIST, "Редактировать HUD сервера", string, "Выбрать", "Назад");
        }
        case 4:
        {
   			new string[388];
			if(PlayerInfo[playerid][pAdmin] >= 3) strcat(string, "Оружие при спавне\t\n");
			if(PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pVip] == 3)
			{
				strcat(string, "Цвет никнейма\t[{10F441}№ {%06x}%06x{FFFFFF}]\n");
				format(string, sizeof(string), string, PlayerInfo[playerid][pNickColor] >>> 8, PlayerInfo[playerid][pNickColor] >>> 8);
			}
			strcat(string, "Личное время\t[{10F441}№ %d:00{FFFFFF}]\nЛичная погода\t[{10F441}№ %d{FFFFFF}]\n");
			format(string, sizeof(string), string, PlayerInfo[playerid][pTimers], PlayerInfo[playerid][pWeather]);
			if(PlayerInfo[playerid][pAdmin] == 0)
			{
	  			if(PlayerInfo[playerid][pVip] == 3)
	  			{
					strcat(string, "Сменить скин\t[{10F441}№ %d{FFFFFF}]\n");
					format(string, sizeof(string), string, PlayerInfo[playerid][pYourSkin][0]);
				}
			}
			else
			{
				strcat(string, "Сменить скин\t[{10F441}№ %d{FFFFFF}]\n");
				format(string, sizeof(string), string, PlayerInfo[playerid][pYourSkin][0]);
				if(PlayerInfo[playerid][pMessage][4] == 0) strcat(string, "Просмотр команд игроков\t[{FF3535}Отключен{FFFFFF}]\n");
				else strcat(string, "Просмотр команд игроков\t[{10F441}Включен{FFFFFF}]\n");
			}
			if(PlayerInfo[playerid][pAdmin] >= 4)
			{
				if(PlayerInfo[playerid][pMessage][2] == 0) strcat(string, "Просмотр чат команд\t[{FF3535}Отключен{FFFFFF}]\n");
				else strcat(string, "Просмотр чат команд\t[{10F441}Включен{FFFFFF}]\n");
				if(PlayerInfo[playerid][pMessage][3] == 0) strcat(string, "Просмотр чат банд\t[{FF3535}Отключен{FFFFFF}]");
				else strcat(string, "Просмотр чат банд\t[{10F441}Включен{FFFFFF}]");
			}
			return ShowPlayerDialogZS(playerid, 7103, DIALOG_STYLE_TABLIST, "Дополнительные функции", string, "Выбрать", "Назад");
        }
        case 5:
        {
            new string[62];
            if(PlayerInfo[playerid][pGang][0] >= 1)
            {
            	if(PlayerInfo[playerid][pGang][1] >= 11) strcat(string, "Управление бандой\nСписок созданных банд\nИнформация");
				else strcat(string, "Информация о банде\nСписок созданных банд\nИнформация");
   			}
   			else strcat(string, "Создать собственную банду\nСписок созданных банд\nИнформация");
   			return ShowPlayerDialogZS(playerid, 74, DIALOG_STYLE_LIST, "Банды", string, "Выбрать", "Назад");
        }
        case 6:
        {
            new string[103];
			if(PlayerInfo[playerid][pAimingX][0] >= 1)
			{
				if(PlayerInfo[playerid][pAimingX][0] == 1) strcat(string, "Указатель попадания\t[{61dd61}Стиль I{FFFFFF}]\n");
				else strcat(string, "Указатель попадания\t[{61dd61}Стиль II{FFFFFF}]\n");
			}
			else strcat(string, "Указатель попадания\t[{f44747}Отключен{FFFFFF}]\n");
			format(string, sizeof(string), "%sЦвет указателя попадания:\t[{%06x}%06x{FFFFFF}]", string, PlayerInfo[playerid][pAimingX][1] >>> 8, PlayerInfo[playerid][pAimingX][1] >>> 8);
			return ShowPlayerDialogZS(playerid, 7132, DIALOG_STYLE_TABLIST, "Указатель попадания", string, "Выбрать", "Назад");
        }
        case 7:
        {
        	if(PlayerInfo[playerid][pAdmin] >= 5) return ShowPlayerDialogZS(playerid, 4000, DIALOG_STYLE_LIST, "Дополнительное меню", "Телепорты по серверу\nЗаспавнить весь транспорт\nВключить музыку на сервере\nСменить карту\nСменить время карты\nЗакрыть/Открыть дополнительные ворота\nЗаблокировать IP адрес\nРазблокировать IP адрес\nРазблокировать игровой аккаунт\nПерезапустить сервер\nПерезагрузить объекты\nДополнительные настройки", "Выбрать", "Отмена");
			if(PlayerInfo[playerid][pAdmin] == 4) ShowPlayerDialogZS(playerid, 4000, DIALOG_STYLE_LIST, "Дополнительное меню", "Телепорты по серверу\nЗаспавнить весь транспорт\nВключить музыку на сервере\nСменить карту\nСменить время карты\nЗакрыть/Открыть дополнительные ворота\nЗаблокировать IP адрес\nРазблокировать IP адрес\nРазблокировать игровой аккаунт", "Выбрать", "Отмена");
			else
			{
				if(PlayerInfo[playerid][pAdmin] == 3) ShowPlayerDialogZS(playerid, 4000, DIALOG_STYLE_LIST, "Дополнительное меню", "Телепорты по серверу\nЗаспавнить весь транспорт\nВключить музыку на сервере", "Выбрать", "Отмена");
				else ShowPlayerDialogZS(playerid, 4000, DIALOG_STYLE_LIST, "Дополнительное меню", "Телепорты по серверу\nЗаспавнить весь транспорт", "Выбрать", "Отмена");
			}
			return 1;
        }
		case 8:
		{
		    if(PlayerInfo[playerid][pAdmin] != 5) return 1;
		    new string[151+sizeof(ServerConfig)*21-sizeof(ServerConfig)];
		    strcat(string, "Использование +С\t%s\nШатание прицела винтовки\t%s\nОтображение лобби\t%s\nТелепорт по метке\t%s\nТайм-Аут открытых диалогов\t%s\nИнформационный бар\t%s");
		    format(string, sizeof(string), string, TextDrawInfo[ServerConfig[0]+107][0], TextDrawInfo[ServerConfig[1]+107][0], TextDrawInfo[ServerConfig[2]+107][0], TextDrawInfo[ServerConfig[3]+107][0], TextDrawInfo[ServerConfig[4]+107][0], TextDrawInfo[108-TextBarInfoCheck[playerid]][0]);
		    return ShowPlayerDialogZS(playerid, 4008, DIALOG_STYLE_TABLIST, "Дополнительные настройки", string, "Выбрать", "Назад");
		}
		case 9://5530
		{
			new string[80*9 +22], str[80], slot[3], info[2];
            for(new idx = 10*GetPVarInt(playerid, "AchievementList[0]"); idx < 10*GetPVarInt(playerid, "AchievementList[0]")+11; idx ++)
            {
                if(slot[0] <= 9)
                {
                    sscanf(AchievementText[idx][3], "p<,>a<d>[2]", info);
                    if(PlayerInfo[playerid][pAchievements][idx] >= info[1]) format(str, sizeof(str), "{61dd61}%s{FFFFFF}\t%s\n", AchievementText[idx][4], AchievementText[idx][5]);
                    else
                    {
                        if(info[0] == 0)
                        {
                            if(info[1] == 1) format(str, sizeof(str), "%s\t%s\n", AchievementText[idx][4], AchievementText[idx][5]);
                            else format(str, sizeof(str), "%s\t%s (%d/%d)\n", AchievementText[idx][4], AchievementText[idx][5], PlayerInfo[playerid][pAchievements][idx], info[1]);
                        }
                        else format(str, sizeof(str), "Скрытое достижение\t\n");
                    }
                    strcat(string, str);
                    if(idx >= MAX_ADVANCE-1)
                    {
                        if(GetPVarInt(playerid, "AchievementList[0]") >= 1)
                        {
                            slot[1] = 1;
                            strcat(string, "< Назад\n");
                            SetPVarInt(playerid, "AchievementList[1]", slot[0]+2);
                        }
                        break;
                    }
                }
                slot[0] ++;
                if(slot[0] >= 11)
                {
                    slot[1] = 1;
                    strcat(string, "> Дальше\n");
                    if(GetPVarInt(playerid, "AchievementList[0]") >= 1) strcat(string, "< Назад\n");
                    break;
                }
            }
            if(GetPVarInt(playerid, "AchievementList[0]") >= 1 && slot[1] == 0)
            {
                strcat(string, "< Назад\n");
                SetPVarInt(playerid, "AchievementList[1]", slot[0]+1);
            }
            for(new x; x < MAX_ADVANCE; x ++)
            {
                sscanf(AchievementText[x][3], "p<,>a<d>[2]", info);
                if(PlayerInfo[playerid][pAchievements][x] >= info[1]) slot[2] += 1;
            }
            format(str, sizeof(str), "Достижения | {88AA88}Открыто %d из %d", slot[2], MAX_ADVANCE);
            return ShowPlayerDialogZS(playerid, 77, DIALOG_STYLE_TABLIST, str, string, "Выбрать", "Назад");
		}
		case 10:
		{
		    new string[367], str[89];
            if(PlayerInfo[playerid][pInteraction][0] == 0) format(str, sizeof(str), "Медицинская аптечка\t{f44747}Нет{FFFFFF}\n");
			else format(str, sizeof(str), "Медицинская аптечка\t{61dd61}Есть: %d{FFFFFF}\n", PlayerInfo[playerid][pInteraction][0]);
            strcat(string, str);
			if(PlayerInfo[playerid][pInteraction][4] == 0) format(str, sizeof(str), "Броня: Стандартная\t{f44747}Нет{FFFFFF}\n");
			else format(str, sizeof(str), "Броня: Стандартная\t{61dd61}Есть: %d{FFFFFF}\n", PlayerInfo[playerid][pInteraction][4]);
			strcat(string, str);
			if(PlayerInfo[playerid][pInteraction][5] == 0) format(str, sizeof(str), "Броня: Тяжелая\t{f44747}Нет{FFFFFF}\n");
			else format(str, sizeof(str), "Броня: Тяжелая\t{61dd61}Есть: %d{FFFFFF}\n", PlayerInfo[playerid][pInteraction][5]);
			strcat(string, str);
			if(PlayerInfo[playerid][pInteraction][6] == 0) format(str, sizeof(str), "Броня: Сверхтяжелая\t{f44747}Нет{FFFFFF}\n");
			else format(str, sizeof(str), "Броня: Сверхтяжелая\t{61dd61}Есть: %d{FFFFFF}\n", PlayerInfo[playerid][pInteraction][6]);
			strcat(string, str);
			if(InteractionCheck[playerid][0] != 2)
			{
				if(PlayerInfo[playerid][pInteraction][2] == 0) format(str, sizeof(str), "Динамит\t{f44747}Нет{FFFFFF}\nЛипкий динамит\t{f44747}Нет{FFFFFF}\n");
				else format(str, sizeof(str), "Динамит\t{61dd61}Есть: %d{FFFFFF}\nЛипкий динамит\t{61dd61}Есть: %d{FFFFFF}\n", PlayerInfo[playerid][pInteraction][2], PlayerInfo[playerid][pInteraction][2]);
			}
			else
			{
   				if(PlayerInfo[playerid][pInteraction][2] == 0) format(str, sizeof(str), "Динамит\t{f44747}Нет{FFFFFF}\nЛипкий динамит\t{61dd61}Убрать{FFFFFF}\n");
				else format(str, sizeof(str), "Динамит\t{61dd61}Есть: %d{FFFFFF}\nЛипкий динамит\t{61dd61}Убрать{FFFFFF}\n", PlayerInfo[playerid][pInteraction][2]);
			}
			strcat(string, str);
			if(PlayerInfo[playerid][pInteraction][3] == 0) format(str, sizeof(str), "Наземная мина\t{f44747}Нет{FFFFFF}\n");
			else format(str, sizeof(str), "Наземная мина\t{61dd61}Есть: %d{FFFFFF}\n", PlayerInfo[playerid][pInteraction][3]);
			strcat(string, str);
			if(PlayerInfo[playerid][pInteraction][1] == 0) format(str, sizeof(str), "Маскировка\t{f44747}Нет{FFFFFF}\nЛегкий путь\t{61dd61}100$");
			else format(str, sizeof(str), "Маскировка\t{61dd61}Есть: %d{FFFFFF}\nЛегкий путь\t{61dd61}100$", PlayerInfo[playerid][pInteraction][1]);
			strcat(string, str);
			if(Armour[playerid][0] != 0) strcat(string, "\nСнять бронежилет");
			return ShowPlayerDialogZS(playerid, 5000, DIALOG_STYLE_TABLIST, "Меню взаимодействий", string, "Выбрать", "Отмена");
		}
		case 11://5535
		{
		    if(!IsPlayerConnected(style)) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок не найден!");
		   	if(PlayerLogged[style] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не зашел в свой аккаунт!");
		    new string[75];
		    SetPVarInt(playerid, "ArenaIDPlay", style + 1);
		    format(string, sizeof(string), "Игрок: {4FDF24}%s (ID:%d)", PlayerName[style], style);
		    return ShowPlayerDialogZS(playerid, 1000, DIALOG_STYLE_TABLIST, string, "Статистика игрока\nПожаловаться на игрока", "Выбрать", "Отмена");
		}
		case 12:
		{
		    new string[843];
			if(style == playerid)
			{
				strcat(string, "{FFFFFF}Никнейм: {61dd61}%s (ID: %d){FFFFFF}\nДата регистрации: {61dd61}%s{FFFFFF}\nНомер аккаунта: {61dd61}%d{FFFFFF}\nРанг: {61dd61}%d{FFFFFF}\nОчки опыта: {61dd61}%d / %d{FFFFFF}\nВремя в игре: {61dd61}%s{FFFFFF}\nВремя на детматче: {61dd61}%s{FFFFFF}\nВремя в свободном режиме: {61dd61}%s{FFFFFF}\nКол-во убийств: {61dd61}%d{FFFFFF}\nКол-во смертей: {61dd61}%d{FFFFFF}\nКол-во денег: {61dd61}$%d{FFFFFF}");
				strcat(string, "\nВыиграно/Проиграно дуэлей: {61dd61}%d/%d{FFFFFF}\nКол-во посещений: {61dd61}%d{FFFFFF}\n");
				
				format(string, sizeof(string), string, PlayerName[playerid], playerid, PlayerInfo[playerid][pDateTimeReg], PlayerInfo[playerid][pRoomAccount], PlayerInfo[playerid][pLevel][0], PlayerInfo[playerid][pLevel][1], LevelScore[PlayerInfo[playerid][pLevel][0]][0],
				Convert(PlayerInfo[playerid][pTimeGame][0]), Convert(PlayerInfo[playerid][pTimeGame][1]), Convert(PlayerInfo[playerid][pTimeGame][2]), PlayerInfo[playerid][pKills], PlayerInfo[playerid][pDeaths], PlayerInfo[playerid][pMoney], PlayerInfo[playerid][pDuel][1], PlayerInfo[playerid][pDuel][2], PlayerInfo[playerid][pVisits]);
			}
			else
			{
				strcat(string, "{FFFFFF}Никнейм: {61dd61}%s (ID: %d){FFFFFF}\nРанг: {61dd61}%d{FFFFFF}\nВремя в игре: {61dd61}%s{FFFFFF}\nВремя на детматче: {61dd61}%s{FFFFFF}\nВремя в свободном режиме: {61dd61}%s{FFFFFF}\nКол-во убийств: {61dd61}%d{FFFFFF}\nКол-во смертей: {61dd61}%d{FFFFFF}\nКол-во денег: {61dd61}$%d{FFFFFF}\nВыиграно/Проиграно дуэлей: {61dd61}%d/%d{FFFFFF}\nКол-во посещений: {61dd61}%d{FFFFFF}\n");
				format(string, sizeof(string), string, PlayerName[style], style, PlayerInfo[style][pLevel][0], Convert(PlayerInfo[style][pTimeGame][0]), Convert(PlayerInfo[style][pTimeGame][1]), Convert(PlayerInfo[style][pTimeGame][2]), PlayerInfo[style][pKills], PlayerInfo[style][pDeaths], PlayerInfo[style][pMoney], PlayerInfo[style][pDuel][1], PlayerInfo[style][pDuel][2], PlayerInfo[style][pVisits]);
			}
			if(PlayerInfo[style][pAdmin] >= 2)
			{
				strcat(string, "Административные права: {61dd61}%d уровня{FFFFFF}\n");
   				format(string, sizeof(string), string, PlayerInfo[style][pAdmin]);
			}
			if(PlayerInfo[style][pVip] >= 2)
			{
 				strcat(string, "VIP привилегии: {61dd61}%d уровня{FFFFFF}\n");
				format(string, sizeof(string), string, PlayerInfo[style][pVip]);
			}
			if(PlayerInfo[style][pGang][0] >= 1)
			{
 				strcat(string, "Название банды: {61dd61}#%d %s [%s]{FFFFFF}\nУровень в банде: {61dd61}#%d %s{FFFFFF}");
 				format(string, sizeof(string), string, PlayerInfo[style][pGang][0], GangName[style], GangTag[style], PlayerInfo[style][pGang][1], GangRank[style][PlayerInfo[style][pGang][1]-1]);
			}
   			if(style == playerid) ShowPlayerDialogZS(playerid, 70, DIALOG_STYLE_MSGBOX, "Статистика игрока", string, "Назад", "Закрыть");
   			else ShowPlayerDialogZS(playerid, 6, DIALOG_STYLE_MSGBOX, "Статистика игрока", string, "Закрыть", "");
   			return 1;
		}
		case 13:
		{
		    new string[327], vehicle[7], VehicleID = GetPlayerVehicleID(playerid);
  			GetVehicleParamsEx(VehicleID, vehicle[0], vehicle[1], vehicle[2], vehicle[3], vehicle[4], vehicle[5], vehicle[6]);
  			strcat(string, "Отремонтировать автомобиль\t\nПоставить автомобиль на колеса\nОкна автомобиля\n");
  			if(vehicle[1] == 0) strcat(string, "Фары:\t[{FF3535}Отключены{FFFFFF}]\n");
  			else strcat(string, "Фары:\t[{10F441}Включены{FFFFFF}]\n");
			if(vehicle[0] == 0) strcat(string, "Двигатель:\t[{FF3535}Заглушен{FFFFFF}]\n");
            else strcat(string, "Двигатель:\t[{10F441}Заведен{FFFFFF}]\n");
            if(vehicle[3] == 1) strcat(string, "Двери:\t[{FF3535}Закрыты{FFFFFF}]\n");
            else strcat(string, "Двери:\t[{10F441}Открыты{FFFFFF}]\n");
			if(vehicle[4] == 0) strcat(string, "Капот:\t[{FF3535}Закрыт{FFFFFF}]\n");
            else strcat(string, "Капот:\t[{10F441}Открыт{FFFFFF}]\n");
            if(vehicle[5] == 0) strcat(string, "Багажник:\t[{FF3535}Закрыт{FFFFFF}]\n");
            else strcat(string, "Багажник:\t[{10F441}Открыт{FFFFFF}]\n");
			strcat(string, "Заспавнить автомобиль\nТюнинг автомобиля");
			return ShowPlayerDialogZS(playerid, 3000, DIALOG_STYLE_TABLIST, "Меню автомобиля", string, "Выбрать", "Отмена");
		}
    }
    return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(ProtectionFlooding[playerid][4] >= 35 && PlayerCheatCheck[playerid] == 0) return IsProtectionFlooding(playerid, "Диалогами", "2.4");
	else
	{
	    ProtectionFlooding[playerid][4] += 1;
	    if(ProtectionFlooding[playerid][4] >= 30) GameTextForPlayerZS(playerid, "~n~~r~Warning~n~flood", "~r~®e Ѓћyљњ¦e", 2000, 4, 1085);
	}
    if(DialogueCheck[playerid][0] != dialogid && PlayerCheatCheck[playerid] == 0 && PlayerLogged[playerid] == 1) return PlayerCheat(playerid, "подмена диалогов #18", "Использование Чит Программ [{FF0000}Код: #18{CD853F}]");
	if(dialogid == DialogueCheck[playerid][0]) DialogueCheck[playerid][1] = 0;
	switch(dialogid)
	{
	    case 1:
	    {
	        if(PlayerLogged[playerid] == 1) return 1;
		    if(response)
	        {
				new string[233];
	    		if(!strlen(inputtext))
		  		{
					format(string, sizeof(string), "{FFFFFF}Добро пожаловать на {61dd61}TDM Zones {FFFFFF}сервер\n\nДанный никнейм {61dd61}%s {FFFFFF}зарегистрирован.\nДля входа в аккаунт введите пароль:", PlayerName[playerid]);
	   				return ShowPlayerDialogZS(playerid, 1, DIALOG_STYLE_PASSWORD, "Вход в Аккаунт", string, "Войти", "Опции");
				}
				if(strlen(inputtext) < 6 || strlen(inputtext) > 29)
				{
		    		format(string, sizeof(string), "{FFFFFF}Добро пожаловать на {61dd61}TDM Zones {FFFFFF}сервер\n\nДанный никнейм {61dd61}%s {FFFFFF}зарегистрирован.\nДля входа в аккаунт введите пароль:\n{FF0000}Максимальная длина пароля от 6 до 30 символов!", PlayerName[playerid]);
	      	        return ShowPlayerDialogZS(playerid, 1, DIALOG_STYLE_PASSWORD, "Вход в Аккаунт", string, "Войти", "Опции", 1085);
				}
				new pass[65];
				SHA256_PassHash(inputtext, PlayerInfo[playerid][pSalt], pass, 65);
				if(strcmp(pass, PlayerInfo[playerid][pPass], true) == 0)
				{
					if(strlen(PlayerInfo[playerid][pPass1]) >= 6) ShowPlayerDialogZS(playerid, 3, DIALOG_STYLE_PASSWORD, "Дополнительны пароль", "{FFFFFF}Введите свой дополнительный пароль:", "Войти", "Отмена");
					else
					{
					    mysql_format(MysqlConnectID, string, sizeof(string), "SELECT * FROM profile WHERE `name`='%s' LIMIT 1", PlayerName[playerid]);
					    mysql_tquery(MysqlConnectID, string, "OnPlayerLogin", "ii", playerid, 0);
					}
				}
				else
				{
				    WrPass[playerid] += 1;
				    if(WrPass[playerid] >= 4) return KickWithMessage(playerid, "Вы были отсоединены от игрового сервера. С причиной: неверный пароль 3 из 3 попыток.");
				    else
				    {
						format(string, sizeof(string), "{FFFFFF}Добро пожаловать на {61dd61}TDM Zones {FFFFFF}сервер\n\nДанный никнейм {61dd61}%s {FFFFFF}зарегистрирован.\nДля входа в аккаунт введите пароль:\n{FF0000}Вы ввели неверный пароль попытка %d из 3", PlayerName[playerid], WrPass[playerid]);
						ShowPlayerDialogZS(playerid, 1, DIALOG_STYLE_PASSWORD, "Вход в Аккаунт", string, "Войти", "Опции");
				    }
				}
				return 1;
	        }
	        else ShowPlayerDialogZS(playerid, 4, DIALOG_STYLE_LIST, "Опции", "Покинуть сервер", "Выбрать", "Назад");
            return 1;
		}
		case 2:
		{
            if(PlayerLogged[playerid] == 1) return 1;
			if(response)
		    {
		    	new string[260];
		    	if(!strlen(inputtext))
		    	{
		    		format(string, sizeof(string), "{FFFFFF}Добро пожаловать на {61dd61}TDM Zones {FFFFFF}сервер\n\nДанный никнейм {61dd61}%s {FFFFFF}не зарегистрирован.\nДля дальнейшей регистрации придумайте пароль:", PlayerName[playerid]);
	            	return ShowPlayerDialogZS(playerid, 2, DIALOG_STYLE_INPUT, "Регистрация", string, "Дальше", "");
				}
				if(strlen(inputtext) < 6 || strlen(inputtext) > 29)
				{
					format(string, sizeof(string), "{FFFFFF}Добро пожаловать на {61dd61}TDM Zones {FFFFFF}сервер\n\nДанный никнейм {61dd61}%s {FFFFFF}не зарегистрирован.\nДля дальнейшей регистрации придумайте пароль:\n{FF0000}Максимальная длина пароля от 6 до 30 символов!", PlayerName[playerid]);
	            	return ShowPlayerDialogZS(playerid, 2, DIALOG_STYLE_INPUT, "Регистрация", string, "Дальше", "", 1085);
				}
				for(new i = 0; i < strlen(inputtext); i ++)
				{
					switch(inputtext[i])
					{
    					case ' ', 'А'..'Я', 'а'..'я':
						{
                            format(string, sizeof(string), "{FFFFFF}Добро пожаловать на {61dd61}TDM Zones {FFFFFF}сервер\n\nДанный никнейм {61dd61}%s {FFFFFF}не зарегистрирован.\nДля дальнейшей регистрации придумайте пароль:\n{FF0000}Недопустимые символы!", PlayerName[playerid]);
	            			return ShowPlayerDialogZS(playerid, 2, DIALOG_STYLE_INPUT, "Регистрация", string, "Дальше", "", 1085);
						}
					}
				}
				new date[6], slot[25];
				for(new i = 0; i < 10; i ++) PlayerInfo[playerid][pSalt][i] = random(79) + 47;
                PlayerInfo[playerid][pSalt][10] = 0;
                SHA256_PassHash(inputtext, PlayerInfo[playerid][pSalt], PlayerInfo[playerid][pPass], 65);
                getdate(date[0], date[1], date[2]);
    			gettime(date[3], date[4], date[5]);
    			format(slot, sizeof(slot), "%02d/%02d/%d %d:%d:%d", date[2], date[1], date[0], date[3], date[4], date[5]);
				mysql_format(MysqlConnectID, string, sizeof(string), "INSERT INTO profile (`name`,`password`,`salt`,`ipreg`,`iplocal`,`datetime`) VALUES ('%s','%s','%s','%s','%s','%s')", PlayerName[playerid], PlayerInfo[playerid][pPass], PlayerInfo[playerid][pSalt], PlayerIp[playerid], PlayerIp[playerid], slot);
				mysql_tquery(MysqlConnectID, string);
				format(string, sizeof(string), "Игрок %s (ID: %d) успешно зарегистрировался (IP: %s | Ping: %d)", PlayerName[playerid], playerid, PlayerIp[playerid], PlayerIp[playerid], GetPlayerPing(playerid));
			 	ABroadCast(0xC3C3C3AA, string, 0, 4);
			 	mysql_format(MysqlConnectID, string, sizeof(string), "SELECT * FROM profile WHERE `name`='%s' LIMIT 1", PlayerName[playerid]);
			    mysql_tquery(MysqlConnectID, string, "OnPlayerLogin", "ii", playerid, 0);
			}
			else ShowPlayerDialogZS(playerid, 5, DIALOG_STYLE_MSGBOX, "Регистрация", "{FFFFFF}Вы хотите отказать от регистрации, и покинуть сервер", "Дальше", "Назад");
            return 1;
		}
		case 3:
		{
		    if(PlayerLogged[playerid] == 1) return 1;
			if(response)
		    {
				if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 3, DIALOG_STYLE_PASSWORD, "Дополнительны пароль", "{FFFFFF}Введите свой дополнительный пароль:", "Войти", "Отмена");
	            if(strlen(inputtext) < 6 || strlen(inputtext) > 29) return ShowPlayerDialogZS(playerid, 3, DIALOG_STYLE_PASSWORD, "Дополнительны пароль", "{FFFFFF}Введите свой дополнительный пароль:\n{FF0000}Максимальная длина пароля от 6 до 30 символов!", "Войти", "Отмена");
				new pass[65];
				SHA256_PassHash(inputtext, PlayerInfo[playerid][pSalt1], pass, 65);
				if(strcmp(pass, PlayerInfo[playerid][pPass1], true) == 0)
				{
				    new string[71];
				    mysql_format(MysqlConnectID, string, sizeof(string), "SELECT * FROM profile WHERE `name`='%s' LIMIT 1", PlayerName[playerid]);
			        mysql_tquery(MysqlConnectID, string, "OnPlayerLogin", "ii", playerid, 0);
				}
				else
				{
				    PlayerCheatCheck[playerid] = 1;
					KickWithMessage(playerid, "Вы были отсоединены от игрового сервера. С причиной: неверный пароль.");
				}
				return 1;
			}
			else
			{
	            PlayerCheatCheck[playerid] = 1;
				KickWithMessage(playerid, "Вы были отсоединены от игрового сервера. С причиной: отказ от ввода пароля.");
	 		}
	 		return 1;
		}
		case 4:
		{
		    if(PlayerLogged[playerid] == 1) return 1;
		    if(response) return KickWithMessage(playerid, "Для выхода из игры нажмите {FF0000}F6 {CD853F}и введите команду {FF0000}/q");
		 	else
		 	{
		 		new string[177];
	  		    format(string, sizeof(string), "{FFFFFF}Добро пожаловать на {61dd61}TDM Zones {FFFFFF}сервер\n\nДанный никнейм {61dd61}%s {FFFFFF}зарегистрирован.\nДля входа в аккаунт введите пароль:", PlayerName[playerid]);
                ShowPlayerDialogZS(playerid, 1, DIALOG_STYLE_PASSWORD, "Вход в Аккаунт", string, "Войти", "Опции");
		 	}
		 	return 1;
		}
		case 5:
		{
		    if(PlayerLogged[playerid] == 1) return 1;
			if(response) return KickWithMessage(playerid, "Вы были отсоединены от игрового сервера. С причиной: отказ от регистрации.");
			else
			{
				new string[190];
	 		    format(string, sizeof(string), "{FFFFFF}Добро пожаловать на {61dd61}TDM Zones {FFFFFF}сервер\n\nДанный никнейм {61dd61}%s {FFFFFF}не зарегистрирован.\nДля дальнейшей регистрации придумайте пароль:", PlayerName[playerid]);
                ShowPlayerDialogZS(playerid, 2, DIALOG_STYLE_INPUT, "Регистрация", string, "Дальше", "");
			}
			return 1;
		}
		case 117: //Свободный режим /своб из Детматча
		{
		    if(response)
		    {
		        new string[80], info[15];
	            if(PlayerInfo[playerid][pAdmin] >= 2) info = "Администратор";
	   	        else if(PlayerInfo[playerid][pVip] >= 2) info = "VIP игрок";
		        if(PlayerInfo[playerid][pFreeMode] == 0)
		        {
					switch(ChoiceTeamCheck[playerid][6])
					{
			  			case 1:
			  			{
			  				if(PlayerOnline[2] >= 1) PlayerOnline[2] -= 1;
			  				if(ChoiceTeamCheck[playerid][2] == 1 && Arena[5] >= 1) Arena[5] -= 1;
							else if(ChoiceTeamCheck[playerid][2] == 2 && Arena[6] >= 1) Arena[6] -= 1;
			  			}
			  			case 2:
						{
			  				if(PlayerOnline[3] >= 1) PlayerOnline[3] -= 1;
			  				if(ChoiceTeamCheck[playerid][2] == 1 && Arena[12] >= 1) Arena[12] -= 1;
							else if(ChoiceTeamCheck[playerid][2] == 2 && Arena[13] >= 1) Arena[13] -= 1;
						}
						case 3:
						{
			  				if(PlayerOnline[4] >= 1) PlayerOnline[4] -= 1;
			  				if(ChoiceTeamCheck[playerid][2] == 1 && Arena[19] >= 1) Arena[19] -= 1;
							else if(ChoiceTeamCheck[playerid][2] == 2 && Arena[20] >= 1) Arena[20] -= 1;
						}
					}
					Spawned[playerid] = false;
		            PlayerInfo[playerid][pFreeMode] = 1;
		            MenuProcurementTime[playerid] = 0;
					for(new x; x < 10; x ++)
					{
						if(x < 8) ChoiceTeamCheck[playerid][x] = 0;
						else if(x == 2) ChoiceTeamCheck[playerid][2] = 256;
						WeaponsSlotSpawn[playerid][x] = 0;
					}
			    	PlayerOnline[1] += 1;
			        TeamColor(playerid);
			        PlayerColor[playerid] = 0xFFFFFFAA;
			        DestroyDynamicArea(ForbiddenArea[playerid][1]);
			        TextDrawHideForPlayer(playerid, MenuProcurementIcon[playerid][0]);
		            TextDrawHideForPlayer(playerid, MenuProcurementIcon[playerid][1]);
		            TextDrawHideForPlayer(playerid, ArenaInfo[playerid][0]);
					TextDrawHideForPlayer(playerid, ArenaInfo[playerid][1]);
					TextDrawHideForPlayer(playerid, ArenaInfo[playerid][2]);
					TextDrawHideForPlayer(playerid, ArenaInfo[playerid][10]);
 		    		TextDrawHideForPlayer(playerid, ArenaInfo[playerid][11]);
					if(SelectionCheck[playerid][0] == 1) ShowModelSelectionMenu(playerid, 255);
		            SetPlayerTeam(playerid, 255);
		        	GangZoneHideForPlayer(playerid, ServerCheck[0]);
					if(InteractionCheck[playerid][0] >= 1 || IsValidDynamicObject(InteractionCheck[playerid][2]) || IsValidDynamicObject(InteractionCheck[playerid][3]) || IsValidDynamicObject(InteractionCheck[playerid][4]))
					{
					    InteractionCheck[playerid][0] = 0;
					    InteractionCheck[playerid][1] = 0;
					    InteractionCheck[playerid][5] = 0;
					    DestroyDynamicObject(InteractionCheck[playerid][2]);
						DestroyDynamicObject(InteractionCheck[playerid][3]);
						DestroyDynamicObject(InteractionCheck[playerid][4]);
						DestroyDynamicObject(InteractionCheck[playerid][9]);
						DestroyPickup(InteractionCheck[playerid][6]);
						DestroyPickup(InteractionCheck[playerid][7]);
						DestroyPickup(InteractionCheck[playerid][8]);
						InteractionCheck[playerid][6] = -1;
						InteractionCheck[playerid][7] = -1;
						InteractionCheck[playerid][8] = -1;
						InteractionCheck[playerid][9] = 0;
						Delete3DTextLabel(InteractionText[playerid][0]);
						Delete3DTextLabel(InteractionText[playerid][1]);
						Delete3DTextLabel(InteractionText[playerid][2]);
						Delete3DTextLabel(InteractionText[playerid][3]);
						InteractionCheck[playerid][10] = -1;
						InteractionCheck[playerid][11] = -1;
					}
		            format(string, sizeof(string), "%s %s (ID: %d) вошел в Cвободный режим", info, PlayerName[playerid], playerid);
		            ABroadCast(0xC3C3C3AA, string, 0, 4);
		        }
				else
				{
					if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Сначала выйдите из автомобиля!");
		            if(PlayerInfo[playerid][pPassive] == 1) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Сначала выключите пассивный режим!");
					PlayerInfo[playerid][pFreeMode] = 0;
					ChoiceTeamCheck[playerid][0] = 1;
			        Spawned[playerid] = false;
			        if(PlayerOnline[1] >= 1) PlayerOnline[1] -= 1;
		            format(string, sizeof(string), "%s %s (ID: %d) покинул Cвободный режим", info, PlayerName[playerid], playerid);
		            ABroadCast(0xC3C3C3AA, string, 0, 4);
		            GangZoneShowForPlayer(playerid, ServerCheck[0], 0x395075FF);
		            if(AutoCheck[playerid] != 0) DestroyVehicle(AutoCheck[playerid]);
		            if(PlayerInfo[playerid][pInfoText][3] == 0) TextDrawHideForPlayer(playerid, HealthPure[playerid]);
				}
				Armour[playerid][2] = 6;
				Armour[playerid][0] = 0;
				Armour[playerid][1] = 0;
				SetPlayerArmour(playerid, 0.0);
				SpawnPlayerZS(playerid);
				mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET scorecheck=0,freemode=%d WHERE id=%d", PlayerInfo[playerid][pFreeMode], PlayerInfo[playerid][pRoomAccount]);
				mysql_tquery(MysqlConnectID, string);
		    }
		    return 1;
		}
		case 118://RaceS
	 	{
	 	    if(response == 0 && DuelCheck[playerid][2] != 0) return 1;
	 		if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 118, DIALOG_STYLE_INPUT, "Выбор игрока", "{FFFFFF}Введите ID игрока которого хотите вызвать на дуэль:", "Дальше", "Отмена");
			DuelCheck[playerid][0] = strval(inputtext);
			if(!IsPlayerConnected(DuelCheck[playerid][0])) return ShowPlayerDialogZS(playerid, 118, DIALOG_STYLE_INPUT, "Вызов игрока на дуэль", "{FFFFFF}Введите ID игрока которого хотите вызвать на дуэль:\n{FF0000}Данный игрок не найден!", "Дальше", "Отмена", 1085);
			if(PlayerLogged[DuelCheck[playerid][0]] == 0) return ShowPlayerDialogZS(playerid, 118, DIALOG_STYLE_INPUT, "Вызов игрока на дуэль", "{FFFFFF}Введите ID игрока которого хотите вызвать на дуэль:\n{FF0000}Данный игрок ещё не зашел в свой аккаунт!", "Дальше", "Отмена", 1085);
            if(DuelCheck[playerid][0] == playerid && PlayerInfo[playerid][pAdmin] <= 4) return ShowPlayerDialogZS(playerid, 118, DIALOG_STYLE_INPUT, "Вызов игрока на дуэль", "{FFFFFF}Введите ID игрока которого хотите вызвать на дуэль:\n{FF0000}Вы не можете вызвать самого себя на дуэль!", "Дальше", "Отмена", 1085);
			if(Spawned[DuelCheck[playerid][0]] == false) return ShowPlayerDialogZS(playerid, 118, DIALOG_STYLE_INPUT, "Вызов игрока на дуэль", "{FFFFFF}Введите ID игрока которого хотите вызвать на дуэль:\n{FF0000}Данный игрок не заспавлен!", "Дальше", "Отмена", 1085);
			if(Pause[DuelCheck[playerid][0]][1] >= 3) return ShowPlayerDialogZS(playerid, 118, DIALOG_STYLE_INPUT, "Вызов игрока на дуэль", "{FFFFFF}Введите ID игрока которого хотите вызвать на дуэль:\n{FF0000}Данный игрок находиться на паузе!", "Дальше", "Отмена", 1085);
			if(PlayerInfo[DuelCheck[playerid][0]][pPrison] >= 1) return ShowPlayerDialogZS(playerid, 118, DIALOG_STYLE_INPUT, "Вызов игрока на дуэль", "{FFFFFF}Введите ID игрока которого хотите вызвать на дуэль:\n{FF0000}Данный игрок находиться в тюрьме!", "Дальше", "Отмена", 1085);
			if(PlayerInfo[DuelCheck[playerid][0]][pFreeze] == 1) return ShowPlayerDialogZS(playerid, 118, DIALOG_STYLE_INPUT, "Вызов игрока на дуэль", "{FFFFFF}Введите ID игрока которого хотите вызвать на дуэль:\n{FF0000}Данный игрок заморожен!", "Дальше", "Отмена", 1085);
			if(PlayerInfo[DuelCheck[playerid][0]][pDuel][0] == 1) return ShowPlayerDialogZS(playerid, 118, DIALOG_STYLE_INPUT, "Вызов игрока на дуэль", "{FFFFFF}Введите ID игрока которого хотите вызвать на дуэль:\n{FF0000}Данный игрок запретил вызывать его на дуэль!", "Дальше", "Отмена", 1085);
			if(DuelCheck[DuelCheck[playerid][0]][12] >= 1) return ShowPlayerDialogZS(playerid, 118, DIALOG_STYLE_INPUT, "Вызов игрока на дуэль", "{FFFFFF}Введите ID игрока которого хотите вызвать на дуэль:\n{FF0000}Данный игрок уже на дуэли!", "Дальше", "Отмена", 1085);
            if(DuelCheck[DuelCheck[playerid][0]][1] == 1) return ShowPlayerDialogZS(playerid, 118, DIALOG_STYLE_INPUT, "Вызов игрока на дуэль", "{FFFFFF}Введите ID игрока которого хотите вызвать на дуэль:\n{FF0000}Данного игрока уже пригласили на дуэль!", "Дальше", "Отмена", 1085);
			if(DuelCheck[DuelCheck[playerid][0]][17] - 1 == playerid && PlayerInfo[playerid][pAdmin] != 5) return ShowPlayerDialogZS(playerid, 118, DIALOG_STYLE_INPUT, "Вызов игрока на дуэль", "{FFFFFF}Введите ID игрока которого хотите вызвать на дуэль:\n{FF0000}Данный игрок отказался участвовать с вами в дуэли!", "Дальше", "Отмена", 1085);

			DuelCheck[DuelCheck[playerid][0]][0] = playerid;
			DuelCheck[playerid][2] = 60 + gettime();
			DuelCheck[playerid][1] = 31;
			DuelCheck[DuelCheck[playerid][0]][1] = 1;
            new string[167], slot[23], slot0[37];
   			switch(DuelCheck[playerid][3])
	  		{
	  		    case 1:
	  			{
			  	    slot = "дуэль";
				  	format(slot0, sizeof(slot0), "Оружие: {4FDF24}%s", WeaponsName[DuelCheck[playerid][7]]);
	  			}
	  		    case 2:
	  		    {
	  		        slot = "гоночны дуэль";
	  		        switch(DuelCheck[playerid][7])
	 				{
	 				    case 1: slot0 = "Класс транспорта: {4FDF24}Спорт";
	 				    case 2: slot0 = "Класс транспорта: {4FDF24}Лоурайдер";
						case 3: slot0 = "Класс транспорта: {4FDF24}Мото";
	 				}
	  		    }
	  		    case 3: slot = "дуэль мастер оружия";
	  		}
            format(string, sizeof(string), "{FFFFFF}Приглашение на %s от: {4FDF24}%s{FFFFFF}\nКарта дуэля: {4FDF24}%s{FFFFFF}\n%s", slot, PlayerName[playerid], DuelMap[DuelCheck[playerid][3] - 1][DuelCheck[playerid][4] - 1], slot0);
			return ShowPlayerDialogZS(DuelCheck[playerid][0], 119, DIALOG_STYLE_MSGBOX, "Приглашение на дуэль", string, "Принять", "Отмена");
		}
		case 119:
	    {
	        if(DuelCheck[DuelCheck[playerid][0]][2] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок покинул дуэль!");
            if(DuelCheck[playerid][1] == 0)
			{
			    DuelCheck[playerid][0] = MAX_PLAYERS;
			    DuelCheck[playerid][1] = 0;
				return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Приглашение на дуэль, было отклонено за бездействие!");
   			}
			if(DuelCheck[DuelCheck[playerid][0]][0] != playerid)
			{
			    DuelCheck[playerid][0] = MAX_PLAYERS;
			    DuelCheck[playerid][1] = 0;
				return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок отклонил приглашение!");
   			}
			if(response)
	        {
	        	if(DuelCheck[DuelCheck[playerid][0]][12] >= 1) return SendClientMessage(playerid, 0xFFFFFFFF, "[Ошибка]: >> Данный игрок уже на дуэли!");
				DuelCheck[playerid][3] = DuelCheck[DuelCheck[playerid][0]][3];
				DuelCheck[playerid][4] = DuelCheck[DuelCheck[playerid][0]][4];
				DuelCheck[playerid][5] = DuelCheck[DuelCheck[playerid][0]][5];
                DuelCheck[playerid][6] = DuelCheck[DuelCheck[playerid][0]][6];
                DuelCheck[playerid][7] = DuelCheck[DuelCheck[playerid][0]][7];
				DuelCheck[playerid][8] = DuelCheck[DuelCheck[playerid][0]][8];
				DuelCheck[playerid][9] = DuelCheck[DuelCheck[playerid][0]][9];
				DuelCheck[playerid][25] = DuelCheck[DuelCheck[playerid][0]][25];
				if(PlayerInfo[DuelCheck[playerid][0]][pFreeMode] == 0) GangZoneHideForPlayer(DuelCheck[playerid][0], ServerCheck[0]);
				if(PlayerInfo[playerid][pFreeMode] == 0)
				{
				    GangZoneHideForPlayer(playerid, ServerCheck[0]);
				    MenuProcurementTime[playerid] = 0;
				    TextDrawHideForPlayer(playerid, MenuProcurementIcon[playerid][0]);
				    TextDrawHideForPlayer(playerid, MenuProcurementIcon[playerid][1]);
					TextDrawHideForPlayer(playerid, ArenaInfo[playerid][0]);
					TextDrawHideForPlayer(playerid, ArenaInfo[playerid][1]);
					TextDrawHideForPlayer(playerid, ArenaInfo[playerid][2]);
					TextDrawHideForPlayer(playerid, ArenaInfo[playerid][10]);
  					TextDrawHideForPlayer(playerid, ArenaInfo[playerid][11]);
				}
				new string[93];
				switch(DuelCheck[playerid][3])
				{
				    case 1:
					{
				    	TextDrawHideForPlayer(DuelCheck[playerid][0], DuelInfo[DuelCheck[playerid][0]][0]);
						TextDrawHideForPlayer(DuelCheck[playerid][0], DuelInfo[DuelCheck[playerid][0]][1]);
						TextDrawHideForPlayer(DuelCheck[playerid][0], DuelInfo[DuelCheck[playerid][0]][2]);
						TextDrawHideForPlayer(DuelCheck[playerid][0], DuelInfo[DuelCheck[playerid][0]][3]);
						TextDrawHideForPlayer(DuelCheck[playerid][0], DuelInfo[DuelCheck[playerid][0]][4]);
						TextDrawHideForPlayer(DuelCheck[playerid][0], DuelInfo[DuelCheck[playerid][0]][5]);
						TextDrawHideForPlayer(DuelCheck[playerid][0], DuelInfo[DuelCheck[playerid][0]][6]);
						TextDrawHideForPlayer(DuelCheck[playerid][0], DuelInfo[DuelCheck[playerid][0]][7]);
						TextDrawHideForPlayer(DuelCheck[playerid][0], DuelInfo[DuelCheck[playerid][0]][8]);
						TextDrawHideForPlayer(DuelCheck[playerid][0], DuelInfo[DuelCheck[playerid][0]][9]);
						TextDrawHideForPlayer(DuelCheck[playerid][0], DuelInfo[DuelCheck[playerid][0]][10]);
						TextDrawHideForPlayer(DuelCheck[playerid][0], DuelInfo[DuelCheck[playerid][0]][11]);
						TextDrawHideForPlayer(DuelCheck[playerid][0], DuelInfo[DuelCheck[playerid][0]][12]);
						TextDrawHideForPlayer(DuelCheck[playerid][0], DuelInfo[DuelCheck[playerid][0]][13]);
						TextDrawHideForPlayer(DuelCheck[playerid][0], DuelInfo[DuelCheck[playerid][0]][14]);
						TextDrawHideForPlayer(DuelCheck[playerid][0], DuelInfo[DuelCheck[playerid][0]][15]);
						TextDrawHideForPlayer(DuelCheck[playerid][0], DuelInfo[DuelCheck[playerid][0]][35]);
						TextDrawHideForPlayer(DuelCheck[playerid][0], DuelInfo[DuelCheck[playerid][0]][36]);
						TextDrawHideForPlayer(DuelCheck[playerid][0], DuelInfo[DuelCheck[playerid][0]][37]);
						TextDrawHideForPlayer(DuelCheck[playerid][0], DuelInfo[DuelCheck[playerid][0]][38]);
						TextDrawHideForPlayer(DuelCheck[playerid][0], DuelInfo[DuelCheck[playerid][0]][39]);
						TextDrawHideForPlayer(DuelCheck[playerid][0], DuelInfo[DuelCheck[playerid][0]][40]);
						TextDrawHideForPlayer(DuelCheck[playerid][0], DuelInfo[DuelCheck[playerid][0]][41]);
						TextDrawHideForPlayer(DuelCheck[playerid][0], DuelInfo[DuelCheck[playerid][0]][42]);
						TextDrawHideForPlayer(DuelCheck[playerid][0], DuelInfo[DuelCheck[playerid][0]][43]);
						TextDrawHideForPlayer(DuelCheck[playerid][0], DuelInfo[DuelCheck[playerid][0]][44]);
						DuelCheck[playerid][1] = 0;
						DuelCheck[playerid][2] = 0;
				    	DuelCheck[playerid][12] = 1;
				    	DuelCheck[playerid][14] = 1;
				    	DuelCheck[DuelCheck[playerid][0]][2] = 0;
				    	DuelCheck[DuelCheck[playerid][0]][1] = 0;
         				DuelCheck[DuelCheck[playerid][0]][12] = 1;
         				DuelCheck[DuelCheck[playerid][0]][14] = 2;
         				DeletePVar(DuelCheck[playerid][0], "DuellCheck[4]");
						Health[playerid] = DuelCheck[playerid][8];
						SetPlayerHealth(playerid, DuelCheck[playerid][8]);
						Health[DuelCheck[playerid][0]] = DuelCheck[DuelCheck[playerid][0]][8];
						SetPlayerHealth(DuelCheck[playerid][0], DuelCheck[DuelCheck[playerid][0]][8]);
						SetPlayerTime(playerid, DuelCheck[playerid][5], 0);
						SetPlayerWeather(playerid, DuelCheck[playerid][6]);
						if(DuelCheck[playerid][9] != 0)
						{
							Armour[playerid][0] = DuelCheck[playerid][9];
							Armour[playerid][1] = 1;
							Armour[playerid][2] = 6;
							SetPlayerArmour(playerid, DuelCheck[playerid][9]);
							Armour[DuelCheck[playerid][0]][0] = DuelCheck[DuelCheck[playerid][0]][9];
							Armour[DuelCheck[playerid][0]][1] = 1;
							Armour[DuelCheck[playerid][0]][2] = 6;
							SetPlayerArmour(DuelCheck[playerid][0], DuelCheck[DuelCheck[playerid][0]][9]);
						}
						else
						{
							Armour[playerid][0] = 0;
							Armour[playerid][1] = 0;
							SetPlayerArmour(playerid, 0.0);
							Armour[DuelCheck[playerid][0]][0] = 0;
							Armour[DuelCheck[playerid][0]][1] = 0;
							SetPlayerArmour(DuelCheck[playerid][0], 0.0);
						}
						ResetPlayerWeaponsZS(playerid);
						ResetPlayerWeaponsZS(DuelCheck[playerid][0]);
						if(DuelCheck[playerid][7] != 0)
						{
							GivePlayerWeaponZS(playerid, DuelCheck[playerid][7], 5500);
							GivePlayerWeaponZS(DuelCheck[playerid][0], DuelCheck[playerid][7], 5500);
						}
						SetPlayerTeam(playerid, 255);
						SetPlayerTeam(DuelCheck[playerid][0], 255);
						SpawnCheck[playerid][3] = 0;
						SpawnCheck[DuelCheck[playerid][0]][3] = 0;
						CancelSelectTextDraw(DuelCheck[playerid][0]);
						ForbiddenArea[playerid][0] = 0;
						ForbiddenArea[DuelCheck[playerid][0]][0] = 0;
						DestroyDynamicArea(ForbiddenArea[playerid][1]);
						DestroyDynamicArea(ForbiddenArea[DuelCheck[playerid][0]][1]);
						ForbiddenArea[playerid][1] = CreateDynamicCube(DuelZona[DuelCheck[playerid][4] - 1][0], DuelZona[DuelCheck[playerid][4] - 1][1], DuelZona[DuelCheck[playerid][4] - 1][2], DuelZona[DuelCheck[playerid][4] - 1][3], DuelZona[DuelCheck[playerid][4] - 1][4], DuelZona[DuelCheck[playerid][4] - 1][5], DuelCheck[playerid][25], -1, playerid);
						ForbiddenArea[DuelCheck[playerid][0]][1] = CreateDynamicCube(DuelZona[DuelCheck[playerid][4] - 1][0], DuelZona[DuelCheck[playerid][4] - 1][1], DuelZona[DuelCheck[playerid][4] - 1][2], DuelZona[DuelCheck[playerid][4] - 1][3], DuelZona[DuelCheck[playerid][4] - 1][4], DuelZona[DuelCheck[playerid][4] - 1][5], DuelCheck[playerid][25], -1, DuelCheck[playerid][0]);
						switch(DuelCheck[playerid][4])
				        {
				            case 1:
				            {
								SetPlayerPosZS(playerid, -2777.2830, -251.8516, 7.1952, 270.2433, 0, DuelCheck[playerid][25]);
								SetPlayerPosZS(DuelCheck[playerid][0], -2724.1177, -252.1934, 7.1875, 89.7849, 0, DuelCheck[playerid][25]);
                                SetPlayerCameraPos(playerid, -2710.325195, -269.955108, 14.167563);
								SetPlayerCameraLookAt(playerid, -2714.584960, -267.421295, 13.509325);
							}
							case 2:
							{
								SetPlayerPosZS(playerid, 756.02, -1236.53, 13.55, 180.00, 0, DuelCheck[playerid][25]);
								SetPlayerPosZS(DuelCheck[playerid][0], 756.01, -1280.69, 13.55, 0.00, 0, DuelCheck[playerid][25]);
                                SetPlayerCameraPos(playerid, 775.072875, -1306.423095, 16.946475);
								SetPlayerCameraLookAt(playerid, 772.688415, -1302.033935, 16.723896);
							}
							case 3:
							{
							    SetPlayerPosZS(playerid, 2610.1077, 2824.7209, 10.8203, 91.2272, 0, DuelCheck[playerid][25]);
								SetPlayerPosZS(DuelCheck[playerid][0], 2550.9426, 2824.2520, 10.8203, 270.4323, 0, DuelCheck[playerid][25]);
							    SetPlayerCameraPos(playerid, 2543.574218, 2846.258544, 16.336822);
								SetPlayerCameraLookAt(playerid, 2547.799072, 2843.666748, 15.678584);
							}
				        }
				    }
					case 2://5580
					{
					    DuelCheck[playerid][10] = DuelCheck[DuelCheck[playerid][0]][10];
					    DuelCheck[playerid][11] = DuelCheck[DuelCheck[playerid][0]][11];
					    DuelCheck[playerid][16] = DuelCheck[DuelCheck[playerid][0]][16];
					    DuelCheck[playerid][20] = DuelCheck[DuelCheck[playerid][0]][20];
						DuelCheck[playerid][12] = 6;
						DuelCheck[playerid][13] = 1;
						DuelCheck[playerid][14] = 2;
						DuelCheck[playerid][1] = 0;
                        DuelCheck[DuelCheck[playerid][0]][12] = 6;
						DuelCheck[DuelCheck[playerid][0]][13] = 1;
						DuelCheck[DuelCheck[playerid][0]][14] = 1;
						DuelCheck[DuelCheck[playerid][0]][2] = 0;
						DuelCheck[DuelCheck[playerid][0]][1] = 0;
						CancelSelectTextDraw(DuelCheck[playerid][0]);
						Health[playerid] = 100;
						SetPlayerHealth(playerid, 100);
						SetPlayerTime(playerid, DuelCheck[playerid][5], 0);
						SetPlayerWeather(playerid, DuelCheck[playerid][6]);
						ResetPlayerWeaponsZS(playerid);
						TogglePlayerControllableZS(playerid, 0);
						format(string, sizeof(string), " ~y~%s", PlayerName[playerid]);
						TextDrawSetString(DuelInfo[DuelCheck[playerid][0]][13], string);
						SetPlayerPosZS(playerid, DuelCameraRace[DuelCheck[playerid][4] - 1][0], DuelCameraRace[DuelCheck[playerid][4] - 1][1], DuelCameraRace[DuelCheck[playerid][4] - 1][2] - 8.0, 0.0, floatround(DuelCameraRace[DuelCheck[playerid][4] - 1][6]), DuelCheck[playerid][25]);
                        SetPlayerCameraPos(playerid, DuelCameraRace[DuelCheck[playerid][4] - 1][0], DuelCameraRace[DuelCheck[playerid][4] - 1][1], DuelCameraRace[DuelCheck[playerid][4] - 1][2]);
                        SetPlayerCameraLookAt(playerid, DuelCameraRace[DuelCheck[playerid][4] - 1][3], DuelCameraRace[DuelCheck[playerid][4] - 1][4], DuelCameraRace[DuelCheck[playerid][4] - 1][5]);
					}
				}
	            format(string, sizeof(string), "Вы успешно приняли приглашение на дуэль от {4FDF24}%s", PlayerName[DuelCheck[playerid][0]]);
	            SendClientMessage(playerid, 0xFFFFFFFF, string);
				format(string, sizeof(string), "Игрок {4FDF24}%s {FFFFFF}принял ваше приглашение на дуэль.", PlayerName[playerid]);
	            return SendClientMessage(DuelCheck[playerid][0], 0xFFFFFFFF, string);
		 	}
		 	else
		 	{
		 	    new string[95];
		    	format(string, sizeof(string), "Вы отказались на участие в дуэли с игроком {4FDF24}%s", PlayerName[DuelCheck[playerid][0]]);
	            SendClientMessage(playerid, 0xFFFFFFFF, string);
				DuelCheck[DuelCheck[playerid][0]][2] = 180 + gettime();
	            DuelCheck[DuelCheck[playerid][0]][1] = 0;
	            DuelCheck[playerid][17] = DuelCheck[playerid][0] + 1;
	            DuelCheck[playerid][1] = 0;
	            if(PlayerInfo[DuelCheck[playerid][0]][pRussifier][1] == 0) format(string, sizeof(string), " %s ~r~~h~denied", PlayerName[playerid]);
				else format(string, sizeof(string), " %s ~r~~h~o¦kaџ", PlayerName[playerid]);
	            TextDrawSetString(DuelInfo[DuelCheck[playerid][0]][13], string);
	            format(string, sizeof(string), "Игрок {4FDF24}%s {FFFFFF}отказался на участие в дуэли с вами", PlayerName[playerid]);
	            SendClientMessage(DuelCheck[playerid][0], 0xFFFFFFFF, string);
	            DuelCheck[DuelCheck[playerid][0]][0] = MAX_PLAYERS;
	            DuelCheck[playerid][0] = MAX_PLAYERS;
		 	}
		 	return 1;
  		}
  		case 120:
  		{
  		    if(response == 0 || DuelCheck[playerid][12] == 0) return 1;
  		    switch(DuelCheck[playerid][3])
  		    {
  		        case 1:
  		        {
  		            if(PlayerInfo[playerid][pMoney] < 300) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Недостаточно средств!", 1085);
  		            MoneyInfoCall(playerid, 300, 1);
  		            DuelCheck[playerid][12] = 306;
  		            DuelCheck[DuelCheck[playerid][0]][12] = 306;
  		        }
  		        case 2:
  		        {
  		            if(PlayerInfo[playerid][pMoney] < 700) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Недостаточно средств!", 1085);
					if(DuelCheck[playerid][24] != 0 || Observation[playerid][1] != 0) return 1;
					MoneyInfoCall(playerid, 700, 1);
					DuelCheck[playerid][12] = 5;
					DuelCheck[playerid][13] = 5;
					TogglePlayerControllableZS(playerid, 0);
					DuelCheck[DuelCheck[playerid][0]][12] = 5;
					DuelCheck[DuelCheck[playerid][0]][13] = 5;
					TogglePlayerControllableZS(DuelCheck[playerid][0], 0);
  		        }
  		    }
  		    return SendClientMessage(DuelCheck[playerid][0], 0xFFFFFFFF, "Ваш соперник покинул {4FDF24}дуэль{FFFFFF}!");
  		}
		case 121:
		{
      		if(response == 0 || PlayerInfo[playerid][pFreeMode] == 1 || SelectionCheck[playerid][0] == 0) return SelectionCheck[playerid][8] = 0;
      		SelectionCheck[playerid][7] = 1;
      		SelectionCheck[playerid][8] = 1;
      		TextDrawLetterSize(MenuSelection[playerid][9], 0.500000, 3.000000);
      		TextDrawSetSelectable(MenuSelection[playerid][10], false);
            TextDrawSetSelectable(MenuSelection[playerid][11], false);
            TextDrawHideForPlayer(playerid, MenuSelection[playerid][7]);
            TextDrawShowForPlayer(playerid, MenuSelection[playerid][8]);
      		TextDrawShowForPlayer(playerid, MenuSelection[playerid][9]);
		    TextDrawShowForPlayer(playerid, MenuSelection[playerid][10]);
		    TextDrawShowForPlayer(playerid, MenuSelection[playerid][11]);
		    TextDrawShowForPlayer(playerid, MenuSelection[playerid][14]);
		    TextDrawShowForPlayer(playerid, MenuSelection[playerid][15]);
		    TextDrawShowForPlayer(playerid, MenuSelection[playerid][16]);
		    TextDrawShowForPlayer(playerid, MenuSelection[playerid][17]);
      		if(PlayerInfo[playerid][pRussifier][1] == 0)
	        {
	            switch(PlayerInfo[playerid][pClassWeapons][0])
	            {
             		case 0: TextDrawSetString(MenuSelection[playerid][10], "slot I:  ~r~~h~NO GADGET");
					case 1: TextDrawSetString(MenuSelection[playerid][10], "slot I:  ~g~~h~MEDIC PACK");
					case 2: TextDrawSetString(MenuSelection[playerid][10], "slot I:  ~g~~h~DEFIBRILLATOR");
					case 3: TextDrawSetString(MenuSelection[playerid][10], "slot I:  ~g~~h~MEDIC BAG");
                }
                switch(PlayerInfo[playerid][pClassWeapons][1])
                {
                	case 0: TextDrawSetString(MenuSelection[playerid][11], "slot I:  ~r~~h~NO GADGET");
					case 1: TextDrawSetString(MenuSelection[playerid][11], "slot I:  ~g~~h~MEDIC PACK");
					case 2: TextDrawSetString(MenuSelection[playerid][11], "slot I:  ~g~~h~DEFIBRILLATOR");
					case 3: TextDrawSetString(MenuSelection[playerid][11], "slot I:  ~g~~h~MEDIC BAG");
     			}
	        }
	        else
	        {
	          	switch(PlayerInfo[playerid][pClassWeapons][0])
                {
           			case 0: TextDrawSetString(MenuSelection[playerid][10], "cћo¦ I:  ~r~~h~®e¦ ™aљ›e¦a");
					case 1: TextDrawSetString(MenuSelection[playerid][10], "cћo¦ I:  ~g~~h~ЇeљaЈ¦e¤ka");
					case 2: TextDrawSetString(MenuSelection[playerid][10], "cћo¦ I:  ~g~~h~љeЃњ—pњћћ¬¦op");
					case 3: TextDrawSetString(MenuSelection[playerid][10], "cћo¦ I:  ~g~~h~ЇeљЈake¦");
    		    }
		    	switch(PlayerInfo[playerid][pClassWeapons][1])
                {
      	        	case 0: TextDrawSetString(MenuSelection[playerid][11], "cћo¦ I:  ~r~~h~®e¦ ™aљ›e¦a");
					case 1: TextDrawSetString(MenuSelection[playerid][11], "cћo¦ I:  ~g~~h~ЇeљaЈ¦e¤ka");
					case 2: TextDrawSetString(MenuSelection[playerid][11], "cћo¦ I:  ~g~~h~љeЃњ—pњћћ¬¦op");
					case 3: TextDrawSetString(MenuSelection[playerid][11], "cћo¦ I:  ~g~~h~ЇeљЈake¦");
   				}
	        }
	        if(PlayerInfo[playerid][pClassWeapons][4] == 1) TextDrawSetString(MenuSelection[playerid][8], "LD_CHAT:thumbup");
			else TextDrawSetString(MenuSelection[playerid][8], "LD_CHAT:thumbdn");
	        return 1;
		}
		case 122:
		{
      		if(response == 0 || PlayerInfo[playerid][pFreeMode] == 1 || SelectionCheck[playerid][0] == 0) return SelectionCheck[playerid][8] = 0;
      		SelectionCheck[playerid][7] = 2;
      		SelectionCheck[playerid][8] = 1;
      		TextDrawLetterSize(MenuSelection[playerid][9], 0.500000, 3.000000);
      		TextDrawSetSelectable(MenuSelection[playerid][10], false);
            TextDrawSetSelectable(MenuSelection[playerid][11], false);
            TextDrawHideForPlayer(playerid, MenuSelection[playerid][7]);
            TextDrawShowForPlayer(playerid, MenuSelection[playerid][8]);
      		TextDrawShowForPlayer(playerid, MenuSelection[playerid][9]);
		    TextDrawShowForPlayer(playerid, MenuSelection[playerid][10]);
		    TextDrawShowForPlayer(playerid, MenuSelection[playerid][11]);
		    TextDrawShowForPlayer(playerid, MenuSelection[playerid][14]);
		    TextDrawShowForPlayer(playerid, MenuSelection[playerid][15]);
		    TextDrawShowForPlayer(playerid, MenuSelection[playerid][16]);
		    TextDrawShowForPlayer(playerid, MenuSelection[playerid][17]);
      		if(PlayerInfo[playerid][pRussifier][1] == 0)
	        {
			  	switch(PlayerInfo[playerid][pClassWeapons][2])
	            {
	            	case 0: TextDrawSetString(MenuSelection[playerid][10], "slot I:  ~r~~h~NO GADGET");
					case 1: TextDrawSetString(MenuSelection[playerid][10], "slot I:  ~g~~h~AMMO PACK");
					case 2: TextDrawSetString(MenuSelection[playerid][10], "slot I:  ~g~~h~AMMO BOX");
	     		}
			  	switch(PlayerInfo[playerid][pClassWeapons][3])
	            {
	            	case 0: TextDrawSetString(MenuSelection[playerid][11], "slot II: ~r~~h~NO GADGET");
					case 1: TextDrawSetString(MenuSelection[playerid][11], "slot II: ~g~~h~AMMO PACK");
					case 2: TextDrawSetString(MenuSelection[playerid][11], "slot II: ~g~~h~AMMO BOX");
	            }
	        }
	        else
	        {
	          	switch(PlayerInfo[playerid][pClassWeapons][2])
	            {
	            	case 0: TextDrawSetString(MenuSelection[playerid][10], "cћo¦ I:  ~r~~h~®e¦ ™aљ›e¦a");
					case 1: TextDrawSetString(MenuSelection[playerid][10], "cћo¦ I:  ~g~~h~—oe®a—op");
					case 2: TextDrawSetString(MenuSelection[playerid][10], "cћo¦ I:  ~g~~h~—oeЈpњЈacЁ");
	     		}
			  	switch(PlayerInfo[playerid][pClassWeapons][3])
	            {
	            	case 0: TextDrawSetString(MenuSelection[playerid][11], "cћo¦ II: ~r~~h~®e¦ ™aљ›e¦a");
					case 1: TextDrawSetString(MenuSelection[playerid][11], "cћo¦ II: ~g~~h~—oe®a—op");
					case 2: TextDrawSetString(MenuSelection[playerid][11], "cћo¦ II: ~g~~h~—oeЈpњЈacЁ");
	            }
	        }
	        if(PlayerInfo[playerid][pClassWeapons][5] == 1) TextDrawSetString(MenuSelection[playerid][8], "LD_CHAT:thumbup");
			else TextDrawSetString(MenuSelection[playerid][8], "LD_CHAT:thumbdn");
	        return 1;
		}
		case 141:
		{
		    if(response == 0 || SelectionCheck[playerid][0] == 0) return SelectionCheck[playerid][5] = 0;
		    SelectionCheck[playerid][5] = 1;
	  		new string[60+10];
   			format(string, sizeof(string), " slot: ~g~~h~%s", WeaponsName[PlayerInfo[playerid][pAutoBuyWeapon][0]]);
	        TextDrawSetString(MenuSelection[playerid][10], string);
			format(string, sizeof(string), " slot: ~g~~h~%s", WeaponsName[PlayerInfo[playerid][pAutoBuyWeapon][1]]);
			TextDrawSetString(MenuSelection[playerid][11], string);
			if(PlayerInfo[playerid][pVip] >= 3)
			{
			    TextDrawLetterSize(MenuSelection[playerid][9], 0.5, 5.6);
				format(string, sizeof(string), " slot: ~g~~h~%s", WeaponsName[PlayerInfo[playerid][pAutoBuyWeapon][2]]);
				TextDrawSetString(MenuSelection[playerid][12], string);
				format(string, sizeof(string), " slot: ~g~~h~%s", WeaponsName[PlayerInfo[playerid][pAutoBuyWeapon][3]]);
				TextDrawSetString(MenuSelection[playerid][13], string);
				TextDrawShowForPlayer(playerid, MenuSelection[playerid][12]);
		    	TextDrawShowForPlayer(playerid, MenuSelection[playerid][13]);
   			}
   			else TextDrawLetterSize(MenuSelection[playerid][9], 0.5, 2.5);
   			TextDrawShowForPlayer(playerid, MenuSelection[playerid][9]);
		    TextDrawShowForPlayer(playerid, MenuSelection[playerid][10]);
		    TextDrawShowForPlayer(playerid, MenuSelection[playerid][11]);
   			if(PlayerInfo[playerid][pServerHelp][2] <= 2)
   			{
   			    PlayerInfo[playerid][pServerHelp][2] += 1;
				new str[10];
				format(str, sizeof(str), "%d,%d,%d", PlayerInfo[playerid][pServerHelp][0], PlayerInfo[playerid][pServerHelp][1], PlayerInfo[playerid][pServerHelp][2]);
				mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `serverhelp`='%s' WHERE `id`='%d'", str, PlayerInfo[playerid][pRoomAccount]);
 			    mysql_tquery(MysqlConnectID, string);
			}
   			return 1;
		}
		case 142:
		{
		    if(PlayerInfo[playerid][pServerHelp][1] == 1 && DuelCheck[playerid][2] == 0) return 1;
		    if(GetPVarInt(playerid, "DuelHelp[1]") > gettime())
			{
			    switch(GetPVarInt(playerid, "DuelHelp[0]"))
		    	{
					case 1: ShowPlayerDialogZS(playerid, 142, DIALOG_STYLE_MSGBOX, "Помощь по Дуэлю I", "{FFFFFF}Добро пожаловать в настройки Дуэля.\n\nДуэль это поединок между двумя игроками, цель которого — удовлетворить желание одного из дуэлянтов.\nЕсть три класса дуэля: Пистолетный, Гоночный, Мастер оружия.\nВ каждом классе дуэля вы можете выбрать Класс дуэля, место проведения дуэля(карта), Время, Погоду.", "Дальше", "", 1085);
					case 2: ShowPlayerDialogZS(playerid, 142, DIALOG_STYLE_MSGBOX, "Помощь по Дуэлю II", "{FFFFFF}Перестрельный дуэль:\nПерестрелка между двумя противниками на определенной карте с определенным оружием.\n\nГоночный дуэль:\nЭто соревнование за первое место с выбором карты, класса автомобиля.\n\nМастер оружия:\nЭто оружие по уровню, за убийства игрока вы будет награждены новым уровнем, и оружием.", "Дальше", "", 1085);
				}
				return 1;
			}
			DuelCheck[playerid][2] = gettime() + 240;
		    switch(GetPVarInt(playerid, "DuelHelp[0]"))
		    {
				case 1:
		        {
		            SetPVarInt(playerid, "DuelHelp[0]", 2);
		            SetPVarInt(playerid, "DuelHelp[1]", gettime() + 2);
		            ShowPlayerDialogZS(playerid, 142, DIALOG_STYLE_MSGBOX, "Помощь по Дуэлю II", "{FFFFFF}Перестрельный дуэль:\nПерестрелка между двумя противниками на определенной карте с определенным оружием.\n\nГоночный дуэль:\nЭто соревнование за первое место с выбором карты, класса автомобиля.\n\nМастер оружия:\nЭто оружие по уровню, за убийства игрока вы будет награждены новым уровнем, и оружием.", "Дальше", "");
				}
		        case 2:
		        {
		            DeletePVar(playerid, "DuelHelp[0]");
		            DeletePVar(playerid, "DuelHelp[1]");
		            SelectTextDraw(playerid, 0x88AA88FF);
		            PlayerInfo[playerid][pServerHelp][1] = 1;
            		TextDrawShowForPlayer(playerid, DuelInfo[playerid][0]);
					TextDrawShowForPlayer(playerid, DuelInfo[playerid][1]);
					TextDrawShowForPlayer(playerid, DuelInfo[playerid][2]);
					TextDrawShowForPlayer(playerid, DuelInfo[playerid][3]);
					TextDrawShowForPlayer(playerid, DuelInfo[playerid][4]);
					TextDrawShowForPlayer(playerid, DuelInfo[playerid][5]);
					TextDrawShowForPlayer(playerid, DuelInfo[playerid][6]);
					TextDrawShowForPlayer(playerid, DuelInfo[playerid][7]);
					TextDrawShowForPlayer(playerid, DuelInfo[playerid][8]);
					TextDrawShowForPlayer(playerid, DuelInfo[playerid][9]);
					TextDrawShowForPlayer(playerid, DuelInfo[playerid][10]);
					TextDrawShowForPlayer(playerid, DuelInfo[playerid][11]);
					TextDrawShowForPlayer(playerid, DuelInfo[playerid][12]);
					TextDrawShowForPlayer(playerid, DuelInfo[playerid][13]);
					TextDrawShowForPlayer(playerid, DuelInfo[playerid][15]);
					TextDrawShowForPlayer(playerid, DuelInfo[playerid][35]);
					TextDrawShowForPlayer(playerid, DuelInfo[playerid][36]);
					TextDrawShowForPlayer(playerid, DuelInfo[playerid][37]);
					TextDrawShowForPlayer(playerid, DuelInfo[playerid][38]);
					TextDrawShowForPlayer(playerid, DuelInfo[playerid][39]);
					TextDrawShowForPlayer(playerid, DuelInfo[playerid][40]);
					TextDrawShowForPlayer(playerid, DuelInfo[playerid][41]);
					TextDrawShowForPlayer(playerid, DuelInfo[playerid][42]);
					TextDrawShowForPlayer(playerid, DuelInfo[playerid][43]);
					TextDrawShowForPlayer(playerid, DuelInfo[playerid][44]);
					new string[60+10], str[10];
					format(str, sizeof(str), "%d,%d,%d", PlayerInfo[playerid][pServerHelp][0], PlayerInfo[playerid][pServerHelp][1], PlayerInfo[playerid][pServerHelp][2]);
					mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `serverhelp`='%s' WHERE `id`='%d'", str, PlayerInfo[playerid][pRoomAccount]);
 			    	mysql_tquery(MysqlConnectID, string);
     			}
		    }
		    return 1;
		}
		case 500:
		{
		    if(response == 0) return 1;
		    if(listitem == 3)
		    {
		        ShowPlayerDialogZS(playerid, 502, DIALOG_STYLE_INPUT, "_", "ID Оружия", "Выбрать", "Назад");
		        return 1;
		    }
		    SetPVarInt(playerid, "TestDam", listitem);
		    return ShowPlayerDialogZS(playerid, 501, DIALOG_STYLE_INPUT, "_", "Кол Dam", "Выбрать", "Назад");
		}
		case 143:
		{
		    if(response == 0 || ChoiceTeamCheck[playerid][0] == 0) return 1;
		    switch(listitem)
		    {
		        case 0:
		        {
		            new string[60+10], str[10];
		            PlayerInfo[playerid][pServerHelp][0] = 0;
		            ServerHelpInfo[playerid][0] = gettime() + 2;
					ServerHelpInfo[playerid][1] = 1;
				    ChoiceTeamCheck[playerid][1] = 0;
		    		ChoiceTeamCheck[playerid][2] = 256;
		    		ChoiceTeamCheck[playerid][3] = 0;
		    		ChoiceTeamCheck[playerid][4] = 0;
				    CancelSelectTextDraw(playerid);
				    for(new x; x < 17; x ++) TextDrawHideForPlayer(playerid, ChoiceTeam[playerid][x]);
					format(str, sizeof(str), "%d,%d,%d", PlayerInfo[playerid][pServerHelp][0], PlayerInfo[playerid][pServerHelp][1], PlayerInfo[playerid][pServerHelp][2]);
					mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET serverhelp='%s' WHERE id=%d", str, PlayerInfo[playerid][pRoomAccount]);
 			    	return mysql_tquery(MysqlConnectID, string);
		        }
		    }
		    return 1;
		}
		case 1000:
		{
		    if(response == 0) return 1;
		    new slot = GetPVarInt(playerid, "ArenaIDPlay") - 1;
		    if(!IsPlayerConnected(slot)) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок не найден!");
		    if(PlayerLogged[slot] == 0) return SendClientMessage(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок ещё не зашел в свой аккаунт!");
		    switch(listitem)
	  		{
	  		    case 0: return SetDialogResponse(playerid, 12, slot);
	  		    case 1: return ShowPlayerDialogZS(playerid, 1002, DIALOG_STYLE_INPUT, "Пожаловаться на игрока", "{FFFFFF}Укажите причину жалобы:", "Дальше", "Назад");
	  		}
	  		return 1;
		}
		case 1001: if(response != 0) return SetDialogResponse(playerid, 11, GetPVarInt(playerid, "ArenaIDPlay") - 1);
		case 1002:
		{
		    if(response == 0) return SetDialogResponse(playerid, 11, GetPVarInt(playerid, "ArenaIDPlay") - 1);
		    if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 1002, DIALOG_STYLE_INPUT, "Пожаловаться на игрока", "{FFFFFF}Укажите причину жалобы:", "Дальше", "Назад");
			if(GetPVarInt(playerid, "Report") > gettime()) return ShowPlayerDialogZS(playerid, 1001, DIALOG_STYLE_MSGBOX, "{FF3535}Ошибка", "{FFFFFF}Повторная жалоба будет доступна через 30 секунд!", "Назад", "Закрыть");
  			if(strlen(inputtext) < 2 || strlen(inputtext) > 65) return ShowPlayerDialogZS(playerid, 1002, DIALOG_STYLE_INPUT, "Пожаловаться на игрока", "{FFFFFF}Укажите причину жалобы:\n{FF0000}Максимальная длинна текста от 2 до 65 символов!", "Дальше", "Назад");
			for(new i; i < strlen(inputtext); i ++) if(inputtext[i] == ' ' || inputtext[i] == '{') return ShowPlayerDialogZS(playerid, 1002, DIALOG_STYLE_INPUT, "Пожаловаться на игрока", "{FFFFFF}Укажите причину жалобы:\n{FF0000}Недоступные символы!", "Дальше", "Назад");
			FindSpecifiersInStringBy_seriu(inputtext);
			SetPVarInt(playerid, "Report", gettime() + 30);
    		new string[174], slot = GetPVarInt(playerid, "ArenaIDPlay") - 1;
			format(string, sizeof(string), "Жалоба на игрока %s (ID: %d) от игрока %s (ID: %d): {808080}%s", PlayerName[slot], slot, PlayerName[playerid], playerid, inputtext);
			ABroadCast(0xC3C3C3AA, string, 0, 2);
			format(string, sizeof(string), "{FFFFFF}Жалоба на игрока {4FDF24}%s (ID %d) {FFFFFF}отправлена.\n{4FDF24}%s{FFFFFF}.", PlayerName[slot], slot, inputtext);
			return ShowPlayerDialogZS(playerid, 1001, DIALOG_STYLE_MSGBOX, "Пожаловаться на игрока", string, "Назад", "Закрыть");
  		}
		case 3000://Меню Автомобиля
		{
		    if(response)
		    {
		    	switch(listitem)
		        {
	                case 0://Отремонтировать автомобиль
		            {
						new Float: health, vehicleid;
						vehicleid = GetPlayerVehicleID(playerid);
		            	GetVehicleHealth(vehicleid, health);
		        		if(health == 1000) return ShowPlayerDialogZS(playerid, 3100, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}Данный автомобиль не нуждается в ремонте!", "Назад", "Закрыть");
						RepairVehicle(vehicleid);
   			            PlayerPlaySound(playerid, 32000, 0.0, 0.0, 0.0);
    		            return SendClientMessage(playerid, 0xFFFFFFFF, "Вы успешно отремонтировали свой {10F441}автомобиль{FFFFFF}.");
		            }
		            case 1://Поставить автомобиль на колеса
		            {
		                new Float: Pos[4], vehicleid;
		                vehicleid = GetPlayerVehicleID(playerid);
		                GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		                GetVehicleZAngle(vehicleid, Pos[3]);
		                return SetVehicleZAngle(vehicleid, Pos[3]);
		            }
		            case 2: return ShowPlayerDialogZS(playerid, 3100, DIALOG_STYLE_MSGBOX, "Окна автомобиля", "{FFFFFF}Вы можете открывать окна у автомобиля, с помощью кнопок.\n{4FDF24}NUM 4 {FFFFFF}- Нажмите 1 раз открытие первого левого окна, 2 раза открытие второго правого окна.\n{4FDF24}NUM 6 {FFFFFF}- Нажмите 1 раз открытие третьего левого окна, 2 раза открытие четвертого правого окна.", "Назад", "Закрыть");
		            case 3://Фары
		            {
		                new vehicle[7], vehicleid = GetPlayerVehicleID(playerid);
			  			GetVehicleParamsEx(vehicleid, vehicle[0], vehicle[1], vehicle[2], vehicle[3], vehicle[4], vehicle[5], vehicle[6]);
		                if(vehicle[1] == 0)
		                {
		                	PlayerPlaySound(playerid, 14405, 0.0, 0.0, 0.0);
		            		SendClientMessage(playerid, 0xFFFFFFFF, "Фары у автомобиля были успешно {10F441}Включены{FFFFFF}.");
		                	SetVehicleParamsEx(vehicleid, vehicle[0], 1, vehicle[2], vehicle[3], vehicle[4], vehicle[5], vehicle[6]);
						}
		                else
		                {
		                	PlayerPlaySound(playerid, 14404, 0.0, 0.0, 0.0);
		            		SendClientMessage(playerid, 0xFFFFFFFF, "Фары у автомобиля были успешно {FF3535}Отключены{FFFFFF}.");
		                	SetVehicleParamsEx(vehicleid, vehicle[0], 0, vehicle[2], vehicle[3], vehicle[4], vehicle[5], vehicle[6]);
		                }
		                return SetDialogResponse(playerid, 13);
		            }
		            case 4://Двигатель
		            {
		                new vehicle[7], vehicleid = GetPlayerVehicleID(playerid);
			  			GetVehicleParamsEx(vehicleid, vehicle[0], vehicle[1], vehicle[2], vehicle[3], vehicle[4], vehicle[5], vehicle[6]);
		            	if(vehicle[0] == 0)
		            	{
		            		PlayerPlaySound(playerid, 14405, 0.0, 0.0, 0.0);
		            		SendClientMessage(playerid, 0xFFFFFFFF, "Двигатель у автомобиля был успешно {10F441}Заведен{FFFFFF}.");
		                	SetVehicleParamsEx(vehicleid, 1, vehicle[1], vehicle[2], vehicle[3], vehicle[4], vehicle[5], vehicle[6]);

		            	}
		            	else
		            	{
		            		PlayerPlaySound(playerid, 14404, 0.0, 0.0, 0.0);
		            		SendClientMessage(playerid, 0xFFFFFFFF, "Двигатель у автомобиля был успешно {FF3535}Заглушен{FFFFFF}.");
		                	SetVehicleParamsEx(vehicleid, 0, vehicle[1], vehicle[2], vehicle[3], vehicle[4], vehicle[5], vehicle[6]);
		            	}
		            	return SetDialogResponse(playerid, 13);
		            }
		            case 5://Двери
		            {
		                new vehicle[7], vehicleid = GetPlayerVehicleID(playerid);
			  			GetVehicleParamsEx(vehicleid, vehicle[0], vehicle[1], vehicle[2], vehicle[3], vehicle[4], vehicle[5], vehicle[6]);
		                if(vehicle[3] == 0)
					 	{
		            		PlayerPlaySound(playerid, 14405, 0.0, 0.0, 0.0);
		            		SendClientMessage(playerid, 0xFFFFFFFF, "Двери у автомобиля были успешно {FF3535}Закрыты{FFFFFF}.");
							SetVehicleParamsEx(vehicleid, vehicle[0], vehicle[1], vehicle[2], 1, vehicle[4], vehicle[5], vehicle[6]);
					 	}
					 	else
					 	{
					 		PlayerPlaySound(playerid, 14404, 0.0, 0.0, 0.0);
		            		SendClientMessage(playerid, 0xFFFFFFFF, "Двери у автомобиля были успешно {10F441}Открыты{FFFFFF}.");
							SetVehicleParamsEx(vehicleid, vehicle[0], vehicle[1], vehicle[2], 0, vehicle[4], vehicle[5], vehicle[6]);
					 	}
					 	return SetDialogResponse(playerid, 13);
		            }
		            case 6://Капот
		            {
		                new vehicle[7], vehicleid = GetPlayerVehicleID(playerid);
			  			GetVehicleParamsEx(vehicleid, vehicle[0], vehicle[1], vehicle[2], vehicle[3], vehicle[4], vehicle[5], vehicle[6]);
		                if(vehicle[4] == 0)
					 	{
		            		PlayerPlaySound(playerid, 14405, 0.0, 0.0, 0.0);
		            		SendClientMessage(playerid, 0xFFFFFFFF, "Капот у автомобиля был успешно {10F441}Открыт{FFFFFF}.");
							SetVehicleParamsEx(vehicleid, vehicle[0], vehicle[1], vehicle[2], vehicle[3], 1, vehicle[5], vehicle[6]);
					 	}
					 	else
					 	{
					 		PlayerPlaySound(playerid, 14404, 0.0, 0.0, 0.0);
		            		SendClientMessage(playerid, 0xFFFFFFFF, "Капот у автомобиля был успешно {FF3535}Закрыт{FFFFFF}.");
							SetVehicleParamsEx(vehicleid, vehicle[0], vehicle[1], vehicle[2], vehicle[3], 0, vehicle[5], vehicle[6]);
					 	}
					 	return SetDialogResponse(playerid, 13);
		            }
		            case 7://Багажник
		            {
		                new vehicle[7], vehicleid = GetPlayerVehicleID(playerid);
			  			GetVehicleParamsEx(vehicleid, vehicle[0], vehicle[1], vehicle[2], vehicle[3], vehicle[4], vehicle[5], vehicle[6]);
		                if(vehicle[5] == 0)
					 	{
		            		PlayerPlaySound(playerid, 14405, 0.0, 0.0, 0.0);
		            		SendClientMessage(playerid, 0xFFFFFFFF, "Багажник у автомобиля был успешно {10F441}Открыт{FFFFFF}.");
							SetVehicleParamsEx(vehicleid, vehicle[0], vehicle[1], vehicle[2], vehicle[3], vehicle[4], 1, vehicle[6]);
					 	}
					 	else
					 	{
					 		PlayerPlaySound(playerid, 14404, 0.0, 0.0, 0.0);
		            		SendClientMessage(playerid, 0xFFFFFFFF, "Багажник у автомобиля был успешно {FF3535}Закрыт{FFFFFF}.");
							SetVehicleParamsEx(vehicleid, vehicle[0], vehicle[1], vehicle[2], vehicle[3], vehicle[4], 0, vehicle[6]);
	   					}
	   					return SetDialogResponse(playerid, 13);
		            }
		            case 8://Заспавнить автомобиль
		            {
		                new vehicleid = GetPlayerVehicleID(playerid);
		                if(TuningVehicle[vehicleid][2] == 1)
						{
							TuningVehicle[vehicleid][2] = 0;
							DestroyDynamicObject(TuningVehicle[vehicleid][0]);
							DestroyDynamicObject(TuningVehicle[vehicleid][1]);
						}
						if(AutoCheck[playerid] != 0 && AutoCheck[playerid] == vehicleid) DestroyVehicle(AutoCheck[playerid]);
						else SetVehicleToRespawn(vehicleid);
				        return 1;
		            }
		            case 9: return ShowPlayerDialogZS(playerid, 32, DIALOG_STYLE_LIST, "Тюнинг автомобиля", "Изменить цвет\nИзменить диски\nУстановить гидравлику\nУстановить закись азота\nУстановить неон\nУстановить мигалку\nУстановить компоненты", "Выбрать", "Назад");
				}
			}
		}
		case 3100:
	 	{
	 	    if(response == 0) return 1;
	 		return SetDialogResponse(playerid, 13);
	 	}
    	case 31: if(response == 1) return ShowPlayerDialogZS(playerid, 32, DIALOG_STYLE_LIST, "Тюнинг автомобиля", "Изменить цвет\nИзменить диски\nУстановить гидравлику\nУстановить закись азота\nУстановить неон\nУстановить мигалку\nУстановить компоненты", "Выбрать", "Назад");
		case 32://Тюнинг
		{
		    if(response)
		    {
		    	switch(listitem)
		        {
	                case 0: return ShowPlayerDialogZS(playerid, 3200, DIALOG_STYLE_INPUT, "Изменить цвет", "{FFFFFF}Введите ID цвета автомобиля:\n{D3D3D3}Для просмотра ID цветов: wiki.sa-mp.com/wiki/Vehicle_Color_IDs", "Дальше", "Назад");
		            case 1://Диски
					{
					    /*new vehicleid = GetPlayerVehicleID(playerid);
	                    switch(GetVehicleModel(vehicleid))
	                    {
	                        case 406, 417, 425, 430, 435, 441, 444, 446, 447, 448, 449, 450, 452, 453, 454, 457, 460, 461, 462, 463, 464, 465, 468, 469, 471, 472, 473, 476, 481, 484, 485, 486, 487, 488, 493, 497, 501, 509, 510,
							511, 512, 513, 519, 520, 521, 522, 523, 530, 532, 537, 538, 539, 548, 553, 556, 557, 563, 564, 569, 570, 571, 574, 577, 581, 584, 586, 590, 591, 592, 593, 594, 595, 606, 607, 608, 610, 611: return ShowPlayerDialogZS(playerid, 31, DIALOG_STYLE_LIST, "{FF0000}Ошибка", "{FFFFFF}Вы не можете заменить диски на данном виде транспорта.", "Назад", "Закрыть");
						}*/
						ShowModelSelectionMenu(playerid, 4);
						return 1;
					}
		            case 2://Установить гидравлику 3202
		            {
		                new vehicleid = GetPlayerVehicleID(playerid);
			            switch(GetVehicleModel(vehicleid))
			        	{
			        	    case 406, 407, 417, 425, 430, 432, 443, 444, 446, 447, 448, 452, 453, 454, 460, 461, 462, 463,
							464, 465, 468, 469, 471, 472, 473, 476, 481, 484, 486, 487, 488, 493, 497, 501, 509, 510, 511,
							512, 513, 519, 520, 521, 522, 523, 524, 525, 530, 531, 532, 539, 548, 553, 556, 557, 563, 568,
							577, 581, 586, 592, 593, 601: ShowPlayerDialogZS(playerid, 31, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}Вы не можете установить гидравлику на данный вид транспорта!", "Назад", "Закрыть", 1085);
			 				default:
			 				{
			        	    	AddVehicleComponent(vehicleid, 1087);
		                		ShowPlayerDialogZS(playerid, 31, DIALOG_STYLE_MSGBOX, "Установить гидравлику", "{FFFFFF}Вы успешно установили гидравлику на свой {10F441}автомобиль{FFFFFF}.", "Назад", "Закрыть", 1133);
			 				}
			        	}
						return 1;
		            }
		            case 3: return ShowPlayerDialogZS(playerid, 3203, DIALOG_STYLE_LIST, "Установить закись азота", "Закись азота x2\nЗакись азота x5\nЗакись азота x10", "Выбрать", "Назад");
		            case 4://Установить неон 3204
		            {
		                new vehicleid = GetPlayerVehicleID(playerid);
		           		switch(GetVehicleModel(vehicleid))
			        	{
			            	case 400, 401, 402, 404, 405, 407, 409, 410, 411, 412, 413, 415, 418, 419, 420, 421, 422,
							426, 429, 431, 436, 437, 438, 439, 440, 442, 444, 445, 451, 458, 459, 466, 467, 470, 474,
							475, 477, 479, 480, 482, 489, 490, 491, 492, 494, 495, 496, 498, 500, 502, 503, 504, 505,
							506, 507, 516, 517, 518, 525, 526, 527, 529, 533, 534, 535, 536, 540, 541, 542, 543, 544,
							545, 546, 547, 549, 550, 551, 554, 555, 556, 557, 558, 559, 560, 561, 562, 565, 566, 567,
							575, 576, 579, 580, 582, 585, 587, 589, 596, 597, 598, 599, 600, 602, 603, 604, 605, 609: ShowPlayerDialogZS(playerid, 3204, DIALOG_STYLE_LIST, "Установить неон", "{FF3535}Снять неон\n{FFFFFF}Синий\nКрасный\nЗелёный\nБелый\nРозовый\nЖёлтый", "Выбрать", "Назад");
							default: ShowPlayerDialogZS(playerid, 31, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}Вы не можете установить неон на данный вид транспорта!", "Назад", "Закрыть", 1085);
						}
						return 1;
		            }
		            case 5: return ShowPlayerDialogZS(playerid, 3205, DIALOG_STYLE_LIST, "Установить мигалку", "{FF3535}Снять мигалку\n{FFFFFF}Мигалка на крышу\nМигалка на капот\nМигалка на багажник", "Выбрать", "Назад");
		            case 6:
		            {
		                /*new vehicleid = GetPlayerVehicleID(playerid);
			            switch(GetVehicleModel(vehicleid))
			        	{
			            	case 562, 560, 559, 565, 561, 558: ShowPlayerDialogZS(playerid, 3206, DIALOG_STYLE_LIST, "Установить компоненты", "Винилы\nПороги\nВыхлопные трубы\nВоздухозаборник\nСпойлера\nПередние бампера\nЗадние бампера\n", "Выбрать", "Назад");
			            	default:
						}*/
						ShowPlayerDialogZS(playerid, 31, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}Вы не можете установить компоненты на данный вид транспорта!", "Назад", "Закрыть", 1085);
				  		return 1;
		            }
		        }
		    }
			else SetDialogResponse(playerid, 13);
			return 1;
		}
		case 3200://Изменить цвет 3200
		{
			if(response)
		    {
		    	if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 3200, DIALOG_STYLE_INPUT, "Изменить цвет", "{FFFFFF}Введите ID цвета автомобиля:\n{D3D3D3}Для просмотра ID цветов: wiki.sa-mp.com/wiki/Vehicle_Color_IDs", "Дальше", "Назад");
				if(strval(inputtext) < 0 || strval(inputtext) > 255) return ShowPlayerDialogZS(playerid, 3200, DIALOG_STYLE_INPUT, "Изменить цвет", "{FFFFFF}Введите ID цвета автомобиля:\n{D3D3D3}Для просмотра ID цветов: wiki.sa-mp.com/wiki/Vehicle_Color_IDs\n{FF0000}Цвет автомобиля должен быть не меньше 0 и не больше 255!", "Дальше", "Назад");
				SetPVarInt(playerid, "VehicleColor", strval(inputtext));
				return ShowPlayerDialogZS(playerid, 3210, DIALOG_STYLE_INPUT, "Изменить цвет 2", "{FFFFFF}Введите ID цвета автомобиля:\n{D3D3D3}Для просмотра ID цветов: wiki.sa-mp.com/wiki/Vehicle_Color_IDs", "Дальше", "Назад");
			}
			else ShowPlayerDialogZS(playerid, 32, DIALOG_STYLE_LIST, "Тюнинг автомобиля", "Изменить цвет\nИзменить диски\nУстановить гидравлику\nУстановить закись азота\nУстановить неон\nУстановить мигалку\nУстановить компоненты", "Выбрать", "Назад");
            return 1;
		}
		case 3210://Изменить цвет 2 3210
		{
			if(response)
		    {
		        if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 3210, DIALOG_STYLE_INPUT, "Изменить цвет 2", "{FFFFFF}Введите ID цвета автомобиля:\n{D3D3D3}Для просмотра ID цветов: wiki.sa-mp.com/wiki/Vehicle_Color_IDs", "Дальше", "Назад");
		    	if(strval(inputtext) < 0 || strval(inputtext) > 255) return ShowPlayerDialogZS(playerid, 3210, DIALOG_STYLE_INPUT, "Изменить цвет 2", "{FFFFFF}Введите ID цвета автомобиля:\n{D3D3D3}Для просмотра ID цветов: wiki.sa-mp.com/wiki/Vehicle_Color_IDs\n{FF0000}Цвет автомобиля должен быть не меньше 0 и не больше 255!", "Дальше", "Назад");
		    	new string[115];
		    	new vehicleid = GetPlayerVehicleID(playerid);
	            ChangeVehicleColor(vehicleid, GetPVarInt(playerid, "VehicleColor"), strval(inputtext));
				format(string, sizeof(string), "{FFFFFF}Вы успешно изменили свой цвет автомобиля на Цвет 1: {10F441}%d {FFFFFF}Цвет 2: {10F441}%s{FFFFFF}.", GetPVarInt(playerid, "VehicleColor"), inputtext);
	            ShowPlayerDialogZS(playerid, 31, DIALOG_STYLE_MSGBOX, "Тюнинг автомобиля", string, "Назад", "Закрыть", 1134);
                DeletePVar(playerid, "VehicleColor");
				return 1;
			}
			else ShowPlayerDialogZS(playerid, 3200, DIALOG_STYLE_INPUT, "Изменить цвет", "{FFFFFF}Введите ID цвета автомобиля:\n{D3D3D3}Для просмотра ID цветов: wiki.sa-mp.com/wiki/Vehicle_Color_IDs", "Дальше", "Назад");
            return 1;
		}
		case 3203://Установить закись азота 3203
		{
		    if(response)
		    {
		        switch(listitem)
		  		{
			        case 0://Закись азота x2
			        {
			            new vehicleid = GetPlayerVehicleID(playerid);
			        	AddVehicleComponent(vehicleid, 1008);
		                ShowPlayerDialogZS(playerid, 31, DIALOG_STYLE_MSGBOX, "Установить закись азота", "{FFFFFF}Вы успешно установили Закись азота x2 на свой {10F441}автомобиль{FFFFFF}.", "Назад", "Закрыть", 1133);
					}
		            case 1://Закись азота x5
			        {
			            new vehicleid = GetPlayerVehicleID(playerid);
			        	AddVehicleComponent(vehicleid, 1009);
		                ShowPlayerDialogZS(playerid, 31, DIALOG_STYLE_MSGBOX, "Установить закись азота", "{FFFFFF}Вы успешно установили Закись азота x5 на свой {10F441}автомобиль{FFFFFF}.", "Назад", "Закрыть", 1133);
					}
			        case 2://Закись азота x10
			        {
			            new vehicleid = GetPlayerVehicleID(playerid);
		                AddVehicleComponent(vehicleid, 1010);
		                ShowPlayerDialogZS(playerid, 31, DIALOG_STYLE_MSGBOX, "Установить закись азота", "{FFFFFF}Вы успешно установили Закись азота x10 на свой {10F441}автомобиль{FFFFFF}.", "Назад", "Закрыть", 1133);
					}
  				}
		    }
			else ShowPlayerDialogZS(playerid, 32, DIALOG_STYLE_LIST, "Тюнинг автомобиля", "Изменить цвет\nИзменить диски\nУстановить гидравлику\nУстановить закись азота\nУстановить неон\nУстановить мигалку\nУстановить компоненты", "Выбрать", "Назад");
            return 1;
		}
	    case 3204://Установить неон 3204
		{
		    if(response)
		    {
		    	switch(listitem)
		        {
	                case 0://Отключить неон
	                {
	                    new vehicleid = GetPlayerVehicleID(playerid);
	                	if(TuningVehicle[vehicleid][2] == 0) return ShowPlayerDialogZS(playerid, 31, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}У вас не установлен неон!", "Назад", "Закрыть", 1085);
						SetNeonAuto(vehicleid, 18648, 2);
						ShowPlayerDialogZS(playerid, 31, DIALOG_STYLE_MSGBOX, "Установить неон", "{FFFFFF}Вы успешно сняли неон со своего {10F441}автомобиля.", "Назад", "Закрыть", 14404);
					    return 1;
		            }
		            case 1://Синий неон
		            {
		                new vehicleid = GetPlayerVehicleID(playerid);
		                SetNeonAuto(vehicleid, 18648, 1);
						ShowPlayerDialogZS(playerid, 31, DIALOG_STYLE_MSGBOX, "Установить неон", "{FFFFFF}Вы успешно установили Синий неон на свой {10F441}автомобиль{FFFFFF}.", "Назад", "Закрыть", 1133);
						return 1;
					}
					case 2://Красный неон
					{
					    new vehicleid = GetPlayerVehicleID(playerid);
						SetNeonAuto(vehicleid, 18647, 1);
						ShowPlayerDialogZS(playerid, 31, DIALOG_STYLE_MSGBOX, "Установить неон", "{FFFFFF}Вы успешно установили Красный неон на свой {10F441}автомобиль{FFFFFF}.", "Назад", "Закрыть", 1133);
						return 1;
					}
					case 3://Зелёный неон
					{
					    new vehicleid = GetPlayerVehicleID(playerid);
						SetNeonAuto(vehicleid, 18649, 1);
						ShowPlayerDialogZS(playerid, 31, DIALOG_STYLE_MSGBOX, "Установить неон", "{FFFFFF}Вы успешно установили Зелёный неон на свой {10F441}автомобиль{FFFFFF}.", "Назад", "Закрыть", 1133);
						return 1;
					}
					case 4://Белый неон
					{
					    new vehicleid = GetPlayerVehicleID(playerid);
						SetNeonAuto(vehicleid, 18652, 1);
						ShowPlayerDialogZS(playerid, 31, DIALOG_STYLE_MSGBOX, "Установить неон", "{FFFFFF}Вы успешно установили Белый неон на свой {10F441}автомобиль{FFFFFF}.", "Назад", "Закрыть", 1133);
						return 1;
					}
					case 5://Розовый неон
					{
					    new vehicleid = GetPlayerVehicleID(playerid);
						SetNeonAuto(vehicleid, 18651, 1);
						ShowPlayerDialogZS(playerid, 31, DIALOG_STYLE_MSGBOX, "Установить неон", "{FFFFFF}Вы успешно установили Розовый неон на свой {10F441}автомобиль{FFFFFF}.", "Назад", "Закрыть", 1133);
						return 1;
					}
					case 6://Жёлтый неон
					{
					    new vehicleid = GetPlayerVehicleID(playerid);
						SetNeonAuto(vehicleid, 18650, 1);
						ShowPlayerDialogZS(playerid, 31, DIALOG_STYLE_MSGBOX, "Установить неон", "{FFFFFF}Вы успешно установили Жёлтый неон на свой {10F441}автомобиль{FFFFFF}.", "Назад", "Закрыть", 1133);
						return 1;
					}
	 			}
	        }
	        else ShowPlayerDialogZS(playerid, 32, DIALOG_STYLE_LIST, "Тюнинг автомобиля", "Изменить цвет\nИзменить диски\nУстановить гидравлику\nУстановить закись азота\nУстановить неон\nУстановить мигалку\nУстановить компоненты", "Выбрать", "Назад");
            return 1;
		}
		case 4000:
		{
            if(response == 0) return 1;
            switch(listitem)
  			{
		 		case 0:
	 			{
				 	if(PlayerInfo[playerid][pFreeMode] == 1 && FrozenCheck[playerid] == 0) ShowPlayerDialogZS(playerid, 4002, DIALOG_STYLE_LIST, "Телепорты по серверу", "{FFFFFF}Лос Сантос\nЛас Вентурас\nСан Фиерро\nРеспаун\nTest\nTest\nRace I\nRace II\nRace III\nКОР", "Выбрать", "Назад");
					else ShowPlayerDialogZS(playerid, 4001, DIALOG_STYLE_MSGBOX, "Телепорты по серверу", "{FFFFFF}В данный момент вы не можете телепортироваться!", "Назад", "Закрыть", 1085);
					return 1;
				}
				case 1:
				{
					for(new x = 0; x < MAX_VEHICLE; x ++) SetVehicleToRespawn(x);
					return SetDialogResponse(playerid, 7);
				}
				case 2:
				{
				    if(ServerCheck[1] == 1)
				    {
				    	ServerCheck[1] = 0;
		    			foreach(new i: Player) StopAudioStreamForPlayer(i);
				    }
					return ShowPlayerDialogZS(playerid, 4003, DIALOG_STYLE_INPUT, "Включить музыку на сервере", "{FFFFFF}Для включения музыки введите прямую ссылку на mp3 или ogg/vorbis трек:", "Дальше", "Отмена");
				}
				case 3:
				{
				    if(ForbiddenArea[playerid][0] != 0) return SendClientMessage(playerid, COLOR_RED, "Сначала вернитесь в зону действий!");
				    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_RED, "Сначала выйдите из автомобиля!");
				    if(PlayerInfo[playerid][pFreeMode] == 1)
					{
					    PossSave[playerid][6] = 1.0;
					    PossSave[playerid][4] = float(PlayerInterior[playerid][0]);
					    PossSave[playerid][5] = float(GetPlayerVirtualWorld(playerid));
					    GetPlayerFacingAngle(playerid, PossSave[playerid][3]);
						GetPlayerPos(playerid, PossSave[playerid][0], PossSave[playerid][1], PossSave[playerid][2]);
			  		}
				    Spawned[playerid] = false;
				    ChangeMap[playerid][3] = 1;
				    ChangeMap[playerid][4] = 0;
				    SelectTextDraw(playerid, 0x88AA88FF);
				    if(FrozenCheck[playerid] != 0) TogglePlayerControllableZS(playerid, 1);
				    TogglePlayerSpectatingZS(playerid, 1);
				    if(MenuProcurementTime[playerid] != 0)
				    {
				    	MenuProcurementTime[playerid] = 0;
						TextDrawHideForPlayer(playerid, MenuProcurementIcon[playerid][0]);
						TextDrawHideForPlayer(playerid, MenuProcurementIcon[playerid][1]);
					}
					if(PlayerInfo[playerid][pInfoText][2] == 1) TextDrawHideForPlayer(playerid, UpPanel[playerid]);
				    new lang = PlayerInfo[playerid][pRussifier][1];
				    TextDrawShowForPlayer(playerid, ChangeMapp[playerid][0]);
				    TextDrawShowForPlayer(playerid, ChangeMapp[playerid][1]);
				    TextDrawShowForPlayer(playerid, ChangeMapp[playerid][2]);
				    TextDrawShowForPlayer(playerid, ChangeMapp[playerid][3]);
				    TextDrawShowForPlayer(playerid, ChangeMapp[playerid][4]);
                    TextDrawShowForPlayer(playerid, DuelInfo[playerid][34]);
                    if(PlayerInfo[playerid][pRussifier][1] == 0) TextDrawSetString(ChangeMapp[playerid][0], MapSettings[ChangeMap[playerid][4]][Name]);
                    else TextDrawSetString(ChangeMapp[playerid][0], MapSettings[ChangeMap[playerid][4]][Name1]);
                    TextDrawSetString(ChangeMapp[playerid][3], TextDrawInfo[88][lang]);
                    TextDrawSetString(ChangeMapp[playerid][4], TextDrawInfo[89][lang]);
		 			TextDrawHideForPlayer(playerid, ArenaInfo[playerid][0]);
 					TextDrawHideForPlayer(playerid, ArenaInfo[playerid][1]);
 					TextDrawHideForPlayer(playerid, ArenaInfo[playerid][2]);
 					TextDrawHideForPlayer(playerid, ArenaInfo[playerid][10]);
 		    		TextDrawHideForPlayer(playerid, ArenaInfo[playerid][11]);
 		    		ArenaMapCamera(playerid, ChangeMap[playerid][4]);
					SetPlayerVirtualWorld(playerid, ChangeMap[playerid][4]+1);
					SetPlayerInteriorZS(playerid, MapSettings[ChangeMap[playerid][4]][Preset][2]);
					SetPlayerTime(playerid, MapSettings[ChangeMap[playerid][4]][Preset][3], 0);
					SetPlayerWeather(playerid, MapSettings[ChangeMap[playerid][4]][Preset][4]);
 		    		return 1;
				} 
				case 4: return ShowPlayerDialogZS(playerid, 4004, DIALOG_STYLE_LIST, "Сменить время карты", "30 секунд\n1 минута\n3 минуты\n6 минут\n8 минут\n10 минут\n15 минут", "Выбрать", "Назад");
				case 5:
  				{
					new string[87];
  				    if(ServerGate[3] == 0)
			        {
			            ServerGate[3] = 1;
				    	MoveDynamicObject(ServerGate[0], 2214.78, 1584.90, 996.000, 3);
				 	    MoveDynamicObject(ServerGate[1], 2195.90, 1584.98, 996.000, 3);
			        	MoveDynamicObject(ServerGate[2], -2438.1565, 1552.3718, 16.0700, 3);
						PlayerPlaySound(playerid, 12200, -2438.1565, 1552.3718, 16.0700);
			        	PlayerPlaySound(playerid, 12200, 207.79, 1875.85, 14.00);
			        	format(string, sizeof(string), "Администратор %s (ID: %d) открыл(а) все дополнительные ворота", PlayerName[playerid], playerid);
				    	ABroadCast(0xC3C3C3AA, string, 0, 4);
				 	}
				 	else
				 	{
				 	    ServerGate[3] = 0;
				 	    MoveDynamicObject(ServerGate[0], 2214.78, 1584.90, 1000.30, 3);
				 	    MoveDynamicObject(ServerGate[1], 2195.90, 1584.98, 1000.30, 3);
				    	MoveDynamicObject(ServerGate[2], -2438.11, 1548.25, 16.07, 3);
				   	 	PlayerPlaySound(playerid, 12200, -2438.1565, 1552.3718, 16.0700);
				   	 	PlayerPlaySound(playerid, 12200, 211.93, 1875.76, 14.0);
				   	 	format(string, sizeof(string), "Администратор %s (ID: %d) закрыл(а) все дополнительные ворота", PlayerName[playerid], playerid);
				    	ABroadCast(0xC3C3C3AA, string, 0, 4);
				 	}
				 	return SetDialogResponse(playerid, 7);
  				}
  				case 6: return ShowPlayerDialogZS(playerid, 4005, DIALOG_STYLE_INPUT, "Заблокировать IP адрес", "{FFFFFF}Введите IP адрес который хотите заблокировать:", "Дальше", "Назад");
  				case 7: return ShowPlayerDialogZS(playerid, 4006, DIALOG_STYLE_INPUT, "Разблокировать IP адрес", "{FFFFFF}Введите IP адрес который хотите разблокировать:", "Дальше", "Назад");
  				case 8: return ShowPlayerDialogZS(playerid, 4007, DIALOG_STYLE_INPUT, "Разблокировать игровой аккаунт", "{FFFFFF}Введите никнейм игрока который был заблокирован:", "Дальше", "Назад");
				case 9:
				{
    				if(PlayerInfo[playerid][pAdmin] != 5) return 1;
    				SendRconCommand("gmx");
        			return GameTextForAll("~y~~g~server restart ~n~~w~10 seconds", 9000, 5);
				}
				case 10:
				{
				    if(PlayerInfo[playerid][pAdmin] != 5) return 1;
				    return SendRconCommand("reloadfs ObjectServer");
				}
 				case 11: if(PlayerInfo[playerid][pAdmin] == 5) return SetDialogResponse(playerid, 8);
			}
			return 1;
		}
        case 4002:
		{
		    if(response)
		    {
                switch(listitem)
                {
					case 0:
					{
						if(IsPlayerInAnyVehicle(playerid)) SetVehiclePosZS(playerid, 1944.3506, -2172.2852, 13.1963, 270.2356);
						else SetPlayerPosZS(playerid, 1953.9601, -2177.7813, 13.5469, 359.6867, 0, 202);
	 				}
					case 1:
					{
						if(IsPlayerInAnyVehicle(playerid)) SetVehiclePosZS(playerid, 2039.0316, 1053.1636, 10.3990, 181.0415);
						else SetPlayerPosZS(playerid, 2028.5663, 1042.1115, 10.8203, 271.3256, 0, 202);
	 				}
					case 2:
					{
						if(IsPlayerInAnyVehicle(playerid)) SetVehiclePosZS(playerid, -1779.0992, -570.3619, 16.2139, 89.9131);
						else SetPlayerPosZS(playerid, -1771.1237, -759.7061, 56.0976, 14.5607, 0, 202);
	 				}
					case 3:
					{
						if(IsPlayerInAnyVehicle(playerid)) SetVehiclePosZS(playerid, -2700.8457, -31.7080, 3.9805, 358.9048);
						else SetPlayerPosZS(playerid, -2642.4751, -33.4738, 6.1328, 179.0201, 0, 202);
	  				}
	  				case 4: SetPlayerPosZS(playerid, -689.7433, 934.6893, 13.6328, 247.9215, 0, 202);
	  				case 5: SetPlayerPosZS(playerid, 1534.6600, -1362.1399, 329.4568, 39.0181, 0, 202);
	  				case 6: SetPlayerPosZS(playerid, -296.9839, 1507.7380, 75.3594, 195.2568, 0, 202);
	  				case 7: SetPlayerPosZS(playerid, -2399.44824, -1948.61853, 305.83661, 0.00000, 0, 202);
	  				case 8: SetPlayerPosZS(playerid, -1397.7413, -203.0459, 1043.1050, 217.5143, 7, 202);
					case 9: SetPlayerPosZS(playerid, 569.5488, -2319.9639, 10.3644, 335.0928, 0, 202);
                }
				new string[65];
                format(string, sizeof(string), "Игрок %s (ID: %d) телепортировался #%d", PlayerName[playerid], playerid, listitem + 1);
		        return ABroadCast(0xC3C3C3FF, string, 0, 2);
		    }
		    else SetDialogResponse(playerid, 7);
  			return 1;
		}
		case 4003:
		{
	        if(response)
	        {
	        	if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 4003, DIALOG_STYLE_INPUT, "Включить музыку на сервере", "{FFFFFF}Для включения музыки введите прямую ссылку на mp3 или ogg/vorbis трек:", "Дальше", "Отмена");
	        	ServerCheck[1] = 1;
		    	foreach(new i: Player) PlayAudioStreamForPlayer(i, inputtext);
		    	return 1;
			}
			else SetDialogResponse(playerid, 7);
			return 1;
		}
		case 4004:
		{
		    if(response)
		    {
		    	new slot;
		        switch(listitem)
			 	{
			 	    case 0: slot = 6;
					case 1: slot = 60;
					case 2: slot = 180;
					case 3: slot = 360;
					case 4: slot = 480;
					case 5: slot = 600;
					case 6: slot = 900;
			 	}
			 	SetPVarInt(playerid, "ArenaTime", slot);
			 	return ShowPlayerDialogZS(playerid, 4034, DIALOG_STYLE_LIST, "Выберите лобби", "Сменить время лобби 1\nСменить время лобби 2\nСменить время лобби 3", "Выбрать", "Назад");
		    }
		    else SetDialogResponse(playerid, 7);
		    return 1;
		}
		case 4034:
		{
		    if(response)
		    {
		        new string[92];
		        switch(listitem)
			 	{
			 	    case 0:
				 	{
				 	    if(Arena[2] != 0 || Arena[1] <= 5)
						{
                        	DeletePVar(playerid, "ArenaTime");
							return ShowPlayerDialogZS(playerid, 4001, DIALOG_STYLE_MSGBOX, "Изменить время", "{FFFFFF}В данный момент вы не можете изменить время карты!", "Назад", "Закрыть", 1085);
						}
					 	Arena[1] = GetPVarInt(playerid, "ArenaTime");
	  				}
			 	    case 1:
				 	{
				 	    if(Arena[9] != 0 || Arena[8] <= 5)
					 	{
					 	    DeletePVar(playerid, "ArenaTime");
					 	    return ShowPlayerDialogZS(playerid, 4001, DIALOG_STYLE_MSGBOX, "Изменить время", "{FFFFFF}В данный момент вы не можете изменить время карты!", "Назад", "Закрыть", 1085);
						}
					 	Arena[8] = GetPVarInt(playerid, "ArenaTime");
	  				}
					case 2:
					{
					    if(Arena[16] != 0 || Arena[15] <= 5)
						{
                            DeletePVar(playerid, "ArenaTime");
							return ShowPlayerDialogZS(playerid, 4001, DIALOG_STYLE_MSGBOX, "Изменить время", "{FFFFFF}В данный момент вы не можете изменить время карты!", "Назад", "Закрыть", 1085);
						}
						Arena[15] = GetPVarInt(playerid, "ArenaTime");
	 				}
			 	}
			 	format(string, sizeof(string), "{FFFFFF}Вы успешно изменили время лобби номер {4FDF24}%d {FFFFFF}на {4FDF24}%s{FFFFFF}.", listitem + 1, Convert(GetPVarInt(playerid, "ArenaTime")));
	            ShowPlayerDialogZS(playerid, 4001, DIALOG_STYLE_MSGBOX, "Изменить время", string, "Назад", "Закрыть", 1138);
	            return DeletePVar(playerid, "ArenaTime");
		    }
		    else ShowPlayerDialogZS(playerid, 4004, DIALOG_STYLE_LIST, "Сменить время карты", "30 секунд\n1 минута\n3 минуты\n6 минут\n8 минут\n10 минут\n15 минут", "Выбрать", "Назад");
		    return 1;
		}
        case 4014:
		{
		    if(response == 0 || ChangeMap[playerid][3] == 0) return 1;
			if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 4014, DIALOG_STYLE_INPUT, "Смена карты", "{FFFFFF}Введите номер карты, которую хотите посмотреть:", "Выбрать", "Отмена");
            if(strval(inputtext) < 0 || strval(inputtext) > MAX_MAPS - 1) return ShowPlayerDialogZS(playerid, 4014, DIALOG_STYLE_INPUT, "Смена карты", "{FFFFFF}Введите номер карты, которую хотите посмотреть:\n{FF0000}Неверный номер карты!", "Выбрать", "Отмена", 1085);
            ChangeMap[playerid][4] = strval(inputtext);//5513
			ArenaMapCamera(playerid, ChangeMap[playerid][4]);
			SetPlayerVirtualWorld(playerid, ChangeMap[playerid][4]+1);
			SetPlayerInteriorZS(playerid, MapSettings[ChangeMap[playerid][4]][Preset][2]);
			SetPlayerTime(playerid, MapSettings[ChangeMap[playerid][4]][Preset][3], 0);
			SetPlayerWeather(playerid, MapSettings[ChangeMap[playerid][4]][Preset][4]);
			new string[27];
			if(PlayerInfo[playerid][pRussifier][1] == 0) format(string, sizeof(string), "%s %d", MapSettings[ChangeMap[playerid][4]][Name], ChangeMap[playerid][4]);
			else format(string, sizeof(string), "%s %d", MapSettings[ChangeMap[playerid][4]][Name1], ChangeMap[playerid][4]);
		    return TextDrawSetString(ChangeMapp[playerid][0], string);
		}
		case 4024:
		{
		    if(response == 0 || ChangeMap[playerid][3] == 0 || (ChoiceTeamCheck[playerid][6] == 1 && Arena[2] != 0 || ChoiceTeamCheck[playerid][6] == 2 && Arena[9] != 0 || ChoiceTeamCheck[playerid][6] == 3 && Arena[16] != 0)) return 1;
		    new string[132], slot;
		    switch(listitem)
		    {
		        case 0:
		        {
		            if(Arena[0] == ChangeMap[playerid][4]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Данная карта уже выбрана!", 1085);
					if(Arena[2] != 0 || Arena[1] <= 5) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> В данный момент вы не можете изменить карту!", 1085);
                    slot = Arena[0];
                    Arena[2] = 4;
					Arena[0] = ChangeMap[playerid][4];
		        }
		        case 1:
		  		{
		  		    if(Arena[7] == ChangeMap[playerid][4]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Данная карта уже выбрана!", 1085);
					if(Arena[9] != 0 || Arena[8] <= 5) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> В данный момент вы не можете изменить карту!", 1085);
		            slot = Arena[7];
                    Arena[9] = 4;
					Arena[7] = ChangeMap[playerid][4];
		  		}
		        case 2:
		        {
		            if(Arena[14] == ChangeMap[playerid][4]) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Данная карта уже выбрана!", 1085);
					if(Arena[16] != 0 || Arena[15] <= 5) return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> В данный момент вы не можете изменить карту!", 1085);
                    slot = Arena[14];
                    Arena[16] = 4;
					Arena[14] = ChangeMap[playerid][4];
		  		}
		    }
		    format(string, sizeof(string), "{FFFFFF}Предыдущая карта лобби {4FDF24}%d%s{FFFFFF} изменена на карту{4FDF24}%s{FFFFFF}.", listitem+1, MapSettings[slot][Name1], MapSettings[ChangeMap[playerid][4]][Name1]);
			return ShowPlayerDialogZS(playerid, 4044, DIALOG_STYLE_MSGBOX, "Смена карты", string, "Назад", "Закрыть", 1138);
		}
		case 4044:
		{
			if(response == 1 || (ChoiceTeamCheck[playerid][6] == 1 && Arena[2] != 0 || ChoiceTeamCheck[playerid][6] == 2 && Arena[9] != 0 || ChoiceTeamCheck[playerid][6] == 3 && Arena[16] != 0)) return 1;
			ChangeMap[playerid][3] = 0;
	        ChangeMap[playerid][4] = 0;
	        CancelSelectTextDraw(playerid);
	        TogglePlayerSpectatingZS(playerid, 0);
	        TextDrawHideForPlayer(playerid, ChangeMapp[playerid][0]);
	        TextDrawHideForPlayer(playerid, ChangeMapp[playerid][1]);
	        TextDrawHideForPlayer(playerid, ChangeMapp[playerid][2]);
	        TextDrawHideForPlayer(playerid, ChangeMapp[playerid][3]);
	        TextDrawHideForPlayer(playerid, ChangeMapp[playerid][4]);
	        return TextDrawHideForPlayer(playerid, DuelInfo[playerid][34]);
		}
		case 4005:
	  	{
	  		if(response)
	  		{
	  			if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 4005, DIALOG_STYLE_INPUT, "Заблокировать IP адрес", "{FFFFFF}Введите IP адрес который хотите заблокировать:", "Дальше", "Назад");
				if(strlen(inputtext) < 10 || strlen(inputtext) > 15) return ShowPlayerDialogZS(playerid, 4005, DIALOG_STYLE_INPUT, "Заблокировать IP адрес", "{FFFFFF}Введите IP адрес который хотите заблокировать:\n{FF0000}Слишком длинный или короткий IP адрес!", "Дальше", "Назад", 1085);
				foreach(new i: Player) if(PlayerInfo[i][pAdmin] >= 4 && PlayerInfo[i][pAdmin] <= 5) if(!strcmp(inputtext, PlayerIp[i], true)) return ShowPlayerDialogZS(playerid, 4005, DIALOG_STYLE_INPUT, "Заблокировать IP адрес", "{FFFFFF}Введите IP адрес который хотите заблокировать:\n{FF0000}Вы не можете заблокирован данный IP адрес!", "Дальше", "Назад", 1085);
				new string[48];
				format(string, sizeof(string), "Selection/blocked/banip/%s.lst", inputtext);
				if(!fexist(string))
				{
	            	strmid(BanIpInfo[playerid], inputtext, 0, strlen(inputtext), 16);
	            	return ShowPlayerDialogZS(playerid, 4015, DIALOG_STYLE_INPUT, "Заблокировать IP адрес", "{FFFFFF}Теперь введите причину блокировки IP адреса:", "Дальше", "Назад");
				}
				else ShowPlayerDialogZS(playerid, 4005, DIALOG_STYLE_INPUT, "Заблокировать IP адрес", "{FFFFFF}Введите IP адрес который хотите заблокировать:\n{FF0000}Данный IP адрес уже заблокирован!", "Дальше", "Назад", 1085);
	        }
	        else SetDialogResponse(playerid, 7);
	        return 1;
		}
	  	case 4015:
	 	{
	 		if(response)
		    {
		    	if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 4015, DIALOG_STYLE_INPUT, "Заблокировать IP адрес", "{FFFFFF}Теперь введите причину блокировки IP адреса:", "Дальше", "Назад");
				if(strlen(inputtext) < 4 || strlen(inputtext) > 20) return ShowPlayerDialogZS(playerid, 4015, DIALOG_STYLE_INPUT, "Заблокировать IP адрес", "{FFFFFF}Теперь введите причину блокировки IP адреса:\n{FF0000}Слишком длинная или короткая причина!", "Дальше", "Назад", 1085);
				new str[48];
				format(str, sizeof(str), "Selection/blocked/banip/%s.lst", BanIpInfo[playerid]);
				if(!fexist(str))
				{
				    new string[123];
				    format(string, sizeof(string), "{FFFFFF}Вы успешно заблокировали IP адрес: {10F441}%s {FFFFFF}с причиной: {10F441}%s.", BanIpInfo[playerid], inputtext);
					ShowPlayerDialogZS(playerid, 4001, DIALOG_STYLE_MSGBOX, "Заблокировать IP адрес", string, "Назад", "Закрыть", 1138);
					format(string, sizeof(string), "Администратор %s (ID: %d) заблокировал IP адрес: {808080}%s | %s", PlayerName[playerid], playerid, BanIpInfo[playerid], inputtext);
					ABroadCast(0xC3C3C3FF, string, 0, 4);
					format(str, sizeof(str), "Selection/blocked/banip/%s.lst", BanIpInfo[playerid]);
					format(string, sizeof(string), "Ник: %s | IP: %s | Причина: %s", PlayerName[playerid], PlayerIp[playerid], inputtext);
					//Log(str, string);
					format(string, sizeof(string), "banip %s", BanIpInfo[playerid]);
					SendRconCommand(string);
					//SendRconCommand("reloadbans");
					return BanIpInfo[playerid] = 0;
				}
				else ShowPlayerDialogZS(playerid, 4005, DIALOG_STYLE_INPUT, "Заблокировать IP адрес", "{FFFFFF}Введите IP адрес который хотите заблокировать:\n{FF0000}Данный IP адрес уже заблокирован!", "Дальше", "Назад", 1085);
			}
		    else ShowPlayerDialogZS(playerid, 4005, DIALOG_STYLE_INPUT, "Заблокировать IP адрес", "{FFFFFF}Введите IP адрес который хотите заблокировать:", "Дальше", "Назад");
			return 1;
		}
		case 4006:
	 	{
	 		if(response)
		    {
				if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 4006, DIALOG_STYLE_INPUT, "Разблокировать IP адрес", "{FFFFFF}Введите IP адрес который хотите разблокировать:", "Дальше", "Назад");
				if(strlen(inputtext) < 10 || strlen(inputtext) > 15) return ShowPlayerDialogZS(playerid, 4006, DIALOG_STYLE_INPUT, "Разблокировать IP адрес", "{FFFFFF}Введите IP адрес который хотите разблокировать:\n{FF0000}Слишком длинный или короткий IP адрес!", "Дальше", "Назад", 1085);
				new string[48];
				format(string, sizeof(string), "Selection/blocked/banip/%s.lst", inputtext);
				if(fexist(string))
				{
					strmid(BanIpInfo[playerid], inputtext, 0, strlen(inputtext), 16);
					ShowPlayerDialogZS(playerid, 4016, DIALOG_STYLE_INPUT, "Разблокировать IP адрес", "{FFFFFF}Теперь введите причину разблокировки IP адреса:", "Дальше", "Назад");
				}
				else ShowPlayerDialogZS(playerid, 4006, DIALOG_STYLE_INPUT, "Разблокировать IP адрес", "{FFFFFF}Введите IP адрес который хотите разблокировать:\n{FF0000}Данный IP адрес не заблокирован!", "Дальше", "Назад", 1085);
	            return 1;
			}
			else SetDialogResponse(playerid, 7);
  			return 1;
		}
        case 4016:
	 	{
			if(response)
		    {
		    	if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 4016, DIALOG_STYLE_INPUT, "Разблокировать IP адрес", "{FFFFFF}Теперь введите причину разблокировки IP адреса:", "Дальше", "Назад");
		    	if(strlen(inputtext) < 4 || strlen(inputtext) > 20) return ShowPlayerDialogZS(playerid, 4016, DIALOG_STYLE_INPUT, "Разблокировать IP адрес", "{FFFFFF}Теперь введите причину разблокировки IP адреса:\n{FF0000}Слишком длинная или короткая причина!", "Дальше", "Назад", 1085);
				new str[48];
				format(str, sizeof(str), "Selection/blocked/banip/%s.lst", BanIpInfo[playerid]);
				if(fexist(str))
				{
				    new string[123];
					fremove(str);
					format(string, sizeof(string), "{FFFFFF}Вы успешно разблокировали IP адрес: {10F441}%s {FFFFFF}с причиной: {10F441}%s.", BanIpInfo[playerid], inputtext);
					ShowPlayerDialogZS(playerid, 4001, DIALOG_STYLE_MSGBOX, "Разблокировать IP адрес", string, "Назад", "Закрыть");
					format(string, sizeof(string), "Администратор %s (ID: %d) разблокировал IP адрес: {808080}%s | %s", PlayerName[playerid], playerid, BanIpInfo[playerid], inputtext);
					ABroadCast(0xC3C3C3FF, string, 0, 4);
					format(str, sizeof(str), "Selection/blocked/banip/un/%s.lst", BanIpInfo[playerid]);
					format(string, sizeof(string), "Ник: %s | IP: %s | Причина: %s", PlayerName[playerid], PlayerIp[playerid], inputtext);
					//Log(str, string);
					format(string, sizeof(string), "unbanip %s", BanIpInfo[playerid]);
					SendRconCommand(string); 
					//SendRconCommand("reloadbans");
					return BanIpInfo[playerid] = 0;
				}
				else ShowPlayerDialogZS(playerid, 4006, DIALOG_STYLE_INPUT, "Разблокировать IP адрес", "{FFFFFF}Введите IP адрес который хотите разблокировать:\n{FF0000}Данный IP адрес не заблокирован!", "Дальше", "Назад", 1085);
		    }
		    else ShowPlayerDialogZS(playerid, 4006, DIALOG_STYLE_INPUT, "Разблокировать IP адрес", "{FFFFFF}Введите IP адрес который хотите разблокировать:", "Дальше", "Назад");
            return 1;
		}
		case 4007:
	 	{
	 		if(response)
		    {
		    	if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 4007, DIALOG_STYLE_INPUT, "Разблокировать игровой аккаунт", "{FFFFFF}Введите никнейм игрока который был заблокирован:", "Дальше", "Назад");
				new string[65];
				strmid(BanInfo[playerid], inputtext, 0, strlen(inputtext), 24);
				mysql_format(MysqlConnectID, string, sizeof(string), "SELECT * FROM blocked WHERE `name`='%s'", inputtext);
				return mysql_tquery(MysqlConnectID, string, "OnPlayerForAll", "iii", playerid, 2, 0);
			}
			else SetDialogResponse(playerid, 7);
  			return 1;
        }
		case 4017:
	 	{
	 		if(response)
		    {
		    	new string[108];
      			mysql_format(MysqlConnectID, string, sizeof(string), "DELETE FROM blocked WHERE `name`='%s'", BanInfo[playerid]);
				mysql_tquery(MysqlConnectID, string);
				format(string, sizeof(string), "Администратор %s (ID: %d) разблокировал игрока: {808080}%s", PlayerName[playerid], playerid, BanInfo[playerid]);
				ABroadCast(0xC3C3C3FF, string, 0, 4);
				format(string, sizeof(string), "{FFFFFF}Вы успешно разблокировали игровой аккаунт: {4FDF24}%s{FFFFFF}.", BanInfo[playerid]);
				return ShowPlayerDialogZS(playerid, 4001, DIALOG_STYLE_MSGBOX, "Разблокировать игровой аккаунт", string, "Назад", "Закрыть", 1138);
			}
		 	else ShowPlayerDialogZS(playerid, 4007, DIALOG_STYLE_INPUT, "Разблокировать игровой аккаунт", "{FFFFFF}Введите никнейм игрока которого хотите разблокировать:", "Дальше", "Назад");
            return 1;
		}
		case 4001:
		{
            if(response == 0) return 1;
            return SetDialogResponse(playerid, 7);
		}
  		case 4008:
  		{
  		    if(response)
  		    {
  		        switch(listitem)
  		        {
					case 5:
					{
					    if(TextBarInfoCheck[playerid] == 0)
						{
						    TextBarInfoCheck[playerid] = 1;
						    TextDrawShowForPlayer(playerid, TextBarInfo[playerid]);
						}
						else
						{
						    TextBarInfoCheck[playerid] = 0;
                            TextDrawHideForPlayer(playerid, TextBarInfo[playerid]);
						}
					}
					default:
					{
						if(ServerConfig[listitem] == 0) ServerConfig[listitem] = 1;
						else ServerConfig[listitem] = 0;
					}
				}
				SetDialogResponse(playerid, 8);
			}
			else SetDialogResponse(playerid, 7);
			return 1;
		}
		case 5000:
		{
		    if(response == 0) return 1;
		    switch(listitem)
      		{
      		    case 0:
      		    {
      		        if(PlayerInfo[playerid][pInteraction][0] == 0) return ShowPlayerDialogZS(playerid, 5001, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}Вы не покупали Медицинскую Аптечку!", "Назад", "Закрыть", 1085);
			 		if(Health[playerid] >= 30) return ShowPlayerDialogZS(playerid, 5001, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}В данный момент вы не нуждаетесь в лечении.", "Назад", "Закрыть", 1085);
                    Health[playerid] = 50;
		            SetPlayerHealth(playerid, 50.0);
		            if(PlayerInfo[playerid][pInteraction][0] >= 1) PlayerInfo[playerid][pInteraction][0] -= 1;
		            ApplyAnimation(playerid, "PED", "GUM_EAT", 4.1, 0, 1, 1, 0, 5350, 1);
		            SendClientMessageZS(playerid, 0xFFFFFFFF, "Вы успешно использовали Медицинскую аптечку.", 1138);
      		    }
				case 1:
				{
					if(PlayerInfo[playerid][pInteraction][4] == 0) return ShowPlayerDialogZS(playerid, 5001, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}Вы не покупали Бронежилет.", "Назад", "Закрыть", 1085);
					if(Armour[playerid][0] >= 100) return ShowPlayerDialogZS(playerid, 5001, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}На вас уже одет бронижилет.", "Назад", "Закрыть", 1085);
					switch(Armour[playerid][1])
    				{
	    				case 2: return ShowPlayerDialogZS(playerid, 5001, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}На вас уже одет Тяжелый бронижилет!", "Назад", "Закрыть", 1085);
	    				case 3: return ShowPlayerDialogZS(playerid, 5001, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}На вас уже одет Сверхтяжелы бронижилет!", "Назад", "Закрыть", 1085);
    				}
					Armour[playerid][0] += 34;
				    Armour[playerid][1] = 1;
				    Armour[playerid][2] = 6;
				    PlayerInfo[playerid][pInteraction][4] -= 1;
				    if(Armour[playerid][0] >= 101) Armour[playerid][0] = 100;
				    SetPlayerArmour(playerid, Armour[playerid][0]);
				    SetPlayerAttachedObjectZS(playerid, 19515);
				    SendClientMessageZS(playerid, 0xFFFFFFFF, "Вы успешно одели {10F441}Стандартный {FFFFFF}бронежилет.", 1138);
                    SetDialogResponse(playerid, 10);
				}
				case 2:
				{
					if(PlayerInfo[playerid][pInteraction][5] == 0) return ShowPlayerDialogZS(playerid, 5001, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}Вы не покупали Бронежилет.", "Назад", "Закрыть", 1085);
                    if(Armour[playerid][0] >= 100) return ShowPlayerDialogZS(playerid, 5001, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}На вас уже одет бронижилет.", "Назад", "Закрыть", 1085);
					switch(Armour[playerid][1])
    				{
    				    case 1: return ShowPlayerDialogZS(playerid, 5001, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}На вас уже одет Стандартный бронижилет!", "Назад", "Закрыть", 1085);
	    				case 3: return ShowPlayerDialogZS(playerid, 5001, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}На вас уже одет Сверхтяжелы бронижилет!", "Назад", "Закрыть", 1085);
    				}
					Armour[playerid][0] += 34;
			        Armour[playerid][1] = 2;
			        Armour[playerid][2] = 6;
			        PlayerInfo[playerid][pInteraction][5] -= 1;
			        if(Armour[playerid][0] >= 101) Armour[playerid][0] = 100;
					SetPlayerArmour(playerid, Armour[playerid][0]);
					SetPlayerAttachedObjectZS(playerid, 19515);
					SendClientMessageZS(playerid, 0xFFFFFFFF, "Вы успешно одели {10F441}Тяжелый {FFFFFF}бронежилет.", 1138);
		            SetDialogResponse(playerid, 10);
				}
				case 3:
				{
					if(PlayerInfo[playerid][pInteraction][6] == 0) return ShowPlayerDialogZS(playerid, 5001, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}Вы не покупали Бронежилет.", "Назад", "Закрыть", 1085);
                    if(Armour[playerid][0] >= 100) return ShowPlayerDialogZS(playerid, 5001, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}На вас уже одет бронижилет.", "Назад", "Закрыть", 1085);
					switch(Armour[playerid][1])
    				{
    				    case 1: return ShowPlayerDialogZS(playerid, 5001, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}На вас уже одет Стандартный бронижилет!", "Назад", "Закрыть", 1085);
	    				case 2: return ShowPlayerDialogZS(playerid, 5001, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}На вас уже одет Тяжелый бронижилет!", "Назад", "Закрыть", 1085);
    				}
					Armour[playerid][0] += 34;
                 	Armour[playerid][1] = 3;
                 	Armour[playerid][2] = 6;
                 	PlayerInfo[playerid][pInteraction][6] -= 1;
                 	if(Armour[playerid][0] >= 101) Armour[playerid][0] = 100;
					SetPlayerArmour(playerid, Armour[playerid][0]);
					SetPlayerAttachedObjectZS(playerid, 19515);
					SendClientMessageZS(playerid, 0xFFFFFFFF, "Вы успешно одели {10F441}Сверхтяжелый {FFFFFF}бронежилет.", 1138);
		            SetDialogResponse(playerid, 10);
				}
				case 4:
				{
				    if(PlayerInfo[playerid][pInteraction][2] == 0) return ShowPlayerDialogZS(playerid, 5001, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}Вы не покупали Динамит.", "Назад", "Закрыть", 1085);
				    if(InteractionCheck[playerid][9] != 0 || InteractionCheck[playerid][0] == 2) return ShowPlayerDialogZS(playerid, 5001, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}В данный момент вы не можете выполнить данное действие.", "Назад", "Закрыть", 1085);
					if(PlayerInfo[playerid][pInteraction][2] >= 1) PlayerInfo[playerid][pInteraction][2] -= 1;
                    InteractionCheck[playerid][0] = 1;
                    InteractionCheck[playerid][1] = 11;
                    GetPlayerPos(playerid, InteractionPos[playerid][0], InteractionPos[playerid][1], InteractionPos[playerid][2]);
					ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
					InteractionCheck[playerid][9] = CreateDynamicObject(1654, InteractionPos[playerid][0], InteractionPos[playerid][1], InteractionPos[playerid][2] - 1.0, -90.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
					InteractionText[playerid][3] = Create3DTextLabel("Бомба\n{FFFFFF}Взорвется через {4FDF24}10 {FFFFFF}секунд", 0xFF0000FF, InteractionPos[playerid][0], InteractionPos[playerid][1], InteractionPos[playerid][2] - 0.7, 10.0, GetPlayerVirtualWorld(playerid), 1);
					SendClientMessageZS(playerid, 0xFFFFFFFF, "Вы заложили {10F441}Динамит{FFFFFF}, будет активирован через {10F441}10 {FFFFFF}секунд.", 1138);
				}
				case 5:
				{
				    if(InteractionCheck[playerid][0] == 2)
                    {
       	            	PlayerInfo[playerid][pInteraction][2] += 1;
        	            InteractionCheck[playerid][0] = 0;
        	            RemovePlayerAttachedObject(playerid, 7);
                        if(PlayerInfo[playerid][pBonus][2] >= 1) SetPlayerAttachedObjectZS(playerid, InteractionsNumber[0][PlayerInfo[playerid][pBonus][2]]);
 					}
				    else
					{
						if(PlayerInfo[playerid][pInteraction][2] == 0) return ShowPlayerDialogZS(playerid, 5001, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}Вы не покупали Динамит.", "Назад", "Закрыть", 1085);
				        if(InteractionCheck[playerid][0] >= 1 || InteractionCheck[playerid][11] != -1) return ShowPlayerDialogZS(playerid, 5001, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}В данный момент вы не можете выполнить данное действие.", "Назад", "Закрыть", 1085);
						if(PlayerInfo[playerid][pInteraction][2] >= 1) PlayerInfo[playerid][pInteraction][2] -= 1;
						InteractionCheck[playerid][0] = 2;
						KillInfoPlayer(playerid, -1, 0, 94, ScoreKill[4]);
						SetPlayerAttachedObject(playerid, 7, 1654, 5, 0.1, 0, 0, 0, 0, 0);
						SendClientMessageZS(playerid, 0xFFFFFFFF, "Для использование {10F441}Липкого Динамита{FFFFFF}, прилепите её к врагу.", 1138);
					}
				}
      		    case 6://5503
      		    {
      		        if(PlayerInfo[playerid][pInteraction][3] == 0) return ShowPlayerDialogZS(playerid, 5001, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}Вы не покупали Наземную мину.", "Назад", "Закрыть", 1085);
			        if(InteractionCheck[playerid][0] >= 1 || InteractionCheck[playerid][0] == 2) return ShowPlayerDialogZS(playerid, 5001, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}В данный момент вы не можете выполнить данное действие.", "Назад", "Закрыть", 1085);
					new slot, Float:Pos[3];
					for(new z = 2; z < 5; z ++)
					{
						if(!IsValidDynamicObject(InteractionCheck[playerid][z])) continue;
 						GetDynamicObjectPos(InteractionCheck[playerid][z], Pos[0], Pos[1], Pos[2]);
  						if(IsPlayerInRangeOfPoint(playerid, 1.1, Pos[0], Pos[1], Pos[2]))
						{
							slot = 1;
							break;
						}
  					}
   					if(slot == 1) return ShowPlayerDialogZS(playerid, 5001, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}В этом месте вы не может заложить Наземную мину!", "Назад", "Закрыть", 1085);
					if(PlayerInfo[playerid][pInteraction][3] >= 1) PlayerInfo[playerid][pInteraction][3] -= 1;
					InteractionCheck[playerid][0] = 3;
					InteractionCheck[playerid][1] = 6;
					KillInfoPlayer(playerid, -1, 0, 95, ScoreKill[5]);
					ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0);
					GetPlayerPos(playerid, InteractionPos[playerid][0], InteractionPos[playerid][1], InteractionPos[playerid][2]);
     				for(new x = 2; x < 5; x ++)
     				{
						if(!IsValidDynamicObject(InteractionCheck[playerid][x]))
						{
		    				InteractionCheck[playerid][5] = x;
							InteractionCheck[playerid][x] = CreateDynamicObject(19797, InteractionPos[playerid][0], InteractionPos[playerid][1], InteractionPos[playerid][2] - 1.0, -90.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
							InteractionText[playerid][x - 2] = Create3DTextLabel("M", 0xFFFFFFFF, InteractionPos[playerid][0], InteractionPos[playerid][1], InteractionPos[playerid][2] - 0.9, 2.0, GetPlayerVirtualWorld(playerid), 1);
							break;
						}
						if(x == 4)
						{
		    				if(InteractionCheck[playerid][5] == 4) InteractionCheck[playerid][5] = 2;
		    				else InteractionCheck[playerid][5] += 1;
						    DestroyDynamicObject(InteractionCheck[playerid][InteractionCheck[playerid][5]]);
						    DestroyPickup(InteractionCheck[playerid][InteractionCheck[playerid][5] + 4]);
						    Delete3DTextLabel(InteractionText[playerid][InteractionCheck[playerid][5] - 2]);
						    InteractionCheck[playerid][InteractionCheck[playerid][5]] = CreateDynamicObject(19797, InteractionPos[playerid][0], InteractionPos[playerid][1], InteractionPos[playerid][2] - 1.0, -90.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
							InteractionText[playerid][InteractionCheck[playerid][5] - 2] = Create3DTextLabel("M", 0xFFFFFFFF, InteractionPos[playerid][0], InteractionPos[playerid][1], InteractionPos[playerid][2] - 0.9, 2.0, GetPlayerVirtualWorld(playerid), 1);
						}
					}
					SendClientMessageZS(playerid, 0xFFFFFFFF, "Вы успешно заложили {10F441}Наземную мину{FFFFFF}, мина будет активирована через {10F441}5 {FFFFFF}секунд.", 1138);
				}
                case 7:
      		    {
      		        if(PlayerInfo[playerid][pInteraction][1] == 0) return ShowPlayerDialogZS(playerid, 5001, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}Вы ещё не снимали маскировку с противника!", "Назад", "Закрыть", 1085);
                    PlayerInfo[playerid][pInteraction][1] -= 1;
	                SendClientMessageZS(playerid, 0xFFFFFFFF, "Вы успешно использовали Маскировку.", 1138);
      		    }
      		    case 8:
      		    {
      		        //if(PlayerInfo[playerid][pMoney] < 100) return ShowPlayerDialogZS(playerid, 5001, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}У вас недостаточно средств!", "Назад", "Закрыть", 1085);
                    KillsCheck[playerid][10] = 60;
				    return SetPlayerHealth(playerid, 0.0);
      		    }
      		    case 9:
      		    {
	     			if(Armour[playerid][0] == 0) return ShowPlayerDialogZS(playerid, 5001, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}На вас нету бронежилета!", "Назад", "Закрыть", 1085);
                    new slot = PlayerInfo[playerid][pInteraction][Armour[playerid][1] + 3];
					if(Armour[playerid][0] >= 24 || Armour[playerid][0] >= 68 || Armour[playerid][0] >= 99)
					{
	    				switch(Armour[playerid][0])
					    {
     						case 24..34: PlayerInfo[playerid][pInteraction][Armour[playerid][1] + 3] += 1;
   							case 45..68: PlayerInfo[playerid][pInteraction][Armour[playerid][1] + 3] += 2;
   							case 79..100: PlayerInfo[playerid][pInteraction][Armour[playerid][1] + 3] += 3;
					    }
					}
					Armour[playerid][0] = 0;
      				Armour[playerid][1] = 0;
      				Armour[playerid][2] = 6;
					SetPlayerArmour(playerid, 0.0);
					RemovePlayerAttachedObject(playerid, 9);
					SendClientMessageZS(playerid, 0xFFFFFFFF, "{FFFFFF}Вы успешно сняли {10F441}Бронежилет{FFFFFF}.", 1138);
		            SetDialogResponse(playerid, 10);
		            if(slot == PlayerInfo[playerid][pInteraction][Armour[playerid][1] + 3]) return 1;
      		    }
      		}
      		new string[61+22], str[22];
			format(str, sizeof(str), "%d,%d,%d,%d,%d,%d,%d", PlayerInfo[playerid][pInteraction][0], PlayerInfo[playerid][pInteraction][1], PlayerInfo[playerid][pInteraction][2], PlayerInfo[playerid][pInteraction][3], PlayerInfo[playerid][pInteraction][4], PlayerInfo[playerid][pInteraction][5], PlayerInfo[playerid][pInteraction][6]);
			mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `interaction`='%s' WHERE `id`='%d'", str, PlayerInfo[playerid][pRoomAccount]);
			return mysql_tquery(MysqlConnectID, string);
		}
		case 5001:
		{
		    if(response == 0) return 1;
			return SetDialogResponse(playerid, 10);
		}
	    case 2228:
		{
			if(response)
		    {
				switch(listitem)
		        {
		            case 0: SetDialogResponse(playerid, 12, playerid);
					case 1: SetDialogResponse(playerid, 2); //Настройки 71
		            case 2: return SetDialogResponse(playerid, 5);//Банды 74
		            case 3://Помощь 75
		            {
						new string[124];
				        strcat(string, "Команды сервера\nПравила сервера\n");
				        if(PlayerInfo[playerid][pServerHelp][0] == 0) strcat(string, "Помощь по серверу\t{10F441}Включена{FFFFFF}\n");
				        else strcat(string, "Помощь по серверу\t{FF0000}Отключена{FFFFFF}\n");
						if(PlayerInfo[playerid][pAdmin] >= 2) strcat(string, "Помощь по административным правам");
						else if(PlayerInfo[playerid][pVip] >= 2) strcat(string, "Помощь по Vip привилегиями");
				        return ShowPlayerDialogZS(playerid, 75, DIALOG_STYLE_LIST, "Помощь", string, "Выбрать", "Назад");
					}
					case 4: return SetDialogResponse(playerid, 9);
		            case 5://Онлайн радио 78
		            {
	                    ShowPlayerDialogZS(playerid, 78, DIALOG_STYLE_TABLIST_HEADERS, "Онлайн Радио",
						"Радиостанции\tЖанр\n{FF3535}Отключить {FFFFFF}радио\nСвоя радиостанция\nHot 108 Jamz\tRap\n181.FM The Box\tRap\n107.3 WKCR\tRap\nDEFJAY\tRap\nЗайцев.FM\tRap\nBig R\tRock\nРекорд Рок\tRock\nPost Hardcore\tHardcore\nTechnoBass\tElectronic\n1.FM\tPop\nFree Dance\tPop\nL-Radio\tPop\nPremium\tPop\nЗайцев.FM\tPop\nD-FM\tRandom\nХит-FM\tRandom\nЕвропа Плюс\tRandom\nРусское радио\tRandom\nШансон\tRandom\nРекорд\tRandom", "Выбрать", "Назад");
		  				return 1;
		            }
					case 6:
					{
						if(PlayerInfo[playerid][pDonat] != 0)
		    			{
 							new string[26];
		    				format(string, sizeof(string), "Доп возможности: %dP", PlayerInfo[playerid][pDonat]);
		        			ShowPlayerDialogZS(playerid, 76, DIALOG_STYLE_TABLIST, string, "Административные привилегии\t\nVIP привилегии\t\nИгровые деньги\t4P\nКол-во убийств\t3P\nКол-во смертей\t3P", "Выбрать", "Назад");
           			 	}
            			else ShowPlayerDialogZS(playerid, 76, DIALOG_STYLE_LIST, "Доп возможности", "Административные привилегии\nVIP привилегии", "Выбрать", "Назад");
						return 1;
					}
		            case 7://Связь с администрацией 79
		            {
						if(PlayerInfo[playerid][pMuted] != 0) return ShowPlayerDialogZS(playerid, 70, DIALOG_STYLE_MSGBOX, "Связь с администрацией", "{FFFFFF}Вы не можете написать в репорт в данный момент.", "Назад", "Закрыть");
	                    return ShowPlayerDialogZS(playerid, 79, DIALOG_STYLE_INPUT, "Связь с администрацией", "{FFFFFF}Введите ваше сообщение жалобы, вопроса:", "Дальше", "Назад");
		            }//:top
		            case 8: return mysql_tquery(MysqlConnectID, "SELECT name,deaths,kills,lastscore FROM profile WHERE lastscore>10 ORDER BY lastscore DESC LIMIT 0,10", "OnPlayerForAll", "iii", playerid, 7, 0);
				}
		    }
		    return 1;
		}
		case 70: if(response == 1) return SetDialogResponse(playerid, 1);
	    case 71://Настройки Персонажа 71
		{
			if(response)
		    {
		        if(PlayerInfo[playerid][pAdmin] < 2) if(PlayerInfo[playerid][pVip] < 2) if(listitem >= 2) listitem += 1;
				switch(listitem)
		        {
					case 0: return ShowPlayerDialogZS(playerid, 7101, DIALOG_STYLE_PASSWORD, "Смена пароля", "{FFFFFF}Введите свой старый пароль от игрового аккаунта:", "Дальше", "Назад");
	                case 1: SetDialogResponse(playerid, 3);//Редактировать HUD сервера
	                case 2: if(PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pVip] >= 2) SetDialogResponse(playerid, 4);
					case 3://Прием личных сообщений 7002
					{
	                    if(PlayerInfo[playerid][pMessage][1] == 0)
	           	        {
	           	            PlayerInfo[playerid][pMessage][1] = 1;
	           	            PlayerPlaySound(playerid, 14404, 0.0, 0.0, 0.0);
						}
	           	        else
	           	        {
	           	            PlayerInfo[playerid][pMessage][1] = 0;
	           	            PlayerPlaySound(playerid, 14405, 0.0, 0.0, 0.0);
				   		}
						UpdateMysql(playerid, 2);
                        SetDialogResponse(playerid, 2);
					}
					case 4://Прием вызовов на дуэль 7003
					{
					    if(PlayerInfo[playerid][pDuel][0] == 0)
	           	        {
	           	            PlayerInfo[playerid][pDuel][0] = 1;
	           	            PlayerPlaySound(playerid, 14404, 0.0, 0.0, 0.0);
	           	        }
	           	        else
	           	        {
	           	            PlayerInfo[playerid][pDuel][0] = 0;
	           	            PlayerPlaySound(playerid, 14405, 0.0, 0.0, 0.0);
	           	        }
						UpdateMysql(playerid, 3);
	           	        SetDialogResponse(playerid, 2);
					}
					case 5:
					{
						if(PlayerInfo[playerid][pDuel][3] == 0)
	           	        {
	           	            PlayerInfo[playerid][pDuel][3] = 1;
	           	            PlayerPlaySound(playerid, 14404, 0.0, 0.0, 0.0);
	           	        }
	           	        else
	           	        {
	           	            PlayerInfo[playerid][pDuel][3] = 0;
	           	            PlayerPlaySound(playerid, 14405, 0.0, 0.0, 0.0);
	           	        }
						UpdateMysql(playerid, 3);
	           	        SetDialogResponse(playerid, 2);
					}
	                case 6:
	                {
	                    if(PlayerInfo[playerid][pBindingIp] == 0)
						{
							PlayerInfo[playerid][pBindingIp] = 1;
							PlayerPlaySound(playerid, 14405, 0.0, 0.0, 0.0);
							SendClientMessage(playerid, COLOR_RED, "Если у вас не Статичный IP адрес не включайте данную функцию!");
						}
						else
						{
							PlayerInfo[playerid][pBindingIp] = 0;
							PlayerPlaySound(playerid, 14404, 0.0, 0.0, 0.0);
						}
						SetDialogResponse(playerid, 2);
	                }
	                case 7:
	                {
	                	if(strlen(PlayerInfo[playerid][pPass1]) >= 2) ShowPlayerDialogZS(playerid, 7104, DIALOG_STYLE_INPUT, "Дополнительный пароль", "{FFFFFF}Для отключения дополнительного пароля введите его:", "Дальше", "Назад");
						else ShowPlayerDialogZS(playerid, 7104, DIALOG_STYLE_INPUT, "Дополнительный пароль", "{FFFFFF}Введите свой новый дополнительный пароль:\nПри вводе 1 пароля вам придется ввести свой дополнительный пароль.", "Дальше", "Назад");
						return 1;
	                }
	                case 8: return ShowPlayerDialogZS(playerid, 7106, DIALOG_STYLE_INPUT, "Анти спавн килл", "{FFFFFF}Введите новое время действия Анти спавн килла:\nДля отключение звука Анти спавн килла используйте число: 11", "Изменить", "Назад");
					case 9: return ShowPlayerDialogZS(playerid, 7107, DIALOG_STYLE_INPUT, "Анти проваливания", "{FFFFFF}Введите новое время действия Анти проваливания:\nС помощью данной функции вы не будите проваливаться под карту на некоторых картах.", "Изменить", "Назад");
					case 10:
					{
					    if(PlayerInfo[playerid][pMessage][5] == 0)
	                    {
	                        PlayerInfo[playerid][pMessage][5] = 1;
	                    	PlayerPlaySound(playerid, 14405, 0.0, 0.0, 0.0);
	                    }
	                    else
	                    {
	                        PlayerInfo[playerid][pMessage][5] = 0;
	                        PlayerPlaySound(playerid, 14404, 0.0, 0.0, 0.0);
	                    }
	                    UpdateMysql(playerid, 2);
	                    SetDialogResponse(playerid, 2);
					}
		        }
		    }
		    else SetDialogResponse(playerid, 1);
	    }
	    case 7100:// Кнопка Назад с Диалога 71
	    {
	        if(response == 0) return 1;
	        return SetDialogResponse(playerid, 2);
	    }
	    case 7101://Смена пароля
	    {
	   	    if(response)
			{
				if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 7101, DIALOG_STYLE_PASSWORD, "Смена пароля", "{FFFFFF}Введите свой старый пароль от игрового аккаунта:", "Дальше", "Назад");
				if(strlen(inputtext) < 6 || strlen(inputtext) > 29) return ShowPlayerDialogZS(playerid, 7101, DIALOG_STYLE_PASSWORD, "Смена пароля", "{FFFFFF}Введите свой старый {FFFFFF}пароль от игрового аккаунта:\n{FF0000}Длина пароля должна быть не меньше 6 и не больше 30 символов!", "Дальше", "Назад");
                new pass[65];
				SHA256_PassHash(inputtext, PlayerInfo[playerid][pSalt], pass, 65);
				if(strcmp(pass, PlayerInfo[playerid][pPass], true))
				{
					if(WrPass[playerid] >= 3 && PlayerCheatCheck[playerid] == 0) PlayerCheat(playerid, "неверный пароль при смене", "Вы были отсоединены от игрового сервера. С причиной: Неверный пароль при смене.", 0, 1);
					else
					{
						WrPass[playerid] += 1;
						ShowPlayerDialogZS(playerid, 7101, DIALOG_STYLE_PASSWORD, "Смена пароля", "{FFFFFF}Введите свой старый пароль от игрового аккаунта:\n{FF0000}Вы ввели неверный пароль от данного аккаунта!", "Дальше", "Назад", 1085);
					}
				}
				else ShowPlayerDialogZS(playerid, 7111, DIALOG_STYLE_PASSWORD, "Смена пароля", "{FFFFFF}Теперь введите новый пароль от игрового аккаунта:", "Дальше", "Назад");
				return 1;
	    	}
			else SetDialogResponse(playerid, 2);
	        return 1;
	    }
	    case 7111:
	    {
	        if(response)
	        {
	        	if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 7111, DIALOG_STYLE_PASSWORD, "Смена пароля", "{FFFFFF}Теперь введите новый пароль от игрового аккаунта:", "Дальше", "Назад");
	        	if(strlen(inputtext) < 6 || strlen(inputtext) > 29) return ShowPlayerDialogZS(playerid, 7111, DIALOG_STYLE_PASSWORD, "Смена пароля", "{FFFFFF}Теперь введите новый пароль от игрового аккаунта:\n{FF0000}Длина пароля должна быть не меньше 6 и не больше 30 символов!", "Дальше", "Назад", 1085);
                for(new i = 0; i < strlen(inputtext); i ++)
				{
					switch(inputtext[i])
					{
    					case ' ', 'А'..'Я', 'а'..'я': return ShowPlayerDialogZS(playerid, 7111, DIALOG_STYLE_PASSWORD, "Смена пароля", "{FFFFFF}Теперь введите новый пароль от игрового аккаунта:\n{FF0000}Недопустимые символы!", "Дальше", "Назад", 1085);
					}
				}
				new string[143];
				for(new i = 0; i < 10; i ++) PlayerInfo[playerid][pSalt][i] = random(79) + 47;
                PlayerInfo[playerid][pSalt][10] = 0;
                SHA256_PassHash(inputtext, PlayerInfo[playerid][pSalt], PlayerInfo[playerid][pPass], 65);
	            format(string, sizeof(string), "UPDATE profile SET `password`='%s',`salt`='%s' WHERE `id`='%d'", PlayerInfo[playerid][pPass], PlayerInfo[playerid][pSalt], PlayerInfo[playerid][pRoomAccount]);
	            mysql_tquery(MysqlConnectID, string);
	            WrPass[playerid] = 0;
	            return ShowPlayerDialogZS(playerid, 7100, DIALOG_STYLE_MSGBOX, "Смена пароля", "{FFFFFF}Вы успешно изменили свой пароль.", "Назад", "Закрыть");
	        }
			else SetDialogResponse(playerid, 2);
			return 1;
	    }
	    case 7102:
	    {
	    	if(response)
	        {
	        	switch(listitem)
				{
				    case 0:
				    {
				    	if(PlayerInfo[playerid][pInfoText][0] == 0)
		                {
		                	PlayerInfo[playerid][pInfoText][0] = 1;
		                	if(PlayerInfo[playerid][pFreeMode] == 0)
		                	{
		                		TextDrawHideForPlayer(playerid, ArenaInfo[playerid][0]);
								TextDrawHideForPlayer(playerid, ArenaInfo[playerid][1]);
								TextDrawHideForPlayer(playerid, ArenaInfo[playerid][2]);
								TextDrawHideForPlayer(playerid, ArenaInfo[playerid][10]);
 		    					TextDrawHideForPlayer(playerid, ArenaInfo[playerid][11]);
							}
		   	            }
		   	            else
		   	            {
		                	PlayerInfo[playerid][pInfoText][0] = 0;
							if(PlayerInfo[playerid][pFreeMode] == 0)
		                	{
		                	    new lang = PlayerInfo[playerid][pRussifier][1];
		                		TextDrawShowForPlayer(playerid, ArenaInfo[playerid][0]);
						  		TextDrawShowForPlayer(playerid, ArenaInfo[playerid][1]);
						  		TextDrawShowForPlayer(playerid, ArenaInfo[playerid][2]);
						  		TextDrawShowForPlayer(playerid, ArenaInfo[playerid][10]);
 		    					TextDrawShowForPlayer(playerid, ArenaInfo[playerid][11]);
 		    					TextDrawSetString(ArenaInfo[playerid][1], TextDrawInfo[56][lang]);
		  						TextDrawSetString(ArenaInfo[playerid][0], TextDrawInfo[57][lang]);
		        	        }
		   	            }
				    }
		   			case 1:
		   			{
		   	            switch(PlayerInfo[playerid][pInfoText][1])
		   	            {
		   	                case 0: PlayerInfo[playerid][pInfoText][1] = 1;
		   	                case 1: PlayerInfo[playerid][pInfoText][1] = 2;
		   	                case 2: PlayerInfo[playerid][pInfoText][1] = 0;
		   	            }
		   			}
		   			case 2:
		   			{
		   				if(PlayerInfo[playerid][pInfoText][2] == 0)
		                {
		                	PlayerInfo[playerid][pInfoText][2] = 1;
		                	if(PlayerInfo[playerid][pInfoText][7] == 1) TextDrawHideForPlayer(playerid, UpPanel[playerid]);
		   	            }
		   	            else
		   	            {
		                	PlayerInfo[playerid][pInfoText][2] = 0;
		                	TextDrawShowForPlayer(playerid, UpPanel[playerid]);
		   	            }
		   			}
		   			case 3:
		   			{
		   			    if(PlayerInfo[playerid][pInfoText][5] == 0) PlayerInfo[playerid][pInfoText][5] = 1;
		   			    else PlayerInfo[playerid][pInfoText][5] = 0;
		   			}
		   			case 4:
		   			{
		   				if(PlayerInfo[playerid][pInfoText][3] == 0)
		                {
		                	PlayerInfo[playerid][pInfoText][3] = 1;
		                	TextDrawHideForPlayer(playerid, HealthPure[playerid]);
		   	            }
		   	            else
		   	            {
		                	PlayerInfo[playerid][pInfoText][3] = 0;
		                	TextDrawShowForPlayer(playerid, HealthPure[playerid]);
		   	            }
		   			}
		   			case 5:
		   			{
		   				if(PlayerInfo[playerid][pInfoText][4] == 0)
		                {
		                	PlayerInfo[playerid][pInfoText][4] = 1;
		                	if(SpeedCheck[playerid] == 1)
							{
								TextDrawHideForPlayer(playerid, ArenaInfo[playerid][0]);
								TextDrawHideForPlayer(playerid, ArenaInfo[playerid][10]);
	   						}
		                	SpeedCheck[playerid] = 0;
		   	            }
		   	            else
		   	            {
		                	PlayerInfo[playerid][pInfoText][4] = 0;
		                	if(IsPlayerInAnyVehicle(playerid) && PlayerInfo[playerid][pFreeMode] == 1)
							{
		   						SpeedCheck[playerid] = 1;
		   						new lang = PlayerInfo[playerid][pRussifier][1];
							    TextDrawShowForPlayer(playerid, ArenaInfo[playerid][0]);
							    TextDrawShowForPlayer(playerid, ArenaInfo[playerid][10]);
							    TextDrawSetString(ArenaInfo[playerid][0], TextDrawInfo[61][lang]);
	   						}
		  				}
		   			}
		   			case 6:
		   			{
		   				if(PlayerInfo[playerid][pInfoText][6] == 0)
		                {
		                	PlayerInfo[playerid][pInfoText][6] = 1;
		                	if(PlayerInfo[playerid][pBonus][2] != 0) TextDrawHideForPlayer(playerid, Glasses[playerid]);
		   	            }
		   	            else
		   	            {
		                	PlayerInfo[playerid][pInfoText][6] = 0;
		                	if(PlayerInfo[playerid][pBonus][2] != 0) TextDrawShowForPlayer(playerid, Glasses[playerid]);
		   	            }
		   			}
					case 7:
					{
					    if(PlayerInfo[playerid][pInfoText][7] == 0)
		                {
		                	PlayerInfo[playerid][pInfoText][7] = 1;
		                	if(PlayerInfo[playerid][pInfoText][2] == 1) TextDrawHideForPlayer(playerid, UpPanel[playerid]);
		   	            }
		   	            else
		   	            {
		                	PlayerInfo[playerid][pInfoText][7] = 0;
		                	TextDrawShowForPlayer(playerid, UpPanel[playerid]);
		   	            }
					}
		   			case 8:
		   			{
		   				if(PlayerInfo[playerid][pInfoText][12] == 0) PlayerInfo[playerid][pInfoText][12] = 1;
		   	            else PlayerInfo[playerid][pInfoText][12] = 0;
		   			}
		   			case 9: return SetDialogResponse(playerid, 6);
		   			case 10:
	                {
	                    if(PlayerInfo[playerid][pRussifier][0] == 0) PlayerInfo[playerid][pRussifier][0] = 1;
	           	        else PlayerInfo[playerid][pRussifier][0] = 0;
	           	        PlayerPlaySound(playerid, 14405, 0.0, 0.0, 0.0);
						SetDialogResponse(playerid, 3);   
	           	        new string[53+9];
	           	        mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET russifier='%d,%d' WHERE id=%d", PlayerInfo[playerid][pRussifier][0], PlayerInfo[playerid][pRussifier][1], PlayerInfo[playerid][pRoomAccount]);
						return mysql_tquery(MysqlConnectID, string);
	                }
	                case 11:
	                {
	                    if(PlayerInfo[playerid][pRussifier][1] == 0) PlayerInfo[playerid][pRussifier][1] = 1;
	           	        else PlayerInfo[playerid][pRussifier][1] = 0;
	           	        PlayerPlaySound(playerid, 14405, 0.0, 0.0, 0.0);
						SetDialogResponse(playerid, 3);
	           	        new string[53+9];
	           	        mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET russifier='%d,%d' WHERE id=%d", PlayerInfo[playerid][pRussifier][0], PlayerInfo[playerid][pRussifier][1], PlayerInfo[playerid][pRoomAccount]);
						return mysql_tquery(MysqlConnectID, string);
	                }
	                case 12:
					{
					    if(PlayerInfo[playerid][pInfoText][8] == 0) PlayerInfo[playerid][pInfoText][8] = 1;
		   	            else PlayerInfo[playerid][pInfoText][8] = 0;
					}
					case 13:
					{
					    if(PlayerInfo[playerid][pInfoText][9] == 0) PlayerInfo[playerid][pInfoText][9] = 1;
		   	            else PlayerInfo[playerid][pInfoText][9] = 0;
					}
					case 14:
					{
                        switch(PlayerInfo[playerid][pInfoText][10])
                        {
                            case 0:PlayerInfo[playerid][pInfoText][10] = 1;
                            case 1:PlayerInfo[playerid][pInfoText][10] = 2;
                            case 2: PlayerInfo[playerid][pInfoText][10] = 3;
                            case 3: PlayerInfo[playerid][pInfoText][10] = 0;
                        }
					}
					case 15:
					{
						if(PlayerInfo[playerid][pInfoText][11] == 0) PlayerInfo[playerid][pInfoText][11] = 1;
		   	            else PlayerInfo[playerid][pInfoText][11] = 0;
					}
				}
				new string[56+40], str[40];
				format(str, sizeof(string), "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d", PlayerInfo[playerid][pInfoText][0], PlayerInfo[playerid][pInfoText][1], PlayerInfo[playerid][pInfoText][2], PlayerInfo[playerid][pInfoText][3], PlayerInfo[playerid][pInfoText][4], PlayerInfo[playerid][pInfoText][5], PlayerInfo[playerid][pInfoText][6], PlayerInfo[playerid][pInfoText][7],
                PlayerInfo[playerid][pInfoText][8], PlayerInfo[playerid][pInfoText][9], PlayerInfo[playerid][pInfoText][10], PlayerInfo[playerid][pInfoText][11], PlayerInfo[playerid][pInfoText][12]);
    			mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET infotext='%s' WHERE id=%d", str, PlayerInfo[playerid][pRoomAccount]);
				mysql_tquery(MysqlConnectID, string);
                SetDialogResponse(playerid, 3);
                PlayerPlaySound(playerid, 14405, 0.0, 0.0, 0.0);
			}
	        else SetDialogResponse(playerid, 2);
	        return 1;
	    }
	    case 7132:
	    {
	        if(!response) return SetDialogResponse(playerid, 3);
			switch(listitem)
			{
				case 0:
				{
					if(PlayerInfo[playerid][pAimingX][0] == 0)
					{
						PlayerInfo[playerid][pAimingX][0] = 1;
						PlayerPlaySound(playerid, 14404, 0.0, 0.0, 0.0);
					}
					else if(PlayerInfo[playerid][pAimingX][0] == 1)
					{
						PlayerInfo[playerid][pAimingX][0] = 2;
						PlayerPlaySound(playerid, 14404, 0.0, 0.0, 0.0);
					}
					else
					{
						PlayerInfo[playerid][pAimingX][0] = 0;
						PlayerPlaySound(playerid, 14405, 0.0, 0.0, 0.0);
					}
					new string[46+10+12];
					mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET aimingx='%d,%d' WHERE id=%d", PlayerInfo[playerid][pAimingX][0], PlayerInfo[playerid][pAimingX][1], PlayerInfo[playerid][pRoomAccount]);
					mysql_tquery(MysqlConnectID, string);
					return SetDialogResponse(playerid, 6);
				}
				case 1: return ShowPlayerDialogZS(playerid, 7142, DIALOG_STYLE_INPUT, "Цвет указателя", "{FFFFFF}Введите новый цвет указателя попадания:\nДля просмотра цветов воспользуйтесь Википедией: Таблица цветов.\nПример: {FFFF00}FFFF00", "Дальше", "Назад");
			}
		    return 1;
	    }
     	case 7142:
	    {
	        if(response)
		    {
   		        if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 7142, DIALOG_STYLE_INPUT, "Цвет указателя", "{FFFFFF}Введите новый цвет указателя попадания:\nДля просмотра цветов воспользуйтесь Википедией: Таблица цветов.\nПример: {FFFF00}FFFF00", "Дальше", "Назад");
	            if(strlen(inputtext) < 6 || strlen(inputtext) > 6) return ShowPlayerDialogZS(playerid, 7142, DIALOG_STYLE_INPUT, "Цвет указателя", "{FFFFFF}Введите новый цвет указателя попадания:\nДля просмотра цветов воспользуйтесь Википедией: Таблица цветов.\nПример: {FFFF00}FFFF00\n{FF0000}Слишком длинный или короткий цвет!", "Дальше", "Назад", 1085);
				new string[84], str[12];
                format(string, sizeof(string), "0x%sFF", inputtext);
				PlayerInfo[playerid][pAimingX][1] = HexToInt(string);
				TextDrawColor(Aiming[playerid][0], HexToInt(string));
				TextDrawColor(Aiming[playerid][1], HexToInt(string));
	            format(string, sizeof(string), "{FFFFFF}Вы успешно изменили цвет указателя попадания на {%06x}вот такой{FFFFFF}.", HexToInt(inputtext));
			 	ShowPlayerDialogZS(playerid, 7152, DIALOG_STYLE_MSGBOX, "Цвет банды", string, "Назад", "Закрыть", 1138);
				format(str, sizeof(str), "%d,%d", PlayerInfo[playerid][pAimingX][0], PlayerInfo[playerid][pAimingX][1]);
				mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET aimingx='%s' WHERE id=%d", str, PlayerInfo[playerid][pRoomAccount]);
	    		return mysql_tquery(MysqlConnectID, string);
	  		}
	  		else SetDialogResponse(playerid, 6);
	  		return 1;
		}
		case 7152:
		{
		    if(response == 0) return 1;
			return SetDialogResponse(playerid, 6);
		}
   		case 7103://Дополнительные функции
		{
			if(response)
		    {
		        if(PlayerInfo[playerid][pAdmin] == 0)
				{
					if(PlayerInfo[playerid][pVip] == 2)
					{
						if(listitem == 0) listitem = 2;
						else if(listitem == 1) listitem = 3;
					}
					else if(PlayerInfo[playerid][pVip] == 3) listitem += 1;
				}
				else if(PlayerInfo[playerid][pAdmin] == 2) listitem += 1;
		        switch(listitem)
		        {
		            case 0://Своё оружие при спавне 7022
		            {
		                new string[110];
		        		format(string, sizeof(string), "Слот 1: {4FDF24}%s{FFFFFF}\nСлот 2: {4FDF24}%s{FFFFFF}\nСлот 3: {4FDF24}%s", WeaponsName[PlayerInfo[playerid][pHisWeapons][0]], WeaponsName[PlayerInfo[playerid][pHisWeapons][1]], WeaponsName[PlayerInfo[playerid][pHisWeapons][2]]);
		    			return ShowPlayerDialogZS(playerid, 7123, DIALOG_STYLE_LIST, "Оружие при спавне", string, "Выбрать", "Назад");
					}
					case 1: return ShowPlayerDialogZS(playerid, 7133, DIALOG_STYLE_INPUT, "Цвет никнейма", "{FFFFFF}Введите код цвета никнейма:\nДля просмотра цветов воспользуйтесь Википедией: Таблица цветов.\nПример: {FFFF00}FFFF00", "Выбрать", "Назад");
					case 2: return ShowPlayerDialogZS(playerid, 7153, DIALOG_STYLE_INPUT, "Личное время", "{FFFFFF}Введите личное время:\nДля установки московского времени введите число 24\nДля возвращение стандартного времени введите число 9", "Сменить", "Назад");
					case 3: return ShowPlayerDialogZS(playerid, 7163, DIALOG_STYLE_INPUT, "Личная погода", "{FFFFFF}Введите личную погоду:\nДля просмотра ID погоды: {C0C0C0}hotmist.ddo.jp/id/weather.html\n{FFFFFF}Для возвращение стандартной погоды введите число 13", "Сменить", "Назад");
					case 4://Сменить скин 7082
					{
                        new string[99];
						strcat(string, "Выборочный выбор скина\nПрописной выбор скина\n");
		                if(PlayerInfo[playerid][pYourSkin][1] == 0) strcat(string, "Свой скин на детматче:\t[{FF3535}Отключен{FFFFFF}]");
		                else strcat(string, "Свой скин на детматче:\t[{10F441}Включен{FFFFFF}]");
						return ShowPlayerDialogZS(playerid, 7173, DIALOG_STYLE_LIST, "Сменить скин", string, "Сменить", "Назад");
					}
					case 5://Просмотр команд игроков
					{
					    if(PlayerInfo[playerid][pMessage][4] == 0)
                        {
           	            	PlayerInfo[playerid][pMessage][4] = 1;
            	            PlayerPlaySound(playerid, 14405, 0.0, 0.0, 0.0);
                        }
           	            else
           	            {
            	            PlayerInfo[playerid][pMessage][4] = 0;
       	                    PlayerPlaySound(playerid, 14404, 0.0, 0.0, 0.0);
	    	            }
	    	            UpdateMysql(playerid, 2);
	    	            SetDialogResponse(playerid, 4);
					}
					case 6:
					{
	                    if(PlayerInfo[playerid][pMessage][2] == 0)
       	                {
       	                	PlayerInfo[playerid][pMessage][2] = 1;
       	                    PlayerPlaySound(playerid, 14405, 0.0, 0.0, 0.0);
       	                }
           	            else
           	            {
       	                    PlayerInfo[playerid][pMessage][2] = 0;
      	                    PlayerPlaySound(playerid, 14404, 0.0, 0.0, 0.0);
           	            }
                        UpdateMysql(playerid, 2);
           	            SetDialogResponse(playerid, 4);
					}
					case 7:
					{
					    if(PlayerInfo[playerid][pMessage][3] == 0)
                        {
       	                	PlayerInfo[playerid][pMessage][3] = 1;
       	                	PlayerPlaySound(playerid, 14405, 0.0, 0.0, 0.0);
           	            }
           	            else
           	            {
       	                	PlayerInfo[playerid][pMessage][3] = 0;
       	                	PlayerPlaySound(playerid, 14404, 0.0, 0.0, 0.0);
           	            }
                        UpdateMysql(playerid, 2);
           	            SetDialogResponse(playerid, 4);
					}
		        }
		    }
		    else SetDialogResponse(playerid, 2);
		    return 1;
		}
		case 7113:
		{
		    if(response == 0) return 1;
            return SetDialogResponse(playerid, 4);
		}
		case 7114:
	    {
	        DeletePVar(playerid, "HisWeapons");
	        if(response == 0) return 1;
	    	new string[110];
	        format(string, sizeof(string), "Слот 1: {4FDF24}%s{FFFFFF}\nСлот 2: {4FDF24}%s{FFFFFF}\nСлот 3: {4FDF24}%s", WeaponsName[PlayerInfo[playerid][pHisWeapons][0]], WeaponsName[PlayerInfo[playerid][pHisWeapons][1]], WeaponsName[PlayerInfo[playerid][pHisWeapons][2]]);
		    return ShowPlayerDialogZS(playerid, 7123, DIALOG_STYLE_LIST, "Оружие при спавне", string, "Выбрать", "Назад");
		}
		case 7123:
	    {
			if(!response) return SetDialogResponse(playerid, 4);
			SetPVarInt(playerid, "HisWeapons", listitem+1);
			new string[20*18], str[20];
			strcat(string, "{FF3535}Отключить слот\n");
			for(new x; x < strlen(WeaponsHis); x ++)
			{
				format(str, sizeof(str), "%s\n", WeaponsName[WeaponsHis[x]]);
				strcat(string, str);
			}
			return ShowPlayerDialogZS(playerid, 7124, DIALOG_STYLE_LIST, "Выберите оружие", string, "Выбрать", "Назад");
		}
		case 7124:
	    {
			new string[110];
			if(!response)
			{
	        	format(string, sizeof(string), "Слот 1: {4FDF24}%s{FFFFFF}\nСлот 2: {4FDF24}%s{FFFFFF}\nСлот 3: {4FDF24}%s", WeaponsName[PlayerInfo[playerid][pHisWeapons][0]], WeaponsName[PlayerInfo[playerid][pHisWeapons][1]], WeaponsName[PlayerInfo[playerid][pHisWeapons][2]]);
		    	ShowPlayerDialogZS(playerid, 7123, DIALOG_STYLE_LIST, "Своё оружие при спавне", string, "Выбрать", "Назад");
		    	return DeletePVar(playerid, "HisWeapons");	
			}
			new str[10];
			if(listitem == 0)
			{
				PlayerInfo[playerid][pHisWeapons][GetPVarInt(playerid, "HisWeapons")-1] = 0;
				ShowPlayerDialogZS(playerid, 7114, DIALOG_STYLE_MSGBOX, "Оружие при спавне", "{FFFFFF}Слот был {FF3535}Отключен.", "Назад", "Закрыть", 14404);
			}
			else 
			{
				PlayerInfo[playerid][pHisWeapons][GetPVarInt(playerid, "HisWeapons")-1] = WeaponsHis[listitem-1];
				format(string, sizeof(string), "{FFFFFF}Оружие {10F441}%s {FFFFFF}появиться после {10F441}следующего {FFFFFF}респауна.", WeaponsName[WeaponsHis[listitem-1]]);
				ShowPlayerDialogZS(playerid, 7114, DIALOG_STYLE_MSGBOX, "Оружие при спавне", string, "Назад", "Закрыть", 14405);
			}
			format(str, sizeof(str), "%d,%d,%d", PlayerInfo[playerid][pHisWeapons][0], PlayerInfo[playerid][pHisWeapons][1], PlayerInfo[playerid][pHisWeapons][2]);
			mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET hisweapons='%s' WHERE id=%d", str, PlayerInfo[playerid][pRoomAccount]);
			return mysql_tquery(MysqlConnectID, string);
		}
		case 7133://Цвет никнейма 7032
	    {
			if(!response) return SetDialogResponse(playerid, 4);
			if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 7133, DIALOG_STYLE_INPUT, "Цвет никнейма", "{FFFFFF}Введите код цвета никнейма:\nДля просмотра цветов воспользуйтесь Википедией: Таблица цветов.\nПример: {FFFF00}FFFF00", "Выбрать", "Назад");
			if(strlen(inputtext) < 6 || strlen(inputtext) > 6) return ShowPlayerDialogZS(playerid, 7133, DIALOG_STYLE_INPUT, "Цвет никнейма", "{FFFFFF}Введите код цвета никнейма:\nДля просмотра цветов воспользуйтесь Википедией: Таблица цветов.\nПример: {FFFF00}FFFF00\n{FF0000}Слишком длинный или короткий цвет кода!", "Выбрать", "Назад");
			new string[80];
			format(string, sizeof(string), "0x%sFF", inputtext);
			PlayerInfo[playerid][pNickColor] = HexToInt(string);
			format(string, sizeof(string), "{FFFFFF}Вы успешно изменили свой цвет никнейма на {%06x}вот такой{FFFFFF}.", PlayerInfo[playerid][pNickColor] >>> 8);
			ShowPlayerDialogZS(playerid, 7113, DIALOG_STYLE_MSGBOX, "Цвет никнейма", string, "Назад", "Закрыть", 14405);
			mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `nickcolor`='%d' WHERE `id`='%d'", PlayerInfo[playerid][pNickColor], PlayerInfo[playerid][pRoomAccount]);
			return mysql_tquery(MysqlConnectID, string);
	    }
		case 7153://Личное время: 7052
	    {
			if(!response) return SetDialogResponse(playerid, 4);
			if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 7153, DIALOG_STYLE_INPUT, "Личное время", "{FFFFFF}Введите личное время:\nДля установки московского времени введите число 24\nДля возвращение стандартного времени введите число 9", "Сменить", "Назад");
			if(strval(inputtext) < 0 || strval(inputtext) > 23) return ShowPlayerDialogZS(playerid, 7153, DIALOG_STYLE_INPUT, "Личное время", "{FFFFFF}Введите личное время:\nДля установки московского времени введите число 24\nДля возвращение стандартного времени введите число 9\n{FF0000}Время не должно быть меньше 0 и больше 23!", "Сменить", "Назад");
			new string[59];
			SetPlayerTime(playerid, strval(inputtext), 0);
			PlayerInfo[playerid][pTimers] = strval(inputtext);
			format(string, sizeof(string), "{FFFFFF}Вы успешно изменили время на {10F441}%d:00.", PlayerInfo[playerid][pTimers]);
			ShowPlayerDialogZS(playerid, 7113, DIALOG_STYLE_MSGBOX, "Личное время", string, "Назад", "Закрыть", 14405);
			mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `timers`='%d' WHERE `id`='%d'", PlayerInfo[playerid][pTimers], PlayerInfo[playerid][pRoomAccount]);
			return mysql_tquery(MysqlConnectID, string);
	    }
	   	case 7163://Личная погода 7052
	    {
			if(response)
		    {
		    	if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 7163, DIALOG_STYLE_INPUT, "Личная погода", "{FFFFFF}Введите личную погоду:\nДля просмотра ID погоды: {C0C0C0}hotmist.ddo.jp/id/weather.html\n{FFFFFF}Для возвращение стандартной погоды введите число 13", "Сменить", "Назад");
		        if(strval(inputtext) < 0 || strval(inputtext) > 45) return ShowPlayerDialogZS(playerid, 7163, DIALOG_STYLE_INPUT, "Личная погода", "{FFFFFF}Введите личную погоду:\nДля просмотра ID погоды: {C0C0C0}hotmist.ddo.jp/id/weather.html\n{FFFFFF}Для возвращение стандартной погоды введите число 13\n{FF0000}Погода не должна быть меньше 0 и больше 45!", "Сменить", "Назад");
				new string[59];
		        PlayerInfo[playerid][pWeather] = strval(inputtext);
	        	SetPlayerWeather(playerid, strval(inputtext));
	        	format(string, sizeof(string), "{FFFFFF}Вы успешно изменили погоду на {10F441}%s.", inputtext);
				ShowPlayerDialogZS(playerid, 7113, DIALOG_STYLE_MSGBOX, "Личная погода", string, "Назад", "Закрыть", 14405);
				mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `weather`='%d' WHERE `id`='%d'", PlayerInfo[playerid][pWeather], PlayerInfo[playerid][pRoomAccount]);
				return mysql_tquery(MysqlConnectID, string);
			}
		    else SetDialogResponse(playerid, 4);
	        return 1;
	    }
		case 7173://Сменить скин 7082
		{
		    if(response)
		    {
		        switch(listitem)
		        {
			        case 0: return ShowModelSelectionMenu(playerid, 1, 1);
			        case 1: return ShowPlayerDialogZS(playerid, 7183, DIALOG_STYLE_INPUT, "Прописной выбор скина", "{FFFFFF}Введите ID игрового скина:", "Сменить", "Назад");
			        case 2:
			        {
			            if(PlayerInfo[playerid][pYourSkin][1] == 0)
			            {
			                PlayerInfo[playerid][pYourSkin][1] = 1;
			                PlayerPlaySound(playerid, 14405, 0.0, 0.0, 0.0);
			                SetPlayerSkinZS(playerid, PlayerInfo[playerid][pYourSkin][0]);
			            }
			            else
			            {
			                PlayerInfo[playerid][pYourSkin][1] = 0;
			                PlayerPlaySound(playerid, 14404, 0.0, 0.0, 0.0);
			                if(PlayerInfo[playerid][pFreeMode] == 0) SetPlayerSkinZS(playerid, SkinChoice[ChoiceTeamCheck[playerid][2]-1][ChoiceTeamCheck[playerid][3]]);
			            }
			            new string[99], str[7];
						strcat(string, "Выборочный выбор скина\nПрописной выбор скина\n");
		                if(PlayerInfo[playerid][pYourSkin][1] == 0) strcat(string, "Свой скин на детматче:\t[{FF3535}Отключен{FFFFFF}]");
		                else strcat(string, "Свой скин на детматче:\t[{10F441}Включен{FFFFFF}]");
						ShowPlayerDialogZS(playerid, 7173, DIALOG_STYLE_LIST, "Сменить скин", string, "Сменить", "Назад");
						format(str, sizeof(str), "%d,%d", PlayerInfo[playerid][pYourSkin][0], PlayerInfo[playerid][pYourSkin][1]);
						mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `yourskin`='%s' WHERE `id`='%d'", str, PlayerInfo[playerid][pRoomAccount]);
						return mysql_tquery(MysqlConnectID, string);
				    }
		 		}
		    }
		    else SetDialogResponse(playerid, 4);
		    return 1;
		}
		case 7183://Прописной выбор скина
		{
			if(response)
			{
				if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 7183, DIALOG_STYLE_INPUT, "Прописной выбор скина", "{FFFFFF}Введите ID игрового скина:\n", "Сменить", "Назад");
				if(strval(inputtext) < 0 || strval(inputtext) > 311) return ShowPlayerDialogZS(playerid, 7183, DIALOG_STYLE_INPUT, "Прописной выбор скина", "{FFFFFF}Введите ID игрового скина:\n{FF0000}Номер скина не должен быть меньше 0 и больше 311!", "Сменить", "Назад");
                if(PlayerInfo[playerid][pFreeMode] == 1 && GetPlayerSkin(playerid) != strval(inputtext)) SetPlayerSkinZS(playerid, strval(inputtext));
                else if(PlayerInfo[playerid][pYourSkin][1] == 1) SetPlayerSkinZS(playerid, strval(inputtext));
				PlayerInfo[playerid][pYourSkin][0] = strval(inputtext);
				new string[72], str[7];
				format(string, sizeof(string), "{FFFFFF}Вы успешно изменили свой игровой скин на: {10F441}%s{FFFFFF}.", inputtext);
	            ShowPlayerDialogZS(playerid, 7113, DIALOG_STYLE_MSGBOX, "Прописной выбор скина", string, "Назад", "Закрыть", 1138);
				format(str, sizeof(str), "%d,%d", PlayerInfo[playerid][pYourSkin][0], PlayerInfo[playerid][pYourSkin][1]);
				mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `yourskin`='%s' WHERE `id`='%d'", str, PlayerInfo[playerid][pRoomAccount]);
				return mysql_tquery(MysqlConnectID, string);
			}
	        else
	        {
				new string[99];
				strcat(string, "Выборочный выбор скина\nПрописной выбор скина\n");
   				if(PlayerInfo[playerid][pYourSkin][1] == 0) strcat(string, "Свой скин на детматче:\t[{FF3535}Отключен{FFFFFF}]");
   				else strcat(string, "Свой скин на детматче:\t[{10F441}Включен{FFFFFF}]");
			    ShowPlayerDialogZS(playerid, 7173, DIALOG_STYLE_LIST, "Сменить скин", string, "Сменить", "Назад");
	        }
	        return 1;
	    }
	    case 7193:
	    {
	        if(response == 0) return 1;
			new string[99];
			strcat(string, "Выборочный выбор скина\nПрописной выбор скина\n");
   			if(PlayerInfo[playerid][pYourSkin][1] == 0) strcat(string, "Свой скин на детматче:\t[{FF3535}Отключен{FFFFFF}]");
   			else strcat(string, "Свой скин на детматче:\t[{10F441}Включен{FFFFFF}]");
			return ShowPlayerDialogZS(playerid, 7173, DIALOG_STYLE_LIST, "Сменить скин", string, "Сменить", "Назад");
	    }
	    case 7104:
	    {
	   	    if(response)
	    	{
	    	    if(strlen(PlayerInfo[playerid][pPass1]) >= 2)
	    	    {
	    	        if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 7104, DIALOG_STYLE_INPUT, "Дополнительный пароль", "{FFFFFF}Для отключения дополнительного пароля введите его:", "Дальше", "Назад");
					new pass[65];
					SHA256_PassHash(inputtext, PlayerInfo[playerid][pSalt1], pass, 65);
					if(strcmp(pass, PlayerInfo[playerid][pPass1], true))
			  		{
			  		    if(WrPass[playerid] >= 3 && PlayerCheatCheck[playerid] == 0) PlayerCheat(playerid, "неверный пароль при смене", "Вы были отсоединены от игрового сервера. С причиной: Неверный пароль при смене.", 0, 1);
						else
						{
							WrPass[playerid] += 1;
							ShowPlayerDialogZS(playerid, 7104, DIALOG_STYLE_INPUT, "Дополнительный пароль", "{FFFFFF}Для отключения дополнительного пароля введите его:\n{FF0000}Вы ввели неверный дополнительный пароль!", "Дальше", "Назад", 1085);
						}
						return 1;
			  		}
	  				new string[71];
      	            PlayerInfo[playerid][pPass1][0] = 0;
      	            PlayerInfo[playerid][pSalt1][0] = 0;
					format(string, sizeof(string), "UPDATE profile SET `password2`='0',`salt2`='0' WHERE `id`='%d'", PlayerInfo[playerid][pRoomAccount]);
   		            mysql_tquery(MysqlConnectID, string);
   					return ShowPlayerDialogZS(playerid, 7100, DIALOG_STYLE_MSGBOX, "Дополнительный пароль", "{FFFFFF}Дополнительный пароль был Отключен.", "Назад", "Закрыть");
				}
	    	    else
	    	    {
					if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 7104, DIALOG_STYLE_INPUT, "Дополнительный пароль", "{FFFFFF}Введите свой новый дополнительный пароль:\nПри вводе 1 пароля вам придется ввести свой дополнительный пароль.", "Дальше", "Назад");
					if(strlen(inputtext) < 6 || strlen(inputtext) > 29) return ShowPlayerDialogZS(playerid, 7104, DIALOG_STYLE_INPUT, "Дополнительный пароль", "{FFFFFF}Введите свой новый дополнительный пароль\nПри вводе 1 пароля вам придется ввести свой дополнительный пароль.\n{FF0000}Длина пароля должна быть не меньше 6 и не больше 30 символов!", "Дальше", "Назад");
                    for(new i = 0; i < strlen(inputtext); i ++)
					{
						switch(inputtext[i])
						{
	    					case ' ', 'А'..'Я', 'а'..'я': return ShowPlayerDialogZS(playerid, 7104, DIALOG_STYLE_INPUT, "Дополнительный пароль", "{FFFFFF}Введите свой новый дополнительный пароль\nПри вводе 1 пароля вам придется ввести свой дополнительный пароль.\n{FF0000}Недопустимые символы!", "Дальше", "Назад");
						}
					}
					new string[145];
					for(new i = 0; i < 10; i ++) PlayerInfo[playerid][pSalt1][i] = random(79) + 47;
                	PlayerInfo[playerid][pSalt1][10] = 0;
                	SHA256_PassHash(inputtext, PlayerInfo[playerid][pSalt1], PlayerInfo[playerid][pPass1], 65);
					format(string, sizeof(string), "UPDATE profile SET `password2`='%s',`salt2`='%s' WHERE `id`='%d'", PlayerInfo[playerid][pPass1], PlayerInfo[playerid][pSalt1], PlayerInfo[playerid][pRoomAccount]);
	            	mysql_tquery(MysqlConnectID, string);
					format(string, sizeof(string), "{FFFFFF}Ваш новый дополнительный пароль: {10F441}%s{FFFFFF}.", inputtext);
				 	ShowPlayerDialogZS(playerid, 7100, DIALOG_STYLE_MSGBOX, "Дополнительный пароль", string, "Назад", "Закрыть", 1138);
   				}
   				return 1;
			}
			else SetDialogResponse(playerid, 2);
			return 1;
	    }
		case 7106:
	    {
	    	if(response)
	        {
	        	if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 7106, DIALOG_STYLE_INPUT, "Анти спавн килл", "{FFFFFF}Введите новое время действия Анти спавн килла:\nДля отключение звука Анти спавн килла используйте число: 11", "Изменить", "Назад");
				if(strval(inputtext) < 0 || strval(inputtext) > 11) return ShowPlayerDialogZS(playerid, 7106, DIALOG_STYLE_INPUT, "Анти спавн килл", "{FFFFFF}Введите новое время действия Анти спавн килла:\nДля отключение звука Анти спавн килла используйте число: 11\n{FF0000}Время Анти спавн килла не может быть меньше 0 и больше 10!", "Изменить", "Назад", 1085);
                new string[80];
				if(strval(inputtext) == 11)
				{
					if(PlayerInfo[playerid][pSpawnKill][1] == 0)
					{
					    PlayerInfo[playerid][pSpawnKill][1] = 1;
						ShowPlayerDialogZS(playerid, 7100, DIALOG_STYLE_MSGBOX, "Анти спавн килл", "{FFFFFF}Звук Анти спавн килла был {FF0000}Отключен{FFFFFF}.", "Назад", "Закрыть", 14404);
					}
					else
					{
						PlayerInfo[playerid][pSpawnKill][1] = 0;
						ShowPlayerDialogZS(playerid, 7100, DIALOG_STYLE_MSGBOX, "Анти спавн килл", "{FFFFFF}Звук Анти спавн килла был {10F441}Включен{FFFFFF}.", "Назад", "Закрыть", 14405);
					}
				}
	 			else
			 	{
				 	PlayerInfo[playerid][pSpawnKill][0] = strval(inputtext);
	 				format(string, sizeof(string), "{FFFFFF}Ваше новое время действия Анти спавн килла: {10F441}%s {FFFFFF}секунд.", inputtext);
	   	        	ShowPlayerDialogZS(playerid, 7100, DIALOG_STYLE_MSGBOX, "Анти спавн килл", string, "Назад", "Закрыть", 14405);
	   	        }
	   	        mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET spawnkill='%d,%d' WHERE id=%d", PlayerInfo[playerid][pSpawnKill][0], PlayerInfo[playerid][pSpawnKill][1], PlayerInfo[playerid][pRoomAccount]);
				return mysql_tquery(MysqlConnectID, string);
			}
	        else SetDialogResponse(playerid, 2);
	        return 1;
	    }
	    case 7107:
	    {
	    	if(response)
	        {
	        	if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 7107, DIALOG_STYLE_INPUT, "Анти проваливания", "{FFFFFF}Введите новое время действия Анти проваливания:\nС помощью данной функции вы не будите проваливаться под карту {FFFFFF}на некоторых картах.", "Изменить", "Назад");
				if(strval(inputtext) < 3 || strval(inputtext) > 10) return ShowPlayerDialogZS(playerid, 7107, DIALOG_STYLE_INPUT, "Анти проваливания", "{FFFFFF}Введите новое время действия Анти проваливания:\nС помощью данной функции вы не будите проваливаться под карту {FFFFFF}на некоторых картах.\n{FF0000}Время Анти проваливания не может быть меньше 3 и больше 10!", "Изменить", "Назад", 1085);
	 			new string[81];
	 			PlayerInfo[playerid][pSpawnKill][2] = strval(inputtext);
	 			format(string, sizeof(string), "{FFFFFF}Ваше новое время действия Анти проваливания: {10F441}%s {FFFFFF}секунд.", inputtext);
	   	        ShowPlayerDialogZS(playerid, 7100, DIALOG_STYLE_MSGBOX, "Анти проваливания", string, "Назад", "Закрыть", 14405);
				mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET spawnkill='%d,%d,%d' WHERE id=%d", PlayerInfo[playerid][pSpawnKill][0], PlayerInfo[playerid][pSpawnKill][1], PlayerInfo[playerid][pSpawnKill][2], PlayerInfo[playerid][pRoomAccount]);
				return mysql_tquery(MysqlConnectID, string);
			}
	        else SetDialogResponse(playerid, 2);
	        return 1;
	    }
		case 74:
  		{
  		    if(response)
  			{
  			    switch(listitem)
		 		{
				    case 0:
				    {
				        if(PlayerInfo[playerid][pGang][0] == 0)
				        {
				            if(PlayerInfo[playerid][pLevel][0] < 8) return ShowPlayerDialogZS(playerid, 7400, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}Для создания банды вам необходим 8 ранг!", "Назад", "Закрыть", 1085);
							if(PlayerInfo[playerid][pGang][3] >= 1)
							{
							    new string[76];
							    format(string, sizeof(string), "{FFFFFF}Для создание банды, отменить заявку на вступление в банду #%d!", PlayerInfo[playerid][pGang][3]);
								return ShowPlayerDialogZS(playerid, 7400, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", string, "Назад", "Закрыть", 1085);
							}
							mysql_tquery(MysqlConnectID, "SELECT COUNT(id) FROM gang", "GangPublic", "iii", playerid, 1, 1);
				        }
				        else
				        {
						    new string[72];
						    mysql_format(MysqlConnectID, string, sizeof(string), "SELECT name,crewtag,motto,action FROM gang WHERE `id`='%d' LIMIT 1", PlayerInfo[playerid][pGang][0]);
							mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 4, 0);
				        }
						return 1;
				    }
				    case 1:
					{
					    TopList[playerid][1] = 0;
						return mysql_tquery(MysqlConnectID, "SELECT id,name,crewtag FROM gang WHERE visible=0 LIMIT 0,10", "GangPublic", "ii", playerid, 2);
	 				}
				    case 2: return ShowPlayerDialogZS(playerid, 7400, DIALOG_STYLE_MSGBOX, "Информация",
        			"{FFFFFF}При создание банды вы сможете:\n- набирать свою команду.\n- использовать четырехзначный тег своей банды.\n- использовать персональный чат банды.\n- назначать на определенные ранги.\n- устраивать войны между бандами.\n\nПри вступлении в банду:\n- использовать четырехзначный тег своей банды.\n- использовать персональный чат банды.\n- продвигаться по разнообразным рангам.\n- участвовать в войнах между бандами.",
					"Назад", "Закрыть");
				}
			}
			else SetDialogResponse(playerid, 1);
            return 1;
		}
		case 7401:
	    {
	    	if(response)
	    	{
	    	    if(PlayerInfo[playerid][pGang][1] <= 11)
		  		{
		  		    if(listitem == 1) listitem = 5;
		  		    else if(listitem >= 2)
				  	{
					  	if(PlayerInfo[playerid][pGang][1] == 11) listitem += 8;
					  	else listitem += 9;
	   				}
		  		}
	    	    switch(listitem)
	    	    {
		    	    case 0:
		    	    {
                        new string[79];
						mysql_format(MysqlConnectID, string, sizeof(string), "SELECT owner,datetime,lastaction,rating FROM gang WHERE `id`='%d' LIMIT 1", PlayerInfo[playerid][pGang][0]);
						return mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 7, 2);
					}
		   			case 1: return ShowPlayerDialogZS(playerid, 7411, DIALOG_STYLE_INPUT, "Изменить название", "{FFFFFF}Введите новое название своей банды, от 2 до 20 символов:", "Изменить", "Назад");
					case 2: return ShowPlayerDialogZS(playerid, 7412, DIALOG_STYLE_INPUT, "Изменить тег", "{FFFFFF}Введите новый тег своей банды, 4 символа:\nТег банды - это короткое обозначение вашей банды.", "Изменить", "Назад");
					case 3:
					{
					    new string[52];
						mysql_format(MysqlConnectID, string, sizeof(string), "SELECT motto FROM gang WHERE `id`='%d' LIMIT 1", PlayerInfo[playerid][pGang][0]);
						return mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 7, 3);
	 				}
					case 4:
					{
						new string[47];
		                mysql_format(MysqlConnectID, string, sizeof(string), "SELECT rank FROM gang WHERE id=%d LIMIT 1", PlayerInfo[playerid][pGang][0]);
						return mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 17, 0);
					}
					case 5:
					{
						new string[73];
						TopList[playerid][1] = 0;
						mysql_format(MysqlConnectID, string, sizeof(string), "SELECT id,name,online,gang FROM profile WHERE `gang0`=%d LIMIT 0,10", PlayerInfo[playerid][pGang][0]);
                        return mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 10, 0);
					}
					case 6:
					{
					    new string[49];
		                mysql_format(MysqlConnectID, string, sizeof(string), "SELECT action FROM gang WHERE `id`='%d' LIMIT 1", PlayerInfo[playerid][pGang][0]);
						return mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 5, 0);
					}
					case 7: return ShowPlayerDialogZS(playerid, 7415, DIALOG_STYLE_INPUT, "Цвет банды", "{FFFFFF}Введите цвет банды который будет отображаться в статистике и перед никнеймом, и в войнах между бандами:\nДля просмотра цветов воспользуйтесь Википедией: Таблица цветов.\nПример: {FFFF00}FFFF00", "Дальше", "Назад");
					case 8:
					{
					    new string[49];
		                mysql_format(MysqlConnectID, string, sizeof(string), "SELECT action FROM gang WHERE `id`='%d' LIMIT 1", PlayerInfo[playerid][pGang][0]);
						return mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 5, 1);
	 				}
					case 9:
					{
					    new string[49];
		                mysql_format(MysqlConnectID, string, sizeof(string), "SELECT action FROM gang WHERE `id`='%d' LIMIT 1", PlayerInfo[playerid][pGang][0]);
						return mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 5, 2);
					}
	 				case 10:
	 				{
						new string[68];
						TopList[playerid][1] = 0;
						mysql_format(MysqlConnectID, string, sizeof(string), "SELECT id,name,online FROM profile WHERE `gang1`=%d LIMIT 0,10", PlayerInfo[playerid][pGang][0]);
                        return mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 6, 0);
	 				}
	 				case 11: return ShowPlayerDialogZS(playerid, 7410, DIALOG_STYLE_MSGBOX, "Ошибка", "Данная функция находится в разработке!", "Назад", "Закрыть", 1085);
	 				case 12:
	 				{
	 				    if(PlayerInfo[playerid][pGang][1] != 13) ShowPlayerDialogZS(playerid, 7417, DIALOG_STYLE_MSGBOX, "Расформировать банду", "{FFFFFF}Вы действительно хотите покинуть банду?\nПри соглашении вы не сможете вступить в банду некоторое время.", "Дальше", "Назад");
	 				    else ShowPlayerDialogZS(playerid, 7417, DIALOG_STYLE_LIST, "Расформировать банду", "Передать управление бандой\nРасформировать банду", "Выбрать", "Назад");
	 				    return 1;
	 				}
				}
	 		}
	 		else SetDialogResponse(playerid, 5);
	 		return 1;
  		}
	    case 7411:
	    {
	        if(response)
	        {
	        	if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 7411, DIALOG_STYLE_INPUT, "Изменить название", "{FFFFFF}Введите новое название своей банды, от 2 до 20 символов:", "Изменить", "Назад");
				if(strlen(inputtext) < 2 || strlen(inputtext) > 20) return ShowPlayerDialogZS(playerid, 7411, DIALOG_STYLE_INPUT, "Изменить название", "{FFFFFF}Введите новое название своей банды, от 2 до 20 символов:\n{FF0000}Слишком длинное или короткое название банды!", "Изменить", "Назад", 1085);
                for(new i = 0; i < strlen(inputtext); i ++)
				{
					switch(inputtext[i])
					{
    					case ' ', ',', '.': return ShowPlayerDialogZS(playerid, 7411, DIALOG_STYLE_INPUT, "Изменить название", "{FFFFFF}Введите новое название своей банды, от 2 до 20 символов:\n{FF0000}Недопустимые символы!", "Изменить", "Назад", 1085);
					}
				}
				new string[65];
				SetPVarString(playerid, "GangSName", inputtext);
   		 		mysql_format(MysqlConnectID, string, sizeof(string), "SELECT name FROM gang WHERE name='%s' LIMIT 1", inputtext);
				return mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 13, 0);
			}
	        else
			{
			    DeletePVar(playerid, "GangSName");
			    new string[72];
			    mysql_format(MysqlConnectID, string, sizeof(string), "SELECT name,crewtag,motto,action FROM gang WHERE `id`='%d' LIMIT 1", PlayerInfo[playerid][pGang][0]);
				mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 4, 0);
			}
			return 1;
	    }
	    case 7412:
	    {
	        if(response)
	        {
	        	if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 7412, DIALOG_STYLE_INPUT, "Изменить тег", "{FFFFFF}Введите новый тег своей банды, 4 символа:\nТег банды - это короткое обозначение вашей банды.", "Изменить", "Назад");
				if(strlen(inputtext) < 4 || strlen(inputtext) > 4) return ShowPlayerDialogZS(playerid, 7412, DIALOG_STYLE_INPUT, "Изменить тег", "{FFFFFF}Введите новый тег своей банды, 4 символа:\nТег банды - это короткое обозначение вашей банды.\n{FF0000}Слишком длинный или короткой тег банды!", "Изменить", "Назад", 1085);
                for(new i = 0; i < strlen(inputtext); i ++)
				{
					switch(inputtext[i])
					{
    					case 'а'..'я', 'a'..'z', ' ', ',', '.': return ShowPlayerDialogZS(playerid, 7412, DIALOG_STYLE_INPUT, "Изменить тег", "{FFFFFF}Введите новый тег своей банды, 4 символа:\nТег банды - это короткое обозначение вашей банды.\n{FF0000}В теге должны быть только заглавные буквы!", "Изменить", "Назад", 1085);
					}
				}
				new string[56];
				SetPVarString(playerid, "GangSName", inputtext);
   		 		mysql_format(MysqlConnectID, string, sizeof(string), "SELECT crewtag FROM gang WHERE crewtag='%s' LIMIT 1", inputtext);
				return mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 13, 1);
			}
	        else
			{
			    DeletePVar(playerid, "GangSName");
			    new string[72];
			    mysql_format(MysqlConnectID, string, sizeof(string), "SELECT name,crewtag,motto,action FROM gang WHERE `id`='%d' LIMIT 1", PlayerInfo[playerid][pGang][0]);
				mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 4, 0);
			}
			return 1;
	    }
	    case 7413:
	    {
	        if(response)
	        {
	        	if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 7413, DIALOG_STYLE_INPUT, "Изменить девиз", "{FFFFFF}Введите новое название своего девиза, от 4 до 50 символов:", "Изменить", "Назад");
				if(strlen(inputtext) < 4 || strlen(inputtext) > 50) return ShowPlayerDialogZS(playerid, 7413, DIALOG_STYLE_INPUT, "Изменить девиз", "{FFFFFF}Введите новое название своего девиза, от 4 до 50 символов:\n{FF0000}Слишком длинное или короткое название девиза!", "Изменить", "Назад", 1085);
				new string[120];
	            format(string, sizeof(string), "{FFFFFF}Вы успешно изменили девиз своей банды на:\n{10F441}%s{FFFFFF}.", inputtext);
                ShowPlayerDialogZS(playerid, 7410, DIALOG_STYLE_MSGBOX, "Изменить девиз", string, "Назад", "Закрыть", 1138);
			    mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE gang SET `motto`='%s' WHERE `id`='%d'", inputtext, PlayerInfo[playerid][pGang][0]);
				mysql_tquery(MysqlConnectID, string);
			}
	        else
			{
			    new string[72];
			    mysql_format(MysqlConnectID, string, sizeof(string), "SELECT name,crewtag,motto,action FROM gang WHERE `id`='%d' LIMIT 1", PlayerInfo[playerid][pGang][0]);
				mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 4, 0);
			}
			return 1;
	    }
	    case 7418:
	    {
	        if(response)
	        {
	            SetPVarInt(playerid, "GangRankList", listitem);
	            ShowPlayerDialogZS(playerid, 7428, DIALOG_STYLE_INPUT, "Изменить название рангов", "{FFFFFF}Введите название ранга, от 4 до 15 символов:", "Изменить", "Назад");
	        }
	        else
	        {
	            new string[72];
			    mysql_format(MysqlConnectID, string, sizeof(string), "SELECT name,crewtag,motto,action FROM gang WHERE `id`='%d' LIMIT 1", PlayerInfo[playerid][pGang][0]);
				mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 4, 0);
	        }
	        return 1;
	    }
     	case 7428:
     	{
     	    if(response)
		  	{
     			if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 7428, DIALOG_STYLE_INPUT, "Изменить название рангов", "{FFFFFF}Введите название ранга, от 4 до 15 символов:", "Изменить", "Назад");
				if(strlen(inputtext) < 4 || strlen(inputtext) > 15) return ShowPlayerDialogZS(playerid, 7428, DIALOG_STYLE_INPUT, "Изменить название рангов", "{FFFFFF}Введите название ранга, от 4 до 15 символов:\n{FF0000}Слишком длинное или короткое название ранга!", "Изменить", "Назад", 1085);
                for(new i = 0; i < strlen(inputtext); i ++)
				{
					switch(inputtext[i])
					{
    					case ' ', ',', '.': return ShowPlayerDialogZS(playerid, 7428, DIALOG_STYLE_INPUT, "Изменить название рангов", "{FFFFFF}Введите название ранга, от 4 до 15 символов:\n{FF0000}Недопустимые символы!", "Изменить", "Назад", 1085);
					}
				}
				new string[51];
				SetPVarString(playerid, "GangRankListT", inputtext);
       			mysql_format(MysqlConnectID, string, sizeof(string), "SELECT rank FROM gang WHERE `id`='%d' LIMIT 1", PlayerInfo[playerid][pGang][0]);
				mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 17, 1);
			}
			else
			{
			    DeletePVar(playerid, "GangRankList");
			    new string[51];
       			mysql_format(MysqlConnectID, string, sizeof(string), "SELECT rank FROM gang WHERE `id`='%d' LIMIT 1", PlayerInfo[playerid][pGang][0]);
				mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 17, 0);
			}
		 	return 1;
     	}
	    case 7414:
	    {
	        if(response)
	        {
				if((listitem == TopList[playerid][2] || listitem == TopList[playerid][2]+1) && TopList[playerid][1] != 0)
				{
					if(listitem == TopList[playerid][2]+1) return ShowPlayerDialogZS(playerid, 7455, DIALOG_STYLE_INPUT, "Поиск по никнейму", "{FFFFFF}Введите никнейм игрока:", "Дальше", "Назад");
					new string[73];
					if(TopList[playerid][1] >= 10) TopList[playerid][1] -= 10;
					mysql_format(MysqlConnectID, string, sizeof(string), "SELECT id,name,online,gang FROM profile WHERE `gang0`=%d LIMIT %d,%d", PlayerInfo[playerid][pGang][0], TopList[playerid][1], TopList[playerid][1]+10);
					return mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 10, 0);
				}
				switch(listitem)
    			{
       				case 10:
           			{
           				new string[73];
           				TopList[playerid][1] += 10;
						mysql_format(MysqlConnectID, string, sizeof(string), "SELECT id,name,online,gang FROM profile WHERE `gang0`=%d LIMIT %d,%d", PlayerInfo[playerid][pGang][0], TopList[playerid][1], TopList[playerid][1]+10);
   						return mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 10, 0);
         			}
            		case 11:
            		{
            			new string[73];
						if(TopList[playerid][1] >= 10) TopList[playerid][1] -= 10;
						mysql_format(MysqlConnectID, string, sizeof(string), "SELECT id,name,online,gang FROM profile WHERE `gang0`=%d LIMIT %d,%d", PlayerInfo[playerid][pGang][0], TopList[playerid][1], TopList[playerid][1]+10);
     					return mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 10, 0);
      				}
      				case 12: return ShowPlayerDialogZS(playerid, 7455, DIALOG_STYLE_INPUT, "Поиск по никнейму", "{FFFFFF}Введите никнейм игрока:", "Дальше", "Назад");
  					default:
  					{
  					    if(PlayerInfo[playerid][pGang][1] >= 12)
					  	{
					  	    SetPVarInt(playerid, "GangListP", GangList[playerid][listitem]);
					  		ShowPlayerDialogZS(playerid, 7454, DIALOG_STYLE_LIST, "Члены банды в сети", "Статистика игрока\nИзменить ранг игрока\nВыгнать игрока из банды", "Выбрать", "Назад");
						}
						else
						{
						    new string[91];
  							mysql_format(MysqlConnectID, string, sizeof(string), "SELECT name,level0,kills,deaths,timegame,gang FROM profile WHERE `id`='%d' LIMIT 1", GangList[playerid][listitem]);
							mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 7, 1);
						}
			 		}
  				}
	        }
	        else
	        {
	            new string[72];
			    mysql_format(MysqlConnectID, string, sizeof(string), "SELECT name,crewtag,motto,action FROM gang WHERE `id`='%d' LIMIT 1", PlayerInfo[playerid][pGang][0]);
				mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 4, 0);
	        }
	        return 1;
	    }
	    case 7455:
	    {
	        if(response)
	        {
	        	if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 7455, DIALOG_STYLE_INPUT, "Поиск по никнейму", "{FFFFFF}Введите никнейм игрока:", "Дальше", "Назад");
				new string[91];
                mysql_format(MysqlConnectID, string, sizeof(string),  "SELECT id FROM profile WHERE `gang0`=%d AND `name`='%s' LIMIT 1", PlayerInfo[playerid][pGang][0], inputtext);
				return mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 9, 0);
			}
	        else
	        {
	            new string[73];
				DeletePVar(playerid, "GangListP");
    			mysql_format(MysqlConnectID, string, sizeof(string), "SELECT id,name,online,gang FROM profile WHERE `gang0`=%d LIMIT %d,%d", PlayerInfo[playerid][pGang][0], TopList[playerid][1], TopList[playerid][1]+10);
				mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 10, 0);
	        }
	        return 1;
	    }
	    case 7454:
	    {
	        if(response)
	        {
	            switch(listitem)
	            {
	                case 0:
	                {
						new string[87];
  						mysql_format(MysqlConnectID, string, sizeof(string), "SELECT name,level0,kills,deaths,timegame,gang FROM profile WHERE id=%d LIMIT 1", GetPVarInt(playerid, "GangListP"));
						mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 7, 1);
	                }
	                case 1:
					{
                        new string[40];
     					mysql_format(MysqlConnectID, string, sizeof(string), "SELECT rank FROM gang WHERE id=%d", PlayerInfo[playerid][pGang][0]);
						return mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 11, 0);
					}
					case 2:
					{
                        new string[64];
						mysql_format(MysqlConnectID, string, sizeof(string), "SELECT name,gang0,gang FROM profile WHERE id=%d LIMIT 1", GetPVarInt(playerid, "GangListP"));
						mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 12, 0);
					}
	            }
	            return 1;
	        }
	        else
	        {
				new string[73];
				DeletePVar(playerid, "GangListP");
    			mysql_format(MysqlConnectID, string, sizeof(string), "SELECT id,name,online,gang FROM profile WHERE `gang0`=%d LIMIT %d,%d", PlayerInfo[playerid][pGang][0], TopList[playerid][1], TopList[playerid][1]+10);
				mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 10, 0);
	        }
	        return 1;
	    }
	    case 7464:
	    {
	        if(response)
	        {
         		new string[58];
         		SetPVarInt(playerid, "GangListS", listitem);
				mysql_format(MysqlConnectID, string, sizeof(string), "SELECT name,gang0,gang FROM profile WHERE id=%d LIMIT 1", GetPVarInt(playerid, "GangListP"));
				mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 15, 0);
	        }
	        else
	        {
				DeletePVar(playerid, "GangListP");
				new string[73];
    			mysql_format(MysqlConnectID, string, sizeof(string), "SELECT id,name,online,gang FROM profile WHERE `gang0`=%d LIMIT %d,%d", PlayerInfo[playerid][pGang][0], TopList[playerid][1], TopList[playerid][1]+10);
				mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 10, 0);
	        }
	        return 1;
	    }
	    case 7484:
	    {
	        DeletePVar(playerid, "GangListP");
	        if(response == 0) return 1;
	        new string[73];
  			mysql_format(MysqlConnectID, string, sizeof(string), "SELECT id,name,online,gang FROM profile WHERE `gang0`=%d LIMIT %d,%d", PlayerInfo[playerid][pGang][0], TopList[playerid][1], TopList[playerid][1]+10);
			return mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 10, 0);
	    }
	    case 7415:
	    {
	        if(response)
	        {
	        	if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 7415, DIALOG_STYLE_INPUT, "Цвет банды", "{FFFFFF}Введите цвет банды который будет отображаться в статистике и перед никнеймом, и в войнах между бандами:\nДля просмотра цветов воспользуйтесь Википедией: Таблица цветов.\nПример: {FFFF00}FFFF00", "Дальше", "Назад");
	            if(strlen(inputtext) < 6 || strlen(inputtext) > 6) return ShowPlayerDialogZS(playerid, 7415, DIALOG_STYLE_INPUT, "Цвет банды", "{FFFFFF}Введите цвет банды который будет отображаться в статистике и перед никнеймом, и в войнах между бандами:\nДля просмотра цветов воспользуйтесь Википедией: Таблица цветов.\nПример: {FFFF00}FFFF00\n{FF0000}Слишком длинный или короткий цвет!", "Дальше", "Назад", 1085);
                GangCheck[playerid][1] = HexToInt(inputtext);
				new string[53];
     			mysql_format(MysqlConnectID, string, sizeof(string), "SELECT action FROM gang WHERE `id`='%d' LIMIT 1", PlayerInfo[playerid][pGang][0]);
				return mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 5, 3);
			}
			else
			{
			    new string[72];
			    mysql_format(MysqlConnectID, string, sizeof(string), "SELECT name,crewtag,motto,action FROM gang WHERE `id`='%d' LIMIT 1", PlayerInfo[playerid][pGang][0]);
				mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 4, 0);
			}
			return 1;
	 	}
	 	case 7417:
	 	{
	 	    if(response)
	 	    {
	 	        if(PlayerInfo[playerid][pGang][1] != 13)
		   		{
		   		    new string[60];
  					mysql_format(MysqlConnectID, string, sizeof(string), "SELECT action FROM gang WHERE id=%d LIMIT 1", PlayerInfo[playerid][pGang][0]);
					mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 5, 5);
                	PlayerInfo[playerid][pGang][0] = 0;
					PlayerInfo[playerid][pGang][1] = 0;
					PlayerInfo[playerid][pGang][2] = 0;
					PlayerInfo[playerid][pGang][3] = 0;
			    	GangCheck[playerid][0] = 0;
					GangCheck[playerid][1] = 0;
					GangCheck[playerid][2] = 0;
					GangTag[playerid] = "_";
			    	mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET gang0=0,gang1=0,gang='0,0' WHERE id=%d", PlayerInfo[playerid][pRoomAccount]);
					mysql_tquery(MysqlConnectID, string);
			    	format(string, sizeof(string), "{FFFFFF}Вы покинули банду {10F441}%s{FFFFFF}.", GangName[playerid]);
					ShowPlayerDialogZS(playerid, 7400, DIALOG_STYLE_MSGBOX, "Покинуть банду", string, "Назад", "Закрыть", 1138);
					GangName[playerid] = "_";
		   		}
	 	        switch(listitem)
	 	        {
	 	            case 0: return ShowPlayerDialogZS(playerid, 7427, DIALOG_STYLE_INPUT, "Передать управление бандой", "{FFFFFF}Введите ID игрока которому хотите передать управление бандой:\nПосле передачи вы не сможете управлять данной бандой.\nДля быстрой отмены приглашения, введите несуществующий ID, пример: -1.", "Дальше", "Назад");
					case 1: return ShowPlayerDialogZS(playerid, 7447, DIALOG_STYLE_MSGBOX, "Расформировать банду", "{FFFFFF}Вы действительно хотите расформировать данную банду?\nПри расформировки все данные будут сброшены.\nПри соглашение вы не сможете создавать банды некоторое время", "Дальше", "Назад");
				}
			}
			else
	 	    {
	 	        new string[72];
			    mysql_format(MysqlConnectID, string, sizeof(string), "SELECT name,crewtag,motto,action FROM gang WHERE `id`='%d' LIMIT 1", PlayerInfo[playerid][pGang][0]);
				mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 4, 0);
	 	    }
	 	    return 1;
		}
		case 7427:
		{
		    if(response)
	 	    {
		    	if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 7427, DIALOG_STYLE_INPUT, "Передать управление бандой", "{FFFFFF}Введите ID игрока которому хотите передать управление бандой:\nПосле передачи вы не сможете управлять данной бандой.\nДля быстрой отмены приглашения, введите несуществующий ID, пример: -1.", "Дальше", "Назад");
				if(strval(inputtext) == playerid) return ShowPlayerDialogZS(playerid, 7427, DIALOG_STYLE_INPUT, "Передать управление бандой", "{FFFFFF}Введите ID игрока которому хотите передать управление бандой:\nПосле передачи вы не сможете управлять данной бандой.\nДля быстрой отмены приглашения, введите несуществующий ID, пример: -1.\n{FF0000}Вы не можете передать банду самому себе!", "Дальше", "Назад", 1085);
				SetPVarInt(playerid, "GangPass[0]", strval(inputtext) + 1);
				if(!IsPlayerConnected(GetPVarInt(playerid, "GangPass[0]") - 1)) return ShowPlayerDialogZS(playerid, 7427, DIALOG_STYLE_INPUT, "Передать управление бандой", "{FFFFFF}Введите ID игрока которому хотите передать управление бандой:\nПосле передачи вы не сможете управлять данной бандой.\nДля быстрой отмены приглашения, введите несуществующий ID, пример: -1.\n{FF0000}Данный игрок не найден!", "Дальше", "Назад", 1085);
				if(PlayerInfo[GetPVarInt(playerid, "GangPass[0]") - 1][pLevel][0] < 8) return ShowPlayerDialogZS(playerid, 7427, DIALOG_STYLE_INPUT, "Передать управление бандой", "{FFFFFF}Введите ID игрока которому хотите передать управление бандой:\nПосле передачи вы не сможете управлять данной бандой.\nДля быстрой отмены приглашения, введите несуществующий ID, пример: -1.\n{FF0000}У данного игрока нет 8 ранга!", "Дальше", "Назад", 1085);
				if(PlayerInfo[GetPVarInt(playerid, "GangPass[0]") - 1][pGang][0] >= 1) return ShowPlayerDialogZS(playerid, 7427, DIALOG_STYLE_INPUT, "Передать управление бандой", "{FFFFFF}Введите ID игрока которому хотите передать управление бандой:\nПосле передачи вы не сможете управлять данной бандой.\nДля быстрой отмены приглашения, введите несуществующий ID, пример: -1.\n{FF0000}Данный игрок находится в банде!", "Дальше", "Назад", 1085);
				if(PlayerInfo[GetPVarInt(playerid, "GangPass[0]") - 1][pGang][3] >= 1) return ShowPlayerDialogZS(playerid, 7427, DIALOG_STYLE_INPUT, "Передать управление бандой", "{FFFFFF}Введите ID игрока которому хотите передать управление бандой:\nПосле передачи вы не сможете управлять данной бандой.\nДля быстрой отмены приглашения, введите несуществующий ID, пример: -1.\n{FF0000}Данный игрок подавал заявку на вступление в банду!", "Дальше", "Назад", 1085);
				if(Pause[GetPVarInt(playerid, "GangPass[0]") - 1][1] >= 3) return ShowPlayerDialogZS(playerid, 7427, DIALOG_STYLE_INPUT, "Передать управление бандой", "{FFFFFF}Введите ID игрока которому хотите передать управление бандой:\nПосле передачи вы не сможете управлять данной бандой.\nДля быстрой отмены приглашения, введите несуществующий ID, пример: -1.\n{FF0000}Данный игрок находится на паузе!", "Дальше", "Назад", 1085);
				if(Spawned[GetPVarInt(playerid, "GangPass[0]") - 1] == false) return ShowPlayerDialogZS(playerid, 7427, DIALOG_STYLE_INPUT, "Передать управление бандой", "{FFFFFF}Введите ID игрока которому хотите передать управление бандой:\nПосле передачи вы не сможете управлять данной бандой.\nДля быстрой отмены приглашения, введите несуществующий ID, пример: -1.\n{FF0000}Данный игрок не заправлен!", "Дальше", "Назад", 1085);
				SetPVarInt(GetPVarInt(playerid, "GangPass[0]") - 1, "GangPass[0]", playerid + 1);
				SetPVarInt(GetPVarInt(playerid, "GangPass[0]") - 1, "GangPass[1]", gettime() + 30);
				new string[136];
				format(string, sizeof(string), "{FFFFFF}Вы предложили {10F441}%s {FFFFFF}управлять бандой #{10F441}%d %s{FFFFFF}.", PlayerName[GetPVarInt(playerid, "GangPass[0]") - 1], PlayerInfo[playerid][pGang][0], GangName[playerid]);
				ShowPlayerDialogZS(playerid, 7410, DIALOG_STYLE_MSGBOX, "Передать управление бандой", string, "Назад", "Закрыть", 1138);
				format(string, sizeof(string), "{FFFFFF}Игрок {10F441}%s {FFFFFF}предлагает вам руководить бандой #{10F441}%d %s{FFFFFF}.", PlayerName[playerid], PlayerInfo[playerid][pGang][0], GangName[playerid]);
				ShowPlayerDialogZS(GetPVarInt(playerid, "GangPass[0]") - 1, 7437, DIALOG_STYLE_MSGBOX, "Управление бандой", string, "Принять", "Отмена", 1138);
			}
			else ShowPlayerDialogZS(playerid, 7417, DIALOG_STYLE_LIST, "Расформировать банду", "Передать управление бандой\nРасформировать банду", "Выбрать", "Назад");
			return 1;
		}
		case 7437:
		{
		    if(response == 0)
	 	    {
	 	        new string[93];
	 	        format(string, sizeof(string), "Игрок {10F441}%s {FFFFFF}отклонил приглашение на управление бандой.", PlayerName[playerid]);
 	         	SendClientMessage(GetPVarInt(playerid, "GangPass[0]") - 1, 0xFFFFFFAA, string);
 	         	format(string, sizeof(string), "Вы отказались от пришлагение {10F441}%s {FFFFFF}на управление бандой", PlayerName[GetPVarInt(playerid, "GangPass[0]") - 1]);
 	         	SendClientMessage(playerid, 0xFFFFFFAA, string);
	 	        DeletePVar(playerid, "GangPass[0]");
			    return DeletePVar(playerid, "GangPass[1]");
	 	    }
		    if(!IsPlayerConnected(GetPVarInt(playerid, "GangPass[0]") - 1) || PlayerLogged[playerid] == 0)
		    {
		        DeletePVar(playerid, "GangPass[0]");
			    DeletePVar(playerid, "GangPass[1]");
		        return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок покинул игру!", 1085);
	  		}
		    if(PlayerInfo[playerid][pGang][0] >= 1)
		    {
		        DeletePVar(playerid, "GangPass[0]");
			    DeletePVar(playerid, "GangPass[1]");
		        return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы находитесь в банде!", 1085);
	  		}
  		 	if(PlayerInfo[playerid][pGang][3] >= 1)
	 		{
	 		    new string[52];
	 		    DeletePVar(playerid, "GangPass[0]");
			    DeletePVar(playerid, "GangPass[1]");
	 	        format(string, sizeof(string), "[Ошибка]: >> Вы уже подали заявку в банду #%d!", PlayerInfo[playerid][pGang][3]);
 	         	return SendClientMessageZS(playerid, COLOR_RED, string, 1085);
	 		}
		    if(GetPVarInt(GetPVarInt(playerid, "GangPass[0]") - 1, "GangPass[0]") - 1 != playerid)
			{
			    DeletePVar(playerid, "GangPass[0]");
			    DeletePVar(playerid, "GangPass[1]");
				return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Данный игрок отклонил приглашение!", 1085);
   			}
		    if(GetPVarInt(playerid, "GangPass[1]") < gettime())
			{
			    DeletePVar(playerid, "GangPass[0]");
			    DeletePVar(playerid, "GangPass[1]");
				return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Время на подтверждение вышло!", 1085);
		    }
		    PlayerInfo[playerid][pGang][0] = PlayerInfo[GetPVarInt(playerid, "GangPass[0]") - 1][pGang][0];
		    PlayerInfo[playerid][pGang][1] = 13;
			new string[136];
		    mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE gang SET owner='%s' WHERE id=%d", PlayerName[playerid], PlayerInfo[GetPVarInt(playerid, "GangPass[0]") - 1][pGang][0]);
		    mysql_tquery(MysqlConnectID, string);
		    mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET gang0=%d,gang1=0,gang='13,0' WHERE id=%d", PlayerInfo[playerid][pGang][0], PlayerInfo[playerid][pRoomAccount]);
			mysql_tquery(MysqlConnectID, string);
		    PlayerInfo[GetPVarInt(playerid, "GangPass[0]") - 1][pGang][0] = 0;
		    PlayerInfo[GetPVarInt(playerid, "GangPass[0]") - 1][pGang][1] = 0;
		    PlayerInfo[GetPVarInt(playerid, "GangPass[0]") - 1][pGang][2] = 0;
		    mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET gang0=0,gang1=0,gang='0,0' WHERE id=%d", PlayerInfo[GetPVarInt(playerid, "GangPass[0]") - 1][pRoomAccount]);
			mysql_tquery(MysqlConnectID, string);
			DeletePVar(GetPVarInt(playerid, "GangPass[0]") - 1, "GangPass[0]");
			format(string, sizeof(string), "Игрок {10F441}%s {FFFFFF}принял ваше приглашение на управление бандой #{10F441}%d %s{FFFFFF}.", PlayerName[playerid], PlayerInfo[playerid][pGang][0], GangName[playerid]);
			SendClientMessage(GetPVarInt(playerid, "GangPass[0]")-1, 0xFFFFFFAA, string);
			ShowPlayerDialogZS(GetPVarInt(playerid, "GangPass[0]")-1, -1, DIALOG_STYLE_MSGBOX, "_", "_", "_", "_");
			format(string, sizeof(string), "Вы приняли приглашение игрока {10F441}%s {FFFFFF}на управление бандой #{10F441}%d %s{FFFFFF}.", PlayerName[GetPVarInt(playerid, "GangPass[0]") - 1], PlayerInfo[playerid][pGang][0], GangName[playerid]);
			SendClientMessage(playerid, 0xFFFFFFAA, string);
			mysql_format(MysqlConnectID, string, sizeof(string), "SELECT name,crewtag,action,rank FROM gang WHERE id=%d LIMIT 1", PlayerInfo[playerid][pGang][0]);
			mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 14, 0);
			DeletePVar(playerid, "GangPass[0]");
			return DeletePVar(playerid, "GangPass[1]");
		}
		case 7447:
		{
		    if(response)
		    {
		        new string[116];
		        if(GetPVarInt(playerid, "DelGang") == 1)
		        {
		            mysql_format(MysqlConnectID, string, sizeof(string), "DELETE FROM gang WHERE id=%d LIMIT 1", GetPVarInt(playerid, "GangListitem"));
					mysql_tquery(MysqlConnectID, string);
					mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET gang0=0,gang1=0,gang='0,0' WHERE gang0=%d AND online=1", GetPVarInt(playerid, "GangListitem"));
					mysql_tquery(MysqlConnectID, string);
					foreach(new i: Player)
					{
						if(PlayerInfo[i][pGang][0] == GetPVarInt(playerid, "GangListitem"))
						{
							format(string, sizeof(string), "Ваша банда {10F441}#%d %s{FFFFFF} была удалена {10F441}%s{FFFFFF}.", PlayerInfo[i][pGang][0], GangName[i], PlayerName[playerid]);
						    SendClientMessage(playerid, 0xFFFFFFAA, string);
						    PlayerInfo[i][pGang][0] = 0;
						    PlayerInfo[i][pGang][1] = 0;
						    PlayerInfo[i][pGang][2] = 0;
						    PlayerInfo[i][pGang][3] = 0;
						    GangCheck[i][0] = 0;
							GangCheck[i][1] = 0;
							GangCheck[i][2] = 0;
							GangName[i] = "_";
							GangTag[i] = "_";
						}
					}
					format(string, sizeof(string), "{FFFFFF}Вы успешно удалили банду {10F441}%d{FFFFFF}.", GetPVarInt(playerid, "GangListitem"));
					ShowPlayerDialogZS(playerid, 7442, DIALOG_STYLE_MSGBOX, "Удалить банду", string, "Назад", "Закрыть", 1138);
					DeletePVar(playerid, "DelGang");
		            return 1;
		        }
		        if(PlayerInfo[playerid][pGang][1] != 13 || PlayerInfo[playerid][pGang][0] == 0) return 1;
				mysql_format(MysqlConnectID, string, sizeof(string), "DELETE FROM gang WHERE id=%d LIMIT 1", PlayerInfo[playerid][pGang][0]);
				mysql_tquery(MysqlConnectID, string);
				mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET gang0=0,gang1=0,gang='0,0' WHERE gang0=%d AND online=1", PlayerInfo[playerid][pGang][0]);
				mysql_tquery(MysqlConnectID, string);
				format(string, sizeof(string), "{FFFFFF}Вы успешно расформировали банду {10F441}%s{FFFFFF}.", GangName[playerid]);
				ShowPlayerDialogZS(playerid, 7400, DIALOG_STYLE_MSGBOX, "Расформировать банду", string, "Назад", "Закрыть", 1138);
				foreach(new i: Player)
				{
					if(PlayerInfo[i][pGang][0] == PlayerInfo[playerid][pGang][0])
					{
						format(string, sizeof(string), "Ваша банда {10F441}#%d %s{FFFFFF} была расформирована {10F441}%s{FFFFFF}.", PlayerInfo[i][pGang][0], GangName[playerid], PlayerName[playerid]);
					    SendClientMessage(playerid, 0xFFFFFFAA, string);
					    PlayerInfo[i][pGang][0] = 0;
					    PlayerInfo[i][pGang][1] = 0;
					    PlayerInfo[i][pGang][2] = 0;
					    PlayerInfo[i][pGang][3] = 0;
					    GangCheck[i][0] = 0;
						GangCheck[i][1] = 0;
						GangCheck[i][2] = 0;
						GangName[i] = "_";
						GangTag[i] = "_";
					}
				}
				return 1;
		    }
			else
			{
				if(GetPVarInt(playerid, "DelGang") == 1)
				{
					new string[75];
					DeletePVar(playerid, "DelGang");
 					mysql_format(MysqlConnectID, string, sizeof(string), "SELECT lastaction,action,visible FROM gang WHERE id=%d LIMIT 1", GetPVarInt(playerid, "GangListitem"));
					mysql_tquery(MysqlConnectID, string, "GangPublic", "ii", playerid, 3);
				}
				else ShowPlayerDialogZS(playerid, 7417, DIALOG_STYLE_LIST, "Расформировать банду", "Передать управление бандой\nРасформировать банду", "Выбрать", "Назад");
			}
			return 1;
  		}
	 	case 7416:
	 	{
	 	    if(response)
	 	    {
	 	        if((listitem == TopList[playerid][2] || listitem == TopList[playerid][2]+1) && TopList[playerid][1] != 0)
				{
					if(listitem == TopList[playerid][2]+1) return ShowPlayerDialogZS(playerid, 7446, DIALOG_STYLE_INPUT, "Поиск по никнейму", "{FFFFFF}Введите никнейм игрока:", "Дальше", "Назад");
					new string[70];
					if(TopList[playerid][1] >= 10) TopList[playerid][1] -= 10;
					mysql_format(MysqlConnectID, string, sizeof(string), "SELECT id,name,online FROM profile WHERE `gang1`=%d LIMIT %d,%d", PlayerInfo[playerid][pGang][0], TopList[playerid][1], TopList[playerid][1]+10);
					return mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 6, 0);
				}
				switch(listitem)
    			{
       				case 10:
           			{
           				new string[70];
           				TopList[playerid][1] += 10;
						mysql_format(MysqlConnectID, string, sizeof(string), "SELECT id,name,online FROM profile WHERE `gang1`=%d LIMIT %d,%d", PlayerInfo[playerid][pGang][0], TopList[playerid][1], TopList[playerid][1]+10);
    					return mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 6, 0);
         			}
            		case 11:
            		{
            			new string[70];
						if(TopList[playerid][1] >= 10) TopList[playerid][1] -= 10;
						mysql_format(MysqlConnectID, string, sizeof(string), "SELECT id,name,online FROM profile WHERE `gang1`=%d LIMIT %d,%d", PlayerInfo[playerid][pGang][0], TopList[playerid][1], TopList[playerid][1]+10);
    					return mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 6, 0);
      				}
      				case 12: return ShowPlayerDialogZS(playerid, 7446, DIALOG_STYLE_INPUT, "Поиск по никнейму", "{FFFFFF}Введите никнейм игрока:", "Дальше", "Назад");
  					default:
  					{
						SetPVarInt(playerid, "GangListitem", GangList[playerid][listitem]);
						ShowPlayerDialogZS(playerid, 7426, DIALOG_STYLE_TABLIST, "Заявки на вступление", "Статистика игрока\nПринять заявку\nОтклонить заявку", "Выбрать", "Назад");
			 		}
  				}
	 	    }
	 	    else
	 	    {
	 	        new string[72];
			    mysql_format(MysqlConnectID, string, sizeof(string), "SELECT name,crewtag,motto,action FROM gang WHERE `id`='%d' LIMIT 1", PlayerInfo[playerid][pGang][0]);
				mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 4, 0);
	 	    }
	 		return 1;
	 	}
	 	case 7426:
	 	{
	 	    if(response)
	 	    {
	 	        switch(listitem)
	 	        {
	 	            case 0:
	 	            {
	 	                new string[91];
  						mysql_format(MysqlConnectID, string, sizeof(string), "SELECT name,level0,kills,deaths,timegame,gang FROM profile WHERE `id`='%d' LIMIT 1", GetPVarInt(playerid, "GangListitem"));
						mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 7, 0);
       				}
       				case 1:
       				{
       				    new string[49];
  						mysql_format(MysqlConnectID, string, sizeof(string), "SELECT action FROM gang WHERE id=%d LIMIT 1", PlayerInfo[playerid][pGang][0]);
						mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 5, 4);
       				}
       				case 2:
       				{
       				    new string[64];
						mysql_format(MysqlConnectID, string, sizeof(string), "SELECT name,gang1 FROM profile WHERE `id`='%d' LIMIT 1", GetPVarInt(playerid, "GangListitem"));
						mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 8, 2);
       				}
	 	        }
	 	        return 1;
	 	    }
	 	    else
	 	    {
	 	    	new string[71];
		        DeletePVar(playerid, "GangListitem");
		        mysql_format(MysqlConnectID, string, sizeof(string), "SELECT id,name,online FROM profile WHERE `gang1`=%d LIMIT %d,%d", PlayerInfo[playerid][pGang][0], TopList[playerid][1], TopList[playerid][1]+10);
			 	mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 6, 0);
	 	    }
	 	    return 1;
	 	}
	 	case 7446:
	 	{
	 	    if(response)
	 	    {
	 	        if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 7446, DIALOG_STYLE_INPUT, "Поиск по никнейму", "{FFFFFF}Введите никнейм игрока:", "Дальше", "Назад");
                new string[86];
                mysql_format(MysqlConnectID, string, sizeof(string),  "SELECT id FROM profile WHERE gang1=%d AND name='%s' LIMIT 1", PlayerInfo[playerid][pGang][0], inputtext);
				return mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 9, 1);
			}
	 	    else
	 	    {
	 	    	new string[71];
		        DeletePVar(playerid, "GangListitem");
		        mysql_format(MysqlConnectID, string, sizeof(string), "SELECT id,name,online FROM profile WHERE `gang1`=%d LIMIT %d,%d", PlayerInfo[playerid][pGang][0], TopList[playerid][1], TopList[playerid][1]+10);
			 	mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 6, 0);
	 	    }
	 	    return 1;
	 	}
		case 7436:
		{
      		DeletePVar(playerid, "GangListitem");
      		if(response == 0) return 1;
      		new string[71];
        	mysql_format(MysqlConnectID, string, sizeof(string), "SELECT id,name,online FROM profile WHERE `gang1`=%d LIMIT %d,%d", PlayerInfo[playerid][pGang][0], TopList[playerid][1], TopList[playerid][1]+10);
 			return mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 6, 0);
		}
		case 7402:
		{
		    if(response)
		    {
		        if((listitem == TopList[playerid][2] || listitem == TopList[playerid][2]+1) && TopList[playerid][1] != 0)
		        {
		            if(listitem == TopList[playerid][2]+1) return ShowPlayerDialogZS(playerid, 7452, DIALOG_STYLE_INPUT, "Поиск по номеру", "{FFFFFF}Введите номер банды:", "Дальше", "Назад");
		            new string[71];
					if(TopList[playerid][1] >= 10) TopList[playerid][1] -= 10;
  					format(string, sizeof(string), "SELECT id,name,crewtag FROM gang WHERE visible=0 LIMIT %d,%d", TopList[playerid][1], TopList[playerid][1]+10);
					return mysql_tquery(MysqlConnectID, string, "GangPublic", "ii", playerid, 2);
		    	}
		        switch(listitem)//5500
	 	        {
	 	            case 10:
	 	            {
                        new string[71];
			            TopList[playerid][1] += 10;
			            format(string, sizeof(string), "SELECT id,name,crewtag FROM gang WHERE visible=0 LIMIT %d,%d", TopList[playerid][1], TopList[playerid][1]+10);
						return mysql_tquery(MysqlConnectID, string, "GangPublic", "ii", playerid, 2);
	 	            }
	 	            case 11:
	 	            {
                        new string[71];
						if(TopList[playerid][1] >= 10) TopList[playerid][1] -= 10;
                        format(string, sizeof(string), "SELECT id,name,crewtag FROM gang WHERE visible=0 LIMIT %d,%d", TopList[playerid][1], TopList[playerid][1]+10);
						return mysql_tquery(MysqlConnectID, string, "GangPublic", "ii", playerid, 2);
	 	            }
	 	            case 12: return ShowPlayerDialogZS(playerid, 7452, DIALOG_STYLE_INPUT, "Поиск по номеру", "{FFFFFF}Введите номер банды:", "Дальше", "Назад");
	  				default:
	  				{
		        		new string[74];
						SetPVarInt(playerid, "GangListitem", GangList[playerid][listitem]);
		       		 	mysql_format(MysqlConnectID, string, sizeof(string), "SELECT lastaction,action,visible FROM gang WHERE id=%d LIMIT 1", GangList[playerid][listitem]);
                		mysql_tquery(MysqlConnectID, string, "GangPublic", "ii", playerid, 3);
			 		}
				}
		    }
		    else
		    {
		    	DeletePVar(playerid, "GangListitem");
				SetDialogResponse(playerid, 5);
		    }
		    return 1;
		}
		case 7422:
		{
		    if(response)
		    {
		        if(listitem >= 3 && PlayerInfo[playerid][pAdmin] <= 4) return 1;
		        switch(listitem)
		        {
		            case 0:
		            {
               			new string[77];
  						mysql_format(MysqlConnectID, string, sizeof(string), "SELECT owner,name,crewtag,motto,lastaction,rating FROM gang WHERE id=%d", GetPVarInt(playerid, "GangListitem"));
						return mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 18, 0);
		            }
		            case 1:
		            {
		                if(PlayerInfo[playerid][pGang][0] >= 1) return ShowPlayerDialogZS(playerid, 7442, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}Пока вы находитесь в банде, вы не можете отправить приглашение!", "Назад", "Закрыть", 1085);
		                new string[90];
                        if(PlayerInfo[playerid][pGang][3] != 0 && PlayerInfo[playerid][pGang][3] != GetPVarInt(playerid, "GangListitem"))
		                {
		   			        format(string, sizeof(string), "{FFFFFF}Вы уже подали заявку на вступление в банду под номером: {10F441}%d{FFFFFF}.", PlayerInfo[playerid][pGang][3]);
		   			        return ShowPlayerDialogZS(playerid, 7442, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", string, "Назад", "Закрыть", 1085);
		                }
		                if(PlayerInfo[playerid][pGang][3] == GetPVarInt(playerid, "GangListitem"))
		                {
		                    PlayerInfo[playerid][pGang][3] = 0;
		                	mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET gang1=0 WHERE id=%d", PlayerInfo[playerid][pRoomAccount]);
							mysql_tquery(MysqlConnectID, string);
							format(string, sizeof(string), "{FFFFFF}Вы успешно отклонили заявку по вступлению в банду #{10F441}%d{FFFFFF}.", GetPVarInt(playerid, "GangListitem"));
							ShowPlayerDialogZS(playerid, 7442, DIALOG_STYLE_MSGBOX, "Отклонить приглашение", string, "Назад", "Закрыть");
  							mysql_format(MysqlConnectID, string, sizeof(string), "SELECT action FROM gang WHERE id=%d LIMIT 1", PlayerInfo[playerid][pGang][0]);
							mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 5, 7);
		                }
		                else
		                {
							if(GetPVarInt(playerid, "GangListitem1") == 0) return ShowPlayerDialogZS(playerid, 7442, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}Данная банда запретила подавать заявки в данный момент.", "Назад", "Закрыть", 1085);
  							mysql_format(MysqlConnectID, string, sizeof(string), "SELECT action FROM gang WHERE id=%d LIMIT 1", PlayerInfo[playerid][pGang][0]);
							mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 5, 6);
		                }
		                return 1;
		            }
		            case 2: ShowPlayerDialogZS(playerid, 7432, DIALOG_STYLE_LIST, "Выдать предупреждение", "Снять предупреждение\nПредупреждение на 2 дня причина #1", "Выбрать", "Назад");
					case 3:
					{
					    SetPVarInt(playerid, "DelGang", 1);
						ShowPlayerDialogZS(playerid, 7447, DIALOG_STYLE_MSGBOX, "Удалить банду", "{FFFFFF}Вы действительно хотите расформировать данную банду?\nПри расформировки все данные будут удалены.", "Дальше", "Назад");
					}
					case 4:
					{
					    new string[57];
		                mysql_format(MysqlConnectID, string, sizeof(string), "SELECT action,visible FROM gang WHERE id=%d LIMIT 1", GetPVarInt(playerid, "GangListitem"));
						mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 5, 8);
					}
					//"Удалить банду\nСкрыть в списке банд\nИзменить название\nИзменить тег");
				}
				return 1;
		    }
		    else
			{
			    new string[71];
			    DeletePVar(playerid, "GangListitem1");
				format(string, sizeof(string), "SELECT id,name,crewtag FROM gang WHERE visible=0 LIMIT %d,%d", TopList[playerid][1], TopList[playerid][1]+10);
				mysql_tquery(MysqlConnectID, string, "GangPublic", "ii", playerid, 2);
			}
		    return 1;
		}
		case 7432://5590
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		            
		            }
		            case 1:
		            {
		            
		            }
		        }
		    }
      		else
			{
			    new string[75];
 				mysql_format(MysqlConnectID, string, sizeof(string), "SELECT lastaction,action,visible FROM gang WHERE id=%d LIMIT 1", GetPVarInt(playerid, "GangListitem"));
				mysql_tquery(MysqlConnectID, string, "GangPublic", "ii", playerid, 3);
			}
		    return 1;
		}
  		case 7452:
  		{
  		    if(response)
  		    {
  		        if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 7452, DIALOG_STYLE_INPUT, "Поиск по номеру", "{FFFFFF}Введите номер банды:", "Дальше", "Назад");
  		    	new string[75];
      			SetPVarInt(playerid, "GangListitem", strval(inputtext));
 				mysql_format(MysqlConnectID, string, sizeof(string), "SELECT lastaction,action,visible FROM gang WHERE id=%d LIMIT 1", strval(inputtext));
				mysql_tquery(MysqlConnectID, string, "GangPublic", "ii", playerid, 3);
			}
   			else
			{
			    new string[71];
				format(string, sizeof(string), "SELECT id,name,crewtag FROM gang WHERE visible=0 LIMIT %d,%d", TopList[playerid][1], TopList[playerid][1]+10);
				mysql_tquery(MysqlConnectID, string, "GangPublic", "ii", playerid, 2);
			}
  			return 1;
  		}
		case 7462:
		{
  			if(response == 0) return 1;
		    new string[75];
 			mysql_format(MysqlConnectID, string, sizeof(string), "SELECT lastaction,action,visible FROM gang WHERE id=%d LIMIT 1", GetPVarInt(playerid, "GangListitem"));
			mysql_tquery(MysqlConnectID, string, "GangPublic", "ii", playerid, 3);
		}
  		case 7438:
		{
		    if(response == 0) return 1;
		    new string[51];
      		mysql_format(MysqlConnectID, string, sizeof(string), "SELECT rank FROM gang WHERE `id`='%d' LIMIT 1", PlayerInfo[playerid][pGang][0]);
			return mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 17, 0);
		}
		case 7442:
		{
			if(response)
			{
			    new string[71];
				format(string, sizeof(string), "SELECT id,name,crewtag FROM gang WHERE visible=0 LIMIT %d,%d", TopList[playerid][1], TopList[playerid][1]+10);
				mysql_tquery(MysqlConnectID, string, "GangPublic", "ii", playerid, 2);
			}
			else DeletePVar(playerid, "GangListitem");
			DeletePVar(playerid, "GangListitem1");
			return 1;
  		}
		case 7410:
	    {
	        if(response == 0) return 1;
	        new string[72];
	    	mysql_format(MysqlConnectID, string, sizeof(string), "SELECT name,crewtag,motto,action FROM gang WHERE `id`='%d' LIMIT 1", PlayerInfo[playerid][pGang][0]);
			return mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 4, 0);
		}
	    case 7400:
	    {
	        if(response == 0) return DeletePVar(playerid, "GangListitem");
	    	DeletePVar(playerid, "GangListitem");
			return SetDialogResponse(playerid, 5);
	    }
	    case 75:
	    {
	        if(response == 0) return SetDialogResponse(playerid, 1);
	        switch(listitem)
	        {
	            case 0:
				{
				    new string[498];
				    strcat(string, "{4FDF24}/menu {FFFFFF}- Главное меню.\n{4FDF24}/pm {FFFFFF}- Отправить личное сообщение.\n{4FDF24}/duel - {FFFFFF}Вызвать игрока на дуэль.\n");
					strcat(string, "{4FDF24}/award - {FFFFFF}Назначить вознаграждение за голову.\n{4FDF24}/g - {FFFFFF}Написать в чат банды.\n{4FDF24}/r - {FFFFFF}Написать в чат команды.\n\n");
					strcat(string, "Кнопка {4FDF24}H {FFFFFF}- Главное меню.\nКнопка {4FDF24}Y {FFFFFF}- Меню взаимодействий.\nКнопка {4FDF24}L-Alt {FFFFFF}- Меню закупок.\nКнопка {4FDF24}N {FFFFFF}- Покупка дополнительных боеприпасов.");
					return ShowPlayerDialogZS(playerid, 7500, DIALOG_STYLE_MSGBOX, "Команды сервера", string, "Назад", "Закрыть");
				}
				case 1: return ShowPlayerDialogZS(playerid, 7500, DIALOG_STYLE_MSGBOX, "Правила сервера", "{FFFFFF}Запрещается использовать любые Чит Программы.\nЗапрещается убивать игроков во время их спавна.\nЗапрещается уходить на паузу во время перестрелки.\nЗапрещается выходить за пределы карты на которой происходит бой.\nЗапрещается матерится, и оскорблять других игроков, и флудить\nЗапрещается любая реклама сторонних ресурсов.\nЗапрещается писать в чат капсом.", "Назад", "Закрыть");
				case 2:
				{
				    if(PlayerInfo[playerid][pServerHelp][0] == 0)
					{
					    PlayerInfo[playerid][pServerHelp][0] = 1;
					    PlayerInfo[playerid][pServerHelp][1] = 1;
					    PlayerInfo[playerid][pServerHelp][2] = 1;
	 				}
	 				else
	 				{
	 				    PlayerInfo[playerid][pServerHelp][0] = 0;
					    PlayerInfo[playerid][pServerHelp][1] = 0;
					    PlayerInfo[playerid][pServerHelp][2] = 0;
	 				}
	 				new string[124], str[10];
			        strcat(string, "Команды сервера\nПравила сервера\n");
			        if(PlayerInfo[playerid][pServerHelp][0] == 0) strcat(string, "Помощь по серверу\t{10F441}Включена{FFFFFF}\n");
			        else strcat(string, "Помощь по серверу\t{FF0000}Отключена{FFFFFF}\n");
					if(PlayerInfo[playerid][pAdmin] >= 2) strcat(string, "Помощь по административным правам");
					else if(PlayerInfo[playerid][pVip] >= 2) strcat(string, "Помощь по Vip привилегиями");
                    ShowPlayerDialogZS(playerid, 75, DIALOG_STYLE_LIST, "Помощь", string, "Выбрать", "Назад");
					format(str, sizeof(str), "%d,%d,%d", PlayerInfo[playerid][pServerHelp][0], PlayerInfo[playerid][pServerHelp][1], PlayerInfo[playerid][pServerHelp][2]);
					mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `serverhelp`='%s' WHERE `id`='%d'", str, PlayerInfo[playerid][pRoomAccount]);
 			    	return mysql_tquery(MysqlConnectID, string);
				}
				case 3:
				{
				    if(PlayerInfo[playerid][pAdmin] != 0)
				    {
				        new string[1203];
				    	strcat(string, "{FFFFFF}Кнопка H Настройки Дополнительные функции\nКнопка Num 4 Дополнительное меню\n\n/re - Следить за игроком\n/aspawn - Отправить игрока на спавн\n/slapcar - Выгнать игрока из автомобиля\n/а - Написать в чат администрации\n/weapdel - Разоружить игрока\n/slap - Дать пинка игроку\n/cc - Очистить общий чат\n/ar - Ответить на сообщение в игроку\n/asay - Написать от имени Администратора\n/admins - Просмотреть список Администраторов Онлайн\n");
						strcat(string, "/vips - Просмотреть список VIP игроков Онлайн\n/gm - Проверить игрока на наличие God Mod\n/freeze - Заморозить/разморозить игрока\n/mute - Запретить/разрешить доступ к общему чату\n/jail - Отправить игрока в тюрьму\n/nskin - Выдать игроку скин\n/kick - Кикнуть игрока\n/gettp - Телепортировать игрока к себе\n/gotp - Телепортироваться к игроку\n/free - Войти/Выйти из свободного режима\n/acar - Создать автомобиль с ID\n");
                        if(PlayerInfo[playerid][pAdmin] >= 3) strcat(string, "/team - Перевести игрока за другую команду\n/ahp - Выдать здоровье игроку\n/aar - Выдать броню игроку\n/wslot - Просмотреть оружие игрока\n/tppos - Переместиться по координатам [Y][X][Z]\n/aweapon - Выдать оружие игроку\n/akills - Убить игрока\n/ban - Заблокировать игрока\n");
						if(PlayerInfo[playerid][pAdmin] >= 4) strcat(string, "/sban - Тихо заблокировать игрока\n/skick - Тихо кикнуть игрока\n/ip - Узнать IP адрес игрока");
						return ShowPlayerDialogZS(playerid, 7500, DIALOG_STYLE_MSGBOX, "Помощь по административным правам", string, "Назад", "Закрыть");
					}
					if(PlayerInfo[playerid][pVip] == 2) ShowPlayerDialogZS(playerid, 7500, DIALOG_STYLE_MSGBOX, "Помощь по Vip привилегиями",
					"{FFFFFF}Кнопка H Настройки Дополнительные функции\n/cc - Очистить общий чат\n/admins - Просмотреть список Администраторов Онлайн\n/vips - Просмотреть список VIP игроков Онлайн", "Назад", "Закрыть");
					else
					{
						if(PlayerInfo[playerid][pVip] == 3) ShowPlayerDialogZS(playerid, 7500, DIALOG_STYLE_MSGBOX, "Помощь по Vip привилегиями",
						"{FFFFFF}Кнопка H Настройки Дополнительные функции\nКнопка Num 4 Дополнительное меню\n/cc - Очистить общий чат\n/admins - Просмотреть список Администраторов Онлайн\n/vips - Просмотреть список VIP игроков Онлайн\n/gotp - Телепортироваться к игроку\n/slapcar - Выгнать игрока из автомобиля\n/free - Войти/Выйти из свободного режима\n/slap - Дать пинка игроку\n/aspawn - Отправить игрока на спавн",
						"Назад", "Закрыть");
					}
				    return 1;
				}
			}
			return 1;
	    }
	    case 7500:
	    {
	        if(response == 0) return 1;
	        new string[124];
	        strcat(string, "Команды сервера\nПравила сервера\n");
	        if(PlayerInfo[playerid][pServerHelp][0] == 0 || PlayerInfo[playerid][pServerHelp][1] == 0) strcat(string, "Помощь по серверу\t{10F441}Включена{FFFFFF}\n");
	        else strcat(string, "Помощь по серверу\t{FF0000}Отключена{FFFFFF}\n");
			if(PlayerInfo[playerid][pAdmin] >= 2) strcat(string, "Помощь по административным правам");
			else if(PlayerInfo[playerid][pVip] >= 2) strcat(string, "Помощь по Vip привилегиями");
	        return ShowPlayerDialogZS(playerid, 75, DIALOG_STYLE_LIST, "Помощь", string, "Выбрать", "Назад");
	    }
		case 76:
	    {
	        if(response)
	        {
	            switch(listitem)
	            {
					case 0:
					{//5516
						ShowPlayerDialogZS(playerid, 7600, DIALOG_STYLE_MSGBOX, "Административные привилегии",
						"{FFFFFF}Открыт доступ к Дополнительному меню\nОткрыт доступ к Свободному режиму\nДоступны дополнительные команды\nНет ограничение на паузу\nДоступ к Пассивному режиму\nТелепорт по карте\nВозможно вызвать любой автомобиль", "Назад", "Закрыть");
						return 1;
					}
					case 1:
					{
						ShowPlayerDialogZS(playerid, 7600, DIALOG_STYLE_MSGBOX, "VIP привилегии - {88AA88}Возможности",
						"{FFFFFF}Открыт доступ к Дополнительному меню\nДоступны дополнительные команды\nСнижена цена на прокачку навыков\nЗа убийство больше $\nНет ограничение на паузу\nРегенерация здоровья по 2 процента\nПеред спавном вы получает Аптечку\n\n\tВозможности 3 уровня\nОткрыт доступ к Свободному режиму\nОткрыт доступ к Пассивному режиму\nТелепорт по карте\nПри спавне больше времени на закупку\nРегенерация здоровья по 3 процента\nПеред спавном вы получаете маскировку\nВозможно вызвать любой автомобиль",
						"Назад", "Закрыть");
						return 1;
					}
					case 2: return ShowPlayerDialogZS(playerid, 7601, DIALOG_STYLE_INPUT, "Игровые деньги", "{FFFFFF}Введите количество баксов сколько хотите купить 4P - 1000$ = 1$.", "Дальше", "Назад");
					case 3: return ShowPlayerDialogZS(playerid, 7602, DIALOG_STYLE_INPUT, "Кол-во убийств", "{FFFFFF}Введите количество убийств сколько хотите купить 3P - 1ш.\nЕсли вы хотите убрать или прибавить количество убийств то перед числом поставте {10F441}- {FFFFFF}или {10F441}+{FFFFFF}.", "Дальше", "Назад");
					case 4: return ShowPlayerDialogZS(playerid, 7603, DIALOG_STYLE_INPUT, "Кол-во смертей", "{FFFFFF}Введите количество смертей сколько хотите купить 3P - 1ш.\nЕсли вы хотите убрать или прибавить количество смертей то перед числом поставте {10F441}- {FFFFFF}или {10F441}+{FFFFFF}.", "Дальше", "Назад");
				}
			}
			else SetDialogResponse(playerid, 1);
            return 1;
		}
	 	case 7601:
		{
	    	if(response)
			{
			    if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 7601, DIALOG_STYLE_INPUT, "Игровые деньги", "{FFFFFF}Введите количество баксов сколько хотите купить 4P - 1000$ = 1$.", "Дальше", "Назад");
				new level = strval(inputtext);
				if(PlayerInfo[playerid][pDonat] < level * 4) return ShowPlayerDialogZS(playerid, 7601, DIALOG_STYLE_INPUT, "Игровые деньги", "{FFFFFF}Введите количество баксов сколько хотите купить 4P - 1000$ = 1$.\n{FF0000}Недостаточно средств!", "Дальше", "Назад", 1085);
				if(level < 1 || level > 100) return ShowPlayerDialogZS(playerid, 7601, DIALOG_STYLE_INPUT, "Игровые деньги", "{FFFFFF}Введите количество баксов сколько хотите купить 4P - 1000 = 1$.\n{FF0000}Максимальное количество покупки за один раз от 1000 = 1$ до 100 000 = 100$!\nМаксимальное количество денег: 1000000000.", "Дальше", "Назад", 1085);
				new string[90], str[8];
	            format(str, sizeof(str), "%d000", level);
	            MoneyInfoCall(playerid, strval(str), 0);
	            PlayerInfo[playerid][pDonat] -= level * 4;
	            format(string, sizeof(string), "{FFFFFF}Вы успешно приобрели {10F441}%s$ {FFFFFF}за {10F441}%dP{FFFFFF}.", str, level * 4);
	            ShowPlayerDialogZS(playerid, 7600, DIALOG_STYLE_MSGBOX, "Игровые деньги", string, "Назад", "Закрыть", 1138);
	            mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `donat`='%d' WHERE `id`='%d'", PlayerInfo[playerid][pDonat], PlayerInfo[playerid][pRoomAccount]);
				return mysql_tquery(MysqlConnectID, string);
			}
			else
			{
				if(PlayerInfo[playerid][pDonat] != 0)
		    	{
 					new string[26];
		    		format(string, sizeof(string), "Доп возможности: %dP", PlayerInfo[playerid][pDonat]);
		        	ShowPlayerDialogZS(playerid, 76, DIALOG_STYLE_TABLIST, string, "Административные привилегии\t\nVIP привилегии\t\nИгровые деньги\t4P\nКол-во убийств\t3P\nКол-во смертей\t3P", "Выбрать", "Назад");
            	}
            	else ShowPlayerDialogZS(playerid, 76, DIALOG_STYLE_LIST, "Доп возможности", "Административные привилегии\nVIP привилегии", "Выбрать", "Назад");
			}
			return 1;
	 	}
	 	case 7602:
		{
	    	if(response)
			{
				if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 7602, DIALOG_STYLE_INPUT, "Кол-во убийств", "{FFFFFF}Введите количество убийств сколько хотите купить 3P - 1ш.\nЕсли вы хотите убрать или прибавить количество убийств то перед числом поставте {10F441}- {FFFFFF}или {10F441}+{FFFFFF}.", "Дальше", "Назад");
				new level = strval(inputtext);
				if(PlayerInfo[playerid][pDonat] < level * 3) return ShowPlayerDialogZS(playerid, 7602, DIALOG_STYLE_INPUT, "Кол-во убийств", "{FFFFFF}Введите количество убийств сколько хотите купить 3P - 1ш.\nЕсли вы хотите убрать или прибавить количество убийств то перед числом поставте {10F441}- {FFFFFF}или {10F441}+{FFFFFF}.\n{FF0000}Недостаточно средств!", "Дальше", "Назад", 1085);
				if(level < 1 || level > 100) return ShowPlayerDialogZS(playerid, 7602, DIALOG_STYLE_INPUT, "Кол-во убийств", "{FFFFFF}Введите количество убийств сколько хотите купить 3P - 1ш.\nЕсли вы хотите убрать или прибавить количество убийств то перед числом поставте {10F441}- {FFFFFF}или {10F441}+{FFFFFF}.\n{FF0000}Максимальная покупка за 1 раз 100ш!", "Дальше", "Назад");
				new string[95];
				PlayerInfo[playerid][pKills] += level;
	            PlayerInfo[playerid][pDonat] -= level * 3;
				format(string, sizeof(string), "{FFFFFF}Вы успешно приобрели кол-во убийств {10F441}%dш {FFFFFF}за {10F441}%dP{FFFFFF}.", level, level * 3);
	            ShowPlayerDialogZS(playerid, 7600, DIALOG_STYLE_MSGBOX, "Кол-во убийств", string, "Назад", "Закрыть", 1138);
	            mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `donat`='%d' WHERE `id`='%d'", PlayerInfo[playerid][pDonat], PlayerInfo[playerid][pRoomAccount]);
				return mysql_tquery(MysqlConnectID, string);
			}
			else
			{
				if(PlayerInfo[playerid][pDonat] != 0)
		    	{
 					new string[26];
		    		format(string, sizeof(string), "Доп возможности: %dP", PlayerInfo[playerid][pDonat]);
		        	ShowPlayerDialogZS(playerid, 76, DIALOG_STYLE_TABLIST, string, "Административные привилегии\t\nVIP привилегии\t\nИгровые деньги\t4P\nКол-во убийств\t3P\nКол-во смертей\t3P", "Выбрать", "Назад");
            	}
            	else ShowPlayerDialogZS(playerid, 76, DIALOG_STYLE_LIST, "Доп возможности", "Административные привилегии\nVIP привилегии", "Выбрать", "Назад");
			}
			return 1;
	  	}
	  	case 7603:
		{
	    	if(response)
			{
				if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 7603, DIALOG_STYLE_INPUT, "Кол-во смертей", "{FFFFFF}Введите количество смертей сколько хотите купить 3P - 1ш.\nЕсли вы хотите убрать или прибавить количество смертей то перед числом поставте {10F441}- {FFFFFF}или {10F441}+{FFFFFF}.", "Дальше", "Назад");
				new level = strval(inputtext);
				if(PlayerInfo[playerid][pDonat] < level * 3) return ShowPlayerDialogZS(playerid, 7603, DIALOG_STYLE_INPUT, "Кол-во смертей", "{FFFFFF}Введите количество смертей сколько хотите купить 3P - 1ш.\nЕсли вы хотите убрать или прибавить количество смертей то перед числом поставте {10F441}- {FFFFFF}или {10F441}+{FFFFFF}.\n{FF0000}Недостаточно средств!", "Дальше", "Назад", 1085);
				if(level < 1 || level > 100) return ShowPlayerDialogZS(playerid, 7603, DIALOG_STYLE_INPUT, "Кол-во смертей", "{FFFFFF}Введите количество смертей сколько хотите купить 3P - 1ш.\nЕсли вы хотите убрать или прибавить количество смертей то перед числом поставте {10F441}- {FFFFFF}или {10F441}+{FFFFFF}.\n{FF0000}Максимальная покупка за 1 раз 100ш!", "Дальше", "Назад");
				new string[95];
				PlayerInfo[playerid][pDeaths] += level;
				mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `deaths`='%d' WHERE `id`='%d'", PlayerInfo[playerid][pDeaths], PlayerInfo[playerid][pRoomAccount]);
				mysql_tquery(MysqlConnectID, string);
	            PlayerInfo[playerid][pDonat] -= level * 3;
				format(string, sizeof(string), "{FFFFFF}Вы успешно приобрели кол-во смертей {10F441}%dш {FFFFFF}за {10F441}%dP{FFFFFF}.", level, level * 3);
                ShowPlayerDialogZS(playerid, 7600, DIALOG_STYLE_MSGBOX, "Кол-во смертей", string, "Назад", "Закрыть", 1138);
	            mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET `donat`='%d' WHERE `id`='%d'", PlayerInfo[playerid][pDonat], PlayerInfo[playerid][pRoomAccount]);
				return mysql_tquery(MysqlConnectID, string);
			}
			else
			{
                if(PlayerInfo[playerid][pDonat] != 0)
			    {
	 				new string[26];
			    	format(string, sizeof(string), "Доп возможности: %dP", PlayerInfo[playerid][pDonat]);
			        ShowPlayerDialogZS(playerid, 76, DIALOG_STYLE_TABLIST, string, "Административные привилегии\t\nVIP привилегии\t\nИгровые деньги\t4P\nКол-во убийств\t3P\nКол-во смертей\t3P", "Выбрать", "Назад");
	            }
	            else ShowPlayerDialogZS(playerid, 76, DIALOG_STYLE_LIST, "Доп возможности", "Административные привилегии\nVIP привилегии", "Выбрать", "Назад");
			}
			return 1;
	  	}
		case 7600:
		{
		    if(response == 0) return 1;
		    if(PlayerInfo[playerid][pDonat] != 0)
		    {
 				new string[26];
		    	format(string, sizeof(string), "Доп возможности: %dP", PlayerInfo[playerid][pDonat]);
		        ShowPlayerDialogZS(playerid, 76, DIALOG_STYLE_TABLIST, string, "Административные привилегии\t\nVIP привилегии\t\nИгровые деньги\t4P\nКол-во убийств\t3P\nКол-во смертей\t3P", "Выбрать", "Назад");
            }
            else ShowPlayerDialogZS(playerid, 76, DIALOG_STYLE_LIST, "Доп возможности", "Административные привилегии\nVIP привилегии", "Выбрать", "Назад");
			return 1;
		}
		case 77:
		{
			if(response == 0)
            {
				SetDialogResponse(playerid, 1);
                DeletePVar(playerid, "AchievementList[0]");
                return DeletePVar(playerid, "AchievementList[1]");
            }
		    switch(listitem)
      		{
			  	case 10:
                {
                    if(GetPVarInt(playerid, "AchievementList[1]") >= 1 && GetPVarInt(playerid, "AchievementList[1]") == listitem+1 && GetPVarInt(playerid, "AchievementList[0]") >= 1)
                    {
                        SetPVarInt(playerid, "AchievementList[0]", GetPVarInt(playerid, "AchievementList[0]")-1);
                        DeletePVar(playerid, "AchievementList[1]");
                    }
                    else SetPVarInt(playerid, "AchievementList[0]", GetPVarInt(playerid, "AchievementList[0]")+1);
                    return SetDialogResponse(playerid, 9);
                }
                case 11:
                {
                    if(GetPVarInt(playerid, "AchievementList[0]") >= 1) SetPVarInt(playerid, "AchievementList[0]", GetPVarInt(playerid, "AchievementList[0]")-1);
                    return SetDialogResponse(playerid, 9);
                }
                default:
                {
                    if(GetPVarInt(playerid, "AchievementList[1]") >= 1 && GetPVarInt(playerid, "AchievementList[1]") == listitem+1 && GetPVarInt(playerid, "AchievementList[0]") >= 1)
                    {
                        SetPVarInt(playerid, "AchievementList[0]", GetPVarInt(playerid, "AchievementList[0]")-1);
                        DeletePVar(playerid, "AchievementList[1]");
                        SetDialogResponse(playerid, 9);
					}
					return 1;
				}
			}
			return 1;
		}
		case 78://Онлайн Радио
		{
	    	if(response)
			{
				switch(listitem)
		        {
		            case 0:
		            {
		            	StopAudioStreamForPlayer(playerid);
		            	return ShowPlayerDialogZS(playerid, 7800, DIALOG_STYLE_MSGBOX, "Онлайн Радио", "{FFFFFF}Онлайн радио было успешно {FF3535}Отключено{FFFFFF}.", "Назда", "Закрыть");
				 	}
				 	case 1: return ShowPlayerDialogZS(playerid, 7801, DIALOG_STYLE_INPUT, "Своя радиостанция", "{FFFFFF}Введите с строке прямую ссылку на вашу радиостанцию или на Mp3.", "Дальше", "Назад");
					case 2:
					{
						PlayAudioStreamForPlayer(playerid, "http://www.hot108.com/hot108.asx");
						return ShowPlayerDialogZS(playerid, 7800, DIALOG_STYLE_MSGBOX, "Онлайн Радио", "{FFFFFF}Онлайн радио {10F441}Hot 108 Jamz (Rap) {FFFFFF}было успешно {10F441}Включено{FFFFFF}.", "Назда", "Закрыть");
					}
					case 3:
					{
						PlayAudioStreamForPlayer(playerid, "http://vip-elite.3dn.ru/Radio-Server/181.FM_The_Box.asx");
						return ShowPlayerDialogZS(playerid, 7800, DIALOG_STYLE_MSGBOX, "Онлайн Радио", "{FFFFFF}Онлайн радио {10F441}181.FM The Box (Rap) {FFFFFF}было успешно {10F441}Включено{FFFFFF}.", "Назда", "Закрыть");
					}
					case 4:
					{
						PlayAudioStreamForPlayer(playerid, "http://vip-elite.3dn.ru/Radio-Server/107.3_WKCR.pls");
						return ShowPlayerDialogZS(playerid, 7800, DIALOG_STYLE_MSGBOX, "Онлайн Радио", "{FFFFFF}Онлайн радио {10F441}107.3 WKCR (Rap) {FFFFFF}было успешно {10F441}Включено{FFFFFF}.", "Назда", "Закрыть");
					}
					case 5:
					{
						PlayAudioStreamForPlayer(playerid, "http://vip-elite.3dn.ru/Radio-Server/DEFJAY.pls");
						return ShowPlayerDialogZS(playerid, 7800, DIALOG_STYLE_MSGBOX, "Онлайн Радио", "{FFFFFF}Онлайн радио {10F441}DEFJAY (Rap) {FFFFFF}было успешно {10F441}Включено{FFFFFF}.", "Назда", "Закрыть");
					}
					case 6:
					{
						PlayAudioStreamForPlayer(playerid, "http://www.zaycev.fm:9002/rnb/ZaycevFM(128)");
						return ShowPlayerDialogZS(playerid, 7800, DIALOG_STYLE_MSGBOX, "Онлайн Радио", "{FFFFFF}Онлайн радио {10F441}Зайцев.FM (Rap) {FFFFFF}было успешно {10F441}Включено{FFFFFF}.", "Назда", "Закрыть");
					}
					case 7:
					{
						PlayAudioStreamForPlayer(playerid, "http://vip-elite.3dn.ru/Radio-Server/Big_R.pls");
						return ShowPlayerDialogZS(playerid, 7800, DIALOG_STYLE_MSGBOX, "Онлайн Радио", "{FFFFFF}Онлайн радио {10F441}Big R (Rock) {FFFFFF}было успешно {10F441}Включено{FFFFFF}.", "Назда", "Закрыть");
					}
					case 8:
					{
						PlayAudioStreamForPlayer(playerid, "http://vip-elite.3dn.ru/Radio-Server/Rock-Radio-Record.m3u");
						return ShowPlayerDialogZS(playerid, 7800, DIALOG_STYLE_MSGBOX, "Онлайн Радио", "{FFFFFF}Онлайн радио {10F441}Рекорд Рок радио (Rock) {FFFFFF}было успешно {10F441}Включено{FFFFFF}.", "Назда", "Закрыть");
					}
					case 9:
					{
						PlayAudioStreamForPlayer(playerid, "http://vip-elite.3dn.ru/Radio-Server/Post_Hardcore.m3u");
						return ShowPlayerDialogZS(playerid, 7800, DIALOG_STYLE_MSGBOX, "Онлайн Радио", "{FFFFFF}Онлайн радио {10F441}Post Hardcore (Hardcore) {FFFFFF}было успешно {10F441}Включено{FFFFFF}.", "Назда", "Закрыть");
					}
					case 10:
					{
						PlayAudioStreamForPlayer(playerid, "http://vip-elite.3dn.ru/Radio-Server/TechnoBass.pls");
						return ShowPlayerDialogZS(playerid, 7800, DIALOG_STYLE_MSGBOX, "Онлайн Радио", "{FFFFFF}Онлайн радио {10F441}TechnoBass (Electronic) {FFFFFF}было успешно {10F441}Включено{FFFFFF}.", "Назда", "Закрыть");
					}
					case 11:
					{
						PlayAudioStreamForPlayer(playerid, "http://vip-elite.3dn.ru/Radio-Server/1.FM.m3u");
						return ShowPlayerDialogZS(playerid, 7800, DIALOG_STYLE_MSGBOX, "Онлайн Радио", "{FFFFFF}Онлайн радио {10F441}1.FM (Pop) {FFFFFF}было успешно {10F441}Включено{FFFFFF}.", "Назда", "Закрыть");
					}
					case 12:
					{
						PlayAudioStreamForPlayer(playerid, "http://vip-elite.3dn.ru/Radio-Server/Free-Dance.m3u");
						return ShowPlayerDialogZS(playerid, 7800, DIALOG_STYLE_MSGBOX, "Онлайн Радио", "{FFFFFF}Онлайн радио {10F441}Free Dance (Pop) {FFFFFF}было успешно {10F441}Включено{FFFFFF}.", "Назда", "Закрыть");
					}
					case 13:
					{
						PlayAudioStreamForPlayer(playerid, "http://vip-elite.3dn.ru/Radio-Server/L-Radio.m3u");
						return ShowPlayerDialogZS(playerid, 7800, DIALOG_STYLE_MSGBOX, "Онлайн Радио", "{FFFFFF}Онлайн радио {10F441}L-Radio (Pop) {FFFFFF}было успешно {10F441}Включено{FFFFFF}.", "Назда", "Закрыть");
					}
					case 14:
					{
						PlayAudioStreamForPlayer(playerid, "http://vip-elite.3dn.ru/Radio-Server/Premium.m3u");
						return ShowPlayerDialogZS(playerid, 7800, DIALOG_STYLE_MSGBOX, "Онлайн Радио", "{FFFFFF}Онлайн радио {10F441}Premium (Pop) {FFFFFF}было успешно {10F441}Включено{FFFFFF}.", "Назда", "Закрыть");
					}
					case 15:
					{
						PlayAudioStreamForPlayer(playerid, "http://zaycev.fm:9002/ZaycevFM(128)");
						return ShowPlayerDialogZS(playerid, 7800, DIALOG_STYLE_MSGBOX, "Онлайн Радио", "{FFFFFF}Онлайн радио {10F441}Зайцев.FM (Pop) {FFFFFF}было успешно {10F441}Включено{FFFFFF}.", "Назда", "Закрыть");
					}
					case 16:
					{
						PlayAudioStreamForPlayer(playerid, "http://vip-elite.3dn.ru/Radio-Server/D-FM.m3u");
						return ShowPlayerDialogZS(playerid, 7800, DIALOG_STYLE_MSGBOX, "Онлайн Радио", "{FFFFFF}Онлайн радио {10F441}D-FM (Random) {FFFFFF}было успешно {10F441}Включено{FFFFFF}.", "Назда", "Закрыть");
					}
					case 17:
					{
						PlayAudioStreamForPlayer(playerid, "http://vip-elite.3dn.ru/Radio-Server/Hit-FM.m3u");
						return ShowPlayerDialogZS(playerid, 7800, DIALOG_STYLE_MSGBOX, "Онлайн Радио", "{FFFFFF}Онлайн радио {10F441}Хит-FM (Random) {FFFFFF}было успешно {10F441}Включено{FFFFFF}.", "Назда", "Закрыть");
					}
					case 18:
					{
						PlayAudioStreamForPlayer(playerid, "http://vip-elite.3dn.ru/Radio-Server/Europa-plus.m3u");
						return ShowPlayerDialogZS(playerid, 7800, DIALOG_STYLE_MSGBOX, "Онлайн Радио", "{FFFFFF}Онлайн радио {10F441}Европа Плюс (Random) {FFFFFF}было успешно {10F441}Включено{FFFFFF}.", "Назда", "Закрыть");
					}
					case 19:
					{
						PlayAudioStreamForPlayer(playerid, "http://vip-elite.3dn.ru/Radio-Server/Russian-radio.m3u");
						return ShowPlayerDialogZS(playerid, 7800, DIALOG_STYLE_MSGBOX, "Онлайн Радио", "{FFFFFF}Онлайн радио {10F441}Русское радио (Random) {FFFFFF}было успешно {10F441}Включено{FFFFFF}.", "Назда", "Закрыть");
					}
					case 20:
					{
						PlayAudioStreamForPlayer(playerid, "http://vip-elite.3dn.ru/Radio-Server/Chanson.m3u");
						return ShowPlayerDialogZS(playerid, 7800, DIALOG_STYLE_MSGBOX, "Онлайн Радио", "{FFFFFF}Онлайн радио {10F441}Шансон (Random) {FFFFFF}было успешно {10F441}Включено{FFFFFF}.", "Назда", "Закрыть");
					}
					case 21:
					{
						PlayAudioStreamForPlayer(playerid, "http://online.radiorecord.ru:8101/rr_128");
						return ShowPlayerDialogZS(playerid, 7800, DIALOG_STYLE_MSGBOX, "Онлайн Радио", "{FFFFFF}Онлайн радио {10F441}Рекорд (Random) {FFFFFF}было успешно {10F441}Включено{FFFFFF}.", "Назда", "Закрыть");
					}
				}
			}
			else SetDialogResponse(playerid, 1);
            return 1;
		}
		case 7801:
		{
			if(response)
		    {
		    	new string[200];
	            if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 7801, DIALOG_STYLE_INPUT, "Своя радиостанция", "{FFFFFF}Введите с строке прямую ссылку на вашу радиостанцию или на Mp3.", "Дальше", "Назад");
	            PlayAudioStreamForPlayer(playerid, inputtext);
	            format(string, sizeof(string), "{FFFFFF}Если ваша ссылка рабочая то вы через несколько минут услышате начало музыкального трека.\nСсылка: %s", inputtext);
	  			return ShowPlayerDialogZS(playerid, 7800, DIALOG_STYLE_MSGBOX, "Своя радиостанция", string, "Назад", "Закрыть");
		    }
		    else
			{
				ShowPlayerDialogZS(playerid, 78, DIALOG_STYLE_TABLIST_HEADERS, "Онлайн Радио",
				"Радиостанции\tЖанр\n{FF3535}Отключить {FFFFFF}радио\nСвоя радиостанция\nHot 108 Jamz\tRap\n181.FM The Box\tRap\n107.3 WKCR\tRap\nDEFJAY\tRap\nЗайцев.FM\tRap\nBig R\tRock\nРекорд Рок\tRock\nPost Hardcore\tHardcore\nTechnoBass\tElectronic\n1.FM\tPop\nFree Dance\tPop\nL-Radio\tPop\nPremium\tPop\nЗайцев.FM\tPop\nD-FM\tRandom\nХит-FM\tRandom\nЕвропа Плюс\tRandom\nРусское радио\tRandom\nШансон\tRandom\nРекорд\tRandom", "Выбрать", "Назад");
			}
		    return 1;
		}
		case 7800:
		{
		    if(response == 0) return 1;
			ShowPlayerDialogZS(playerid, 78, DIALOG_STYLE_TABLIST_HEADERS, "Онлайн Радио",
			"Радиостанции\tЖанр\n{FF3535}Отключить {FFFFFF}радио\nСвоя радиостанция\nHot 108 Jamz\tRap\n181.FM The Box\tRap\n107.3 WKCR\tRap\nDEFJAY\tRap\nЗайцев.FM\tRap\nBig R\tRock\nРекорд Рок\tRock\nPost Hardcore\tHardcore\nTechnoBass\tElectronic\n1.FM\tPop\nFree Dance\tPop\nL-Radio\tPop\nPremium\tPop\nЗайцев.FM\tPop\nD-FM\tRandom\nХит-FM\tRandom\nЕвропа Плюс\tRandom\nРусское радио\tRandom\nШансон\tRandom\nРекорд\tRandom", "Выбрать", "Назад");
			return 1;
		}
		case 79://Репорт 80
	    {
	        if(response == 0) return SetDialogResponse(playerid, 1);
	        if(!strlen(inputtext)) return ShowPlayerDialogZS(playerid, 79, DIALOG_STYLE_INPUT, "Связь с администрацией", "{FFFFFF}Введите ваше сообщение жалобы, вопроса:", "Дальше", "Назад");
        	if(GetPVarInt(playerid, "Report") > gettime()) return ShowPlayerDialogZS(playerid, 70, DIALOG_STYLE_MSGBOX, "{FF3535}Ошибка", "{FFFFFF}Связь с администрацией доступна 1 раз в 15 секунд!", "Назад", "Закрыть");
         	if(strlen(inputtext) < 2 || strlen(inputtext) > 70) return ShowPlayerDialogZS(playerid, 79, DIALOG_STYLE_INPUT, "Связь с администрацией", "{FFFFFF}Введите ваше сообщение жалобы, вопроса:\n{FF0000}Максимальная длинна текста от 2 до 70 символов!", "Дальше", "Назад");
			FindSpecifiersInStringBy_seriu(inputtext);
			SetPVarInt(playerid, "Report", gettime()+15);
            new string[147];
			format(string, sizeof(string), "{FFFFFF}Ваше сообщение было успешно отправлено.\n%s", inputtext);
			ShowPlayerDialogZS(playerid, 70, DIALOG_STYLE_MSGBOX, "Связь с администрацией", string, "Назад", "Закрыть");
			format(string, sizeof(string), "Игрок %s (ID: %d) репорт: {808080}%s", PlayerName[playerid], playerid, inputtext);
			return ABroadCast(0xC3C3C3AA, string, 0, 2);
		}//Log("System/Report.log", string);
		case 158:
		{
		    if(response == 0) return DeletePVar(playerid, "MenuBuyS");
		    switch(listitem)
		    {
		        case 0..15:
		  		{
	                new string[206], str[73];
                    SetPVarInt(playerid, "MenuBuyS", listitem);
		  		    switch(listitem)
		  		    {
		  		        case 0..2: if(WeaponsSlotSpawn[playerid][0] != 0) format(str, sizeof(str), "{FF0000}В слоте уже есть оружие %s.", WeaponsName[WeaponsSlotSpawn[playerid][0]]);
						case 3..5: if(WeaponsSlotSpawn[playerid][1] != 0) format(str, sizeof(str), "{FF0000}В слоте уже есть оружие %s.", WeaponsName[WeaponsSlotSpawn[playerid][1]]);
						case 6, 7, 10: if(WeaponsSlotSpawn[playerid][2] != 0) format(str, sizeof(str), "{FF0000}В слоте уже есть оружие %s.", WeaponsName[WeaponsSlotSpawn[playerid][2]]);
						case 8, 9: if(WeaponsSlotSpawn[playerid][3] != 0) format(str, sizeof(str), "{FF0000}В слоте уже есть оружие %s.", WeaponsName[WeaponsSlotSpawn[playerid][3]]);
						case 11, 12: if(WeaponsSlotSpawn[playerid][4] != 0) format(str, sizeof(str), "{FF0000}В слоте уже есть оружие %s.", WeaponsName[WeaponsSlotSpawn[playerid][4]]);
						case 13..15: if(WeaponsSlotSpawn[playerid][5] != 0) format(str, sizeof(str), "{FF0000}В слоте уже есть %s.", WeaponsName[WeaponsSlotSpawn[playerid][5]]);
				  	}
					format(string, sizeof(string), "{FFFFFF}Оружие: {61dd61}%s{FFFFFF}\n\nПатронов в обойме:\t\t{61dd61}%d{FFFFFF}\nДальность попадания:\t{61dd61}%.0f{FFFFFF} метров\nЦена:\t\t\t\t{61dd61}%d$\n%s", WeaponsName[MenuBuy[listitem][0]], MenuBuy[listitem][1], WeaponRange[listitem], MenuBuy[listitem][2], str);
					return ShowPlayerDialogZS(playerid, 159, DIALOG_STYLE_MSGBOX, "Информация об оружие", string, "Купить", "Назад");
		  		}
		  		case 16:
		  		{
		  			if(PlayerInfo[playerid][pInteraction][0] >= 3)
				  	{
				  		if(MenuProcurementTime[playerid] != 0) ShowModelSelectionMenu(playerid, 257);
				  		return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже покупали Медицинскую аптечку.", 1085);
					}
					if(PlayerInfo[playerid][pMoney] < MenuBuy[16][2])
					{
					    if(MenuProcurementTime[playerid] != 0) ShowModelSelectionMenu(playerid, 257);
						return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки.", 1085);
					}
					PlayerInfo[playerid][pInteraction][0] += MenuBuy[16][1];
					MoneyInfoCall(playerid, MenuBuy[16][2], 1);
					ShowModelSelectionMenu(playerid, 257);
					SendClientMessageZS(playerid, 0xFFFFFFFF, "Вы успешно приобрели: {4FDF24}Медицинскую аптечку{FFFFFF}, для использования нажмите на кнопку {4FDF24}Y{FFFFFF}.", 1138);
		  		}
		  		case 17:
		  		{
		  			if(Armour[playerid][4] >= 1)
				  	{
				  	    if(MenuProcurementTime[playerid] != 0) ShowModelSelectionMenu(playerid, 257);
					  	return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже покупали шлем.", 1085);
	   				}
					if(PlayerInfo[playerid][pMoney] < MenuBuy[17][2])
					{
					    if(MenuProcurementTime[playerid] != 0) ShowModelSelectionMenu(playerid, 257);
						return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки.", 1085);
					}
					Armour[playerid][4] = 100;
					MoneyInfoCall(playerid, MenuBuy[17][2], 1);
					ShowModelSelectionMenu(playerid, 257);
					SetPlayerAttachedObjectZS(playerid, 19514);
					return SendClientMessageZS(playerid, 0xFFFFFFFF, "Вы успешно приобрели: {4FDF24}Шлем.", 1138);
		  		}
		  		case 18:
				{
				    if(PlayerInfo[playerid][pInteraction][2] >= 3)
					{
					    if(MenuProcurementTime[playerid] != 0) ShowModelSelectionMenu(playerid, 257);
						return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже покупали данную бомбу.", 1085);
					}
					if(PlayerInfo[playerid][pMoney] < MenuBuy[18][2])
					{
					    if(MenuProcurementTime[playerid] != 0) ShowModelSelectionMenu(playerid, 257);
						return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки.", 1085);
					}
					PlayerInfo[playerid][pInteraction][2] += 1;
					MoneyInfoCall(playerid, MenuBuy[18][2], 1);
					ShowModelSelectionMenu(playerid, 257);
					SendClientMessageZS(playerid, 0xFFFFFFFF, "Вы успешно приобрели: {4FDF24}Динамит{FFFFFF}, для использования нажмите на кнопку {4FDF24}Y{FFFFFF}", 1138);
				}
				case 19:
				{
				    if(PlayerInfo[playerid][pInteraction][3] >= 3)
					{
					    if(MenuProcurementTime[playerid] != 0) ShowModelSelectionMenu(playerid, 257);
						return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже покупали данную бомбу.", 1085);
					}
					if(PlayerInfo[playerid][pMoney] < MenuBuy[19][2])
					{
					    if(MenuProcurementTime[playerid] != 0) ShowModelSelectionMenu(playerid, 257);
						return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки.", 1085);
					}
					PlayerInfo[playerid][pInteraction][3] += 1;
					MoneyInfoCall(playerid, MenuBuy[19][2], 1);
					ShowModelSelectionMenu(playerid, 257);
					SendClientMessageZS(playerid, 0xFFFFFFFF, "Вы успешно приобрели: {4FDF24}Наземную мину{FFFFFF}, для использования нажмите на кнопку {4FDF24}Y{FFFFFF}", 1138);
				}
		  		case 20:
			  	{
					if(PlayerInfo[playerid][pInteraction][4] >= 3)
					{
					    if(MenuProcurementTime[playerid] != 0) ShowModelSelectionMenu(playerid, 257);
						return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже покупали бронежилет.", 1085);
					}
					if(PlayerInfo[playerid][pMoney] < MenuBuy[20][2])
					{
					    if(MenuProcurementTime[playerid] != 0) ShowModelSelectionMenu(playerid, 257);
						return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки.", 1085);
					}
					PlayerInfo[playerid][pInteraction][4] += 1;
                    MoneyInfoCall(playerid, MenuBuy[20][2], 1);
                    ShowModelSelectionMenu(playerid, 257);
     				SendClientMessageZS(playerid, 0xFFFFFFFF, "Вы успешно приобрели {4FDF24}Стандартный бронежилет{FFFFFF}, для использования нажмите на кнопку {4FDF24}Y{FFFFFF}.", 1138);
	  			}
				case 21:
				{
					if(PlayerInfo[playerid][pInteraction][5] >= 3)
					{
					    if(MenuProcurementTime[playerid] != 0) ShowModelSelectionMenu(playerid, 257);
						return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже покупали бронежилет.", 1085);
					}
					if(PlayerInfo[playerid][pMoney] < MenuBuy[21][2])
					{
					    if(MenuProcurementTime[playerid] != 0) ShowModelSelectionMenu(playerid, 257);
						return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки.", 1085);
					}
					PlayerInfo[playerid][pInteraction][5] += 1;
			        MoneyInfoCall(playerid, MenuBuy[21][2], 1);
			        ShowModelSelectionMenu(playerid, 257);
			        SendClientMessageZS(playerid, 0xFFFFFFFF, "Вы успешно приобрели {4FDF24}Тяжёлый бронежилет{FFFFFF}, для использования нажмите на кнопку {4FDF24}Y{FFFFFF}.", 1138);
				}
				case 22:
				{
					if(PlayerInfo[playerid][pInteraction][6] >= 3)
					{
					    if(MenuProcurementTime[playerid] != 0) ShowModelSelectionMenu(playerid, 257);
						return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Вы уже покупали бронежилет.", 1085);
					}
				    if(PlayerInfo[playerid][pMoney] < MenuBuy[22][2])
				 	{
				 	    if(MenuProcurementTime[playerid] != 0) ShowModelSelectionMenu(playerid, 257);
					 	return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки.", 1085);
	  				}
				    PlayerInfo[playerid][pInteraction][6] += 1;
     				MoneyInfoCall(playerid, MenuBuy[22][2], 1);
     				ShowModelSelectionMenu(playerid, 257);
     				SendClientMessageZS(playerid, 0xFFFFFFFF, "Вы успешно приобрели {4FDF24}Сверхтяжёлый бронежилет{FFFFFF}, для использования нажмите на кнопку {4FDF24}Y{FFFFFF}.", 1138);
				}
		    }
		    new string[61+22], str[22];
			format(str, sizeof(str), "%d,%d,%d,%d,%d,%d,%d", PlayerInfo[playerid][pInteraction][0], PlayerInfo[playerid][pInteraction][1], PlayerInfo[playerid][pInteraction][2], PlayerInfo[playerid][pInteraction][3], PlayerInfo[playerid][pInteraction][4], PlayerInfo[playerid][pInteraction][5], PlayerInfo[playerid][pInteraction][6]);
			mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET interaction='%s' WHERE id='%d'", str, PlayerInfo[playerid][pRoomAccount]);
 			return mysql_tquery(MysqlConnectID, string);
		}
		case 159:
		{
		    if(response == 0) return ShowModelSelectionMenu(playerid, 257);
		    new slot = GetPVarInt(playerid, "MenuBuyS");
		    if(PlayerInfo[playerid][pMoney] < MenuBuy[slot][2])
			{
			    if(MenuProcurementTime[playerid] != 0) ShowModelSelectionMenu(playerid, 257);
				return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> У вас недостаточно средств для покупки.", 1085);
			}
			if(PlayerInfo[playerid][pLevel][0] <= 10 && slot == 18)
			{
			    if(MenuProcurementTime[playerid] != 0) ShowModelSelectionMenu(playerid, 257);
				return SendClientMessageZS(playerid, COLOR_RED, "[Ошибка]: >> Данный вид оружия временно недоступен.", 1085);
   			}
			switch(MenuBuy[slot][0])
			{
			    case 22..24: WeaponsSlotSpawn[playerid][0] = MenuBuy[slot][0];
			    case 25..27: WeaponsSlotSpawn[playerid][1] = MenuBuy[slot][0];
			    case 28, 29, 32: WeaponsSlotSpawn[playerid][2] = MenuBuy[slot][0];
			    case 30, 31: WeaponsSlotSpawn[playerid][3] = MenuBuy[slot][0];
				case 33, 34: WeaponsSlotSpawn[playerid][4] = MenuBuy[slot][0];
				case 16..18: WeaponsSlotSpawn[playerid][5] = MenuBuy[slot][0];
			}
			ShowModelSelectionMenu(playerid, 257);
		    MoneyInfoCall(playerid, MenuBuy[slot][2], 1);
		    GivePlayerWeaponZS(playerid, MenuBuy[slot][0], MenuBuy[slot][1]);
			new string[59];
			format(string, sizeof(string), "Вы успешно приобрели: {4FDF24}%s{FFFFFF}.", WeaponsName[MenuBuy[slot][0]]);
		    return SendClientMessageZS(playerid, 0xFFFFFFFF, string, 36401);
		}
		case 160://5512
		{
		    new lang = PlayerInfo[playerid][pRussifier][1];
		    TimeInput[playerid] = 300;
			switch(ServerHelpInfo[playerid][1])
		    {
		        case 1:
		        {
		            if(ServerHelpInfo[playerid][0] < gettime())
					{
					    CancelSelectTextDraw(playerid);
					    ServerHelpInfo[playerid][0] = gettime() + 2;
					    ServerHelpInfo[playerid][1] = 2;
					    TextDrawHideForPlayer(playerid, ChoiceTeam[playerid][13]);
      		            TextDrawHideForPlayer(playerid, ChoiceTeam[playerid][14]);
      		            TextDrawHideForPlayer(playerid, ChoiceTeam[playerid][15]);
      		            TextDrawHideForPlayer(playerid, ChoiceTeam[playerid][16]);
      		            AchievementsInfo(20, playerid);
      		            ShowPlayerDialogZS(playerid, 160, DIALOG_STYLE_MSGBOX, "Знакомство с Сервером II", "{FFFFFF}После выбора языка переходим к выбору команды.\n\nИгра на сервере заключается в войне между одной командой со другой на определенных локациях.\nПервым делом вам необходимо выбрать свою команду(Team), у каждой команды есть своя персональная одежда.", "Дальше", "");
					}
					else ShowPlayerDialogZS(playerid, 160, DIALOG_STYLE_MSGBOX,
			        "Знакомство с Сервером", "{FFFFFF}Добро пожаловать на сервер {61dd61}TDM Zones{FFFFFF}.\n\nДля комфортного выбора команды, начнем с локализации.\nСервер поддерживает русский, английский текст в TextDraw.\n\nДля выбора нужного вам языка используйте стрелки назад, вперед.\nВы в любой момент сможите выбрать нужный вам стиль текста в Главном меню - Настройки - HUD.\nВ настройках вы также можете включить {4FDF24}Txd Bar{FFFFFF} - он улучшит ваш интерфейс.", "Дальше", "");
                    return 1;
				}
				case 2:
				{
				    if(ServerHelpInfo[playerid][0] < gettime())
					{
						ServerHelpInfo[playerid][1] = 3;
						SelectTextDraw(playerid, 0x88AA88FF);
						for(new x; x < 9; x ++) if(x != 6) TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][x]);
					    TextDrawSetString(ChoiceTeam[playerid][3], TextDrawInfo[49][lang]);
						TextDrawSetString(ChoiceTeam[playerid][7], TextDrawInfo[51][lang]);
						TextDrawSetString(ChoiceTeam[playerid][8], TextDrawInfo[52][lang]);
	 				}
					else ShowPlayerDialogZS(playerid, 160, DIALOG_STYLE_MSGBOX, "Знакомство с Сервером II", "{FFFFFF}После выбора языка переходим к выбору команды.\n\nИгра на сервере заключается в войне между одной командой со другой на определенных локациях.\nПервым делом вам необходимо выбрать свою команду(Team), у каждой команды есть своя персональная одежда.", "Дальше", "");
					return 1;
				}
				case 3:
				{
				    if(ServerHelpInfo[playerid][0] < gettime())
					{
						ServerHelpInfo[playerid][0] = gettime() + 2;
					    ServerHelpInfo[playerid][1] = 5;
      		            ShowModelSelectionMenu(playerid, 255);
      		            if(TimeInput[playerid] <= 70) TimeInput[playerid] = 300;
      		         	ShowPlayerDialogZS(playerid, 160, DIALOG_STYLE_MSGBOX, "Знакомство с Сервером III",
                        "{FFFFFF}После Меню закупок переходим к Меню взаимодействий.\n\nДля открытия данного меню в игре используйте кнопку: Y(зависит от вашей настройки)\nДанное меню нужно для быстрого использовать инвентаря он будет доступен по прогрессу игры,\nМедпакет, Бронежилет, Взрывные устройства которые можно приобрести в Меню закупок,\nМаскировку которую вы сможете снять с оглушенного вами противника.\nВ настройках HUD вы можете переключить тип меню на Диалоговое.", "Далее", "");
						for(new x; x < 16; x ++) if(x != 8) TextDrawShowForPlayer(playerid, ChoiceItems[playerid][x]);
			        	TextDrawSetString(ChoiceItems[playerid][15], TextDrawInfo[4][lang]);
			        	TextDrawSetString(DuelInfo[playerid][14], TextDrawInfo[47][lang]);
                        if(PlayerInfo[playerid][pInteraction][0] == 0) TextDrawSetStringZS(ChoiceItems[playerid][2], ChoiceItems[playerid][9], TextDrawInfo[5][lang], TextDrawInfo[2][lang]);
						else TextDrawSetStringZS(ChoiceItems[playerid][2], ChoiceItems[playerid][9], TextDrawInfo[5][lang], TextDrawInfo[3][lang]);
						TextDrawSetStringZS(ChoiceItems[playerid][3], ChoiceItems[playerid][10], TextDrawInfo[6][lang], "_");
						TextDrawSetStringZS(ChoiceItems[playerid][4], ChoiceItems[playerid][11], TextDrawInfo[7][lang], "_");
						if(PlayerInfo[playerid][pInteraction][1] == 0) TextDrawSetStringZS(ChoiceItems[playerid][5], ChoiceItems[playerid][12], TextDrawInfo[8][lang], TextDrawInfo[2][lang]);
						else TextDrawSetStringZS(ChoiceItems[playerid][5], ChoiceItems[playerid][12], TextDrawInfo[8][lang], TextDrawInfo[3][lang]);
						TextDrawSetStringZS(ChoiceItems[playerid][6], ChoiceItems[playerid][13], TextDrawInfo[9][lang], "_");
						TextDrawSetStringZS(ChoiceItems[playerid][7], ChoiceItems[playerid][14], TextDrawInfo[10][lang], "~y~$100");
					}
					else ShowPlayerDialogZS(playerid, 160, DIALOG_STYLE_MSGBOX, "Знакомство с Сервером III",
                    "{FFFFFF}После выбора команды, переходим к Меню закупок.\n\nПеред вами Меню закупок, для открытия данного меню в игре используйте кнопку: L-Alt(зависит от вашей настройки).\nВ меню отображены виды оружия которые вы можете приобрести, под оружием отображена цена данного орудия.\n\nПо продвижение по рангам вам откроется возможность использовать функцию Автоматическая Закупка оружия.\nВ настройках HUD вы можете переключить тип меню на Диалоговое.", "Далее", "");
	 				return 1;
				}
				case 5:
				{
				    if(ServerHelpInfo[playerid][0] < gettime())
					{
					    ServerHelpInfo[playerid][0] = gettime() + 2;
					    ServerHelpInfo[playerid][1] = 6;
      		            if(TimeInput[playerid] <= 70) TimeInput[playerid] = 300;
      		            for(new x; x < 16; x ++) if(x != 8) TextDrawHideForPlayer(playerid, ChoiceItems[playerid][x]);
						ShowPlayerDialogZS(playerid, 160, DIALOG_STYLE_MSGBOX, "Знакомство с Сервером IV",
						"{FFFFFF}После Меню взаимодействий, переходим к Главному меню.\n\nДля открытия используйте кнопку: H(зависит от вашей настройки).\n- Вкладка Помощь в ней вы можете ознакомится с правила, командами сервера.\n- Вкладка Банды вы можете создать/вступить в банду.\n- Вкладка Достижения в ней отображены полученные достижения.\n\nПриятной игры на {61dd61}TDM Zones{FFFFFF}.\nДля преступления к игре нажмите кнопку Spawn.", "Далее", "");
					}
					else ShowPlayerDialogZS(playerid, 160, DIALOG_STYLE_MSGBOX, "Знакомство с Сервером III",
                    "{FFFFFF}После Меню закупок переходим к Меню взаимодействий.\n\nДля открытия данного меню в игре используйте кнопку: Y(зависит от вашей настройки)\nДанное меню нужно для быстрого использовать инвентаря он будет доступен по прогрессу игры,\nМедпакет, Бронежилет, Взрывные устройства которые можно приобрести в Меню закупок,\nМаскировку которую вы сможете снять с оглушенного вами противника.\nВ настройках HUD вы можете переключить тип меню на Диалоговое.", "Далее", "");
					return 1;
				}
				case 6:
				{
				    if(ServerHelpInfo[playerid][0] < gettime())
					{
					    new string[66+9+ 16+16], str[16], str1[16];
					    ServerHelpInfo[playerid][0] = 0;
					    ServerHelpInfo[playerid][1] = 0;
					    ServerHelpInfo[playerid][2] = 0;
					    TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][10]);
            			TextDrawShowForPlayer(playerid, ChoiceTeam[playerid][11]);
      		            PlayerInfo[playerid][pServerHelp][0] = 1;
      		            PlayerInfo[playerid][pAutoBuyWeapon][4] = 0;
      		            SelectTextDraw(playerid, 0x88AA88FF);
						format(str1, sizeof(str1), "%d,%d,%d,%d,%d", PlayerInfo[playerid][pAutoBuyWeapon][0], PlayerInfo[playerid][pAutoBuyWeapon][1], PlayerInfo[playerid][pAutoBuyWeapon][2], PlayerInfo[playerid][pAutoBuyWeapon][3], PlayerInfo[playerid][pAutoBuyWeapon][4]);
						format(str, sizeof(str), "%d,%d,%d", PlayerInfo[playerid][pServerHelp][0], PlayerInfo[playerid][pServerHelp][1], PlayerInfo[playerid][pServerHelp][2]);
						mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET serverhelp='%s',autobuyweapon='%s' WHERE id=%d", str, str1, PlayerInfo[playerid][pRoomAccount]);
 			    		mysql_tquery(MysqlConnectID, string);
						return 1;
					}
					else ShowPlayerDialogZS(playerid, 160, DIALOG_STYLE_MSGBOX, "Знакомство с Сервером IV", "{FFFFFF}После Меню взаимодействий, переходим к Главному меню.\n\nДля открытия используйте кнопку: H(зависит от вашей настройки).\n- Вкладка Помощь в ней вы можете ознакомится с правила, командами сервера.\n- Вкладка Банды вы можете создать/вступить в банду.\n- Вкладка Достижения в ней отображены полученные достижения.\n\nПриятной игры на {61dd61}TDM Zones{FFFFFF}.\nДля преступления к игре нажмите кнопку Spawn.", "Далее", "");
					return 1;
				}
			}
			return 1;
		}
  	}
	return 1;
}

public GangPublic(playerid, line, test)
{
    new rows;
    cache_get_row_count(rows);
    switch(line)
	{
	    case 1:
	    {
			new string[146];
			if(test == 1)
			{
			    new date[6], slot[25], registered_players;
				cache_get_value_int(0, 0, registered_players);
	        	if(registered_players >= 9999) return ShowPlayerDialogZS(playerid, 7400, DIALOG_STYLE_MSGBOX, "{FF0000}Создать собственную банду", "{FFFFFF}Достигнут лимит по созданию банд!", "Назад", "Закрыть", 1085);
				getdate(date[0], date[1], date[2]);
				gettime(date[3], date[4], date[5]);
				format(slot, sizeof(slot), "%02d/%02d/%d,%d:%d:%d", date[2], date[1], date[0], date[3], date[4], date[5]);
				mysql_format(MysqlConnectID, string, sizeof(string),"INSERT INTO gang (`owner`,`datetime`,`lastaction`) VALUES ('%s','%s','%s')", PlayerName[playerid], slot, slot);
				return mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 1, 0);
			}
		    PlayerInfo[playerid][pGang][0] = cache_insert_id();
			PlayerInfo[playerid][pGang][1] = 13; 
			PlayerInfo[playerid][pGang][2] = 0;
			PlayerInfo[playerid][pGang][3] = 0;
			AchievementsInfo(6, playerid);
			format(string, sizeof(string), "{FFFFFF}Вы успешно создали собственную банду, под номером: {4FDF24}%d.", PlayerInfo[playerid][pGang][0]);
		    ShowPlayerDialogZS(playerid, 7400, DIALOG_STYLE_MSGBOX, "Создать собственную банду", string, "Назад", "Закрыть", 1138);
   			mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET gang0=%d,gang1=0,gang='13,0' WHERE id=%d", PlayerInfo[playerid][pGang][0], PlayerInfo[playerid][pRoomAccount]);
			mysql_tquery(MysqlConnectID, string);
			mysql_format(MysqlConnectID, string, sizeof(string), "SELECT name,crewtag,action,rank FROM gang WHERE id=%d LIMIT 1", PlayerInfo[playerid][pGang][0]);
			return mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 14, 1);
		}
		case 2:
		{
		    new string[431], str[38], slot1[21], slot2[5], slot5;
			if(rows == 0) return ShowPlayerDialogZS(playerid, 7400, DIALOG_STYLE_MSGBOX, "Список созданных банд", "{FFFFFF}В данный момент нет созданных банд.", "Назад", "Закрыть", 1085);
            TopList[playerid][2] = 0;
            strcat(string, "Номер\tНазвание\tТег\n");
			for(new x; x < 10; x ++)
            {
                if(x >= rows)
				{
				    if(TopList[playerid][1] >= 10) TopList[playerid][2] = x;
					break;
				}
                cache_get_value_name_int(x, "id", slot5);
                cache_get_value_name(x, "name", slot1);
				cache_get_value_name(x, "crewtag", slot2);
				GangList[playerid][x] = slot5;
				format(str, sizeof(str), "%d\t%s\t%s\t\n", /*x+1+TopList[playerid][1]*/slot5, slot1, slot2);
				strcat(string, str);
            }
            if(rows >= 10) strcat(string, "> Дальше");
            if(TopList[playerid][1] >= 10) strcat(string, "\n< Назад\n> Поиск по номеру");
            return ShowPlayerDialogZS(playerid, 7402, DIALOG_STYLE_TABLIST_HEADERS, "Список созданных банд", string, "Выбрать", "Назад");
		}
		case 3:
		{
			if(rows == 0) return ShowPlayerDialogZS(playerid, 7400, DIALOG_STYLE_MSGBOX, "{FF0000}Список созданных банд", "{FFFFFF}Данный банда не найдена.", "Назад", "Закрыть", 1085);
			new string[154], str[45], slot[11], slott[26], slot0[2];
			cache_get_value_name(0, "lastaction", slot);
			cache_get_value_name(0, "action", slott);
			cache_get_value_name_int(0, "visible", slott[1]);
            sscanf(slott, "p<,>d", slot0[0]);
			SetPVarInt(playerid, "GangListitem1", slot0[0]);
			if(PlayerInfo[playerid][pGang][3] != GetPVarInt(playerid, "GangListitem"))
			{
		 		if(PlayerInfo[playerid][pGang][0] == 0)
				{
					if(slot0[0] == 1) strcat(string, "Статистика банды\nЗапросить приглашение\n");
					else strcat(string, "Статистика банды\n{c9c9c9}Запросить приглашение\n");
				}
		 		else strcat(string, "Статистика банды\n{c9c9c9}Запросить приглашение\n");
			}
			else strcat(string, "Статистика банды\nОтклонить приглашение\n");
			if(PlayerInfo[playerid][pAdmin] >= 4) strcat(string, "Выдать предупреждение\n");
			if(PlayerInfo[playerid][pAdmin] >= 5)
			{
				if(slott[1] == 0) strcat(string, "Удалить банду\nСкрыть в списке банд\nИзменить название\nИзменить тег");
				else strcat(string, "Удалить банду\nОтобразить в списке банд\nИзменить название\nИзменить тег");
			}
			format(str, sizeof(str), "Список созданных банд | ПД: %s", slot);
			return ShowPlayerDialogZS(playerid, 7422, DIALOG_STYLE_LIST, str, string, "Выбрать", "Назад");
		}
		case 4:
		{
		    if(rows == 0) return ShowPlayerDialogZS(playerid, 7400, DIALOG_STYLE_MSGBOX, "{FF0000}Список созданных банд", "{FFFFFF}Данный банда не найдена.", "Назад", "Закрыть", 1085);
			if(PlayerInfo[playerid][pGang][1] >= 12)
		    {
		    	new string[492], str[257], slot1[21], slot2[5], slot3[21], slot[6];
     			cache_get_value_name(0, "name", slot1);
     			cache_get_value_name(0, "crewtag", slot2);
     			cache_get_value_name(0, "motto", slot3);
     			cache_get_value_name(0, "action", str);
     			sscanf(str, "p<,>dddddd", slot[0], slot[2], slot[3], slot[4], slot[5], slot[1]);
      			format(str, sizeof(str), "Информация о банде\t\nИзменить название\t[{61dd61}%s{FFFFFF}]\nИзменить тег\t[{61dd61}%s{FFFFFF}]\nИзменить девиз\t[{61dd61}%s{FFFFFF}]...\nИзменить название рангов\nЧлены банды\t[{61dd61}Около: %d{FFFFFF}]\n", slot1, slot2, slot3, slot[4]);
				strcat(string, str);
				if(slot[0] == 0) strcat(string, "Тег банды в чате\t[{f44747}Отключен{FFFFFF}]\n");
   				else strcat(string, "Тег банды в чате\t[{61dd61}Включен{FFFFFF}]\n");
				format(str, sizeof(str), "Цвет банды\t[{%06x}%06x{FFFFFF}]\n", slot[1], slot[1]);
   				strcat(string, str);
				if(slot[2] == 0) strcat(string, "Чат банды\t[{f44747}Отключен{FFFFFF}]\n");
  			 	else strcat(string, "Чат банды\t[{61dd61}Включен{FFFFFF}]\n");
				if(slot[3] == 0) strcat(string, "Заявки в банду\t[{f44747}Отключены{FFFFFF}]\n");
   				else strcat(string, "Заявки в банду\t[{61dd61}Включены{FFFFFF}]\n");
				format(str, sizeof(str), "Заявки на вступление\t[{61dd61}Около: %d{FFFFFF}]\nВойны между бандами\nРасформировать банду", slot[5]);
   				strcat(string, str);
   				ShowPlayerDialogZS(playerid, 7401, DIALOG_STYLE_TABLIST, "Управление бандой", string, "Выбрать", "Назад");
				getdate(slot[0], slot[1], slot[2]);
				gettime(slot[3], slot[4], slot[5]);
				format(str, sizeof(str), "%02d.%02d.%d,%d:%d:%d", slot[2], slot[1], slot[0], slot[3], slot[4], slot[5]);
   				mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE gang SET lastaction='%s' WHERE id=%d", str, PlayerInfo[playerid][pGang][0]);
				return mysql_tquery(MysqlConnectID, string);
   			}
			if(PlayerInfo[playerid][pGang][1] <= 10) ShowPlayerDialogZS(playerid, 7401, DIALOG_STYLE_LIST, "Управление бандой", "Информация о банде\nЧлены банды в сети\nВойны между бандами\nПокинуть банду", "Выбрать", "Назад");
   			else ShowPlayerDialogZS(playerid, 7401, DIALOG_STYLE_LIST, "Управление бандой", "Информация о банде\nЧлены банды в сети\nЗаявки на вступление\nВойны между бандами\nПокинуть банду", "Выбрать", "Назад");
			return 1;
		}
		case 5:
		{
			if(rows == 0) return ShowPlayerDialogZS(playerid, 7400, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}Данный банда не найдена.", "Назад", "Закрыть", 1085);
			new string[81], str[27], slot[7];
            cache_get_value_name(0, "action", string);
            sscanf(string, "p<,>a<d>[6]", slot);
            if(test == 8) cache_get_value_name_int(0, "visible", slot[6]);
			switch(test)
			{
				case 0:
				{
					if(slot[0] == 0) slot[0] = 1;
            		else slot[0] = 0;
            		foreach(new i: Player) if(PlayerInfo[i][pGang][0] == PlayerInfo[playerid][pGang][0]) GangCheck[i][0] = slot[0];
				}
				case 1:
				{
				    if(slot[1] == 0) slot[1] = 1;
            		else slot[1] = 0;
            		foreach(new i: Player) if(PlayerInfo[i][pGang][0] == PlayerInfo[playerid][pGang][0]) GangCheck[i][2] = slot[1];
				}
				case 2:
				{
					if(slot[2] == 0) slot[2] = 1;
            		else slot[2] = 0;
				}
				case 3:
				{
				    foreach(new i: Player) if(PlayerInfo[i][pGang][0] == PlayerInfo[playerid][pGang][0]) GangCheck[i][1] = GangCheck[playerid][1];
                    slot[5] = GangCheck[playerid][1];
				}
				case 4:
				{
				    if(slot[3] >= 50) return ShowPlayerDialogZS(playerid, 7442, DIALOG_STYLE_MSGBOX, "{FF0000}Принять заявку", "{FFFFFF}Нет свободных мест в банде!", "Назад", "Закрыть", 1085);
				    slot[3] += 1; //Игроки прибавить
					mysql_format(MysqlConnectID, string, sizeof(string), "SELECT name,gang1 FROM profile WHERE id=%d LIMIT 1", GetPVarInt(playerid, "GangListitem"));
					mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 8, 0);
				}
				case 5: if(slot[3] >= 1) slot[3] -= 1; //Игроки отбавить
				case 6:
				{
   					if(slot[4] >= 50) return ShowPlayerDialogZS(playerid, 7442, DIALOG_STYLE_MSGBOX, "{FF0000}Запросить приглашение", "{FFFFFF}У данной банды превышен лимит заявок!", "Назад", "Закрыть", 1085);
				    slot[4] += 1;
				    PlayerInfo[playerid][pGang][3] = GetPVarInt(playerid, "GangListitem");
       				mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET gang1=%d WHERE id=%d", PlayerInfo[playerid][pGang][3], PlayerInfo[playerid][pRoomAccount]);
					mysql_tquery(MysqlConnectID, string);
   					format(string, sizeof(string), "{FFFFFF}Вы успешно подали заявку на вступление в банду #{10F441}%d{FFFFFF}.", GetPVarInt(playerid, "GangListitem"));
					ShowPlayerDialogZS(playerid, 7442, DIALOG_STYLE_MSGBOX, "Запросить приглашение", string, "Назад", "Закрыть");
				}
				case 7: if(slot[4] >= 1) slot[4] -= 1;
				case 8:
				{
				    if(slot[6] == 0) slot[6] = 1;
				    else slot[6] = 0;
				    mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE gang SET visible=%d WHERE id=%d", slot[6], GetPVarInt(playerid, "GangListitem"));
					mysql_tquery(MysqlConnectID, string);
					mysql_format(MysqlConnectID, string, sizeof(string), "SELECT lastaction,action,visible FROM gang WHERE id=%d LIMIT 1", GetPVarInt(playerid, "GangListitem"));
					return mysql_tquery(MysqlConnectID, string, "GangPublic", "ii", playerid, 3);
				}
			}
            format(str, sizeof(str), "%d,%d,%d,%d,%d,%d", slot[0], slot[1], slot[2], slot[3], slot[4], slot[5]);
            mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE gang SET action='%s' WHERE id=%d", str, PlayerInfo[playerid][pGang][0]);
			mysql_tquery(MysqlConnectID, string);
			if(test <= 3)
			{
				mysql_format(MysqlConnectID, string, sizeof(string), "SELECT name,crewtag,motto,action FROM gang WHERE id=%d LIMIT 1", PlayerInfo[playerid][pGang][0]);
				mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 4, 0);
   			}
			return 1;
		}
		case 6:
		{
		    if(rows == 0) return ShowPlayerDialogZS(playerid, 7410, DIALOG_STYLE_MSGBOX, "{FF0000}Заявки на вступление", "{FFFFFF}В данный момент нет ни одной заявки.", "Назад", "Закрыть", 1085);
            new string[486], str[43], slott1[24], slot;
            strcat(string, "Номер\tНикнейм\tСтатус\n");
            for(new idx; idx < 10; idx ++)
		  	{
				if(idx >= rows)
				{
				    if(TopList[playerid][1] >= 10) TopList[playerid][2] = idx;
					break;
				}
				cache_get_value_name_int(idx, "id", GangList[playerid][idx]);
		  	    cache_get_value_name(idx, "name", slott1);
		  	    cache_get_value_name_int(idx, "online", slot);
				if(slot == 0) format(str, sizeof(str), "#%d\t%s\tВне сети\n", TopList[playerid][1]+idx+1, slott1);
				else format(str, sizeof(str), "#%d\t%s\tВ сети\n", TopList[playerid][1]+idx+1, slott1);
				strcat(string, str);
		  	}
		  	if(rows >= 10) strcat(string, "> Дальше");
    		if(TopList[playerid][1] >= 10) strcat(string, "\n< Назад\n> Поиск по никнейму");
		  	return ShowPlayerDialogZS(playerid, 7416, DIALOG_STYLE_TABLIST_HEADERS, "Заявки на вступление", string, "Выбрать", "Назад");
		}
		case 7:
		{
		    if(rows == 0) return ShowPlayerDialogZS(playerid, 7400, DIALOG_STYLE_MSGBOX, "{FF0000}Статистика игрока", "{FFFFFF}Данный игрок не найден.", "Назад", "Закрыть", 1085);
			new string[274], slot[5], slot1[24], slot2[51];
            switch(test)
            {
                case 2:
                {
                    new slotd[24];
   			    	cache_get_value_name(0, "owner", slot1);
   			    	cache_get_value_name(0, "datetime", slot2);
                	cache_get_value_name(0, "lastaction", slotd);
   			    	cache_get_value_name_int(0, "rating", slot[0]);
					format(string, sizeof(string), "{FFFFFF}Номер банды: {61dd61}%d{FFFFFF}\nСоздатель банды: {61dd61}%s{FFFFFF}\nДата и время создания: {61dd61}%s{FFFFFF}\nПоследние действия: {61dd61}%s{FFFFFF}\nРейтинг банды: {61dd61}%d", PlayerInfo[playerid][pGang][0], slot1, slot2, slotd, slot[0]);
					return ShowPlayerDialogZS(playerid, 7410, DIALOG_STYLE_MSGBOX, "Информация о банде", string, "Назад", "Закрыть");
                }
                case 3:
                {
                    cache_get_value_name(0, "motto", slot2);
                    format(string, sizeof(string), "{FFFFFF}Введите новое название своего девиза, от 4 до 50 символов:\nТекущий: {61dd61}%s", slot2);
                    return ShowPlayerDialogZS(playerid, 7413, DIALOG_STYLE_INPUT, "Изменить девиз", string, "Изменить", "Назад");
                }
            }
            cache_get_value_name(0, "name", slot1);
			cache_get_value_name_int(0, "level0", slot[0]);
			cache_get_value_name_int(0, "kills", slot[1]);
			cache_get_value_name_int(0, "deaths", slot[2]);
			cache_get_value_name(0, "timegame", slot2);
			sscanf(slot2, "p<,>d", slot[3]);
   			if(test == 1)
   			{
   			    cache_get_value_name(0, "gang", slot2);
	   			sscanf(slot2, "p<,>d", slot[4]);
   				format(string, sizeof(string), "{FFFFFF}Никнейм игрока: {61dd61}%s{FFFFFF}\nРанг: {61dd61}%d{FFFFFF}\nВремя в игре: {61dd61}%s{FFFFFF}\nКол-во убийств: {61dd61}%d{FFFFFF}\nКол-во смертей: {61dd61}%d{FFFFFF}\nРанг в банде: {61dd61}%s{FFFFFF}", slot1, slot[0], Convert(slot[3]), slot[1], slot[2], GangRank[playerid][slot[4]-1]);
                return ShowPlayerDialogZS(playerid, 7484, DIALOG_STYLE_MSGBOX, "Статистика игрока", string, "Назад", "Закрыть");
			}
			format(string, sizeof(string), "{FFFFFF}Никнейм игрока: {61dd61}%s{FFFFFF}\nРанг: {61dd61}%d{FFFFFF}\nВремя в игре: {61dd61}%s{FFFFFF}\nКол-во убийств: {61dd61}%d{FFFFFF}\nКол-во смертей: {61dd61}%d", slot1, slot[0], Convert(slot[3]), slot[1], slot[2]);
			return ShowPlayerDialogZS(playerid, 7436, DIALOG_STYLE_MSGBOX, "Статистика игрока", string, "Назад", "Закрыть");
		}
		case 8:
		{
		    if(rows == 0) return ShowPlayerDialogZS(playerid, 7436, DIALOG_STYLE_MSGBOX, "{FF0000}Принять заявку | Отклонить заявку", "{FFFFFF}Данный игрок не найден.", "Назад", "Закрыть", 1085);
			new string[104], slot[24], slott[2], srt[14];
            cache_get_value_name(0, "name", slot);
            cache_get_value_name_int(0, "gang1", slott[0]);
			if(test == 0)
			{
				foreach(new i: Player)
            	{
            		if(strcmp(slot, PlayerName[i], false) == 0)
		        	{
		        		format(string, sizeof(string), "Ваша заявка в банду #{4FDF24}%d {FFFFFF}была принята {4FDF24}%s{FFFFFF}.", PlayerInfo[playerid][pGang][0], PlayerName[playerid]);
						SendClientMessage(i, 0xFFFFFFAA, string);
						PlayerInfo[i][pGang][0] = PlayerInfo[playerid][pGang][0];
						PlayerInfo[i][pGang][1] = 1;
						PlayerInfo[i][pGang][2] = 0;
						PlayerInfo[i][pGang][3] = 0;
						slott[1] = 1;
						mysql_format(MysqlConnectID, string, sizeof(string), "SELECT name,crewtag,action,rank FROM gang WHERE id=%d LIMIT 1", PlayerInfo[playerid][pGang][0]);
						mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", i, 14, 0);
		   			}
				}
				if(slott[1] == 1) mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET gang0=%d,gang1=0,gang='1,0' WHERE name='%s'", PlayerInfo[playerid][pGang][0], slot);
				else mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET gang0=%d,gang1=0,gang='1,-2' WHERE name='%s'", PlayerInfo[playerid][pGang][0], slot);
				mysql_tquery(MysqlConnectID, string);
		    	format(string, sizeof(string), "{FFFFFF}Вы успешно приняли заявку игрока {10F441}%s{FFFFFF}.", slot);
		    	ShowPlayerDialogZS(playerid, 7436, DIALOG_STYLE_MSGBOX, "Принять заявку", string, "Назад", "Закрыть", 1138);
			}
			else
			{
				foreach(new i: Player)
            	{
            		if(strcmp(slot, PlayerName[i], false) == 0)
		        	{
		        		format(string, sizeof(string), "Ваша заявка в банду #{4FDF24}%d {FFFFFF}была отклонена {4FDF24}%s{FFFFFF}.", PlayerInfo[playerid][pGang][0], PlayerName[playerid]);
						SendClientMessage(i, 0xFFFFFFAA, string);
						PlayerInfo[playerid][pGang][2] = 0;
						slott[1] = 1;
 		  			}
				}
				if(slott[1] == 0)
				{
					format(srt, sizeof(srt), "0,%d", slott[0]);
					mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET gang1=-1,gang='%s' WHERE name='%s'", srt, slot);
				}
				else mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET gang1=0,gang='0,0' WHERE name='%s'", slot);
				mysql_tquery(MysqlConnectID, string);
    			format(string, sizeof(string), "{FFFFFF}Вы успешно отклонили заявку игрока {10F441}%s{FFFFFF}.", slot);
				ShowPlayerDialogZS(playerid, 7436, DIALOG_STYLE_MSGBOX, "Отклонить заявку", string, "Назад", "Закрыть", 1138);
			}
			mysql_format(MysqlConnectID, string, sizeof(string), "SELECT action FROM gang WHERE id=%d LIMIT 1", PlayerInfo[playerid][pGang][0]);
			mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 5, 7);
		}
		case 9:
		{
			if(rows == 0)
			{
			    if(test == 1) ShowPlayerDialogZS(playerid, 7436, DIALOG_STYLE_MSGBOX, "{FF0000}Заявки на вступление", "{FFFFFF}Данный игрок не подавал заявку в данную банду!", "Назад", "Закрыть", 1085);
				else ShowPlayerDialogZS(playerid, 7484, DIALOG_STYLE_MSGBOX, "{FF0000}Поиск по никнейму", "{FFFFFF}Данный игрок не найден!", "Назад", "Закрыть", 1085);
				return 1;
			}
			new slot;
            cache_get_value_name_int(0, "id", slot);
            if(test == 1)
            {
            	SetPVarInt(playerid, "GangListitem", slot);
				return ShowPlayerDialogZS(playerid, 7426, DIALOG_STYLE_TABLIST, "Заявки на вступление", "Статистика игрока\nПринять заявку\nОтклонить заявку", "Выбрать", "Назад");
            }
			if(PlayerInfo[playerid][pGang][1] >= 11)
  			{
   				SetPVarInt(playerid, "GangListP", slot);
 				ShowPlayerDialogZS(playerid, 7454, DIALOG_STYLE_LIST, "Члены банды в сети", "Статистика игрока\nИзменить ранг игрока\nВыгнать игрока из банды", "Выбрать", "Назад");
			}
			else
			{
		 		new string[91];
				mysql_format(MysqlConnectID, string, sizeof(string), "SELECT name,level0,kills,deaths,timegame,gang FROM profile WHERE `id`='%d' LIMIT 1", slot);
				mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 7, 1);
			}
			return 1;
		}
		case 10:
		{
		    if(rows == 0) return ShowPlayerDialogZS(playerid, 7436, DIALOG_STYLE_MSGBOX, "{FF0000}Члены банды в сети", "{FFFFFF}Нет не одного члена банды в сети.", "Назад", "Закрыть", 1085);
			new string[693], str[63], slott1[24], slott2[15], slot[2];
            strcat(string, "Номер\tНикнейм\tРанг\tСтатус\n");
            for(new idx; idx < 10; idx ++)
		  	{
				if(idx >= rows)
				{
				    if(TopList[playerid][1] >= 10) TopList[playerid][2] = idx;
					break;
				}
				cache_get_value_name_int(idx, "id", GangList[playerid][idx]);
		  	    cache_get_value_name(idx, "name", slott1);
		  	    cache_get_value_name_int(idx, "online", slot[0]);
		  	    cache_get_value_name(idx, "gang", slott2);
		  	    sscanf(slott2, "p<,>d", slot[1]);
				if(slot[0] == 0) format(str, sizeof(str), "#%d\t%s\t%s\tВне сети\n", TopList[playerid][1]+idx+1, slott1, GangRank[playerid][slot[1]-1]);//47
				else format(str, sizeof(str), "#%d\t%s\t%s\tВ сети\n", TopList[playerid][1]+idx+1, slott1, GangRank[playerid][slot[1]-1]);
				strcat(string, str);
		  	}
		  	if(rows >= 10) strcat(string, "> Дальше");
    		if(TopList[playerid][1] >= 10) strcat(string, "\n< Назад\n> Поиск по никнейму");
		  	return ShowPlayerDialogZS(playerid, 7414, DIALOG_STYLE_TABLIST_HEADERS, "Члены банды в сети", string, "Выбрать", "Назад");
		}
		case 11:
		{
		    if(rows == 0) return ShowPlayerDialogZS(playerid, 7484, DIALOG_STYLE_MSGBOX, "{FF0000}Изменить ранг игрока", "{FFFFFF}Данная банда не найдена.", "Назад", "Закрыть", 1085);
			new stringf[365], slota[13][16], str[28], slotl;
			if(PlayerInfo[playerid][pGang][1] >= 13) slotl = 12;
			else slotl = 11;
            cache_get_value_name(0, "rank", stringf);
            sscanf(stringf, "p<,>a<s[16]>[13]", slota);
            stringf = "";
            for(new z; z < slotl; z ++)
            {
                format(str, sizeof(str), "Ранг %d\t%s\n", z+1, slota[z]);
                strcat(stringf, str);
            }
			return ShowPlayerDialogZS(playerid, 7464, DIALOG_STYLE_TABLIST, "Изменить ранг игрока", stringf, "Выбрать", "Назад");
		}
		case 12:
		{
		    if(rows == 0) return ShowPlayerDialogZS(playerid, 7484, DIALOG_STYLE_MSGBOX, "{FF0000}Выгнать игрока из банды", "{FFFFFF}Данный игрок не найден!", "Назад", "Закрыть", 1138);
            new string[100], slot[24], slott[2], slot1[8];
            cache_get_value_name(0, "name", slot);
            cache_get_value_name(0, "gang0", slott[1]);
            cache_get_value_name(0, "gang", slot1);
            sscanf(slot1, "p<,>d", slott[0]);
            if(slott[1] != PlayerInfo[playerid][pGang][0]) return ShowPlayerDialogZS(playerid, 7484, DIALOG_STYLE_MSGBOX, "{FF0000}Выгнать игрока из банды", "{FFFFFF}Данный игрок не найден в банде!", "Назад", "Закрыть", 1085);
            if(PlayerInfo[playerid][pGang][1] < slott[0] || PlayerInfo[playerid][pGang][1] == slott[0]) return ShowPlayerDialogZS(playerid, 7484, DIALOG_STYLE_MSGBOX, "{FF0000}Выгнать игрока из банды", "{FFFFFF}Вы не можете выгнать данного игрока!", "Назад", "Закрыть", 1085);
            foreach(new i: Player)
            {
	            if(strcmp(slot, PlayerName[i], false) == 0)
				{
				    format(string, sizeof(string), "Вы были выгнаны из банды #{4FDF24}%d{FFFFFF}, выгнал {4FDF24}%s{FFFFFF}.", PlayerInfo[playerid][pGang][0], PlayerName[playerid]);
				    SendClientMessage(i, 0xFFFFFFAA, string);
				    PlayerInfo[i][pGang][0] = 0;
				    PlayerInfo[i][pGang][1] = 0;
				    PlayerInfo[i][pGang][2] = 0;
				    slott[0] = 1;
				}
			}
			if(slott[0] == 0) mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET gang0=0,gang1=0,gang='0,%d' WHERE id=%d", PlayerInfo[playerid][pGang][0], GetPVarInt(playerid, "GangListP"));
			else mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET gang0=0,gang1=0,gang='0,0' WHERE id=%d", GetPVarInt(playerid, "GangListP"));
	 		mysql_tquery(MysqlConnectID, string);
	 		format(string, sizeof(string), "{FFFFFF}Вы успешно выгнали игрока {4FDF24}%s {FFFFFF}из банды.", slot);
			ShowPlayerDialogZS(playerid, 7484, DIALOG_STYLE_MSGBOX, "Выгнать игрока из банды", string, "Назад", "Закрыть", 1138);
			mysql_format(MysqlConnectID, string, sizeof(string), "SELECT action FROM gang WHERE id=%d LIMIT 1", PlayerInfo[playerid][pGang][0]);
			return mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 5, 5);
 		}
 		case 13:
 		{
            if(rows != 0)
			{
				if(test == 0) ShowPlayerDialogZS(playerid, 7411, DIALOG_STYLE_INPUT, "Изменить название", "{FFFFFF}Введите новое название своей банды, от 2 до 20 символов:\n{FF0000}Данное название уже занято!", "Изменить", "Назад", 1085);
				else ShowPlayerDialogZS(playerid, 7412, DIALOG_STYLE_INPUT, "Изменить тег", "{FFFFFF}Введите новый тег своей банды, 4 символа:\nТег банды - это короткое обозначение вашей банды.\n{FF0000}Данный тег уже занят!", "Изменить", "Назад", 1085);
				return 1;
			}
			new string[92], name[21];
			GetPVarString(playerid, "GangSName", name, sizeof(name));
			DeletePVar(playerid, "GangSName");
			if(test == 1)
			{
			    mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE gang SET crewtag='%s' WHERE id=%d", name, PlayerInfo[playerid][pGang][0]);
				mysql_tquery(MysqlConnectID, string);
				foreach(new i: Player) if(PlayerInfo[i][pGang][0] == PlayerInfo[playerid][pGang][0]) strmid(GangTag[i], name, 0, 5);
				format(string, sizeof(string), "{FFFFFF}Вы успешно изменили тег своей банды на: {10F441}%s{FFFFFF}.", name);
    			return ShowPlayerDialogZS(playerid, 7410, DIALOG_STYLE_MSGBOX, "Изменить тег", string, "Назад", "Закрыть", 1138);
			}
            mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE gang SET name='%s' WHERE id=%d", name, PlayerInfo[playerid][pGang][0]);
			mysql_tquery(MysqlConnectID, string);
            foreach(new i: Player) if(PlayerInfo[i][pGang][0] == PlayerInfo[playerid][pGang][0]) strmid(GangName[i], name, 0, 21);
			format(string, sizeof(string), "{FFFFFF}Вы успешно изменили название своей банды на: {10F441}%s{FFFFFF}.", name);
			return ShowPlayerDialogZS(playerid, 7410, DIALOG_STYLE_MSGBOX, "Изменить название", string, "Назад", "Закрыть", 1138);
 		}
 		case 14:
 		{
            new string[208];
		 	if(rows == 0)
		 	{
				if(test == 2) format(string, sizeof(string), "Банда в которой вы находились #%d, была удалена!", PlayerInfo[playerid][pGang][0]);
				else format(string, sizeof(string), "Банда в которой вы находились #%d, не найдена! (возможна была расформирована)", PlayerInfo[playerid][pGang][0]);
			 	SendClientMessageZS(playerid, COLOR_RED, string, 1085);
			 	PlayerInfo[playerid][pGang][0] = 0;
		        PlayerInfo[playerid][pGang][1] = 0;
		        PlayerInfo[playerid][pGang][2] = 0;
		        PlayerInfo[playerid][pGang][3] = 0;
			 	mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET gang0=0,gang1=0,gang='0,0' WHERE id=%d", PlayerInfo[playerid][pRoomAccount]);
				return mysql_tquery(MysqlConnectID, string);
			}
			new slot[3], str[9];
			cache_get_value_name(0, "name", GangName[playerid]);
  		    cache_get_value_name(0, "crewtag", GangTag[playerid]);
			cache_get_value_name(0, "action", string);
			sscanf(string, "p<,>dddddd",
			GangCheck[playerid][0],//   Тег банды в чате
			GangCheck[playerid][2],//   Чат банды
			slot[0],//                  Заявки в банду вкл/выкл
			slot[1],//                  Человек в банде
			slot[2],//                  Заявок в банду
			GangCheck[playerid][1]);//  Цвет банды
			cache_get_value_name(0, "rank", string);
			sscanf(string, "p<,>s[15]s[15]s[15]s[15]s[15]s[15]s[15]s[15]s[15]s[15]s[15]s[15]s[15]", GangRank[playerid][0], GangRank[playerid][1], GangRank[playerid][2], GangRank[playerid][3], GangRank[playerid][4], GangRank[playerid][5], GangRank[playerid][6], GangRank[playerid][7], GangRank[playerid][8], GangRank[playerid][9], GangRank[playerid][10], GangRank[playerid][11], GangRank[playerid][12]);
			if(PlayerInfo[playerid][pGang][1] >= 11 && test == 0)
   			{
   			    if(slot[0] == 0) format(str, sizeof(str), "FF0000");
   			    else format(str, sizeof(str), "61dd61");
            	format(string, sizeof(string), "Человек в банде: {61dd61}%d {FFFFFF}| Заявки на вступление: {%s}%d", slot[1], str, slot[2]);
            	SendClientMessage(playerid, 0xFFFFFFAA, string);
	  		}
			return 1;
 		}
  		case 15:
  		{
  		    if(rows == 0) return ShowPlayerDialogZS(playerid, 7484, DIALOG_STYLE_MSGBOX, "{FF0000}Изменить ранг игрока", "{FFFFFF}Данный игрок не найден!", "Назад", "Закрыть", 1085);
			new string[118], str[20], slot[24], slotl[3];
            cache_get_value_name(0, "name", slot);
            cache_get_value_name_int(0, "gang0", slotl[0]);
            cache_get_value_name(0, "gang", string);
            sscanf(string, "p<,>d", slotl[1]);
			if(slotl[0] != PlayerInfo[playerid][pGang][0]) return ShowPlayerDialogZS(playerid, 7484, DIALOG_STYLE_MSGBOX, "{FF0000}Изменить ранг игрока", "{FFFFFF}Данный игрок не найден в банде!", "Назад", "Закрыть", 1085);
			if(PlayerInfo[playerid][pGang][0] < slotl[1] || slotl[1] == PlayerInfo[playerid][pGang][1]) return ShowPlayerDialogZS(playerid, 7484, DIALOG_STYLE_MSGBOX, "{FF0000}Изменить ранг игрока", "{FFFFFF}Вы не можете изменить ранг данному игроку!", "Назад", "Закрыть", 1085);
			format(str, sizeof(str), "%d,0", GetPVarInt(playerid, "GangListS")+1);
           	mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET gang='%s' WHERE name='%s'", str, slot);
			mysql_tquery(MysqlConnectID, string);
			foreach(new i: Player)
            {
	            if(strcmp(slot, PlayerName[i], false) == 0)
				{
				    PlayerInfo[i][pGang][1] = GetPVarInt(playerid, "GangListS")+1;
				    format(string, sizeof(string), "Ваш ранг в банде был изменен на {4FDF24}%s {FFFFFF}изменил {4FDF24}%s{FFFFFF}.", GangRank[playerid][GetPVarInt(playerid, "GangListS")], PlayerName[playerid]);
					SendClientMessage(i, 0xFFFFFFAA, string);
				}
			}
			format(string, sizeof(string), "{FFFFFF}Вы успешно изменили ранг игроку {4FDF24}%s {FFFFFF}на {4FDF24}%s{FFFFFF}.", slot, GangRank[playerid][GetPVarInt(playerid, "GangListS")]);
			ShowPlayerDialogZS(playerid, 7484, DIALOG_STYLE_MSGBOX, "Изменить ранг игрока", string, "Назад", "Закрыть", 1138);
            return DeletePVar(playerid, "GangListS");
	  	}
  		case 17:
  		{
  		    if(rows == 0) return ShowPlayerDialogZS(playerid, 7400, DIALOG_STYLE_MSGBOX, "{FF0000}Изменить название рангов", "{FFFFFF}Данная банда не найдена.", "Назад", "Закрыть", 1085);
            new stringg[390], slotc[13][16], str[208];
			cache_get_value_name(0, "rank", stringg);
            sscanf(stringg, "p<,>a<s[16]>[13]", slotc);
			if(test == 1)
			{
		 		GetPVarString(playerid, "GangRankListT", slotc[GetPVarInt(playerid, "GangRankList")], 15);
		 		format(str, sizeof(str), "%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s", slotc[0], slotc[1], slotc[2], slotc[3], slotc[4], slotc[5], slotc[6], slotc[7], slotc[8], slotc[9], slotc[10], slotc[11], slotc[12]);
                mysql_format(MysqlConnectID, stringg, sizeof(stringg), "UPDATE gang SET rank='%s' WHERE id=%d", str, PlayerInfo[playerid][pGang][0]);
				mysql_tquery(MysqlConnectID, stringg);
				format(stringg, sizeof(stringg), "{FFFFFF}Вы успешно изменил ранг #{10F441}%d {FFFFFF}на: {10F441}%s{FFFFFF}.", GetPVarInt(playerid, "GangRankList")+1, slotc[GetPVarInt(playerid, "GangRankList")]);
                ShowPlayerDialogZS(playerid, 7438, DIALOG_STYLE_MSGBOX, "Изменить название рангов", stringg, "Назад", "Закрыть", 1138);
                foreach(new i: Player)
            	{
	            	if(PlayerInfo[i][pGang][0] == PlayerInfo[playerid][pGang][0])
					{
                		mysql_format(MysqlConnectID, stringg, sizeof(stringg), "SELECT name,crewtag,action,rank FROM gang WHERE id=%d LIMIT 1", PlayerInfo[i][pGang][0]);
						mysql_tquery(MysqlConnectID, stringg, "GangPublic", "iii", i, 14, 1);
					}
				}
                DeletePVar(playerid, "GangRankList");
                return DeletePVar(playerid, "GangRankListT");
			}
            stringg = "";
            strcat(stringg, "Номер\tНазвание\t\n");
            for(new idx; idx < 13; idx ++)
            {
                format(str, sizeof(str), "Ранг %d\t%s\t\n", idx+1, slotc[idx]);
                strcat(stringg, str);
            }
            return ShowPlayerDialogZS(playerid, 7418, DIALOG_STYLE_TABLIST_HEADERS, "Изменить название рангов", stringg, "Выбрать", "Назад");
		}
		case 18:
		{
		    if(rows == 0) return ShowPlayerDialogZS(playerid, 7400, DIALOG_STYLE_MSGBOX, "{FF0000}Ошибка", "{FFFFFF}Данная банда не найдена.", "Назад", "Закрыть", 1085);
		    new string[279], str[31], slotf[24], slot[21], slot1, slot2[5], slot3[51], slot4[11];
		    cache_get_value_name(0, "owner", slotf);
			cache_get_value_name(0, "name", slot);
			cache_get_value_name(0, "crewtag", slot2);
			cache_get_value_name(0, "motto", slot3);
			cache_get_value_name(0, "lastaction", slot4);
			cache_get_value_name_int(0, "rating", slot1);
			format(string, sizeof(string), "{FFFFFF}Номер банды: {4FDF24}%d{FFFFFF}\nНазвание банды: {4FDF24}%s [%s]{FFFFFF}\nСоздатель банды: {4FDF24}%s{FFFFFF}\nРейтинг банды: {4FDF24}%d{FFFFFF}\nДевиз банды: {4FDF24}%s{FFFFFF}", GetPVarInt(playerid, "GangListitem"), slot, slot2, slotf, slot1, slot3);
            format(str, sizeof(str), "Статистика банды | %s", slot4);
			return ShowPlayerDialogZS(playerid, 7462, DIALOG_STYLE_MSGBOX, str, string, "Назад", "Закрыть");
		}
	}
    return 1;//5590
}

stock Convert(number)
{
    new timers[3], string[15];
	timers[0] = floatround(number/3600);
	timers[1] = floatround((number/60)-(timers[0]*60));
	timers[2] = floatround(number-((timers[0]*3600)+(timers[1]*60)));
	if(timers[0] >= 1) format(string, sizeof(string), "%d:%02d:%02d", timers[0], timers[1], timers[2]);
	else format(string, sizeof(string), "%02d:%02d", timers[1], timers[2]);
	return string;
}

public OnPlayerText(playerid, text[])
{
    if(PlayerCheatCheck[playerid] == 1) return 0;
   	if(ChatTimeStop[playerid] > gettime())
	{
	    ChatTimeStop[playerid] = gettime() + 2;
	    ProtectionFlooding[playerid][2] += 1;
		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		if(ProtectionFlooding[playerid][2] >= 8) IsProtectionFlooding(playerid, "общим чатом", "2.2");
		else SendClientMessage(playerid, COLOR_RED, "Не пишите сообщения слишком часто!");
	    return 0;
	}
	if(PlayerLogged[playerid] == 0) return 0;
	if(Spawned[playerid] == false && Observation[playerid][1] == 0)
	{
	    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	    SendClientMessage(playerid, COLOR_RED, "Вы должны быть заспавлены для использование Общего чата!");
		return 0;
	}
	if(PlayerInfo[playerid][pMuted] != 0)
	{
	    new string[48];
	    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
	    format(string, sizeof(string), "У вас закрыт доступ к Общему чату на: %s", Convert(PlayerInfo[playerid][pMuted]));
 		SendClientMessage(playerid, COLOR_RED, string);
		return 0;
	}
	if(strlen(text) == strlen(ChatMsgStop[playerid]) && !strcmp(ChatMsgStop[playerid], text, false))
	{
	    ProtectionFlooding[playerid][2] += 1;
 		PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
 		if(ProtectionFlooding[playerid][2] >= 8) IsProtectionFlooding(playerid, "общим чатом повтор", "2.2");
		else SendClientMessage(playerid, COLOR_RED, "Пожалуйста, не пишите повторные сообщения!");
 		return 0;
	}
	format(ChatMsgStop[playerid], 128, text);
    ChatTimeStop[playerid] = gettime() + 2;
    new string[144], clanshow[25];
    for(new x = 0; x < sizeof(InvalidWords); x ++)
	{
		if(strfind(text, InvalidWords[x], true) == 0)
 		{
			SendClientMessage(playerid, COLOR_RED, "Пожалуйста, не пишите запрещенные слова!");
			format(string, sizeof(string), "Игрок %s (ID: %d) написал запрещенное слово: {808080}%s", PlayerName[playerid], playerid, InvalidWords[x]);
			ABroadCast(0xC3C3C3AA, string, 0, 4);
			return 0;
		}
	}
	if(GangCheck[playerid][0] == 1 && PlayerInfo[playerid][pGang][0] >= 1) format(clanshow, sizeof(clanshow), "{%06x}[%s] {%06x}", GangCheck[playerid][1], GangTag[playerid], PlayerColor[playerid] >>> 8);
	format(string, sizeof(string), "%s%s(%d): {FFFFFF}%s", clanshow, PlayerName[playerid], playerid, text);
	if(PlayerInfo[playerid][pFreeMode] == 0) ABroadCast(PlayerColor[playerid], string, 1, 0);
	else ABroadCast(0xFFFFFFAA, string, 1, 0);
	return 0;
}

stock SendClientMessageZS(playerid, color, const message[], soundid = 0)
{
	if(!IsPlayerConnected(playerid) && PlayerLogged[playerid] != 1) return 1;
	if(soundid >= 1003) PlayerPlaySound(playerid, soundid, 0.0, 0.0, 0.0);
	return SendClientMessage(playerid, color, message);
}
stock ABroadCast(color, const message[], choice, level, playerid = 0)
{
	foreach(new i: Player)
	{
		if(PlayerLogged[i] == 1)
		{
			switch(choice)
	        {
	            case 0: if(PlayerInfo[i][pAdmin] >= level) SendClientMessage(i, color, message);
				case 1:
				{
				    switch(level)
				    {
				        case 0: SendClientMessage(i, color, message);
				    	case 1: if(PlayerInfo[i][pMessage][5] == 0) SendClientMessage(i, color, message);
				    	case 2: if(ChoiceTeamCheck[i][6] == 1) SendClientMessage(i, color, message);
				    	case 3: if(ChoiceTeamCheck[i][6] == 2) SendClientMessage(i, color, message);
				    	case 4: if(ChoiceTeamCheck[i][6] == 3) SendClientMessage(i, color, message);
					}
				}
				case 2: if(ChoiceTeamCheck[i][2] == level) SendClientMessage(i, color, message);
				case 3: if(PlayerInfo[i][pMessage][2] == 1) SendClientMessage(i, color, message);
				case 4: if(PlayerInfo[i][pMessage][0] == 1) SendClientMessage(i, color, message);
				case 5: if(PlayerInfo[i][pMessage][4] == 1 && PlayerInfo[i][pAdmin] >= level) SendClientMessage(i, color, message);
				case 6: if(PlayerInfo[i][pGang][0] == PlayerInfo[playerid][pGang][0]) SendClientMessage(i, color, message);
				case 7: if(PlayerInfo[i][pMessage][3] == 1) SendClientMessage(i, color, message);
			}
		}
	}
    return 1;
}

stock GameTextForPlayerZS(playerid, const string[], const stringr[], timers, style, soundid = 0)
{
    if(PlayerInfo[playerid][pRussifier][0] == 0) GameTextForPlayer(playerid, string, timers, style);
    else GameTextForPlayer(playerid, stringr, timers, style);
    if(soundid >= 1003) PlayerPlaySound(playerid, soundid, 0.0, 0.0, 0.0);
	return 1;
}

stock ServerSystem(i)
{
	if(PlayerLogged[i] == 1)
	{
	    if(GmTestCheck[i][0] >= 1)
	    {
        	GmTestCheck[i][0] -= 1;
			if(GmTestCheck[i][0] == 1)
			{
			    new string[92], Float: health;
				GetPlayerHealth(GmTestCheck[i][1], health);
				if(100 == health)
				{
				    if(Spawned[GmTestCheck[i][1]] == true) format(string, sizeof(string), "Игрок: {4FDF24}%s (ID: %d){FFFFFF}, возможно использует {FF0000}God Mod!", PlayerName[GmTestCheck[i][1]], GmTestCheck[i][1]);
				    else format(string, sizeof(string), "Игрок: {4FDF24}%s (ID: %d){FFFFFF}, использует {FF0000}God Mod!", PlayerName[GmTestCheck[i][1]], GmTestCheck[i][1]);
					SendClientMessage(i, 0xFFFFFFAA, string);
					LogMysql(GmTestCheck[i][1], "God Mod Yes");
				}
				else
				{
				    format(string, sizeof(string), "Игрок: {4FDF24}%s (ID: %d){FFFFFF}, не использует {4FDF24}God Mod.", PlayerName[GmTestCheck[i][1]], GmTestCheck[i][1]);
					SendClientMessage(i, 0xFFFFFFAA, string);
					LogMysql(GmTestCheck[i][1], "God Mod No");
				}
				SetPlayerHealth(GmTestCheck[i][1], Health[GmTestCheck[i][1]]);
				if(Armour[GmTestCheck[i][1]][0] >= 1) SetPlayerArmour(GmTestCheck[i][1], Armour[GmTestCheck[i][1]][0]);
				GmTestCheck[i][0] = 0;
				GmTestCheck[GmTestCheck[i][1]][2] = 0;
				HealthCheck[GmTestCheck[i][1]][0] = 4;
			}
 		}
 		if(Observation[i][1] == 1 && Pause[i][1] <= 3)
	 	{
	 	    new string[54], Float: health, vehicleid;
	        vehicleid = GetPlayerVehicleID(Observation[i][0]);
		    GetVehicleHealth(vehicleid, health);
	 	    if(IsPlayerInAnyVehicle(Observation[i][0]) && Observation[i][2] == 1)
	 	    {
	 	    	Observation[i][2] = 2;
	 	    	SetPlayerInteriorZS(i, GetPlayerInterior(Observation[i][0]));
	            SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(Observation[i][0]));
	            TogglePlayerSpectatingZS(i, 1);
	       	    PlayerSpectateVehicle(i, GetPlayerVehicleID(Observation[i][0]));
	 	    }
	 	    else if(Observation[i][2] == 2 && !IsPlayerInAnyVehicle(Observation[i][0]))
	 	    {
      			Observation[i][2] = 1;
	    		SetPlayerInteriorZS(i, GetPlayerInterior(Observation[i][0]));
		    	SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(Observation[i][0]));
		    	TogglePlayerSpectatingZS(i, 1);
		    	PlayerSpectatePlayer(i, Observation[i][0]);
	 	    }
	 	    if(IsPlayerInRangeOfPoint(i, 2.0, 50.0, 50.0, 50.0))
	 	    {
	 	    	GameTextForPlayerZS(i, "~n~~g~update", "~n~~g~O—®oўћe®њe", 1000, 4);
	 	    	SetPlayerInteriorZS(i, GetPlayerInterior(Observation[i][0]));
				SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(Observation[i][0]));
				TogglePlayerSpectatingZS(i, 1);
				if(IsPlayerInAnyVehicle(Observation[i][0])) PlayerSpectateVehicle(i, GetPlayerVehicleID(Observation[i][0]));
	 	    	else PlayerSpectatePlayer(i, Observation[i][0]);
	 	    }
	 	    if(PlayerInfo[i][pRussifier][1] >= 0)
		  	{
		  		format(string, sizeof(string), " ping: ~g~~h~%d ~w~~h~fps: ~g~~h~%d", GetPlayerPing(Observation[i][0]), GetPlayerFps(Observation[i][0]));
	        	TextDrawSetString(ArenaInfo[i][3], string);
	        	format(string, sizeof(string), " rank: ~g~~h~%d", PlayerInfo[Observation[i][0]][pLevel][0]);
	        	TextDrawSetString(ArenaInfo[i][0], string);
	        	format(string, sizeof(string), " we/am: ~g~~h~%d/%d", GetPlayerWeapon(Observation[i][0]), GetPlayerAmmo(Observation[i][0]));
	        	TextDrawSetString(ArenaInfo[i][1], string);
	        	if(IsPlayerInAnyVehicle(Observation[i][0])) format(string, sizeof(string), "speed: ~g~~h~%d ~w~~h~HP: ~g~~h~%.0f", GetPlayerSpeed(Observation[i][0]), health);
			 	else format(string, sizeof(string), "speed: ~g~~h~%d", GetPlayerSpeed(Observation[i][0]));
	        	TextDrawSetString(ArenaInfo[i][2], string);
		  	}
		  	if(!IsPlayerConnected(Observation[i][0]))
			{
			    Observation[i][0] = MAX_PLAYERS;
	 	    	SetCameraBehindPlayer(i);
	            TogglePlayerSpectatingZS(i, 0);
	            PlayerPlaySound(i, 1057, 0.0, 0.0, 10.0);
				TextDrawHideForPlayer(i, ArenaInfo[i][0]);
		    	TextDrawHideForPlayer(i, ArenaInfo[i][1]);
		    	TextDrawHideForPlayer(i, ArenaInfo[i][2]);
		    	TextDrawHideForPlayer(i, ArenaInfo[i][3]);
		    	TextDrawHideForPlayer(i, MenuProcurementIcon[i][1]);
	            SendClientMessage(i, COLOR_RED, "[Ошибка]: >> Данный игрок за кем вы наблюдали покинул игру.");
		   	}
	 	}
		if(SpawnCheck[i][4] >= 1)
	    {
		    SpawnCheck[i][4] -= 1;
		    if(SpawnCheck[i][4] == 1) SpawnCheck[i][4] = 0;
	    }
		if(SpeedCheck[i] == 1)
	    {
	        new string[13];
			format(string, sizeof(string), "~g~~h~~h~%d", GetPlayerSpeed(i));
			TextDrawSetString(ArenaInfo[i][10], string);
		}
		if(PlayerInfo[i][pInfoText][1] >= 1 && DamageTime[i][0] >= 1)
		{
		    DamageTime[i][0] -= 1;
		    if(DamageTime[i][0] == 1)
		    {
		        DamageTime[i][0] = 0;
		        switch(DamageTime[i][1])
		        {
		            case 1:
					{
						TextDrawHideForPlayer(i, ArenaInfo[i][0]);
						TextDrawHideForPlayer(i, ArenaInfo[i][10]);
	 				}
		            case 2:
					{
						TextDrawHideForPlayer(i, ArenaInfo[i][3]);
						TextDrawHideForPlayer(i, ArenaInfo[i][13]);
	 				}
		            case 3:
					{
						TextDrawHideForPlayer(i, ArenaInfo[i][1]);
						TextDrawHideForPlayer(i, ArenaInfo[i][11]);
	 				}
		        }
	 		}
	 	}
	 	if(PlayerInfo[i][pMuted] >= 1 && Spawned[i] == true)
		{
		    PlayerInfo[i][pMuted] -= 1;
		    if(PlayerInfo[i][pMuted] == 1)
		    {
		        PlayerInfo[i][pMuted] = 0;
      			PlayerPlaySound(i, 1138, 0.0, 0.0, 0.0);
      			SendClientMessage(i, 0xFFFFFFFF, "Вы теперь можете снова пользоваться {10F441}Общим чатом{FFFFFF}.");
				new string[38+10];
            	mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET muted=0 WHERE id=%d", PlayerInfo[i][pRoomAccount]);
            	mysql_tquery(MysqlConnectID, string);
		    }
		}
		if(PlayerInfo[i][pPrison] >= 1 && Spawned[i] == true)
		{
			new string[60];
			PlayerInfo[i][pPrison] -= 1;
			format(string, sizeof(string), "~g~~h~~h~%s", Convert(PlayerInfo[i][pPrison]));
			TextDrawSetString(ArenaInfo[i][10], string);
 		    /*if(!IsPlayerInRangeOfPoint(i, 12.0, 193.5954, 167.1975, 1003.0300))
			{
				switch(random(3))
                {
    				case 0: SetPlayerPosZS(i, 198.0586, 173.8647, 1003.0234, 0.0, 3, 201);
                    case 1: SetPlayerPosZS(i, 193.7625, 173.6763, 1003.0234, 0.0, 3, 201);
                    case 2: SetPlayerPosZS(i, 198.0842, 163.0792, 1003.0300, 0.0, 3, 201);
				}
			}*/
			if(PrisonCheckArena[i] == 1)
			{
			    PrisonCheckArena[i] = 0;
				switch(ChoiceTeamCheck[i][6])
				{
 					case 1:
 					{
						if(PlayerOnline[2] >= 1) PlayerOnline[2] -= 1;
						if(ChoiceTeamCheck[i][2] == 1 && Arena[5] >= 1) Arena[5] -= 1;
						else if(ChoiceTeamCheck[i][2] == 2 && Arena[6] >= 1) Arena[6] -= 1;
 					}
 					case 2:
					{
 						if(PlayerOnline[3] >= 1) PlayerOnline[3] -= 1;
 						if(ChoiceTeamCheck[i][2] == 1 && Arena[12] >= 1) Arena[12] -= 1;
						else if(ChoiceTeamCheck[i][2] == 2 && Arena[13] >= 1) Arena[13] -= 1;
					}
					case 3:
					{
 						if(PlayerOnline[4] >= 1) PlayerOnline[4] -= 1;
 						if(ChoiceTeamCheck[i][2] == 1 && Arena[19] >= 1) Arena[19] -= 1;
						else if(ChoiceTeamCheck[i][2] == 2 && Arena[20] >= 1) Arena[20] -= 1;
					}
				}
				for(new x; x < 10; x ++)
				{
					if(x < 8) ChoiceTeamCheck[i][x] = 0;
					else if(x == 2) ChoiceTeamCheck[i][2] = 256;
					if(x < 10) WeaponsSlotSpawn[i][x] = 0;
				}
				TeamColor(i);
    			PlayerColor[i] = 0xFFFFFFAA;
    			SetPlayerTeam(i, 255);
    			mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET scorecheck=0 WHERE id=%d", PlayerInfo[i][pRoomAccount]);
				mysql_tquery(MysqlConnectID, string);
			}
			else PrisonCheckArena[i] -= 1;
            if(PlayerInfo[i][pPrison] == 1)
	        {
	            PlayerInfo[i][pPrison] = 0;
	            if(PlayerInfo[i][pFreeMode] == 0) ChoiceTeamCheck[i][0] = 1;
	            PlayerPlaySound(i, 1138, 0.0, 0.0, 0.0);
	            TextDrawHideForPlayer(i, ArenaInfo[i][0]);
	            TextDrawHideForPlayer(i, ArenaInfo[i][10]);
	            SpawnPlayerZS(i);
	            SendClientMessage(i, 0xFFFFFFFF, "Вы успешно отсидели свой срок и были {10F441}выпущены{FFFFFF}.");
            	mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET prison=0 WHERE id=%d", PlayerInfo[i][pRoomAccount]);
            	mysql_tquery(MysqlConnectID, string);
	        }
		}
  		if(Pause[i][1] <= 3)
		{
		    if(ProtectionFlooding[i][0] >= 1) ProtectionFlooding[i][0] -= 1;
		    else if(ProtectionFlooding[i][2] >= 1) ProtectionFlooding[i][2] -= 1;
		    else if(ProtectionFlooding[i][3] >= 1) ProtectionFlooding[i][3] -= 1;
			else if(ProtectionFlooding[i][4] >= 1) ProtectionFlooding[i][4] -= 1;
			else if(ProtectionFlooding[i][5] >= 1) ProtectionFlooding[i][5] -= 1;
			if(PlayerInfo[i][pFloodCmd] >= 1)
		    {
		        PlayerInfo[i][pFloodCmd] -= 1;
		        if(PlayerInfo[i][pFloodCmd] == 1)
		        {
		            new string[59];
		        	PlayerInfo[i][pFloodCmd] = 0;
	            	ProtectionFlooding[i][1] = 0;
	            	mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET floodcmd=0 WHERE id=%d", PlayerInfo[i][pRoomAccount]);
					mysql_tquery(MysqlConnectID, string);
			  	}
		    }
		}
		if(Pause[i][1] <= 3)
	    {
		    PlayerInfo[i][pTimeGame][0] += 1;
		    if(PlayerInfo[i][pPrison] == 0)
		    {
		    	if(PlayerInfo[i][pFreeMode] == 0) PlayerInfo[i][pTimeGame][1] += 1;
		    	else PlayerInfo[i][pTimeGame][2] += 1;
		 	}
	    }
		if(MoneyInfoTime[i] != 0 && MoneyInfoTime[i] < gettime())
	    {
	        MoneyInfoTime[i] = 0;
	        TextDrawHideForPlayer(i, MoneyInfo[i]);
	    }
		if(Spawned[i] == true && SpawnCheck[i][3] >= 1)
	    {
	        if(!IsPlayerInRangeOfPoint(i, 1.0, SpawnKillPos[i][0], SpawnKillPos[i][1], SpawnKillPos[i][2]))
			{
			    new string[57];
			    SpawnCheck[i][3] -= 1;
			    if(PlayerInfo[i][pRussifier][0] == 0) format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~spawn kill: %d", SpawnCheck[i][3]);
	   			else format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~cЈaў® kњћћ: %d", SpawnCheck[i][3]);
			    GameTextForPlayer(i, string, 1000, 3);
			    if(PlayerInfo[i][pSpawnKill][1] == 0) PlayerPlaySound(i, 45400, 0.0, 0.0, 0.0);
			    if(SpawnCheck[i][3] == 0)
			    {
			    	SpawnCheck[i][3] = 0;
		            GameTextForPlayerZS(i, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~spawn kill stop", "~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~cЈaў® kњћћ c¦oЈ", 1000, 3);
			    }
	  		}
	  		else if(SpawnCheck[i][3] == PlayerInfo[i][pSpawnKill][0]) GameTextForPlayerZS(i, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~spawn kill", "~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~cЈaў® kњћћ", 1000, 3);
	    }
	    if(PassiveCheck[i] >= 1 || PlayerInfo[i][pPassive] == 1)
	    {
	        if(PassiveCheck[i] >= 1)
	        {
	            new string[25];
	            PassiveCheck[i] -= 1;
	            format(string, sizeof(string), "~g~~h~~h~%s", Convert(PassiveCheck[i] - 1));
		    	TextDrawSetString(ArenaInfo[i][11], string);
	        }
	        if(PassiveCheck[i] == 1)
	        {
	            PassiveCheck[i] = 0;
				new lang = PlayerInfo[i][pRussifier][1];
	            if(PlayerInfo[i][pPassive] == 0)
	            {
	                ResetPlayerWeaponsZS(i);
		        	PlayerInfo[i][pPassive] = 1;
		        	if(ChoiceItemsCheck[i][1] == 5) TextDrawSetString(ChoiceItems[i][10], TextDrawInfo[41][lang]);
		        	if(IsPlayerInAnyVehicle(i)) TextDrawSetString(ArenaInfo[i][11], TextDrawInfo[59][lang]);
                    else TextDrawSetString(ArenaInfo[i][11], TextDrawInfo[60][lang]);
	            }
	            else
	            {
					PlayerInfo[i][pPassive] = 0;
                 	TextDrawHideForPlayer(i, ArenaInfo[i][1]);
                 	TextDrawHideForPlayer(i, ArenaInfo[i][11]);
	                if(ChoiceItemsCheck[i][1] == 5) TextDrawSetString(ChoiceItems[i][10], TextDrawInfo[40][lang]);
	            }
	            new string[58];
	            mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET passive=%d WHERE id=%d", PlayerInfo[i][pPassive], PlayerInfo[i][pRoomAccount]);
                mysql_tquery(MysqlConnectID, string);
	        }
	        if(PlayerInfo[i][pPassive] == 1 && DuelCheck[i][12] == 0 && GetPlayerWeapon(i) != 0) SetPlayerArmedWeapon(i, 0);
	    }
		if(PlayerInfo[i][pFreeMode] == 0 && MenuProcurementTime[i] < gettime() && MenuProcurementTime[i] != 0)
	    {
		    MenuProcurementTime[i] = 0;
	    	TextDrawHideForPlayer(i, MenuProcurementIcon[i][0]);
	    	TextDrawHideForPlayer(i, MenuProcurementIcon[i][1]);
	    }
		if(InteractionCheck[i][0] >= 1 && InteractionCheck[i][1] >= 1)//5503
		{
		    switch(InteractionCheck[i][0])
		    {
				case 1:
				{
					InteractionCheck[i][1] -= 1;
					if(InteractionCheck[i][1] == 1)
					{
					    InteractionCheck[i][0] = 0;
					    InteractionCheck[i][1] = 0;
						DestroyDynamicObject(InteractionCheck[i][9]);
						InteractionCheck[i][9] = 0;
						Delete3DTextLabel(InteractionText[i][3]);
						CreateExplosion(InteractionPos[i][0], InteractionPos[i][1], InteractionPos[i][2], 7, 35.0);
					}
					else
					{
						new string[65];
						format(string, sizeof(string), "{FF0000}Бомба\n{FFFFFF}Взорвется через {4FDF24}%d {FFFFFF}секунд", InteractionCheck[i][1]-1);
						Update3DTextLabelText(InteractionText[i][3], 0xFFFFFFFF, string);
					}
				}
				case 2:
				{
				    InteractionCheck[i][1] -= 1;
		      		if(InteractionCheck[i][1] == 1)
		      		{
		      			new Float:Pos[3];
		      			if(Health[i] >= 0) HealthCheck[i][0] = 5;
		      		    InteractionCheck[i][0] = 0;
		      			InteractionCheck[i][1] = 0;
		      			GetPlayerPos(i, Pos[0], Pos[1], Pos[2]);
		      			CreateExplosion(Pos[0], Pos[1], Pos[2], 7, 5.0);
						SetPlayerHealth(i, 0.0);
						PlayerPlaySound(i, 0, 0.0, 0.0, 0.0);
						RemovePlayerAttachedObject(i, 7);
						if(InteractionCheck[i][10] != -1 && PlayerInfo[InteractionCheck[i][10]][pFreeMode] == 0)
						{
							KillInfoPlayer(InteractionCheck[i][10], i, 48, ScoreKill[0]);
							AchievementsInfo(7, InteractionCheck[i][10]);
                            InteractionCheck[InteractionCheck[i][10]][11] = -1;
							InteractionCheck[i][10] = -1;
						}
						else InteractionCheck[i][10] = -1;
		        	}
		        	else PlayerPlaySound(i, 19600, 0.0, 0.0, 0.0);
				}
				case 3:
				{
				    InteractionCheck[i][1] -= 1;
				    if(InteractionCheck[i][1] == 1)
				    {
				        InteractionCheck[i][0] = 0;
				    	InteractionCheck[i][1] = 0;
				    	InteractionCheck[i][InteractionCheck[i][5]+4] = CreatePickup(0, 1, InteractionPos[i][0], InteractionPos[i][1], InteractionPos[i][2], GetPlayerVirtualWorld(i));
						GameTextForPlayerZS(i, "~n~~w~Mina ~g~Activated", "~n~~w~Mњ®a —Ёћa ~g~ak¦њўњpoўa®a", 3000, 4);
				    }
				}
	 		}
		}
		if(Spawned[i] == true && PlayerCheatCheck[i] == 0)
	    {
	        if(IsPlayerInRangeOfPoint(i, 2.0, PosBreik[i][0], PosBreik[i][1], PosBreik[i][2]))
	        {
	            if(RegistrationHealth[i][0] >= 2) RegistrationHealth[i][0] -= 1;
	            if(Pause[i][0] == 1) Pause[i][1] += 1;
	            if(PlayerInfo[i][pAdmin] == 0 && PlayerInfo[i][pVip] == 0 && Pause[i][1] >= 900) PlayerCheat(i, "долгая пауза", "Вы были отсоединены от игрового сервера, за долгое бездействие.", 0, 1);
	        }
	        else
			{
				Pause[i][1] = 0;
				if(RegistrationHealth[i][0] == 1 && RegistrationHealth[i][2] == 0) RegistrationHealth[i][0] = 6;
	  		}
	  		if(DuelCheck[i][3] == 0)
	  		{
		  		if(IsPlayerInRangeOfPoint(i, 0.2, PosBreik[i][0], PosBreik[i][1], PosBreik[i][2]))
		  		{
		  		    Playidles[i] += 1;
		  		    if(Playidles[i] >= 90)
		  		    {
		  		        Playidles[i] = 0;
			  		    switch(random(6))
			  			{
		                    case 0: ApplyAnimation(i, "RAPPING", "RAP_A_LOOP", 4.1, false, true, true, false, 0); // махает руками
							case 1: ApplyAnimation(i, "PLAYIDLES", "SHIFT", 4.1, false, true, true, false, 0); // бездействие 0
							case 2: ApplyAnimation(i, "PLAYIDLES", "SHLDR", 4.1, false, true, true, false, 0); // бездействие 1
							case 3: ApplyAnimation(i, "PLAYIDLES", "STRETCH", 4.1, false, true, true, false, 0); // бездействие 2
							case 4: ApplyAnimation(i, "PLAYIDLES", "STRLEG", 4.1, false, true, true, false, 0); // бездействие 3
							case 5: ApplyAnimation(i, "PLAYIDLES", "TIME", 4.1, false, true, true, false, 0);
		 				}
	 				}
		  		}
		  		else if(Playidles[i] != 0) Playidles[i] = 0;
			}
	    }
	    if(DuelCheck[i][12] >= 1 && DuelCheck[i][3] >= 1)
	    {
	        if((GetPVarInt(i, "DuellCheck[6]") == 0 && !IsPlayerConnected(DuelCheck[i][0]) && IsPlayerConnected(DuelCheck[DuelCheck[i][0]][0])) || (GetPVarInt(i, "DuellCheck[6]") == 0 && IsPlayerConnected(DuelCheck[i][0]) && !IsPlayerConnected(DuelCheck[DuelCheck[i][0]][0])))
	       	{
	       	    switch(DuelCheck[i][3])
	       	    {
	       	        case 1: DuelCheck[i][12] = 309;
	       	        case 2:
	       	        {
	       	            DuelCheck[i][12] = 4;
	       	            DuelCheck[i][13] = 5;
	       	        }
	       	    }
	   	        SetPVarInt(i, "DuellCheck[6]", 1);
	   	        TogglePlayerControllableZS(i, 0);
	   	        PlayerPlaySound(i, 1085, 0.0, 0.0, 0.0);
	   	        GameTextForPlayerZS(i, "~n~~r~duel stopped", "~n~~r~duel stopped", 3000, 4);
	  			SendClientMessage(i, 0xFFFFFFFF, "Ваш соперник покинул {4FDF24}игру{FFFFFF}!");
			}
	        switch(DuelCheck[i][3])
	        {
	            case 1:
	            {
					new string[15];
					DuelCheck[i][12] += 1;
	       			format(string, sizeof(string), "~g~~h~~h~%s", Convert(DuelCheck[i][12] - 8));
	       			TextDrawSetString(ArenaInfo[i][10], string);
	        		switch(DuelCheck[i][12])
	        		{
	        		    case 4:
	        		    {
	        		        switch(DuelCheck[i][4])
					        {
					            case 1:
					            {
			        		        if(DuelCheck[i][14] == 1)
			        		        {
			        		            InterpolateCameraPos(i, -2710.325195, -269.955108, 14.167563, -2780.778564, -251.866394, 7.970200, 2500);
										InterpolateCameraLookAt(i, -2714.584960, -267.421295, 13.509325, -2775.784912, -251.845184, 7.720304, 2000);
			        		        }
			        		        else
			        		        {
			        		            InterpolateCameraPos(i, -2710.325195, -269.955108, 14.167563, -2720.622314, -252.206497, 7.962399, 2500);
										InterpolateCameraLookAt(i, -2714.584960, -267.421295, 13.509325, -2725.615966, -252.187744, 7.712503, 2000);
			        		        }
			 					}
			 					case 2:
			 					{
			 					    if(DuelCheck[i][14] == 1)
			        		        {
			        		            InterpolateCameraPos(i, 775.072875, -1306.423095, 16.946475, 756.020080, -1233.034667, 14.325599, 2500);
										InterpolateCameraLookAt(i, 772.688415, -1302.033935, 16.723896, 756.020080, -1238.028442, 14.075703, 2000);
			        		        }
			        		        else
			        		        {
			        		            InterpolateCameraPos(i, 775.072875, -1306.423095, 16.946475, 756.010070, -1284.185546, 14.331399, 1500);
										InterpolateCameraLookAt(i, 772.688415, -1302.033935, 16.723896, 756.010070, -1279.191772, 14.081503, 1000);
			        		        }
			 					}
			 					case 3:
			 					{
			 					    if(DuelCheck[i][14] == 1)
			        		        {
			        		            InterpolateCameraPos(i, 2543.574218, 2846.258544, 16.336822, 2613.602539, 2824.795898, 11.595199, 2500);
										InterpolateCameraLookAt(i, 2547.799072, 2843.666748, 15.678584, 2608.609863, 2824.688964, 11.345303, 2000);
			        		        }
			        		        else
			        		        {
			        		            InterpolateCameraPos(i, 2543.574218, 2846.258544, 16.336822, 2547.447021, 2824.225585, 11.595199, 1500);
										InterpolateCameraLookAt(i, 2547.799072, 2843.666748, 15.678584, 2552.440673, 2824.263183, 11.345303, 1000);
			        		        }
			 					}
							}
	        		    }
	        		    case 8://RaceS
	        		    {
	        		        SetCameraBehindPlayer(i);
							TogglePlayerControllableZS(i, 1);
							PlayerPlaySound(i, 17802, 0.0, 0.0, 0.0);
							TextDrawShowForPlayer(i, ArenaInfo[i][0]);
							TextDrawShowForPlayer(i, ArenaInfo[i][10]);
							new lang = PlayerInfo[i][pRussifier][1];
							TextDrawSetString(ArenaInfo[i][0], TextDrawInfo[62][lang]);
	       					GameTextForPlayerZS(i, "~g~Duel Started", "~g~ѓyЄћ© ®a¤aћc¬", 3000, 4);
	        		    }
	        		    case 308:
	        		    {
	        		        TogglePlayerControllableZS(i, 0);
			        		GameTextForPlayerZS(i, "~n~~r~time is over", "~n~~r~ўpeЇ¬ ўЁҐћo", 3000, 4);
							SendClientMessage(i, 0xFFFFFFFF, "Время дуэля вышно {4FDF24}Тайм-Аут{FFFFFF}!");
							if(ForbiddenArea[i][0] != 0)
							{
							    ForbiddenArea[i][0] = 0;
							    TextDrawHideForPlayer(i, ChangeMapp[i][5]);
								TextDrawHideForPlayer(i, ChangeMapp[i][6]);
								TextDrawHideForPlayer(i, NewLelevT[i][0]);
								TextDrawHideForPlayer(i, Glasses[i]);
							}
	        		    }
	        		    case 310: Spawned[i] = false;
						case 311:
						{
						    DestroyDynamicArea(ForbiddenArea[i][1]);
							ResetPlayerWeaponsZS(i);
	  					}
	        		    case 313:
	        		    {
	        		        SpawnCheck[i][0] = 1;
							if(PlayerInfo[i][pFreeMode] == 0) SetPlayerTeam(i, ChoiceTeamCheck[i][2] - 1);
							TextDrawHideForPlayer(i, ArenaInfo[i][0]);
							TextDrawHideForPlayer(i, ArenaInfo[i][10]);
			                DuelCheck[i][0] = MAX_PLAYERS;
			                for(new x; x < 29; x ++) DuelCheck[i][x] = 0;
							DeletePVar(i, "DuellCheck[6]");
							SpawnPlayerZS(i);
	        		    }
	        		}
	            }
	            case 2:
	            {
	                switch(DuelCheck[i][13])
	                {
	                    case 1:
	                    {
	                    	DuelCheck[i][12] -= 1;
	       					if(DuelCheck[i][12] == 1)
	       					{
	       					    new ran = random(255);
	       					    DuelCheck[i][12] = 80;
								DuelCheck[i][13] = 2;
	       					    DuelCheck[i][17] = ran;
	       					    DuelCheck[i][18] = ran;//"black", "white", "", "red", "", "pink", "yellow", "", "gray"
	       					    DuelCheck[i][21] = 0;
	       					    DuelCheck[i][23] = 0;
	       					    if(DuelCheck[i][14] == 1) PossSave[i][0] = DuelPosRace[DuelCheck[i][4] - 1][0], PossSave[i][1] = DuelPosRace[DuelCheck[i][4] - 1][1], PossSave[i][2] = DuelPosRace[DuelCheck[i][4] - 1][2], PossSave[i][3] = DuelPosRace[DuelCheck[i][4] - 1][3];
                                else PossSave[i][0] = DuelPosRace[DuelCheck[i][4] - 1][4], PossSave[i][1] = DuelPosRace[DuelCheck[i][4] - 1][5], PossSave[i][2] = DuelPosRace[DuelCheck[i][4] - 1][6], PossSave[i][3] = DuelPosRace[DuelCheck[i][4] - 1][7];
								ChoiceItemsCheck[i][1] = 1;
								CancelSelectTextDraw(i);
								TextDrawHideForPlayer(i, DuelInfo[i][0]);
						        TextDrawHideForPlayer(i, DuelInfo[i][1]);
								TextDrawHideForPlayer(i, DuelInfo[i][2]);
								TextDrawHideForPlayer(i, DuelInfo[i][3]);
								TextDrawHideForPlayer(i, DuelInfo[i][4]);
								TextDrawHideForPlayer(i, DuelInfo[i][5]);
								TextDrawHideForPlayer(i, DuelInfo[i][6]);
								TextDrawHideForPlayer(i, DuelInfo[i][7]);
								TextDrawHideForPlayer(i, DuelInfo[i][13]);
								TextDrawHideForPlayer(i, DuelInfo[i][15]);
								TextDrawHideForPlayer(i, DuelInfo[i][35]);
								TextDrawHideForPlayer(i, DuelInfo[i][36]);
								TextDrawHideForPlayer(i, DuelInfo[i][37]);
								TextDrawHideForPlayer(i, DuelInfo[i][38]);
								TextDrawHideForPlayer(i, DuelInfo[i][39]);
								TextDrawShowForPlayer(i, DuelInfo[i][8]);
								TextDrawShowForPlayer(i, DuelInfo[i][9]);
								TextDrawShowForPlayer(i, DuelInfo[i][10]);
								TextDrawShowForPlayer(i, DuelInfo[i][11]);
								TextDrawShowForPlayer(i, DuelInfo[i][12]);
								TextDrawShowForPlayer(i, DuelInfo[i][40]);
								TextDrawShowForPlayer(i, DuelInfo[i][41]);
								TextDrawShowForPlayer(i, DuelInfo[i][42]);
								TextDrawShowForPlayer(i, DuelInfo[i][43]);
								TextDrawShowForPlayer(i, DuelInfo[i][44]);
								TextDrawShowForPlayer(i, DuelInfo[i][14]);
								TextDrawShowForPlayer(i, DuelInfo[i][34]);
								TextDrawSetString(DuelInfo[i][14], "_");
								TextDrawShowForPlayer(i, DuelInfo[i][16]);
								TextDrawShowForPlayer(i, DuelInfo[i][17]);
	                            ChoiceItemsPosi[i] = InteractionPosition(i, PositionLines[1][6], 156.5, 155.0);
								new lang, string[8];
	                            lang = PlayerInfo[i][pRussifier][1];
	                            TextDrawSetString(DuelInfo[i][17], DuelText[0][lang]);
   	                            TextDrawSetStringZS(DuelInfo[i][8], DuelInfo[i][40], DuelText[24][lang], VehicleName[ClassVehicleDuel[DuelCheck[i][7]-1][DuelCheck[i][16]] - 400]);
                                format(string, sizeof(string), "~y~%d", DuelCheck[i][17]);
   	                            TextDrawSetStringZS(DuelInfo[i][9], DuelInfo[i][41], DuelText[25][lang], string);//
   	                            format(string, sizeof(string), "~y~%d", DuelCheck[i][18]);
							   	TextDrawSetStringZS(DuelInfo[i][10], DuelInfo[i][42], DuelText[26][lang], string);
							   	TextDrawSetStringZS(DuelInfo[i][11], DuelInfo[i][43], DuelText[27][lang], "~y~$0");
							   	TextDrawSetStringZS(DuelInfo[i][12], DuelInfo[i][44], DuelText[28][lang], "~y~no");
                                DuelCheck[i][15] = CreateVehicle(ClassVehicleDuel[DuelCheck[i][7]-1][DuelCheck[i][16]], PossSave[i][0], PossSave[i][1], PossSave[i][2], PossSave[i][3], DuelCheck[i][17], DuelCheck[i][18], -1);
								SetVehicleVirtualWorld(DuelCheck[i][15], DuelCheck[i][25]);
								LinkVehicleToInterior(DuelCheck[i][15], floatround(DuelCameraRace[DuelCheck[i][4] - 1][6]));
								SetVehicleNumberPlate(DuelCheck[i][15], "_");
								switch(DuelCheck[i][4])//RaceS
				 				{
				 				    case 1:
				 				    {
								       	if(DuelCheck[i][14] == 1)
								       	{
	                                        InterpolateCameraPos(i, -330.490386, 1529.565307, 85.111091, -295.573211, 1506.268554, 75.766014, 1500);
											InterpolateCameraLookAt(i, -305.963775, 1509.261108, 75.425109, -299.333557, 1509.506958, 75.155471, 1000);
										}
										else
										{
	                                        InterpolateCameraPos(i, -330.490386, 1529.565307, 85.111091, -307.718414, 1504.595092, 75.811439, 1500);
											InterpolateCameraLookAt(i, -305.963775, 1509.261108, 75.425109, -305.963775, 1509.261108, 75.425109, 1000);
				   						}
			  						}
			  						case 2:
			  						{
	                                    if(DuelCheck[i][14] == 1)
								       	{
	                                        InterpolateCameraPos(i, -2393.097900, -1949.473144, 314.158935, -2384.278808, -1942.627075, 303.977813, 1500);
											InterpolateCameraLookAt(i, -2388.311523, -1948.264404, 313.365417, -2388.383056, -1939.802124, 303.560638, 1000);
								       	}
								       	else
								       	{
										    InterpolateCameraPos(i, -2393.097900, -1949.473144, 314.158935, -2384.464111, -1933.602294, 304.799102, 1500);
											InterpolateCameraLookAt(i, -2388.311523, -1948.264404, 313.365417, -2387.760253, -1937.166992, 303.603759, 1000);
								       	}
			  						}
			  						case 3:
			  						{
			  						    switch(DuelCheck[i][14])
			  						    {
				  						    case 1:
									       	{
									   			SetPlayerCameraPos(i, -1402.347045, -231.367980, 1044.523559);
											    SetPlayerCameraLookAt(i, -1399.037597, -234.955963, 1043.440063);
		  							 		}
		  							 		case 2:
		  							 		{
		  							 		    SetPlayerCameraPos(i, -1388.976440, -230.638732, 1045.280517);
												SetPlayerCameraLookAt(i, -1391.213256, -234.949249, 1044.090576);
		  							 		}
	  							 			case 3:
											{
											    SetPlayerCameraPos(i, -1400.846069, -240.989151, 1044.515258);
												SetPlayerCameraLookAt(i, -1397.184082, -244.366271, 1044.085327);
											}
											case 4:
											{
							    				SetPlayerCameraPos(i, -1387.355346, -239.402618, 1045.395629);
												SetPlayerCameraLookAt(i, -1389.936523, -243.540328, 1044.292480);
											}
		  								}
			  						}
								}
	       					}
	                    }
	                    case 2:
	                    {
	                        DuelCheck[i][12] -= 1;
	                		new string[112], lang = PlayerInfo[i][pRussifier][1];
                            format(string, sizeof(string), TextDrawInfo[72][lang], Convert(DuelCheck[i][12] - 2));
							TextDrawSetString(DuelInfo[i][14], string);
							if(DuelCheck[i][23] == DuelCheck[DuelCheck[i][0]][23] && DuelCheck[i][12] >= 14 && DuelCheck[i][23] == 1) DuelCheck[i][12] = 13;
	       					if(DuelCheck[i][12] >= 3 && DuelCheck[i][12] <= 7) PlayerPlaySound(i, 5205, 0.0, 0.0, 0.0);
	                        if(DuelCheck[i][12] == 2)
	       					{
	       					    EnterVehicle[i][1] = gettime() + 4;
								TextDrawHideForPlayer(i, DuelInfo[i][8]);
								TextDrawHideForPlayer(i, DuelInfo[i][9]);
								TextDrawHideForPlayer(i, DuelInfo[i][10]);
								TextDrawHideForPlayer(i, DuelInfo[i][11]);
								TextDrawHideForPlayer(i, DuelInfo[i][12]);
								TextDrawHideForPlayer(i, DuelInfo[i][40]);
								TextDrawHideForPlayer(i, DuelInfo[i][41]);
								TextDrawHideForPlayer(i, DuelInfo[i][42]);
								TextDrawHideForPlayer(i, DuelInfo[i][43]);
								TextDrawHideForPlayer(i, DuelInfo[i][44]);
								TextDrawHideForPlayer(i, DuelInfo[i][14]);
								TextDrawHideForPlayer(i, DuelInfo[i][34]);
								TextDrawHideForPlayer(i, DuelInfo[i][16]);
								TextDrawHideForPlayer(i, DuelInfo[i][17]);
							    TextDrawSetString(DuelInfo[i][33], "_");
							    TextDrawSetString(DuelInfo[i][45], "_");
								PlayerTextDrawDestroy(i, ChoiceItemsPosi[i]);
								if(PlayerInfo[i][pMoney] < DuelCheck[i][21])
								{
								    if(PlayerInfo[i][pMoney] >= 100)
									{
										DuelCheck[i][21] = PlayerInfo[i][pMoney];
										format(string, sizeof(string), "Недостаточно средств, ставка была изменена на $%s", AddCommasToInt(PlayerInfo[i][pMoney]));
									}
								    else
									{
										DuelCheck[i][21] = 0;
										format(string, sizeof(string), "Недостаточно средств, ставка была отклонена!");
			 						}
								    SendClientMessage(i, COLOR_RED, string);
								}
		   					}
	       					if(DuelCheck[i][12] == 1)
	       					{
	       					    DuelCheck[i][23] = 0;
	       					    DuelCheck[i][12] = 7;
	                            DuelCheck[i][13] = 3;
	                            PutPlayerInVehicle(i, DuelCheck[i][15], 0);
						        switch(DuelCheck[i][4])
				 				{
				 				    case 1:
				 				    {
										if(DuelCheck[i][14] == 1)
								       	{
										    InterpolateCameraPos(i, -295.573211, 1506.268554, 75.766014, -300.071990, 1519.671386, 76.476501, 1500);
											InterpolateCameraLookAt(i, -299.333557, 1509.506958, 75.155471, -299.784362, 1514.700561, 76.020690, 1000);
										}
										else
										{
											InterpolateCameraPos(i, -307.718414, 1504.595092, 75.811439, -305.818511, 1519.339355, 76.477500, 1500);
											InterpolateCameraLookAt(i, -305.963775, 1509.261108, 75.425109, -305.530914, 1514.368530, 76.021690, 1000);
										}
									}
									case 2:
									{
	                                    if(DuelCheck[i][14] == 1)
								       	{
								       	    InterpolateCameraPos(i, -2384.278808, -1942.627075, 303.977813, -2392.595947, -1939.188232, 304.436401, 1500);
											InterpolateCameraLookAt(i, -2388.383056, -1939.802124, 303.560638, -2387.652587, -1939.677368, 303.866394, 1000);
	 									}
	 									else
	 									{
	 									    InterpolateCameraPos(i, -2384.464111, -1933.602294, 304.799102, -2392.288085, -1935.442749, 304.698211, 1500);
											InterpolateCameraLookAt(i, -2387.760253, -1937.166992, 303.603759, -2387.333251, -1935.796508, 304.128204, 1000);
	 									}
									}
									case 3:
									{
									    switch(DuelCheck[i][14])
			 							{
			 							    case 1:
									       	{
										    	InterpolateCameraPos(i, -1402.347045, -231.367980, 1044.523559, -1396.996704, -245.422897, 1044.502441, 2000);
												InterpolateCameraLookAt(i, -1399.037597, -234.955963, 1043.440063, -1397.713989, -240.495651, 1044.046630, 1000);
											}
											case 2:
											{
										    	InterpolateCameraPos(i, -1388.976440, -230.638732, 1045.280517, -1391.154541, -244.898193, 1044.460815, 2000);
												InterpolateCameraLookAt(i, -1391.213256, -234.949249, 1044.090576, -1391.976074, -239.987243, 1044.005004, 1000);
											}
											case 3:
											{
											    InterpolateCameraPos(i, -1400.846069, -240.989151, 1044.515258, -1395.443725, -254.142501, 1044.583496, 2000);
												InterpolateCameraLookAt(i, -1397.184082, -244.366271, 1044.085327, -1396.143432, -249.212738, 1044.127685, 1000);
											}
											case 4:
											{
							    				InterpolateCameraPos(i, -1387.355346, -239.402618, 1045.395629, -1389.859375, -253.687698, 1044.691650, 2000);
												InterpolateCameraLookAt(i, -1389.936523, -243.540328, 1044.292480, -1390.633544, -248.769073, 1044.235839, 1000);
											}
		 								}
									}
								}
								DisableRemoteVehicleCollisions(i, DuelCheck[i][8]);
								SetVehicleParamsEx(DuelCheck[i][15], 0, 1, 0, 0, 0, 0, 0);
								if(DuelCheck[i][10] != 0) AddVehicleComponent(DuelCheck[i][15], 1007+DuelCheck[i][10]);
								GetPlayerPos(i, PosBreik[i][0], PosBreik[i][1], PosBreik[i][2]);
								EnterVehicle[i][0] = GetPlayerVehicleID(i);
							}
		   				}
		                case 3:
		   				{
		   				    DuelCheck[i][12] -= 1;
		   				    new string[26];
	       					format(string, sizeof(string), "~g~%d", DuelCheck[i][12] - 1);
	       					GameTextForPlayer(i, string, 1000, 3);
	       					if(DuelCheck[i][12] == 5)
	       					{
	       					    SetCameraBehindPlayer(i);
								TogglePlayerControllableZS(i, 1);
								if(DuelCheck[i][4] == 2) TextDrawBoxColor(Glasses[i], -684643277);
								else TextDrawBoxColor(Glasses[i], 0x00FF0011);
	       					}
							if(DuelCheck[i][12] == 1)
		   				    {
		   				        DuelCheck[i][12] = 1;
	                            DuelCheck[i][13] = 4;
	                            DuelCheck[i][19] = 0;
	                            DuelCheck[i][28] = 1;
								SetVehicleParamsEx(DuelCheck[i][15], 1, 1, 0, 0, 0, 0, 0);
			       				GameTextForPlayer(i, "~g~go", 2000, 3);
			       				PlayerPlaySound(i, 3201, 0.0, 0.0, 0.0);
			  					TextDrawShowForPlayer(i, ArenaInfo[i][8]);
			  					TextDrawShowForPlayer(i, ArenaInfo[i][9]);//55ra
			       				switch(DuelCheck[i][4])
				 				{
				 				    case 1: SetPlayerRaceCheckpoint(i, floatround(DuelRacePoint1[DuelCheck[i][19]][0]), DuelRacePoint1[DuelCheck[i][19]][1], DuelRacePoint1[DuelCheck[i][19]][2], DuelRacePoint1[DuelCheck[i][19]][3], DuelRacePoint1[DuelCheck[i][19] + 1][1], DuelRacePoint1[DuelCheck[i][19] + 1][2], DuelRacePoint1[DuelCheck[i][19] + 1][3], DuelRacePoint1[DuelCheck[i][19]][4]);
				 				    case 2: SetPlayerRaceCheckpoint(i, floatround(DuelRacePoint2[DuelCheck[i][19]][0]), DuelRacePoint2[DuelCheck[i][19]][1], DuelRacePoint2[DuelCheck[i][19]][2], DuelRacePoint2[DuelCheck[i][19]][3], DuelRacePoint2[DuelCheck[i][19] + 1][1], DuelRacePoint2[DuelCheck[i][19] + 1][2], DuelRacePoint2[DuelCheck[i][19] + 1][3], DuelRacePoint2[DuelCheck[i][19]][4]);
									case 3: SetPlayerRaceCheckpoint(i, floatround(DuelRacePoint3[DuelCheck[i][19]][0]), DuelRacePoint3[DuelCheck[i][19]][1], DuelRacePoint3[DuelCheck[i][19]][2], DuelRacePoint3[DuelCheck[i][19]][3], DuelRacePoint3[DuelCheck[i][19] + 1][1], DuelRacePoint3[DuelCheck[i][19] + 1][2], DuelRacePoint3[DuelCheck[i][19] + 1][3], DuelRacePoint3[DuelCheck[i][19]][4]);
								}
							}
		   					else PlayerPlaySound(i, 5205, 0.0, 0.0, 0.0);
		   				}
						case 4:
						{
	                        DuelCheck[i][12] += 1;
	                        new string[63], slot[3], slot1[36], lang;
	                        lang = PlayerInfo[i][pRussifier][1];
                            if(DuelCheck[i][23] == 0)
		 					{
								if(DuelCheck[i][19] == DuelCheck[DuelCheck[i][0]][19])
								{
				    				new Float: distance[2];
				    				switch(DuelCheck[i][4])
				    				{
				        				case 1:
				        				{
						    				distance[0] = GetPlayerDistanceFromPoint(i, DuelRacePoint1[DuelCheck[i][19]][1], DuelRacePoint1[DuelCheck[i][19]][2], DuelRacePoint1[DuelCheck[i][19]][3]);
         									distance[1] = GetPlayerDistanceFromPoint(DuelCheck[i][0], DuelRacePoint1[DuelCheck[DuelCheck[i][0]][19]][1], DuelRacePoint1[DuelCheck[DuelCheck[i][0]][19]][2], DuelRacePoint1[DuelCheck[DuelCheck[i][0]][19]][3]);
										}
										case 2:
										{
						    				distance[0] = GetPlayerDistanceFromPoint(i, DuelRacePoint2[DuelCheck[i][19]][1], DuelRacePoint2[DuelCheck[i][19]][2], DuelRacePoint2[DuelCheck[i][19]][3]);
       										distance[1] = GetPlayerDistanceFromPoint(DuelCheck[i][0], DuelRacePoint2[DuelCheck[DuelCheck[i][0]][19]][1], DuelRacePoint2[DuelCheck[DuelCheck[i][0]][19]][2], DuelRacePoint2[DuelCheck[DuelCheck[i][0]][19]][3]);
										}
										case 3:
										{
						    				distance[0] = GetPlayerDistanceFromPoint(i, DuelRacePoint3[DuelCheck[i][19]][1], DuelRacePoint3[DuelCheck[i][19]][2], DuelRacePoint3[DuelCheck[i][19]][3]);
       										distance[1] = GetPlayerDistanceFromPoint(DuelCheck[i][0], DuelRacePoint3[DuelCheck[DuelCheck[i][0]][19]][1], DuelRacePoint3[DuelCheck[DuelCheck[i][0]][19]][2], DuelRacePoint3[DuelCheck[DuelCheck[i][0]][19]][3]);
										}
   									}
									if(distance[0] < distance[1]) TextDrawSetString(ArenaInfo[i][8], "1"), slot = "st";
						    		else TextDrawSetString(ArenaInfo[i][8], "2"), slot = "nd";
								}
								else
								{
				    				if(DuelCheck[DuelCheck[i][0]][19] < DuelCheck[i][19]) TextDrawSetString(ArenaInfo[i][8], " 1"), slot = "st";
				    				else TextDrawSetString(ArenaInfo[i][8], "2"), slot = "nd";
								}
							}
							else TextDrawSetString(ArenaInfo[i][8], "2"), slot = "nd";
                            if(DuelCheck[i][12] >= 900 && DuelCheck[i][12] <= 960)
							{
       							if(DuelCheck[i][12] >= 955 && DuelCheck[i][12] <= 960) PlayerPlaySound(i, 5205, 0.0, 0.0, 0.0);
								format(slot1, sizeof(slot1), "%s:00~n~~r~~h~%s %d/60", Convert(DuelCheck[i][12] - DuelCheck[i][24]), DuelText[30][lang], DuelCheck[i][12] - 900);
							}
							else format(slot1, sizeof(slot1), "%s:00", Convert(DuelCheck[i][12]));
							format(string, sizeof(string), "%s~n~/2~n~%s %d/%d~n~%s~n~", slot, DuelText[29][lang], DuelCheck[i][28], DuelCheck[i][20], slot1);
							TextDrawSetString(ArenaInfo[i][9], string);
			    			if(DuelCheck[i][11] >= 1 && Observation[i][1] == 0 && IsPlayerInAnyVehicle(i))
			    			{
		        				new Float: health;
		        				GetVehicleHealth(DuelCheck[i][15], health);
		        				if(health < 981)
								{
									if(DuelCheck[i][11] == 2) RepairVehicle(DuelCheck[i][15]);
									else SetVehicleHealth(DuelCheck[i][15], 1000.0);
 								}
					    	}
						    switch(DuelCheck[i][12])
						    {
						        case 2:
						        {
						            if(GetPVarInt(i, "DuellCheck[3]") == 1)
						            {
						                DeletePVar(i, "DuellCheck[2]");
									    DeletePVar(i, "DuellCheck[3]");
										TextDrawHideForPlayer(i, Glasses[i]);
										if(IsValidDynamicObject(TuningVehicle[DuelCheck[i][15]][0])) DestroyDynamicObject(TuningVehicle[DuelCheck[i][15]][0]);
									    if(IsValidDynamicObject(TuningVehicle[DuelCheck[i][15]][1])) DestroyDynamicObject(TuningVehicle[DuelCheck[i][15]][1]);
  									}
						        }
						        case 897: if(DuelCheck[i][23] == 2) TogglePlayerControllableZS(i, 0);
						        case 899:
						        {
						            if(DuelCheck[i][23] == 2)//55SA
						            {
										Observation[i][1] = 2;
					       				TogglePlayerControllableZS(i, 1);
				          				TogglePlayerSpectatingZS(i, 1);
				          				if(IsPlayerInAnyVehicle(DuelCheck[i][0])) PlayerSpectateVehicle(i, DuelCheck[DuelCheck[i][0]][15]);
										else PlayerSpectatePlayer(i, DuelCheck[i][0]);
										TextDrawShowForPlayer(i, ArenaInfo[i][8]);
					  					TextDrawShowForPlayer(i, ArenaInfo[i][9]);
					  					TextDrawShowForPlayer(i, MenuProcurementIcon[i][1]);
										if(PlayerInfo[i][pRussifier][1] == 0) TextDrawSetString(MenuProcurementIcon[i][1], "Stop~n~Spectate~n~~k~~PED_SPRINT~");
										else TextDrawSetString(MenuProcurementIcon[i][1], "ўЁќ¦њ њџ~n~®a—ћ«љe®њ¬~n~~k~~PED_SPRINT~");
				  					}
						        }
						        case 960:
						        {
						            if(DuelCheck[i][23] == 0) TogglePlayerControllableZS(i, 0);
						        	GameTextForPlayerZS(i, "~n~~r~time is over", "~n~~r~ўpeЇ¬ ўЁҐћo", 5000, 4);
					        		SendClientMessage(i, 0xFFFFFFFF, "Время дуэля вышно {4FDF24}Тайм-Аут{FFFFFF}!");
					        		TextDrawHideForPlayer(i, MenuProcurementIcon[i][1]);
						        }
						        case 965: if(DuelCheck[i][23] == 0) SetRaceFinish(i, 5.0);
						    }
						}
						case 5:
						{
						    new string[112], lang = PlayerInfo[i][pRussifier][1];
						    DuelCheck[i][12] -= 1;
						    if(DuelCheck[i][11] == 0) format(string, sizeof(string), TextDrawInfo[73][lang], Convert(DuelCheck[i][12] - 1));
							else format(string, sizeof(string), "exit: %s", Convert(DuelCheck[i][12] - 1));
							TextDrawSetString(DuelInfo[i][14], string);
							if(DuelCheck[i][12] == 18 && DuelCheck[i][23] == 0) TogglePlayerControllableZS(i, 0);
							if(DuelCheck[i][12] == 17)
							{
							    switch(DuelCheck[i][4])
							    {
							        case 1:
							        {
							            if(DuelCheck[i][20] == 1)
							            {
							                SetPlayerCameraPos(i, -2664.936279, 1245.362548, 57.029846);
											SetPlayerCameraLookAt(i, -2667.760742, 1249.477172, 56.725345);
							            }
							            else
							            {
							                SetPlayerCameraPos(i, -314.428894, 1530.657104, 75.687759);
											SetPlayerCameraLookAt(i, -312.245605, 1526.162841, 75.875213);
							            }
							        }
									case 2:
									{
									    if(DuelCheck[i][20] == 1)
							            {
							                SetPlayerCameraPos(i, -2386.662841, -2209.300292, 37.531578);
							                SetPlayerCameraLookAt(i, -2383.846191, -2205.337890, 36.362804);
							            }
							            else
							            {
							                SetPlayerCameraPos(i, -2435.357910, -1929.214111, 307.760955);
							                SetPlayerCameraLookAt(i, -2438.524414, -1925.477294, 306.755859);
							            }
									}
									case 3:
									{
									    SetPlayerCameraPos(i, -1398.961669, -183.483245, 1045.066284);
									    SetPlayerCameraLookAt(i, -1398.477416, -188.444534, 1044.677612);
									}
							    }
							    TextDrawHideForPlayer(i, ArenaInfo[i][8]);
			  					TextDrawHideForPlayer(i, ArenaInfo[i][9]);
			  					TextDrawHideForPlayer(i, MenuProcurementIcon[i][1]);
			  					TextDrawShowForPlayer(i, DuelInfo[i][14]);
							    TextDrawShowForPlayer(i, DuelInfo[i][18]);
								TextDrawShowForPlayer(i, DuelInfo[i][19]);
							    TextDrawShowForPlayer(i, DuelInfo[i][20]);
							    TextDrawShowForPlayer(i, DuelInfo[i][21]);
	                            if(PlayerInfo[i][pRussifier][1] == 0)
								{
									TextDrawSetString(DuelInfo[i][19], "statistics");
                                    TextDrawSetString(DuelInfo[i][21], "position");
                                    TextDrawSetString(DuelInfo[i][29], "vehicle");
                                    TextDrawSetString(DuelInfo[i][30], "total time");
                                    TextDrawSetString(DuelInfo[i][31], "best time");
                                    TextDrawSetString(DuelInfo[i][32], "betting");
								}
							    else
								{
									TextDrawSetString(DuelInfo[i][19], "c¦a¦њc¦њka");
									TextDrawSetString(DuelInfo[i][21], "Јoџњ‰њ¬");
									TextDrawSetString(DuelInfo[i][29], "¦pa®cЈop¦");
									TextDrawSetString(DuelInfo[i][30], "o—Ўee ўpeЇ¬");
                                    TextDrawSetString(DuelInfo[i][31], "ћy¤Ґee ўpeЇ¬");
                                    TextDrawSetString(DuelInfo[i][32], "c¦aўkњ");
								}
								for(new x = 22; x < 33; x ++) TextDrawShowForPlayer(i, DuelInfo[i][x]);
							}
	                        if(DuelCheck[i][12] == 1)
							{
							    AntiBreik[i] = 1;
							    SpawnCheck[i][0] = 1;
							    if(DuelCheck[i][15] != 0) DestroyVehicle(DuelCheck[i][15]);
								DuelCheck[i][0] = MAX_PLAYERS;
								for(new x; x < 29; x ++) DuelCheck[i][x] = 0;
						        DeletePVar(i, "DuellCheck[2]");
							    DeletePVar(i, "DuellCheck[3]");
							    DeletePVar(i, "DuellCheck[6]");
							    DisablePlayerRaceCheckpoint(i);
								for(new x = 18; x < 34; x ++) TextDrawHideForPlayer(i, DuelInfo[i][x]);
							    TextDrawHideForPlayer(i, DuelInfo[i][14]);
							    TextDrawHideForPlayer(i, DuelInfo[i][45]);
							    TextDrawHideForPlayer(i, ArenaInfo[i][8]);
	  					        TextDrawHideForPlayer(i, ArenaInfo[i][9]);
	  					        if(PlayerInfo[i][pFreeMode] == 0) GangZoneShowForPlayer(i, ServerCheck[0], 0x395075FF);
							    Observation[i][1] = 0;
							    if(DuelCheck[i][23] == 2) TogglePlayerSpectating(i, 0);
								else SpawnPlayer(i);
								DuelCheck[i][23] = 0;
							}
						}
	                }
	            }
	        }
    	}
    	if(DuelCheck[i][3] != 0 && GetPVarInt(i, "DuellCheck[0]") != 0 && GetPVarInt(i, "DuellCheck[1]") < gettime())
        {
	        DeletePVar(i, "DuellCheck[0]");
	        DeletePVar(i, "DuellCheck[1]");
	        TextDrawHideForPlayer(i, ArenaInfo[i][4]);
		    TextDrawHideForPlayer(i, ArenaInfo[i][5]);
		    TextDrawHideForPlayer(i, ArenaInfo[i][6]);
		    TextDrawHideForPlayer(i, ArenaInfo[i][7]);
		}
	 	if(DuelCheck[i][12] == 0 && DuelCheck[i][1] >= 2)
		{
		    DuelCheck[i][1] -= 1;
			new string[29];
	        format(string, sizeof(string), " ~y~%s: %s", PlayerName[DuelCheck[i][0]], Convert(DuelCheck[i][1]));
			TextDrawSetString(DuelInfo[i][13], string);
		    if(DuelCheck[i][1] == 2)
		    {
		        DuelCheck[DuelCheck[i][0]][1] = 0;
				DuelCheck[i][1] = 0;
				TextDrawSetString(DuelInfo[i][13], " ...");
				ShowPlayerDialogZS(DuelCheck[i][0], -1, DIALOG_STYLE_MSGBOX, "_", "_", "_", "_");
	            DuelCheck[DuelCheck[i][0]][0] = MAX_PLAYERS;
			}
		}
	 	if(DuelCheck[i][2] != 0 && DuelCheck[i][2] < gettime())
		{
	 		DuelCheck[i][0] = MAX_PLAYERS;
	 		for(new x; x < 46; x ++)
	 		{
	 		    if(x <= 28) DuelCheck[i][x] = 0;
			 	TextDrawHideForPlayer(i, DuelInfo[i][x]);
	 		}
		    CancelSelectTextDraw(i);
		    if(GetPVarInt(i, "DuellCheck[4]") == 1) ShowModelSelectionMenu(i, 255, 1);
	   		DeletePVar(i, "DuellCheck[4]");
			SpawnPlayerZS(i);
			GameTextForPlayerZS(i, "~w~Timeout duel", "~w~¦aќЇ ay¦ љyЄћ©", 2000, 4);
		}
		if(PlayerInfo[i][pFreeMode] == 0 && (PlayerOnline[2] != 0 || PlayerOnline[3] != 0 || PlayerOnline[4] != 0) && PlayerInfo[i][pInfoText][0] == 0 && DuelCheck[i][3] == 0 && PlayerInfo[i][pPrison] == 0 && Observation[i][1] == 0)
	 	{
	 		new string[22], slot[10] = "~g~~h~~h~", lang = PlayerInfo[i][pRussifier][1], slot1[2];
            switch(ChoiceTeamCheck[i][6])
			{
				case 1:
				{
					slot1[0] = 3;
					slot1[1] = 4;
					if(Arena[1] <= 60) format(slot, sizeof(slot), "~r~~h~");
					format(string, sizeof(string), "%s: %s%s", TextDrawInfo[55][lang], slot, Convert(Arena[1]));
				}
				case 2:
				{
					slot1[0] = 10;
					slot1[1] = 11;
					if(Arena[8] <= 60) format(slot, sizeof(slot), "~r~~h~");
					format(string, sizeof(string), "%s: %s%s", TextDrawInfo[55][lang], slot, Convert(Arena[8]));
				}
				case 3:
				{
					slot1[0] = 17;
					slot1[1] = 18;
					if(Arena[15] <= 60) format(slot, sizeof(slot), "~r~~h~");
					format(string, sizeof(string), "%s: %s%s", TextDrawInfo[55][lang], slot, Convert(Arena[15]));
				}
   			}
			TextDrawSetString(ArenaInfo[i][2], string);
 			if(ChoiceTeamCheck[i][2] == 1)
 			{
   				format(string, sizeof(string), "~g~~h~~h~%d", Arena[slot1[0]]);
				TextDrawSetString(ArenaInfo[i][11], string);
				format(string, sizeof(string), "~g~~h~~h~%d", Arena[slot1[1]]);
				TextDrawSetString(ArenaInfo[i][10], string);
            }
            else
            {
                format(string, sizeof(string), "~g~~h~~h~%d", Arena[slot1[1]]);
				TextDrawSetString(ArenaInfo[i][11], string);
				format(string, sizeof(string), "~g~~h~~h~%d", Arena[slot1[0]]);
				TextDrawSetString(ArenaInfo[i][10], string);
            }
	 	}
	    /*if(PlayerInfo[i][pFreeMode] == 0 && PlayerInfo[i][pBonus][11] != 0 && PlayerInfo[i][pBonus][11] < gettime() && Pause[i][1] <= 3)
	  	{
	  	    MegaBullet[i] = 0;
			PlayerInfo[i][pBonus][11] = 0;
		    SendClientMessage(i, 0xFFFFFFFF, "Вы снова можете использовать {4FDF24}мега пулю{FFFFFF}.");
	 	}*/
		if(Pause[i][1] <= 3 && Spawned[i] == true && RegistrationHealth[i][0] == 1 && PlayerInfo[i][pPassive] == 0)
		{
			if(RegistrationHealth[i][1] >= 1 && Health[i] <= 89)
	        {
	            RegistrationHealth[i][1] -= 1;
	  			new health[4] = {1, 1, 3, 5};
				if(RegistrationHealth[i][2] == 0) Health[i] += health[PlayerInfo[i][pVip]];
				else Health[i] += 12;
				SetPlayerHealth(i, Health[i]);
	    	}
	    	else
	    	{
	    		RegistrationHealth[i][0] = 0;
				RegistrationHealth[i][1] = 0;
				RegistrationHealth[i][2] = 0;
	  		}
		}
		if(Revival[i][2] >= 1) Revival[i][2] --;
		if(Revival[i][3] >= 1)
		{
		    Revival[i][3] --;
		    new player = Revival[i][4], Float:Pos[3];
		    GetPlayerPos(player, Pos[0], Pos[1], Pos[2]);
		    if(!IsPlayerConnected(player) || !IsPlayerInRangeOfPoint(i, 1.5, Pos[0], Pos[1], Pos[2]) || GetPlayerWeapon(i) != 0 || GetPlayerAnimationIndex(i) != 1159 || Spawned[i] == false || KillsCheck[player][0] <= 2) Revival[i][3] = 0;
		    if(Revival[i][3] == 1 && Revival[player][1] == 0 && Spawned[player] == false)
		    {
		        GameTextForPlayerZS(i, "~n~~g~Revival", "~n~~g~ўoџpo›љe®њe", 2000, 4);
		        PlayerPlaySound(i, 6003, 0.0, 0.0, 0.0);
		        PlayerPlaySound(player, 6003, 0.0, 0.0, 0.0);
		        Revival[player][0] = i;
		        Revival[player][1] = 7;
		        Revival[i][3] = 0;
		        Revival[i][4] = 0;
		        if(PlayerInfo[player][pRussifier][1] == 0)
		        {
		            TextDrawSetString(RevivalText[player][2], "accept revive");
		        	TextDrawSetString(RevivalText[player][3], "to spawn");
		        }
		        else
		        {
		            TextDrawSetString(RevivalText[player][2], "Јpњ®¬¦© ЈoЇoЎ©");
		        	TextDrawSetString(RevivalText[player][3], "o¦Їe®њ¦© ЈoЇoЎ©");
		        }
		        SelectTextDraw(player, 0x88AA88FF);
		        for(new x; x < 4; x ++) TextDrawShowForPlayer(player, RevivalText[player][x]);
		    }
		}
		if(KillsCheck[i][0] >= 1)
		{
		    if(Revival[i][1] != 0)
		    {
		        Revival[i][1] -= 1;
		        if(Revival[i][1] == 1)
		        {
		    		Revival[i][0] = MAX_PLAYERS;
		    		Revival[i][1] = 0;
		    		KillsCheck[i][0] = 5;
		    		KillsCheck[i][11] = 1;
				    CancelSelectTextDraw(i);
				    for(new x; x < 4; x ++) TextDrawHideForPlayer(i, RevivalText[i][x]);
				}
		    }
			else KillsCheck[i][0] -= 1;
		    switch(KillsCheck[i][0])
            {
      			case 21: SpawnCheck[i][0] = 1;
	            case 20:
	            {
	            	KillsCheck[i][0] = 0;
   					KillsCheck[i][10] = 0;
					SetPlayerHealth(i, 100.0);
  				}
  				case 4:
  				{
  					if(KillsCheck[i][11] == 0)
  					{
	  					new idTD[7] = {16, 15, 14, 13, 12, 18, 17};//Левая Нога | Правая Нога | Пах | Грудь | Голова | Правая Рука | Левая Рука
	  					for(new x; x < 12; x ++)
					  	{
						  	TextDrawShowForPlayer(i, InfoKills[i][x]);
						  	if(x >= 2 && x <= 8)
						  	{
							  	if(KillsCheck[i][x] == 1) TextDrawShowForPlayer(i, InfoKills[i][idTD[x-2]]);
							  	else
							  	{
							  		TextDrawBoxColor(InfoKills[i][idTD[x-2]], 0xFFFFFF77);
							  		TextDrawShowForPlayer(i, InfoKills[i][idTD[x-2]]);
							  	}
							}
						}
					}
  				}
  				case 2: SpawnCheck[i][0] = 1;
  				case 1:
  				{
  				    if(Revival[i][0] == MAX_PLAYERS) Revival[i][0] = 0;
  					SetPlayerHealth(i, 100.0);
  					for(new x; x < 19; x ++)
				  	{
				  	    if(x <= 11) KillsCheck[i][x] = 0;
					  	TextDrawHideForPlayer(i, InfoKills[i][x]);
					  	if(x >= 12 && x <= 18) TextDrawBoxColor(InfoKills[i][x], -16777080);
					}
  				}
			}
		}
		if(Spawned[i] == true && KillsCheck[i][9] != 0 && KillsCheck[i][9] < gettime() && KillsCheck[i][0] == 0) for(new x = 2; x <= 9; x ++) KillsCheck[i][x] = 0;
		new str[65], slot3[21], slot2[19];
		if(SpawnCheck[i][3] == 0)
		{
  			if(PlayerInfo[i][pPassive] == 0 && Pause[i][1] <= 3)
  			{
 				new slot1[10];
 				if(Armour[i][0] >= 1) format(slot1, sizeof(slot1), "| %d AR", Armour[i][0]);
				if(RegistrationHealth[i][2] == 0) format(slot3, sizeof(slot3), "%d HP %s", Health[i], slot1);
				else format(slot3, sizeof(slot3), "++ %d HP %s", Health[i], slot1);
			}
			else if(PlayerInfo[i][pPassive] == 1) format(slot2, sizeof(slot2), "Passive Mode\n");
		}
		else format(slot2, sizeof(slot2), "Spawn Kill\n");
  		if(Pause[i][1] >= 3)
		{
			if(Pause[i][1] >= 895) format(slot2, sizeof(slot2), "Exit of Game\n");
			else format(slot2, sizeof(slot2), "Pause: %s\n", Convert(Pause[i][1] - 2));
		}
		format(str, sizeof(str), "%s%s (%d)\n%s", slot2, PlayerName[i], i, slot3);
		if(PlayerInfo[i][pFreeMode] == 0)
  		{
    		if(ChoiceTeamCheck[i][2] == 1) UpdateDynamic3DTextLabelText(PlayerText[i], 0x559FCDFF, str);
    		else UpdateDynamic3DTextLabelText(PlayerText[i], 0xF4AC50FF, str);
      	}
		else UpdateDynamic3DTextLabelText(PlayerText[i], PlayerInfo[i][pNickColor], str);
	    if((PlayerInfo[i][pInfoText][2] == 0 || (Arena[2] != 0 || Arena[9] != 0 || Arena[16] != 0) && PlayerInfo[i][pFreeMode] == 0 || PlayerInfo[i][pInfoText][7] == 0) && Pause[i][1] <= 3)
		{
			new string[33], slot[9] = "_", slot0[13] = "_", slot1[20] = "_";
		    if((ChoiceTeamCheck[i][6] == 1 && Arena[2] != 0 || ChoiceTeamCheck[i][6] == 2 && Arena[9] != 0 || ChoiceTeamCheck[i][6] == 3 && Arena[16] != 0) && PlayerInfo[i][pFreeMode] == 0)
			{
                switch(ChoiceTeamCheck[i][6])
                {
                    case 1: format(slot, sizeof(slot), "%s  ", Convert(Arena[2]));
                    case 2: format(slot, sizeof(slot), "%s  ", Convert(Arena[9]));
                    case 3: format(slot, sizeof(slot), "%s  ", Convert(Arena[16]));
                }
			}
		    if(PlayerInfo[i][pInfoText][2] == 0) format(slot0, sizeof(slot0), "fps: %d", GetPlayerFps(i));
		    if(PlayerInfo[i][pInfoText][7] == 0)
			{
				new timers[3];
		    	gettime(timers[0], timers[1], timers[2]);
				format(slot1, sizeof(slot1), "msk %02d:%02d:%02d  ", timers[0], timers[1], timers[2]);
		    }
		    format(string, sizeof(string), "%s%s%s", slot1, slot, slot0);
		    TextDrawSetString(UpPanel[i], string);
	 	}
		if(SelectionCheck[i][0] == 1 && SelectionCheck[i][4] >= 1)
		{
		    SelectionCheck[i][4] -= 1;
		    if(SelectionCheck[i][4] == 1)
			{
			    SelectionCheck[i][4] = 0;
				SelectTextDraw(i, 0x88AA88FF);
				TogglePlayerControllableZS(i, 1);
	  		}
		}
		if(Pause[i][1] <= 3 && PlayerInfo[i][pTimers] == 24 && DuelCheck[i][13] == 0 && DuelCheck[i][2] == 0)
		{
		    new timers[3];
		    gettime(timers[0], timers[1], timers[2]);
			SetPlayerTime(i, timers[0], timers[1]);
		}
		if(DialogueCheck[i][1] == 1 && DialogueCheck[i][2] < gettime() && ServerConfig[4] == 0)
		{
			new string[125];
			format(string, sizeof(string), "Игроку %s (ID: %d) был закрыт диалог %d (IP: %s | R: %s | Ping: %d)", PlayerName[i], i, DialogueCheck[i][0], PlayerIp[i], PlayerInfo[i][pIpReg], GetPlayerPing(i));
	  		ABroadCast(0xC3C3C3AA, string, 0, 4);
			ShowPlayerDialogZS(i, -1, DIALOG_STYLE_MSGBOX, "_", "_", "_", "_");
			GameTextForPlayerZS(i, "Timeout Dialog", "ЏaќЇay¦", 2000, 4);
	 	}
	 	if(NewLevelCheck[i][0] != 0 && NewLevelCheck[i][0] < gettime())//5502
	 	{
	 		NewLevelCheck[i][0] = 0;
			TextDrawHideForPlayer(i, ChangeMapp[i][5]);
	   		TextDrawHideForPlayer(i, ChangeMapp[i][6]);
   		    TextDrawLetterSize(ChangeMapp[i][5], 0.5, 5.4);
		}
		if(NewLevelCheck[i][1] != 0)
	 	{
	 	    NewLevelCheck[i][1] -= 1;
	 	    new lang = PlayerInfo[i][pRussifier][1];
	 	    switch(NewLevelCheck[i][1])
	 	    {
				case 10:
				{
				    TextDrawLetterSize(ChangeMapp[i][5], 0.5, 4.7);
				    TextDrawShowForPlayer(i, ChangeMapp[i][5]);
		    		TextDrawShowForPlayer(i, ChangeMapp[i][6]);
		    		TextDrawShowForPlayer(i, NewLelevT[i][0]);
					TextDrawSetString(NewLelevT[i][0], TextDrawInfo[LevelScore[PlayerInfo[i][pLevel][0]][1]][lang]);
		    		TextDrawSetString(ChangeMapp[i][6], TextDrawInfo[103][lang]);
				}
				case 7:
				{
					NewLevelCheck[i][1] = 0;
					TextDrawHideForPlayer(i, ChangeMapp[i][5]);
			   		TextDrawHideForPlayer(i, ChangeMapp[i][6]);
			   		TextDrawHideForPlayer(i, NewLelevT[i][0]);
			   		TextDrawLetterSize(ChangeMapp[i][5], 0.5, 5.4);
	 			}
	 	        case 2:
	 	        {
	 	            new string[20];
	 	            format(string, sizeof(string), "%d / %d XP", PlayerInfo[i][pLevel][1], LevelScore[PlayerInfo[i][pLevel][0]][0]);
		    		TextDrawSetString(NewLelevT[i][0], string);
	 	        }
	 	        case 0:
	 	        {
			 		if(LevelScore[PlayerInfo[i][pLevel][0]][1] == -1) NewLevelCheck[i][1] = 0;
				    else NewLevelCheck[i][1] = 11;
					TextDrawHideForPlayer(i, ChangeMapp[i][5]);
			   		TextDrawHideForPlayer(i, ChangeMapp[i][6]);
			   		TextDrawHideForPlayer(i, NewLelevT[i][0]);
			   		TextDrawLetterSize(ChangeMapp[i][5], 0.5, 5.4);
	 			}
   			}
		}
		if(Pause[i][1] <= 3 && AchievementsCheck[i][0] != 0 && AchievementsCheck[i][0] < gettime())
		{
		    AchievementsCheck[i][0] = 0;
		    new lang = PlayerInfo[i][pRussifier][1];
	    	TextDrawHideForPlayer(i, AchievementsT[i][0]);
			TextDrawHideForPlayer(i, AchievementsT[i][1]);
			TextDrawHideForPlayer(i, AchievementsT[i][2]);
			TextDrawHideForPlayer(i, AchievementsT[i][3]);
			TextDrawHideForPlayer(i, AchievementsT[i][4]);
			if(ChangeMap[i][2] == 0 && ChoiceTeamCheck[i][0] == 0)
			{
				if(DuelCheck[i][3] == 0)
	   			{
	   			    if(ChoiceItemsCheck[i][0] == 1)
	   			    {
	   			        TextDrawShowForPlayer(i, DuelInfo[i][14]);
	   			        TextDrawShowForPlayer(i, DuelInfo[i][34]);
	   			        TextDrawSetString(DuelInfo[i][14], TextDrawInfo[47][lang]);
	   			    }
					if(PlayerInfo[i][pFreeMode] == 0 && PlayerInfo[i][pInfoText][0] == 0)
					{
					    if(ChoiceItemsCheck[i][0] == 0)
					    {
							TextDrawShowForPlayer(i, ArenaInfo[i][0]);
							TextDrawShowForPlayer(i, ArenaInfo[i][10]);
						}
						TextDrawShowForPlayer(i, ArenaInfo[i][1]);
						TextDrawShowForPlayer(i, ArenaInfo[i][11]);
						TextDrawShowForPlayer(i, ArenaInfo[i][2]);
					}
					else if(TuningCheck[i] == 0)
					{
						if(SpeedCheck[i] == 1)
				    	{
				            SpeedCheck[i] = 0;
				   			TextDrawShowForPlayer(i, ArenaInfo[i][0]);
				   			TextDrawShowForPlayer(i, ArenaInfo[i][10]);
				    	}
				    	if(PlayerInfo[i][pPassive] == 1)
						{
							TextDrawShowForPlayer(i, ArenaInfo[i][1]);
							TextDrawShowForPlayer(i, ArenaInfo[i][11]);
							TextDrawSetString(ArenaInfo[i][1], TextDrawInfo[58][lang]);
							if(IsPlayerInAnyVehicle(i)) TextDrawSetString(ArenaInfo[i][11], TextDrawInfo[59][lang]);
							else TextDrawSetString(ArenaInfo[i][11], TextDrawInfo[60][lang]);
						}
					}
	   			}
	   			else
	   			{
	   			    TextDrawShowForPlayer(i, ArenaInfo[i][8]);
					TextDrawShowForPlayer(i, ArenaInfo[i][9]);
	   			}
	 		}
		}
		if(OrderKills[i][0] >= 1 && OrderKills[i][1] < gettime())
		{
		    new string[110];
		    AchievementsInfo(2, i);
		    format(string, sizeof(string), "Игрок {4FDF24}%s {FFFFFF}остался в живых, награда за его голову была {4FDF24}%s$", PlayerName[i], AddCommasToInt(OrderKills[i][0]));
		    ABroadCast(0xFFFFFFFF, string, 1, 0);
		    OrderKills[i][0] = 0;
		    OrderKills[i][1] = 0;
		}
		if(SkillsWeapon[i][0] >= 1 /*&& PlayerInfo[i][pFreeMode] == 0*/)
		{
		    SkillsWeapon[i][0] -= 1;
		    if(SkillsWeapon[i][1] == 0)
		    {
		        SkillsWeapon[i][1] = 1;
		        TextDrawHideForPlayer(i, ArenaInfo[i][7]);
		        TextDrawBoxColor(ArenaInfo[i][7], -16777080);
		        TextDrawShowForPlayer(i, ArenaInfo[i][7]);
		    }
		    else
		    {
		        SkillsWeapon[i][1] = 0;
		        TextDrawHideForPlayer(i, ArenaInfo[i][7]);
		        TextDrawBoxColor(ArenaInfo[i][7], -16777114);
		        TextDrawShowForPlayer(i, ArenaInfo[i][7]);
		    }
		    if(SkillsWeapon[i][0] == 1)
		    {
		        SkillsWeapon[i][0] = 0;
		        SkillsWeapon[i][1] = 0;
		    	TextDrawHideForPlayer(i, ArenaInfo[i][5]);
		    	TextDrawHideForPlayer(i, ArenaInfo[i][6]);
		    	TextDrawHideForPlayer(i, ArenaInfo[i][7]);
			}
		}
		if(ChoiceTeamCheck[i][0] == 1 && ServerHelpInfo[i][0] != 0 && ServerHelpInfo[i][0] < gettime() && ServerHelpInfo[i][2] == 0)
		{//5512
		    TimeInput[i] = 300;
		    ServerHelpInfo[i][2] = 1;
	 		switch(ServerHelpInfo[i][1])
            {
            	case 1:
	            {
               		ServerHelpInfo[i][0] = gettime()+2;
               		SelectTextDraw(i, 0x88AA88FF);
  		           	TextDrawShowForPlayer(i, ChoiceTeam[i][13]);
 		            TextDrawShowForPlayer(i, ChoiceTeam[i][14]);
 		            TextDrawShowForPlayer(i, ChoiceTeam[i][15]);
 		            TextDrawShowForPlayer(i, ChoiceTeam[i][16]);
 		            if(PlayerInfo[i][pRussifier][1] == 0) TextDrawSetString(ChoiceTeam[i][16], "style");
		  			else TextDrawSetString(ChoiceTeam[i][16], "c¦њћ©");
		 			ShowPlayerDialogZS(i, 160, DIALOG_STYLE_MSGBOX, "Знакомство с Сервером", 
					 "{FFFFFF}Добро пожаловать на сервер {61dd61}TDM Zones{FFFFFF}.\n\n\
					 Для комфортного выбора команды, начнем с локализации.\n\
					 Сервер поддерживает русский, английский текст в TextDraw.\n\n\
					 Для выбора нужного вам языка используйте стрелки назад, вперед.\n\
					 Вы в любой момент сможите выбрать нужный вам стиль текста в Главном меню - Настройки - HUD.\n\
					 В настройках вы также можете включить {4FDF24}Txd Bar{FFFFFF} - он улучшит ваш интерфейс.", "Дальше", "");
    			}
				case 3:
				{
				    for(new x; x < 17; x ++) TextDrawHideForPlayer(i, ChoiceTeam[i][x]);
    				ServerHelpInfo[i][0] = gettime()+2;
	     			ShowPlayerDialogZS(i, 160, DIALOG_STYLE_MSGBOX, "Знакомство с Сервером III", 
					 "{FFFFFF}После выбора команды, переходим к Меню закупок.\n\n\
					 Перед вами Меню закупок, для открытия данного меню в игре используйте кнопку: L-Alt(зависит от вашей настройки).\n\
					 В меню отображены виды оружия которые вы можете приобрести, под оружием отображена цена данного орудия.\n\n\
					 По продвижение по рангам вам откроется возможность использовать функцию Автоматическая Закупка оружия.\n\
					 В настройках HUD вы можете переключить тип меню на Диалоговое.", "Далее", "");
					ShowModelSelectionMenu(i, 0, 2);
				}
			}
		}
		if(PlayerInfo[i][pInfoText][3] == 0 && Observation[i][1] == 0)
	 	{
			new stringg[3][23] = {"_", "_", "_"};
	 	    if(Armour[i][0] >= 2) format(stringg[1], 7, "%d AR", Armour[i][0]);
	 	    if(Armour[i][4] != 0) format(stringg[2], 7, "%d HE", Armour[i][4]);
	 	    format(stringg[0], 23, "%d HP  %s  %s", Health[i], stringg[1], stringg[2]);
	 	    TextDrawSetString(HealthPure[i], stringg[0]);
	 	}
		if(AimingCheck[i][1] >= 1 && PlayerInfo[i][pAimingX][0] >= 1)
		{
			AimingCheck[i][1] --;
			if(AimingCheck[i][1] == 0)
			{
				AimingCheck[i][0] = 0;
				AimingCheck[i][1] = 0;
				TextDrawHideForPlayer(i, Aiming[i][0]);
				TextDrawHideForPlayer(i, Aiming[i][1]);
				TextDrawSetString(Aiming[i][0], AimingText);
				TextDrawSetString(Aiming[i][1], AimingText);
			}
		}
   		if(BreathCam[i][0] == 1 && Pause[i][1] <= 3)
   		{
	   		if(BreathCam[i][1] == 1)
   			{
   			    BreathCam[i][2] += 1;
   			    if(BreathCam[i][2] >= 4) SetPlayerDrunkLevel(i, 4000);
   			    if(BreathCam[i][2] >= 9)
			   	{
			   	    BreathCam[i][1] = 0;
			   	    BreathCam[i][2] = 0;
	   			}
   			}
		   	else SetPlayerDrunkLevel(i, 2109);
		}
	 	if(ForbiddenArea[i][0] >= 1)
	 	{
	 	    new string[8];
	 		ForbiddenArea[i][0] -= 1;
	 		format(string, sizeof(string), "time %d", ForbiddenArea[i][0]-4);
	 		TextDrawSetString(NewLelevT[i][0], string);
	 		if(ForbiddenArea[i][0] == 7) AchievementsInfo(5, i);
	 		if(ForbiddenArea[i][0] == 4)
	 		{
				SetPlayerHealth(i, 0.0);
  				TextDrawHideForPlayer(i, ChangeMapp[i][5]);
				TextDrawHideForPlayer(i, ChangeMapp[i][6]);
				TextDrawHideForPlayer(i, NewLelevT[i][0]);
				TextDrawHideForPlayer(i, Glasses[i]);
	 		}
	 		if(ForbiddenArea[i][0] == 1)
		 	{
		 	    if(Spawned[i] == true)
		 	    {
		 	    	ForbiddenArea[i][0] = 0;
			 		TogglePlayerControllableZS(i, 0);
				}
			 	else ForbiddenArea[i][0] = 0;
			}
		}
		if(GetPVarInt(i, "KillInfoTime") != 0 && GetPVarInt(i, "KillInfoTime") < gettime())
		{
		    DeletePVar(i, "KillInfoTime");
		    for(new x; x < 12; x ++)
	  		{
                KillSlot[i][x] = "_";
				TextDrawHideForPlayer(i, KillInfo[i][x]);
				TextDrawSetString(KillInfo[i][x], "_");
  			}
		}
		if(ChoiceTeamCheck[i][0] == 1 && ChoiceTeamCheck[i][5] == 1 && Pause[i][1] <= 3)
		{
		    new string[6];
			if(PlayerInfo[i][pRussifier][1] == 0)
			{
		    	TextDrawSetString(ChoiceTeam[i][25], MapSettings[Arena[0]][Name]);
	        	TextDrawSetString(ChoiceTeam[i][26], MapSettings[Arena[7]][Name]);
            	TextDrawSetString(ChoiceTeam[i][27], MapSettings[Arena[14]][Name]);
            }
            else
            {
                TextDrawSetString(ChoiceTeam[i][25], MapSettings[Arena[0]][Name1]);
	        	TextDrawSetString(ChoiceTeam[i][26], MapSettings[Arena[7]][Name1]);
            	TextDrawSetString(ChoiceTeam[i][27], MapSettings[Arena[14]][Name1]);
            }
		    format(string, sizeof(string), "%d/64", PlayerOnline[2]);
            TextDrawSetString(ChoiceTeam[i][28], string);
            format(string, sizeof(string), "%d/64", PlayerOnline[3]);
            TextDrawSetString(ChoiceTeam[i][29], string);
            format(string, sizeof(string), "%d/64", PlayerOnline[4]);
            TextDrawSetString(ChoiceTeam[i][30], string);
		}
  	}
  	else
  	{
  	    if(TimeInput[i] >= 1)
		{
			TimeInput[i] -= 1;
			if(ChoiceTeamCheck[i][0] == 1)
	  		{
				switch(TimeInput[i])
				{
				    case 180:
				    {
				    	if(PlayerInfo[i][pRussifier][1] == 0) TextDrawSetString(ChoiceTeam[i][11], "~y~~h~spawn");
	            		else TextDrawSetString(ChoiceTeam[i][11], "~y~~h~cЈaў®");
				    }
				    case 120:
				    {
						if(PlayerInfo[i][pRussifier][1] == 0) TextDrawSetString(ChoiceTeam[i][11], "~y~spawn");
	            		else TextDrawSetString(ChoiceTeam[i][11], "~y~cЈaў®");
				    }
				    case 60:
				    {
						if(PlayerInfo[i][pRussifier][1] == 0) TextDrawSetString(ChoiceTeam[i][11], "~r~~h~spawn");
	            		else TextDrawSetString(ChoiceTeam[i][11], "~r~~h~cЈaў®");
				    }
				    case 30:
				    {
						if(PlayerInfo[i][pRussifier][1] == 0) TextDrawSetString(ChoiceTeam[i][11], "~r~spawn");
	            		else TextDrawSetString(ChoiceTeam[i][11], "~r~cЈaў®");
				    }
				    case 5:
		   			{
						if(PlayerInfo[i][pRussifier][1] == 0) TextDrawSetString(ChoiceTeam[i][11], "~r~goodbye");
	            		else TextDrawSetString(ChoiceTeam[i][11], " ~r~Јoka");
		   			}
				}
	  		}
			if(TimeInput[i] == 1 && PlayerCheatCheck[i] == 0)
			{
				TimeInput[i] = 0;
				PlayerCheatCheck[i] = 1;
				ShowPlayerDialogZS(i, - 1, DIALOG_STYLE_MSGBOX, "_", "_", "_", "_");
				if(ChoiceTeamCheck[i][0] == 1)
				{
					TextDrawSetString(ChoiceTeam[i][11], "~w~~h~spawn");
					KickWithMessage(i, "Вы были отсоединены от игрового сервера. С причиной: Время на выбор класса вышло.");
				}
				else KickWithMessage(i, "Вы были отсоединены от игрового сервера. С причиной: Время на авторизацию/регистрацию вышло.");
	  		}
		}
  	}
	return 1;
}//5516 5512 5513

stock GetPlayerFps(playerid)
{
    SetPVarInt(playerid, "DrunkL", GetPlayerDrunkLevel(playerid));
    if(GetPVarInt(playerid, "DrunkL") > 100 && GetPVarInt(playerid, "LDrunkL") != GetPVarInt(playerid, "DrunkL"))
    {
        SetPVarInt(playerid, "FPS", GetPVarInt(playerid, "LDrunkL") - GetPVarInt(playerid, "DrunkL"));
        SetPVarInt(playerid, "LDrunkL", GetPVarInt(playerid, "DrunkL"));
        if(GetPVarInt(playerid, "FPS") > 0 && GetPVarInt(playerid, "FPS") < 256) return GetPVarInt(playerid, "FPS") - 1;
    }
    else SetPlayerDrunkLevel(playerid, 2000);
    return 1;
}

stock ArenaMapCamera(playerid, where, slot = 0)
{
    if(PlayerLogged[playerid] == 0 || Pause[playerid][1] >= 3) return 1;
    switch(where)
 	{
		case 1, 7, 15, 19, 21..22, 26..27, 29, 35, 38, 41..42, 45:
		{
			if(slot == 1)
			{
			    new Float: Pos[9];
 	    		GetPlayerCameraPos(playerid, Pos[0], Pos[1], Pos[2]);
	    		GetPlayerCameraFrontVector(playerid, Pos[3], Pos[4], Pos[5]);
				Pos[6] = Pos[0] + (Pos[3] * 5.0);
				Pos[7] = Pos[1] + (Pos[4] * 5.0);
				Pos[8] = Pos[2] + (Pos[5] * 5.0);
				InterpolateCameraPos(playerid, Pos[0], Pos[1], Pos[2], ArenaCamera[where][3], ArenaCamera[where][4], ArenaCamera[where][5], floatround(ArenaCamera[where][6]));
				InterpolateCameraLookAt(playerid, Pos[6], Pos[7], Pos[8], ArenaCamera[where][10], ArenaCamera[where][11], ArenaCamera[where][12], floatround(ArenaCamera[where][13]));
			}
			else
			{
			    InterpolateCameraPos(playerid, ArenaCamera[where][0], ArenaCamera[where][1], ArenaCamera[where][2], ArenaCamera[where][3], ArenaCamera[where][4], ArenaCamera[where][5], floatround(ArenaCamera[where][6]));
				InterpolateCameraLookAt(playerid, ArenaCamera[where][7], ArenaCamera[where][8], ArenaCamera[where][9], ArenaCamera[where][10], ArenaCamera[where][11], ArenaCamera[where][12], floatround(ArenaCamera[where][13]));
			}
		}
		default:
		{
			InterpolateCameraPos(playerid, ArenaCamera[where][0], ArenaCamera[where][1], ArenaCamera[where][2], ArenaCamera[where][3], ArenaCamera[where][4], ArenaCamera[where][5], floatround(ArenaCamera[where][6]));
			InterpolateCameraLookAt(playerid, ArenaCamera[where][7], ArenaCamera[where][8], ArenaCamera[where][9], ArenaCamera[where][10], ArenaCamera[where][11], ArenaCamera[where][12], floatround(ArenaCamera[where][13]));
		}
 	}
	return 1;
}

stock UpdateMysql(playerid, dialogid/*, slo = 0, slo1 = 0*/) //SAVE
{
    switch(dialogid)
    {
        case 1:
        {
            new string[49+9+ 19], str[19];
            format(str, sizeof(str), "%d,%d,%d,%d,%d,%d", 
			PlayerInfo[playerid][pClassWeapons][0], PlayerInfo[playerid][pClassWeapons][1], PlayerInfo[playerid][pClassWeapons][2], 
			PlayerInfo[playerid][pClassWeapons][3], PlayerInfo[playerid][pClassWeapons][4], PlayerInfo[playerid][pClassWeapons][5]);

            mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET classweapons='%s' WHERE id=%d", str, PlayerInfo[playerid][pRoomAccount]);
			return mysql_tquery(MysqlConnectID, string);
        }
        case 2:
        {
        	new string[44+9+ 19], str[19];
            format(str, sizeof(str), "%d,%d,%d,%d,%d,%d", 
			PlayerInfo[playerid][pMessage][0], PlayerInfo[playerid][pMessage][1], PlayerInfo[playerid][pMessage][2], 
			PlayerInfo[playerid][pMessage][3], PlayerInfo[playerid][pMessage][4], PlayerInfo[playerid][pMessage][5]);

			mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET message='%s' WHERE id=%d", str, PlayerInfo[playerid][pRoomAccount]);
			return mysql_tquery(MysqlConnectID, string);
        }
        case 3:
        {
			new string[41+9+ 26], str[26];
            format(str, sizeof(str), "%d,%d,%d,%d", 
			PlayerInfo[playerid][pDuel][0], PlayerInfo[playerid][pDuel][1], PlayerInfo[playerid][pDuel][2], PlayerInfo[playerid][pDuel][3]);

            mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET duel='%s' WHERE id=%d", str, PlayerInfo[playerid][pRoomAccount]);
			return mysql_tquery(MysqlConnectID, string);
        }
	}
	return 1;
}

stock HexToInt(const string[])
{
    if(!string[0]) return 0;
    new cur = 1, res = 0;
    for(new i = strlen(string); i > 0; i --)
    {
        res += cur*(string[i-1]-((string[i-1] < 58)?(48):(55)));
        cur = cur*16;
    }
    return res;
}

stock AchievementsInfo(room, playerid)//5530
{
	if(AchievementsCheck[playerid][0] != 0) return 1;
	new string[48+10+ 11* MAX_ADVANCE], info[2], lang = PlayerInfo[playerid][pRussifier][1];

    sscanf(AchievementText[room][3], "p<,>a<d>[2]", info);
    PlayerInfo[playerid][pAchievements][room] ++;
	if(PlayerInfo[playerid][pAchievements][room] >= info[1])
    {
        if(PlayerInfo[playerid][pInfoText][10] <= 1)
        {
			TextDrawHideForPlayer(playerid, ArenaInfo[playerid][0]);
			TextDrawHideForPlayer(playerid, ArenaInfo[playerid][1]);
			TextDrawHideForPlayer(playerid, ArenaInfo[playerid][2]);
			TextDrawHideForPlayer(playerid, ArenaInfo[playerid][10]);
			TextDrawHideForPlayer(playerid, ArenaInfo[playerid][11]);
			if(DuelCheck[playerid][3] != 0)
			{
				TextDrawHideForPlayer(playerid, ArenaInfo[playerid][8]);
				TextDrawHideForPlayer(playerid, ArenaInfo[playerid][9]);
			}
			if(ChoiceItemsCheck[playerid][0] == 1)
			{
				TextDrawHideForPlayer(playerid, DuelInfo[playerid][14]);
				TextDrawHideForPlayer(playerid, DuelInfo[playerid][34]);
			}	

            for(new x; x < 5; x ++) TextDrawShowForPlayer(playerid, AchievementsT[playerid][x]);
            TextDrawSetString(AchievementsT[playerid][2], TextDrawInfo[74][lang]);
            TextDrawSetString(AchievementsT[playerid][3], AchievementText[room][lang]);
            TextDrawSetString(AchievementsT[playerid][4], AchievementText[room][2]);
            PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0);
            AchievementsCheck[playerid][0] = gettime()+6;
        }
        if(PlayerInfo[playerid][pInfoText][10] == 2)
        {
            format(string, sizeof(string), "Получено новое достижение: {4FDF24}%s{FFFFFF}.", AchievementText[room][4]);
            SendClientMessage(playerid, -1, string);
            PlayerPlaySound(playerid, 6801, 0.0, 0.0, 0.0);
        }
    }

	new str[11* MAX_ADVANCE], str1[11];
    for(new x; x < MAX_ADVANCE; x ++)
    {
        format(str1, sizeof(str1), "%d,", PlayerInfo[playerid][pAchievements][x]);
        strcat(str, str1);
    }
    mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET achievements='%s' WHERE id=%d", str, PlayerInfo[playerid][pRoomAccount]);
    return mysql_tquery(MysqlConnectID, string);
}

stock PlayerText:CreateMenuSelection(playerid, check, const text[], Float:x, Float:y, modelindex, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fZoom)
{
	new PlayerText: Textdraw = CreatePlayerTextDraw(playerid, x, y, text);
	PlayerTextDrawFont(playerid, Textdraw, check);
 	PlayerTextDrawBackgroundColor(playerid, Textdraw, 0xFFFFFFCC);//0xFFFFFFAA
	PlayerTextDrawTextSize(playerid, Textdraw, 60.0, 60.0);
	if(check == 5)
	{
		PlayerTextDrawSetPreviewModel(playerid, Textdraw, modelindex);
		PlayerTextDrawSetPreviewRot(playerid, Textdraw, fRotX, fRotY, fRotZ, fZoom);
	}
	else PlayerTextDrawColor(playerid, Textdraw, 0xFFFFFFAA);//0xFFFFFFBB
	PlayerTextDrawSetSelectable(playerid, Textdraw, true);
	PlayerTextDrawShow(playerid, Textdraw);
	return Textdraw;
}

stock mS_GetNumberOfPages(ListID, playerid)
{
	new ItemAmount = (SelectionCheck[playerid][2]-SelectionCheck[playerid][2]);
	if((ItemAmount >= 24) && (ItemAmount%24) == 0) return(ItemAmount/24);
	else return(ItemAmount/24)+1;
}

stock ShowModelSelectionMenu(playerid, listid, stop = 0)
{
    if(stop == 2)
	{
	    new string[13];
	    for(new x = 0; x < 16; x ++)
	    {
	        if(x == 8)
	        {
		  		if(WeaponsSlotSpawn[playerid][MenuBuy[10][3]] == MenuBuy[10][0]) format(string, sizeof(string), "~g~$%d", MenuBuy[10][2]);
				else
				{
					if(PlayerInfo[playerid][pMoney] >= MenuBuy[10][2]) format(string, sizeof(string), "~g~~h~$%d", MenuBuy[10][2]);
					else format(string, sizeof(string), "~r~~h~$%d", MenuBuy[10][2]);
		  		}
				TextDrawSetString(SelectionPrice[playerid][8], string);
				if(WeaponsSlotSpawn[playerid][MenuBuy[8][3]] == MenuBuy[8][0]) format(string, sizeof(string), "~g~$%d", MenuBuy[8][2]);
				else
		        {
					if(PlayerInfo[playerid][pMoney] >= MenuBuy[8][2]) format(string, sizeof(string), "~g~~h~$%d", MenuBuy[8][2]);
					else format(string, sizeof(string), "~r~~h~$%d", MenuBuy[8][2]);
		  		}
		  		TextDrawSetString(SelectionPrice[playerid][9], string);
		  		if(WeaponsSlotSpawn[playerid][MenuBuy[9][3]] == MenuBuy[9][0]) format(string, sizeof(string), "~g~$%d", MenuBuy[9][2]);
		  		else
		  		{
					if(PlayerInfo[playerid][pMoney] >= MenuBuy[9][2]) format(string, sizeof(string), "~g~~h~$%d", MenuBuy[9][2]);
					else format(string, sizeof(string), "~r~~h~$%d", MenuBuy[9][2]);
				}
		        TextDrawSetString(SelectionPrice[playerid][10], string);
		        x = 10;
	  		}
	  		else
	  		{
	  		    if(WeaponsSlotSpawn[playerid][MenuBuy[x][3]] == MenuBuy[x][0]) format(string, sizeof(string), "~g~$%d", MenuBuy[x][2]);
				else
				{
					if(PlayerInfo[playerid][pMoney] >= MenuBuy[x][2]) format(string, sizeof(string), "~g~~h~$%d", MenuBuy[x][2]);
					else format(string, sizeof(string), "~r~~h~$%d", MenuBuy[x][2]);
		  		}
		  		TextDrawSetString(SelectionPrice[playerid][x], string);
	  		}
	    }
		if(PlayerInfo[playerid][pInteraction][0] >= 1) format(string, sizeof(string), "~g~$%d", MenuBuy[16][2]);
		else
		{
			if(PlayerInfo[playerid][pMoney] >= MenuBuy[16][2]) format(string, sizeof(string), "~g~~h~$%d", MenuBuy[16][2]);
			else format(string, sizeof(string), "~r~~h~$%d", MenuBuy[16][2]);
		}
		TextDrawSetString(SelectionPrice[playerid][16], string);
		if(GetPVarInt(playerid, "ArmorCheck") == 0)
		{
			if(Armour[playerid][4] >= 1) format(string, sizeof(string), "~g~$%d", MenuBuy[17][2]);
			else
			{
				if(PlayerInfo[playerid][pMoney] >= MenuBuy[17][2]) format(string, sizeof(string), "~g~~h~$%d", MenuBuy[17][2]);
				else format(string, sizeof(string), "~r~~h~$%d", MenuBuy[17][2]);
			}
			TextDrawSetString(SelectionPrice[playerid][17], string);
			
			if(PlayerInfo[playerid][pInteraction][2] >= 1) format(string, sizeof(string), "~g~$%d", MenuBuy[18][2]);
			else
			{
				if(PlayerInfo[playerid][pMoney] >= MenuBuy[18][2]) format(string, sizeof(string), "~g~~h~$%d", MenuBuy[18][2]);
				else format(string, sizeof(string), "~r~~h~$%d", MenuBuy[18][2]);
			}
			TextDrawSetString(SelectionPrice[playerid][18], string);
			if(PlayerInfo[playerid][pInteraction][3] >= 1) format(string, sizeof(string), "~g~$%d", MenuBuy[19][2]);
			else
			{
				if(PlayerInfo[playerid][pMoney] >= MenuBuy[19][2]) format(string, sizeof(string), "~g~~h~$%d", MenuBuy[19][2]);
				else format(string, sizeof(string), "~r~~h~$%d", MenuBuy[19][2]);
			}
			TextDrawSetString(SelectionPrice[playerid][19], string);
		}
		else
		{
		    if(PlayerInfo[playerid][pInteraction][4] >= 1) format(string, sizeof(string), "~g~$%d", MenuBuy[20][2]);
			else
			{
				if(PlayerInfo[playerid][pMoney] >= MenuBuy[20][2]) format(string, sizeof(string), "~g~~h~$%d", MenuBuy[20][2]);
				else format(string, sizeof(string), "~r~~h~$%d", MenuBuy[20][2]);
			}
			TextDrawSetString(SelectionPrice[playerid][17], string);
			if(PlayerInfo[playerid][pInteraction][5] >= 1) format(string, sizeof(string), "~g~$%d", MenuBuy[21][2]);
			else
			{
				if(PlayerInfo[playerid][pMoney] >= MenuBuy[21][2]) format(string, sizeof(string), "~g~~h~$%d", MenuBuy[21][2]);
				else format(string, sizeof(string), "~r~~h~$%d", MenuBuy[21][2]);
			}
			TextDrawSetString(SelectionPrice[playerid][18], string);
			if(PlayerInfo[playerid][pInteraction][6] >= 1) format(string, sizeof(string), "~g~$%d", MenuBuy[22][2]);
			else
			{
				if(PlayerInfo[playerid][pMoney] >= MenuBuy[22][2]) format(string, sizeof(string), "~g~~h~$%d", MenuBuy[22][2]);
				else format(string, sizeof(string), "~r~~h~$%d", MenuBuy[22][2]);
			}
			TextDrawSetString(SelectionPrice[playerid][19], string);
		}
		if(listid == 256) return 1;
 	}
	if(listid == 255)
	{
		DeletePVar(playerid, "ArmorCheck");
	    if(stop == 0) CancelSelectTextDraw(playerid);
		TextDrawSetString(MenuSelection[playerid][8], "LD_CHAT:badchat");
        for(new x; x < 24; x ++)
	    {
	        if(x <= 8) SelectionCheck[playerid][x] = 0;
	        PlayerTextDrawDestroy(playerid, gSelectionItems[playerid][x]);
	        gSelectionItems[playerid][x] = PlayerText:INVALID_TEXT_DRAW;
	        if(x < 20)
			{
			    if(x < 18) TextDrawHideForPlayer(playerid, MenuSelection[playerid][x]);
				TextDrawHideForPlayer(playerid, SelectionPrice[playerid][x]);
	        }
	    }
   		if(PlayerInfo[playerid][pInfoText][0] == 0 && ServerHelpInfo[playerid][1] == 0 && PlayerInfo[playerid][pFreeMode] == 0)
		{
		    new lang = PlayerInfo[playerid][pRussifier][1];
			TextDrawShowForPlayer(playerid, ArenaInfo[playerid][0]);
			TextDrawShowForPlayer(playerid, ArenaInfo[playerid][1]);
			TextDrawShowForPlayer(playerid, ArenaInfo[playerid][2]);
			TextDrawShowForPlayer(playerid, ArenaInfo[playerid][10]);
			TextDrawShowForPlayer(playerid, ArenaInfo[playerid][11]);
			TextDrawSetString(ArenaInfo[playerid][1], TextDrawInfo[56][lang]);
 		    TextDrawSetString(ArenaInfo[playerid][0], TextDrawInfo[57][lang]);
		}
		if(PlayerInfo[playerid][pInfoText][3] == 0) TextDrawShowForPlayer(playerid, HealthPure[playerid]);
	    TextDrawLetterSize(MenuSelection[playerid][9], 0.5, 5.6);
	    TextDrawSetSelectable(MenuSelection[playerid][10], true);
	    return TextDrawSetSelectable(MenuSelection[playerid][11], true);
	}
	if(listid == 257)
	{
	    new string[600];
	    if(WeaponsSlotSpawn[playerid][0] == 22) strcat(string, "9mm\t{539c53}%d$\n");
	    else
		{
			if(PlayerInfo[playerid][pMoney] >= MenuBuy[0][2]) strcat(string, "9mm\t{61dd61}%d$\n");
			else strcat(string, "9mm\t{f44747}%d$\n");
		}
		if(WeaponsSlotSpawn[playerid][0] == 23) strcat(string, "9mm с глушителем\t{539c53}%d$\n");
		else
		{
			if(PlayerInfo[playerid][pMoney] >= MenuBuy[1][2]) strcat(string, "9mm с глушителем\t{61dd61}%d$\n");
			else strcat(string, "9mm с глушителем\t{f44747}%d$\n");
		}
		if(WeaponsSlotSpawn[playerid][0] == 24) strcat(string, "Desert Eagle\t{539c53}%d$\n");
		else
		{
			if(PlayerInfo[playerid][pMoney] >= MenuBuy[2][2]) strcat(string, "Desert Eagle\t{61dd61}%d$\n");
			else strcat(string, "Desert Eagle\t{f44747}%d$\n");
		}
		if(WeaponsSlotSpawn[playerid][1] == 25) strcat(string, "Дробовик\t{539c53}%d$\n");
		else
		{
			if(PlayerInfo[playerid][pMoney] >= MenuBuy[3][2]) strcat(string, "Дробовик\t{61dd61}%d$\n");
			else strcat(string, "Дробовик\t{f44747}%d$\n");
		}
		if(WeaponsSlotSpawn[playerid][1] == 26) strcat(string, "Обрез\t{539c53}%d$\n");
		else
		{
			if(PlayerInfo[playerid][pMoney] >= MenuBuy[4][2]) strcat(string, "Обрез\t{61dd61}%d$\n");
			else strcat(string, "Обрез\t{f44747}%d$\n");
		}
		if(WeaponsSlotSpawn[playerid][1] == 27) strcat(string, "Боевой Дробовик\t{539c53}%d$\n");
		else
		{
			if(PlayerInfo[playerid][pMoney] >= MenuBuy[5][2]) strcat(string, "Боевой Дробовик\t{61dd61}%d$\n");
			else strcat(string, "Боевой Дробовик\t{f44747}%d$\n");
		}
		if(WeaponsSlotSpawn[playerid][2] == 28) strcat(string, "Micro Uzi\t{539c53}%d$\n");
		else
		{
			if(PlayerInfo[playerid][pMoney] >= MenuBuy[6][2]) strcat(string, "Micro Uzi\t{61dd61}%d$\n");
			else strcat(string, "Micro Uzi\t{f44747}%d$\n");
		}
		if(WeaponsSlotSpawn[playerid][2] == 29) strcat(string, "MP5\t{539c53}%d$\n");
		else
		{
			if(PlayerInfo[playerid][pMoney] >= MenuBuy[7][2]) strcat(string, "MP5\t{61dd61}%d$\n");
			else strcat(string, "MP5\t{f44747}%d$\n");
		}
		if(WeaponsSlotSpawn[playerid][3] == 30) strcat(string, "AK-47\t{539c53}%d$\n");
		else
  		{
			if(PlayerInfo[playerid][pMoney] >= MenuBuy[8][2]) strcat(string, "AK-47\t{61dd61}%d$\n");
			else strcat(string, "AK-47\t{f44747}%d$\n");
		}
		if(WeaponsSlotSpawn[playerid][3] == 31) strcat(string, "M4\t{539c53}%d$\n");
		else
		{
			if(PlayerInfo[playerid][pMoney] >= MenuBuy[9][2]) strcat(string, "M4\t{61dd61}%d$\n");
			else strcat(string, "M4\t{f44747}%d$\n");
		}
		if(WeaponsSlotSpawn[playerid][2] == 32) strcat(string, "Tec-9\t{539c53}%d$\n");
		else
		{
			if(PlayerInfo[playerid][pMoney] >= MenuBuy[10][2]) strcat(string, "Tec-9\t{61dd61}%d$\n");
			else strcat(string, "Tec-9\t{f44747}%d$\n");
		}
		if(WeaponsSlotSpawn[playerid][4] == 33) strcat(string, "Деревенское Ружье\t{539c53}%d$\n");
		else
		{
			if(PlayerInfo[playerid][pMoney] >= MenuBuy[11][2]) strcat(string, "Деревенское Ружье\t{61dd61}%d$\n");
			else strcat(string, "Деревенское Ружье\t{f44747}%d$\n");
		}
		if(WeaponsSlotSpawn[playerid][4] == 34) strcat(string, "Снайперская Винтовка\t{539c53}%d$\n");
		else
		{
			if(PlayerInfo[playerid][pMoney] >= MenuBuy[12][2]) strcat(string, "Снайперская Винтовка\t{61dd61}%d$\n");
			else strcat(string, "Снайперская Винтовка\t{f44747}%d$\n");
		}
		if(WeaponsSlotSpawn[playerid][5] == 16) strcat(string, "Осколочная Граната\t{539c53}%d$\n");
		else
		{
			if(PlayerInfo[playerid][pMoney] >= MenuBuy[13][2]) strcat(string, "Осколочная Граната\t{61dd61}%d$\n");
			else strcat(string, "Осколочная Граната\t{f44747}%d$\n");
		}
		if(WeaponsSlotSpawn[playerid][5] == 17) strcat(string, "Дымовая Граната\t{539c53}%d$\n");
		else
		{
			if(PlayerInfo[playerid][pMoney] >= MenuBuy[14][2]) strcat(string, "Дымовая Граната\t{61dd61}%d$\n");
			else strcat(string, "Дымовая Граната\t{f44747}%d$\n");
		}
		if(WeaponsSlotSpawn[playerid][5] == 18) strcat(string, "Коктейль Молотова\t{539c53}%d$\n");
		else
		{
			if(PlayerInfo[playerid][pMoney] >= MenuBuy[15][2]) strcat(string, "Коктейль Молотова\t{61dd61}%d$\n");
			else strcat(string, "Коктейль Молотова\t{f44747}%d$\n");
		}
		if(PlayerInfo[playerid][pInteraction][0] >= 1) strcat(string, "Медицинская аптечка\t{539c53}%d$\n");
		else
		{
			if(PlayerInfo[playerid][pMoney] >= MenuBuy[16][2]) strcat(string, "Медицинская аптечка\t{61dd61}%d$\n");
			else strcat(string, "Медицинская аптечка\t{f44747}%d$\n");
		}
		if(Armour[playerid][4] >= 1) strcat(string, "Шлем\t{539c53}%d$\n");
		else
		{
			if(PlayerInfo[playerid][pMoney] >= MenuBuy[17][2]) strcat(string, "Шлем\t{61dd61}%d$\n");
			else strcat(string, "Шлем\t{f44747}%d$\n");
		}
		if(PlayerInfo[playerid][pInteraction][2] >= 1) strcat(string, "Динамит\t{539c53}%d$\n");
		else
		{
			if(PlayerInfo[playerid][pMoney] >= MenuBuy[18][2]) strcat(string, "Динамит\t{61dd61}%d$\n");
			else strcat(string, "Динамит\t{f44747}%d$\n");
		}
		if(PlayerInfo[playerid][pInteraction][3] >= 1) strcat(string, "Наземная мина\t{539c53}%d$\n");
		else
		{
			if(PlayerInfo[playerid][pMoney] >= MenuBuy[19][2]) strcat(string, "Наземная мина\t{61dd61}%d$\n");
			else strcat(string, "Наземная мина\t{f44747}%d$\n");
		}
		if(PlayerInfo[playerid][pInteraction][4] >= 1) strcat(string, "Броня: Стандартная\t{539c53}%d$\n");
		else
		{
			if(PlayerInfo[playerid][pMoney] >= MenuBuy[20][2]) strcat(string, "Броня: Стандартная\t{61dd61}%d$\n");
			else strcat(string, "Броня: Стандартная\t{f44747}%d$\n");
		}
		if(PlayerInfo[playerid][pInteraction][5] >= 1) strcat(string, "Броня: Тяжелая\t{539c53}%d$\n");
		else
		{
			if(PlayerInfo[playerid][pMoney] >= MenuBuy[21][2]) strcat(string, "Броня: Тяжелая\t{61dd61}%d$\n");
			else strcat(string, "Броня: Тяжелая\t{f44747}%d$\n");
		}
		if(PlayerInfo[playerid][pInteraction][6] >= 1) strcat(string, "Броня: Сверхтяжелая\t{539c53}%d$");
		else
		{
			if(PlayerInfo[playerid][pMoney] >= MenuBuy[22][2]) strcat(string, "Броня: Сверхтяжелая\t{61dd61}%d$");
			else strcat(string, "Броня: Сверхтяжелая\t{f44747}%d$");
		}
		format(string, sizeof(string), string, MenuBuy[0][2], MenuBuy[1][2], MenuBuy[2][2], MenuBuy[3][2], MenuBuy[4][2], MenuBuy[5][2], MenuBuy[6][2], MenuBuy[7][2], MenuBuy[8][2], MenuBuy[9][2], MenuBuy[10][2], MenuBuy[11][2], MenuBuy[12][2], MenuBuy[13][2], MenuBuy[14][2], MenuBuy[15][2], MenuBuy[16][2], MenuBuy[17][2], MenuBuy[18][2], MenuBuy[19][2], MenuBuy[20][2], MenuBuy[21][2], MenuBuy[22][2]);
		return ShowPlayerDialogZS(playerid, 158, DIALOG_STYLE_TABLIST, "Меню закупок", string, "Выбрать", "Отмена");
	}
	if(SelectionCheck[playerid][0] == 1) return 1;
	SelectionCheck[playerid][0] = 1;
	SelectionCheck[playerid][1] = listid;
	SelectionCheck[playerid][2] = 0;
	if(listid == 0 || listid == 2 || listid == 4) SelectTextDraw(playerid, 0x61dd61FF);//0x88AA88FF
	TextDrawShowForPlayer(playerid, MenuSelection[playerid][0]);
    TextDrawShowForPlayer(playerid, MenuSelection[playerid][1]);
    TextDrawShowForPlayer(playerid, MenuSelection[playerid][2]);
    TextDrawShowForPlayer(playerid, MenuSelection[playerid][3]);
    if(PlayerInfo[playerid][pInfoText][3] == 0) TextDrawHideForPlayer(playerid, HealthPure[playerid]);
    if(PlayerInfo[playerid][pInfoText][0] == 0 && PlayerInfo[playerid][pFreeMode] == 0)
	{
		TextDrawHideForPlayer(playerid, ArenaInfo[playerid][0]);
		TextDrawHideForPlayer(playerid, ArenaInfo[playerid][1]);
		TextDrawHideForPlayer(playerid, ArenaInfo[playerid][2]);
		TextDrawHideForPlayer(playerid, ArenaInfo[playerid][10]);
		TextDrawHideForPlayer(playerid, ArenaInfo[playerid][11]);
	}
    if(listid == 0)
	{
	    for(new x; x < 20; x ++) TextDrawShowForPlayer(playerid, SelectionPrice[playerid][x]);
	    if(PlayerInfo[playerid][pLevel][1] >= LevelScore[3][0])
	    {
	    	TextDrawShowForPlayer(playerid, MenuSelection[playerid][7]);
        	if(PlayerInfo[playerid][pAutoBuyWeapon][4] == 0) TextDrawSetString(MenuSelection[playerid][7], "LD_CHAT:thumbdn");
        	else TextDrawSetString(MenuSelection[playerid][7], "LD_CHAT:thumbup");
        	TextDrawShowForPlayer(playerid, MenuSelection[playerid][8]);
    	}
 	}
 	new maxItem = 24;
	switch(listid)
 	{
  		case 0:
  		{
  			maxItem = 22;
  			SelectionCheck[playerid][9] = 22;
  		}
  		case 1:
  		{
    		SelectionCheck[playerid][4] = 4;
			SelectionCheck[playerid][3] = 12;
			SelectionCheck[playerid][9] = 312;
			TogglePlayerControllableZS(playerid, 0);
   		}
   		case 2:
		{
			SelectionCheck[playerid][3] = 8;
			SelectionCheck[playerid][9] = 197;
		}
  		case 3:
		{
			SelectionCheck[playerid][3] = 1;
			SelectionCheck[playerid][9] = 33;//количество предметов
		}
  		case 4:
		{
  			maxItem = 17;
			SelectionCheck[playerid][3] = 0;
			SelectionCheck[playerid][9] = 17;
		}
	}
	if(SelectionCheck[playerid][3] >= 1)
	{
    	new string[9];
		format(string, sizeof(string), "00/%02d", SelectionCheck[playerid][3]);
	    TextDrawSetString(MenuSelection[playerid][5], string);
	    TextDrawShowForPlayer(playerid, MenuSelection[playerid][4]);
	    TextDrawShowForPlayer(playerid, MenuSelection[playerid][5]);
	    TextDrawShowForPlayer(playerid, MenuSelection[playerid][6]);
	}
 	mS_ShowPlayerMPs(playerid, maxItem);
 	return 1;
}

stock mS_ShowPlayerMPs(playerid, number = 24)//3355
{
	new string[20], check[3], Float:Base[2] = {76.0, 60.9};
    check[0] = SelectionCheck[playerid][2]*number;
    for(new x; x < 24; x ++)
    {
        PlayerTextDrawDestroy(playerid, gSelectionItems[playerid][x]);
        gSelectionItems[playerid][x] = PlayerText:INVALID_TEXT_DRAW;
    }
    for(new x; x < number; x ++)
	{
	    if(check[1] == 0)
		{
	        Base[0] = 76.0;//немного из коробки
	        Base[1] += 77.0;//перемещение по Y для следующей строки
		}
		switch(SelectionCheck[playerid][1])
		{
		    case 0:
		    {
		        if(ClientCheck[playerid] == 1)
		        {
					format(string, sizeof(string), "mdl-2000:weapon%d", check[0]);
                	gSelectionItems[playerid][x] = CreateMenuSelection(playerid, 4, string, Base[0], Base[1], 0, 0.0, 0.0, 0.0, 0.0);
                }
                else gSelectionItems[playerid][x] = CreateMenuSelection(playerid, 5, "_", Base[0], Base[1], floatround(PositionWeaponID[check[0]][0]), PositionWeaponID[check[0]][1], PositionWeaponID[check[0]][2], PositionWeaponID[check[0]][3], PositionWeaponID[check[0]][4]);
				gSelectionItemsTag[playerid][x] = check[0];
		    }
		    case 1:
		    {
		    	gSelectionItems[playerid][x] = CreateMenuSelection(playerid, 5, "_", Base[0], Base[1], check[0], 0.0, 0.0, 0.0, 1.0);
				gSelectionItemsTag[playerid][x] = check[0];
			}
			case 2:
			{
			    gSelectionItems[playerid][x] = CreateMenuSelection(playerid, 5, "_", Base[0], Base[1], RoomAuto[check[0]], -20.0, 10.0, 0.0, 1.0);
                gSelectionItemsTag[playerid][x] = RoomAuto[check[0]];
			}
			case 3:
			{
    			if(check[0] >= 16) check[2] = 7;
				else check[2] = 0;
				if(ClientCheck[playerid] == 1)
				{
    				format(string, sizeof(string), "mdl-2000:weapon%d", check[0]+check[2]);
    				gSelectionItems[playerid][x] = CreateMenuSelection(playerid, 4, string, Base[0], Base[1], 0, 0.0, 0.0, 0.0, 0.0);
    			}
    			else gSelectionItems[playerid][x] = CreateMenuSelection(playerid, 5, "_", Base[0], Base[1], floatround(PositionWeaponID[check[0]+check[2]][0]), PositionWeaponID[check[0]+check[2]][1], PositionWeaponID[check[0]+check[2]][2], PositionWeaponID[check[0]+check[2]][3], PositionWeaponID[check[0]+check[2]][4]);
				gSelectionItemsTag[playerid][x] = check[0];
			}
			case 4:
			{
			    gSelectionItems[playerid][x] = CreateMenuSelection(playerid, 5, "_", Base[0], Base[1], WheelCarId[check[0]], -30.0, 0.0, 86.0, 0.9);
                gSelectionItemsTag[playerid][x] = WheelCarId[check[0]];
			}
		}
		Base[0] += 61.2; // перемещение по х для следующего спрайта
		check[0] ++;
		check[1] ++;
		if(check[1] == 8) check[1] = 0;
		if(check[0] >= SelectionCheck[playerid][9]) break;
	}
	return 1;
}

stock AddCommasToInt(number)
{
    new tStr[12]; 
    format(tStr, sizeof(tStr), "%d", number);
    if(strlen(tStr) < 4) return tStr;
    new iPos = strlen(tStr), iCount = 1;
    while(iPos > 0)
    {
		if(iCount == 4)
		{
	    	iCount = 0;
	    	strins(tStr, " ", iPos, 1);
    	    iPos ++;
        }
        iCount ++;
        iPos --;
    }
    return tStr;
}

stock MoneyInfoCall(playerid, money, textdraw)
{
    if((money == 1 && PlayerInfo[playerid][pMoney] < money) || (PlayerInfo[playerid][pMoney] >= 1000000000 && textdraw == 0)) return 1;
	new string[65];
	if(textdraw == 0)
	{
	    PlayerInfo[playerid][pMoney] += money;
	    if(PlayerInfo[playerid][pInfoText][8] == 0) format(string, sizeof(string), "+$%s", AddCommasToInt(money));
 	}
	else
	{
		PlayerInfo[playerid][pMoney] -= money;
		if(PlayerInfo[playerid][pInfoText][8] == 0) format(string, sizeof(string), "~r~~h~-$%s", AddCommasToInt(money));
	}
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, PlayerInfo[playerid][pMoney]);
	if(PlayerInfo[playerid][pInfoText][8] == 0)
	{
	    TextDrawSetString(MoneyInfo[playerid], string);
		TextDrawShowForPlayer(playerid, MoneyInfo[playerid]);
   		MoneyInfoTime[playerid] = gettime() + 3;
  	}
	mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET money=%d WHERE id=%d", PlayerInfo[playerid][pMoney], PlayerInfo[playerid][pRoomAccount]);
	return mysql_tquery(MysqlConnectID, string);
}

stock TeamColor(playerid)
{
    foreach(new i: Player)
	{
 		if(ChoiceTeamCheck[playerid][2] != ChoiceTeamCheck[i][2])
		{
            switch(ChoiceTeamCheck[i][2])
            {
                case 1: SetPlayerMarkerForPlayer(playerid, i, 0x559FCD00);
                case 2: SetPlayerMarkerForPlayer(playerid, i, 0xF4AC5000);
                case 256: SetPlayerMarkerForPlayer(playerid, i, 0xFFFFFF00);
			}
            switch(ChoiceTeamCheck[playerid][2])
            {
                case 1: SetPlayerMarkerForPlayer(i, playerid, 0x559FCD00);
                case 2: SetPlayerMarkerForPlayer(i, playerid, 0xF4AC5000);
                case 256: SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
            }
		}
		else if(ChoiceTeamCheck[playerid][2] == ChoiceTeamCheck[i][2])
		{
            switch(ChoiceTeamCheck[i][2])
            {
                case 1: SetPlayerMarkerForPlayer(playerid, i, 0x559FCDFF);
				case 2: SetPlayerMarkerForPlayer(playerid, i, 0xF4AC50FF);
				case 256: SetPlayerMarkerForPlayer(playerid, i, 0xFFFFFF44);
			}
			switch(ChoiceTeamCheck[playerid][2])
            {
                case 1: SetPlayerMarkerForPlayer(i, playerid, 0x559FCDFF);
				case 2: SetPlayerMarkerForPlayer(i, playerid, 0xF4AC50FF);
				case 256: SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF44);
			}
		}
	}
	return 1;
}

stock SetPlayerAttachedObjectZS(playerid, modelid)
{
	switch(modelid)
	{
	    case 19514:
	    {
			switch(GetPlayerSkin(playerid))
 			{
    			case 284: SetPlayerAttachedObject(playerid, 6, 19514, 2, 0.122999, 0.023000, 0.007999, 0.000000, 0.000000, 0.000000, 1.167000, 1.217000, 1.184000);
				case 285: SetPlayerAttachedObject(playerid, 6, 19514, 2, 0.109999, 0.012000, 0.006000, 0.000000, 0.000000, 0.000000, 1.037000, 1.062000, 1.059000);
				case 128: SetPlayerAttachedObject(playerid, 6, 19514, 2, 0.109999, 0.000000, 0.001999, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.118000);
				case 192: SetPlayerAttachedObject(playerid, 6, 19514, 2, 0.124000, -0.003999, 0.000000, 0.000000, 0.000000, 0.000000, 1.001000, 1.082000, 1.000000);
				case 124: SetPlayerAttachedObject(playerid, 6, 19514, 2, 0.119000, 0.000000, 0.002000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.044000);
				default: SetPlayerAttachedObject(playerid, 6, 19514, 2, 0.11, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
			}
			return 1;
 		}
 		case 19515:
 		{
 		    switch(GetPlayerSkin(playerid))
            {
				case 284: SetPlayerAttachedObject(playerid, 9, 19515, 1, 0.065000, 0.056000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.097000, 1.000000);
				case 285: SetPlayerAttachedObject(playerid, 9, 19515, 1, 0.090999, 0.049000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.042000, 1.000000);
    			case 306: SetPlayerAttachedObject(playerid, 9, 19515, 1, 0.104000, 0.052000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 307: SetPlayerAttachedObject(playerid, 9, 19515, 1, 0.099999, 0.052000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 286: SetPlayerAttachedObject(playerid, 9, 19515, 1, 0.083999, 0.035000, 0.006000, 0.000000, 0.000000, 0.000000, 1.000000, 1.259000, 1.000000);
				case 265: SetPlayerAttachedObject(playerid, 9, 19515, 1, 0.061000, 0.036000, -0.002000, 0.000000, 0.000000, 0.000000, 1.000000, 1.221000, 1.000000);
				case 122: SetPlayerAttachedObject(playerid, 9, 19515, 1, 0.085999, 0.039000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.039000, 1.000000);
				case 124: SetPlayerAttachedObject(playerid, 9, 19515, 1, 0.079999, 0.070000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.168999, 1.000000);
    			case 192: SetPlayerAttachedObject(playerid, 9, 19515, 1, 0.103999, 0.066000, 0.003999, 0.000000, 0.000000, 0.000000, 1.000000, 1.203000, 1.000000);
				case 126: SetPlayerAttachedObject(playerid, 9, 19515, 1, 0.063000, 0.035000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.086000, 1.000000);
				case 217: SetPlayerAttachedObject(playerid, 9, 19515, 1, 0.079999, 0.052000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				default: SetPlayerAttachedObject(playerid, 9, 19515, 1, 0.08, 0.052, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
			}
			return 1;
 		}
 		case 19036..19038:
 		{
 			switch(GetPlayerSkin(playerid))
            {
				case 284: SetPlayerAttachedObject(playerid, 5, modelid, 2, 0.107000, 0.065000, 0.000000, 90.000000, 90.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 306: SetPlayerAttachedObject(playerid, 5, modelid, 2, 0.072000, 0.042999, -0.002999, 90.000000, 90.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 307: SetPlayerAttachedObject(playerid, 5, modelid, 2, 0.080000, 0.033999, -0.002999, 90.000000, 90.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 286: SetPlayerAttachedObject(playerid, 5, modelid, 2, 0.092000, 0.027999, -0.004000, 90.000000, 90.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 265: SetPlayerAttachedObject(playerid, 5, modelid, 2, 0.096999, 0.023999, -0.000999, 90.000000, 90.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 285: SetPlayerAttachedObject(playerid, 5, modelid, 2, 0.093000, 0.032000, 0.003000, 90.000000, 90.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 122: SetPlayerAttachedObject(playerid, 5, modelid, 2, 0.100000, 0.035999, -0.000999, 90.000000, 90.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 124: SetPlayerAttachedObject(playerid, 5, modelid, 2, 0.095000, 0.036999, 0.000000, 90.000000, 90.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 192: SetPlayerAttachedObject(playerid, 5, modelid, 2, 0.094000, 0.040999, 0.000000, 90.000000, 90.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 292: SetPlayerAttachedObject(playerid, 5, modelid, 2, 0.087000, 0.027999, -0.004999, 90.000000, 90.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 126: SetPlayerAttachedObject(playerid, 5, modelid, 2, 0.101000, 0.038999, -0.003000, 90.000000, 90.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 217: SetPlayerAttachedObject(playerid, 5, modelid, 2, 0.087999, 0.035999, -0.002999, 90.000000, 90.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				default: SetPlayerAttachedObject(playerid, 5, modelid, 2, 0.107000, 0.067999, 0.000000, 90.000000, 90.000000, 0.000000, 1.000000, 1.000000, 1.000000);
            }
            return 1;
 		}
		case 11704: return SetPlayerAttachedObject(playerid, 5, 11704, 2, 0.059000, 0.064999, 0.000999, -177.599990, 90.000000, 0.000000, 0.354999, 1.000000, 0.478999);
		case 19078:
 		{
 			switch(GetPlayerSkin(playerid))
            {
				case 284: SetPlayerAttachedObject(playerid, 8, 19078, 1, 0.288149, -0.062100, 0.167081, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 306: SetPlayerAttachedObject(playerid, 8, 19078, 1, 0.352149, -0.080100, 0.131081, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 307: SetPlayerAttachedObject(playerid, 8, 19078, 1, 0.352149, -0.080100, 0.131081, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 286: SetPlayerAttachedObject(playerid, 8, 19078, 1, 0.326149, -0.080100, 0.155081, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 265: SetPlayerAttachedObject(playerid, 8, 19078, 1, 0.300149, -0.091100, 0.165081, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 285: SetPlayerAttachedObject(playerid, 8, 19078, 1, 0.344149, -0.083100, 0.152081, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 122: SetPlayerAttachedObject(playerid, 8, 19078, 1, 0.334149, -0.083100, 0.140081, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 124: SetPlayerAttachedObject(playerid, 8, 19078, 1, 0.333149, -0.066100, 0.140081, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 192: SetPlayerAttachedObject(playerid, 8, 19078, 1, 0.358149, -0.088100, 0.140081, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 292: SetPlayerAttachedObject(playerid, 8, 19078, 1, 0.346149, -0.105100, 0.140081, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 126: SetPlayerAttachedObject(playerid, 8, 19078, 1, 0.302149, -0.071100, 0.160081, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 217: SetPlayerAttachedObject(playerid, 8, 19078, 1, 0.316149, -0.071100, 0.151081, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				default: SetPlayerAttachedObject(playerid, 8, 19078, 1, 0.288149, -0.062100, 0.167081, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
			}
			return 1;
		}
		case 18911..18920:
		{
		    switch(GetPlayerSkin(playerid))
		    {
				case 284: SetPlayerAttachedObject(playerid, 5, modelid, 2, 0.082000, 0.048999, 0.005000, 90.000000, 180.000000, 90.000000, 1.000000, 1.000000, 1.000000);
				case 306: SetPlayerAttachedObject(playerid, 5, modelid, 2, 0.067000, 0.029999, -0.002999, 90.000000, 180.000000, 90.000000, 1.000000, 1.000000, 1.000000);
				case 307: SetPlayerAttachedObject(playerid, 5, modelid, 2, 0.068000, 0.028999, -0.000999, 90.000000, 180.000000, 90.000000, 1.000000, 1.000000, 1.000000);
				case 286: SetPlayerAttachedObject(playerid, 5, modelid, 2, 0.088000, 0.015999, -0.000999, 90.000000, 180.000000, 90.000000, 1.000000, 1.000000, 1.000000);
				case 265: SetPlayerAttachedObject(playerid, 5, modelid, 2, 0.082000, 0.015999, -0.001999, 90.000000, 180.000000, 90.000000, 1.000000, 1.000000, 1.000000);
				case 285: SetPlayerAttachedObject(playerid, 5, modelid, 2, 0.082000, 0.032999, 0.001000, 90.000000, 180.000000, 90.000000, 1.000000, 1.000000, 1.000000);
				case 122: SetPlayerAttachedObject(playerid, 5, modelid, 2, 0.086000, 0.025999, -0.002999, 90.000000, 180.000000, 90.000000, 1.000000, 1.000000, 1.000000);
				case 124: SetPlayerAttachedObject(playerid, 5, modelid, 2, 0.096000, 0.033999, -0.001999, 90.000000, 180.000000, 90.000000, 1.000000, 1.000000, 1.000000);
				case 192: SetPlayerAttachedObject(playerid, 5, modelid, 2, 0.085000, 0.023999, -0.001999, 90.000000, 180.000000, 90.000000, 1.000000, 1.000000, 1.000000);
				case 292: SetPlayerAttachedObject(playerid, 5, modelid, 2, 0.079000, 0.013999, -0.003999, 90.000000, 180.000000, 90.000000, 1.000000, 1.000000, 1.000000);
				case 126: SetPlayerAttachedObject(playerid, 5, modelid, 2, 0.092000, 0.023999, -0.000999, 90.000000, 180.000000, 90.000000, 1.000000, 1.000000, 1.000000);
				case 217: SetPlayerAttachedObject(playerid, 5, modelid, 2, 0.092000, 0.023999, -0.002999, 90.000000, 180.000000, 90.000000, 1.000000, 1.000000, 1.000000);
                default: SetPlayerAttachedObject(playerid, 5, modelid, 2, 0.092000, 0.048999, -0.001999, 90.000000, 180.000000, 90.000000, 1.000000, 1.000000, 1.000000);
			}
			return 1;
		}
		case 18891..18905:
		{
			switch(GetPlayerSkin(playerid))
		    {
				case 284: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.135999, 0.015999, 0.005000, 90.000000, 180.000000, 90.000000, 1.411000, 1.292999, 1.176000);case 306: SetPlayerAttachedObject(playerid, 5, 18891, 2, 0.121999, 0.005999, -0.000999, 90.000000, 180.000000, 90.000000, 1.102999, 1.000000, 1.040000);
				case 307: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.114000, 0.007999, -0.000999, 90.000000, 180.000000, 90.000000, 1.069000, 1.000000, 1.000000);
				case 286: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.119999, 0.004000, 0.001000, 90.000000, 180.000000, 90.000000, 1.000000, 1.027999, 0.966000);
				case 265: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.118999, 0.002000, -0.001999, 90.000000, 180.000000, 90.000000, 1.000000, 1.000000, 1.000000);
				case 285: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.137000, 0.003999, 0.006000, 90.000000, 180.000000, 90.000000, 1.410000, 1.000000, 1.324999);
				case 122: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.119999, 0.000999, -0.000999, 90.000000, 180.000000, 90.000000, 1.059000, 1.000000, 1.001999);
				case 124: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.134000, 0.005999, 0.002000, 90.000000, 180.000000, 90.000000, 1.046000, 1.000000, 1.034000);
				case 192: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.142999, 0.001999, 0.002000, 90.000000, 180.000000, 90.000000, 1.000000, 1.000000, 1.037000);
				case 292: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.107999, -0.004000, -0.004999, 90.000000, 180.000000, 90.000000, 1.000000, 1.000000, 1.000000);
				case 126: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.126999, -0.007999, 0.001000, 90.000000, 180.000000, 90.000000, 1.084000, 1.000000, 1.108000);
				case 217: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.128999, 0.014000, -0.002999, 90.000000, 180.000000, 90.000000, 1.029000, 1.000000, 1.014000);
		    	default: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.135999, 0.028999, -0.000999, 90.000000, 180.000000, 90.000000, 1.131000, 1.000000, 1.085000);
	  		}
	  		return 1;
		}
		case 18947..18951:
  		{
  		    switch(GetPlayerSkin(playerid))
		    {
				case 284: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.153999, 0.018999, 0.010999, 0.000000, 0.000000, 0.000000, 1.000000, 1.069000, 1.207000);
				case 306: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.127999, 0.009999, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 307: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.115999, 0.009999, 0.003000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 286: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.124999, 0.009999, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 265: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.120000, 0.009999, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 285: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.145999, 0.016000, 0.008000, 0.000000, 0.000000, 0.000000, 1.000000, 1.156999, 1.245999);
				case 122: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.125999, 0.009999, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 124: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.132000, 0.009999, 0.001000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 192: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.144000, 0.009999, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 292: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.120999, 0.009999, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 126: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.140000, 0.003999, 0.004999, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 217: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.140000, 0.009999, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
                default: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.143000, 0.033000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.069000, 1.000000);
			}
			return 1;
		}
		case 18946, 18945, 18944, 19099, 19100, 19553:
  		{
  			switch(GetPlayerSkin(playerid))
		    {
				case 284: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.158000, 0.010999, 0.006000, 0.000000, 0.000000, 0.000000, 1.323999, 1.111000, 1.279000);
				case 306: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.144999, 0.009999, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 307: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.136999, 0.009999, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 286: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.138999, 0.009999, 0.002999, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.041000);
				case 265: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.129999, 0.009999, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 285: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.162000, 0.017000, 0.004999, 0.000000, 0.000000, 0.000000, 1.063000, 1.093000, 1.139000);
				case 122: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.150000, 0.009999, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 124: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.143999, 0.009999, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 192: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.154000, 0.009999, 0.000000, 0.000000, 0.000000, 0.000000, 1.200999, 1.000000, 1.084999);
				case 292: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.135999, 0.009999, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 126: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.150000, 0.009999, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 217: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.140999, 0.009999, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.059000);
		    	default: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.150000, 0.031000, 0.004000, 0.000000, 0.000000, 0.000000, 1.000000, 1.043000, 1.023000);
		    }
		    return 1;
  		}
  		case 19098, 19097, 19096, 18962, 19095:
  		{
  			switch(GetPlayerSkin(playerid))
		    {
				case 284: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.167999, 0.018999, 0.000999, 0.000000, 0.000000, 0.000000, 1.000000, 1.310000, 1.275000);
				case 306: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.175999, 0.009999, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 307: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.161000, 0.009999, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 286: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.152999, 0.009999, -0.002000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.016000);
				case 265: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.141000, 0.015000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 285: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.180000, 0.020000, 0.002000, 0.000000, 0.000000, 0.000000, 1.000000, 1.284000, 1.151999);
				case 122: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.164000, 0.008000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.039999, 1.000000);
				case 124: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.180000, 0.014000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 192: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.187000, 0.009999, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 292: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.147999, 0.009999, -0.007000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 126: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.160999, -0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.131999, 1.029999);
				case 217: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.172999, 0.015000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.041000, 1.055000);
                default: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.166999, 0.024000, 0.001000, 0.000000, 0.000000, 0.000000, 1.000000, 1.123000, 1.018999);
			}
			return 1;
		}
		case 18970..18973:
		{
		    switch(GetPlayerSkin(playerid))
		    {
				case 284: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.150000, 0.038000, 0.006999, 90.000000, 90.000000, 0.000000, 1.019999, 1.249000, 1.067999);
				case 306: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.129999, 0.015999, 0.000000, 90.000000, 90.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 307: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.121999, 0.015000, 0.000000, 90.000000, 90.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 286: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.126000, 0.023000, 0.000000, 90.000000, 90.000000, 0.000000, 1.000000, 1.026000, 1.000000);
				case 265: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.109000, 0.026000, -0.001000, 90.000000, 90.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 285: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.133999, 0.040999, 0.005999, 90.000000, 90.000000, 0.000000, 1.108000, 1.403000, 1.000000);
				case 122: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.105999, 0.027000, 0.001000, 90.000000, 90.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 124: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.123999, 0.039999, 0.000000, 90.000000, 90.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 192: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.133999, 0.039999, 0.000000, 90.000000, 90.000000, 0.000000, 1.000000, 1.053999, 1.000000);
				case 292: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.105999, 0.026000, 0.000000, 90.000000, 90.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 126: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.117999, 0.020000, 0.001000, 90.000000, 90.000000, 0.000000, 1.000000, 1.087000, 1.000000);
				case 217: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.121000, 0.039999, 0.000000, 90.000000, 90.000000, 0.000000, 1.030000, 1.102000, 1.000000);
		   	 	default: SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.150000, 0.039999, 0.000000, 90.000000, 90.000000, 0.000000, 1.000000, 1.000000, 1.000000);
		    }
		    return 1;
		}//подбор был на скине 247
		case 19801: return SetPlayerAttachedObject(playerid, 5, 19801, 2, 0.074998, 0.021000, 0.007001, -177.399917, 87.699966, -9.099991, 1.240001, 1.373000, 1.085999);
		case 19137: return SetPlayerAttachedObject(playerid, 8, 19137, 2, 0.109998, -0.005998, 0.008001, -5.699993, 2.899970, -5.300001, 0.893000, 1.000000, 1.085999);
		case 19094: return SetPlayerAttachedObject(playerid, 8, 19094, 2, 0.151998, -0.005998, 0.001001, -5.699993, 2.899970, -5.300001, 0.893000, 1.000000, 1.085999);
		case 19591: return SetPlayerAttachedObject(playerid, 8, 19591, 2, 0.161998, 0.019000, 0.009001, 92.599967, 86.400009, 89.400054, 0.893000, 1.000000, 1.085999);
		case 19163: return SetPlayerAttachedObject(playerid, 8, 19163, 2, 0.161998, 0.019000, 0.009001, 92.599967, 86.400009, 89.400054, 0.893000, 1.000000, 1.085999, 0xFF00FF00, 0xFF00FF00);
		case 18955, 18956, 18957, 18958, 18959: return SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.120998, 0.032001, 0.003000, 61.000034, 91.400192, 50.100009, 1.211998, 1.075000, 1.181999);
		case 19093, 19160: return SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.092998, -0.009998, 0.008001, -5.699993, 2.899970, -5.300001, 0.986998, 1.118000, 1.181999);
		case 18926, 18927, 18928, 18929, 18930, 18931, 18932, 18933, 18934, 18935, 18939, 18941, 18940, 18942, 18943: return SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.142000, 0.008000, -0.008999, -2.699995, 2.899970, 9.999998, 1.000000, 1.000000, 1.000000);
		case 18636: return SetPlayerAttachedObject(playerid, 6, 18636, 2, 0.142999, 0.037000, 0.006001, 101.599914, 84.699897, -8.500003, 1.167998, 1.218000, 1.175999);
		case 19528: return SetPlayerAttachedObject(playerid, 6, 19528, 2, 0.148999, 0.013000, 0.008001, -5.699993, 2.899970, -5.300001, 0.893000, 1.121000, 1.209999);
		case 18921..18924: return SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.173998, -0.000999, 0.008000, -3.499925, -4.500033, 14.199975, 0.893000, 1.000000, 1.085999);
        case 18640, 19274: return SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.118998, -0.000999, 0.008000, -3.499925, -4.500033, 14.199975, 0.893000, 1.000000, 1.085999);
		case 18967..18969: return SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.148998, 0.007000, 0.001000, 83.300048, 85.499946, 14.099973, 1.013000, 1.027000, 1.085999);
		case 19101..19120: return SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.155998, 0.005000, 0.003000, 4.000203, -2.000006, 1.399980, 1.013000, 1.032000, 1.110998);
        case 18936..18938: return SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.101998, 0.020000, 0.003000, 4.000203, -2.000006, 1.399980, 1.013000, 1.081000, 1.110998);
		case 18953, 18954: return SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.142998, 0.020000, 0.003000, 4.000203, -2.000006, 1.399980, 1.013000, 1.081000, 1.110998);
		case 18964..18966: return SetPlayerAttachedObject(playerid, 6, modelid, 2, 0.110998, -0.013999, 0.001000, 93.600166, 39.900009, -172.800079, 1.150000, 1.141001, 1.169998);
		case 19006..19035, 19138, 19139, 19140:
  		{
  		    switch(GetPlayerSkin(playerid))
		    {
		    	case 284: SetPlayerAttachedObject(playerid, 7, modelid, 2, 0.090877, 0.053674, 0.009879, 89.675476, 88.636062, 0.000000);
				case 286: SetPlayerAttachedObject(playerid, 7, modelid, 2, 0.087062, 0.021779, -0.003307, 89.675476, 88.636062, 0.000000);
				case 265: SetPlayerAttachedObject(playerid, 7, modelid, 2, 0.089655, 0.021726, -0.001477, 89.675476, 88.620780, 0.000000);
				case 285: SetPlayerAttachedObject(playerid, 7, modelid, 2, 0.104320, 0.041487, 0.008021, 89.675476, 88.636062, 0.000000);
				case 122: SetPlayerAttachedObject(playerid, 7, modelid, 2, 0.082869, 0.030783, -0.000950, 90.928329, 77.233818, 0.000000);
				case 124: SetPlayerAttachedObject(playerid, 7, modelid, 2, 0.103663, 0.040022, 0.000449, 90.928329, 87.579650, 0.000000);
				case 192: SetPlayerAttachedObject(playerid, 7, modelid, 2, 0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000);
				case 292: SetPlayerAttachedObject(playerid, 7, modelid, 2, 0.079939, 0.020731, -0.005162, 89.675476, 83.550270, 0.000000);
				case 126: SetPlayerAttachedObject(playerid, 7, modelid, 2, 0.099326, 0.031132, -0.001180, 90.928329, 87.579650, 0.000000);
				case 217: SetPlayerAttachedObject(playerid, 7, modelid, 2, 0.095765, 0.030034, -0.001770, 89.675476, 85.214485, 0.000000);
                default: SetPlayerAttachedObject(playerid, 7, modelid, 2, 0.101566, 0.037019, 0.000750, 89.675476, 83.514060, 0.000000);
			}
			if(PlayerInfo[playerid][pInfoText][6] == 0)
			{
				switch(modelid)
			    {
			        case 19006, 19139: TextDrawBoxColor(Glasses[playerid], 0xFF450022);
			        case 19007, 19027: TextDrawBoxColor(Glasses[playerid], 0xFFA50022);
			        case 19008, 19029: TextDrawBoxColor(Glasses[playerid], 0x00FF0022);
			        case 19009, 19023: TextDrawBoxColor(Glasses[playerid], 0x00BFFF22);
			        case 19010, 19025: TextDrawBoxColor(Glasses[playerid], 0xFF00FF22);
			        case 19011, 19012, 19013, 19022, 19033, 19138: TextDrawBoxColor(Glasses[playerid], 0x00000022);
			        case 19014, 19015, 19034: TextDrawBoxColor(Glasses[playerid], 0xC0C0C022);
			        case 19016, 19032: TextDrawBoxColor(Glasses[playerid], 0xFFC0CB22);
			        case 19017, 19028: TextDrawBoxColor(Glasses[playerid], 0xFFFF0022);
			        case 19018: TextDrawBoxColor(Glasses[playerid], 0xE9967A22);
			        case 19019: TextDrawBoxColor(Glasses[playerid], 0xFA807222);
			        case 19020: TextDrawBoxColor(Glasses[playerid], 0x87CEFA22);
			        case 19021: TextDrawBoxColor(Glasses[playerid], 0x32CD3222);
			        case 19024: TextDrawBoxColor(Glasses[playerid], 0x9932CC22);
			        case 19026: TextDrawBoxColor(Glasses[playerid], 0xFF634722);
			        case 19030: TextDrawBoxColor(Glasses[playerid], 0xD4C9C122);
			        case 19031: TextDrawBoxColor(Glasses[playerid], 0xFFEBCD22);
			        case 19035: TextDrawBoxColor(Glasses[playerid], 0x4682B422);
					case 19140: TextDrawBoxColor(Glasses[playerid], 0x0000CD22);
		  		}
		  		TextDrawShowForPlayer(playerid, Glasses[playerid]);
	  		}
			return 1;
		}
	}
	return 1;//5516
}

stock IsProtectionFlooding(playerid, const team[], const key[] = 0, update = 0)
{
	if(update >= 1)
	{
	    new string[60];
	    PlayerInfo[playerid][pFloodCmd] = update;
	    mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET floodcmd=%d WHERE id=%d", update, PlayerInfo[playerid][pRoomAccount]);
		return mysql_tquery(MysqlConnectID, string);
	}
    if(PlayerCheatCheck[playerid] == 1) return 1;
    new string[134];
    PlayerCheatCheck[playerid] = 1;
    format(string, sizeof(string), "Игрок %s (ID: %d) был кикнут за флуд %s Код: #%s (IP: %s | R: %s | Ping: %d)", PlayerName[playerid], playerid, team, key, PlayerIp[playerid], PlayerInfo[playerid][pIpReg], GetPlayerPing(playerid));
    ABroadCast(0xC3C3C3AA, string, 0, 4);
    /*PlayerPlaySound(playerid, 31202, 0.0, 0.0, 0.0);
    GameTextForPlayerZS(playerid, "~r~kick player", "~r~‹Ё —Ёћњ kњk®y¦", 10000, 4);*/
    format(string, sizeof(string), "Вы были отсоединены от игрового сервера. С причиной: Лимит предупреждений [{FF0000}Код: #%s{CD853F}].", key);
    SendClientMessage(playerid, -1, string);
    KickWithMessage(playerid);
    return 1;
}

stock ReInitRandomNumberArr(rand_arr[], size = sizeof(rand_arr)) for(new i = size; i --;) rand_arr[i] = i;
stock GetRandomNumberFromArr(rand_arr[], size = sizeof(rand_arr))
{
    if(rand_arr[--size] == 0) return -1;
    new num = random(rand_arr[size]);
    new r_num = rand_arr[num];
    rand_arr[num] = rand_arr[--rand_arr[size]];
    return r_num;
}
stock SetRandomMaxNumberArr(number, rand_arr[], size = sizeof(rand_arr))
{
    --size;
    if(number > size) number = size;
    if(number < 1) number = 1;
    rand_arr[size] = number;
}

stock ArenaUpdate(playerid, slot, slot1, slot2, slot3 = 0, slot4 = 0, slot5 = 0)
{
    switch(slot3)
    {
        case 0:
        {
            new string[37], lang = PlayerInfo[playerid][pRussifier][1];
		    ArenaMapCamera(playerid, slot, 1);
		    if(slot2 == slot1)
			{
			    format(string, sizeof(string), TextDrawInfo[65][lang], slot2, slot1);
				TextDrawSetString(ChangeMapp[playerid][6], string);
	  		}
			if(slot1 < Arena[4])
			{
				if(ChoiceTeamCheck[playerid][2] == 1)
				{
				    format(string, sizeof(string), TextDrawInfo[66][lang], slot1, slot2);
					TextDrawSetString(ChangeMapp[playerid][6], string);
					if(PlayerInfo[playerid][pRussifier][1] == 1) AchievementsInfo(0, playerid);
				}
				else
				{
				    format(string, sizeof(string), TextDrawInfo[67][lang], slot2, slot1);
					TextDrawSetString(ChangeMapp[playerid][6], string);
					AchievementsInfo(1, playerid);
				}
			}
			if(slot1 > slot2)
			{
				if(ChoiceTeamCheck[playerid][2] == 2)
				{
				    format(string, sizeof(string), TextDrawInfo[66][lang], slot2, slot1);
		 			TextDrawSetString(ChangeMapp[playerid][6], string);
					if(PlayerInfo[playerid][pRussifier][1] == 1) AchievementsInfo(0, playerid);
				}
				else
				{
				    format(string, sizeof(string), TextDrawInfo[67][lang], slot1, slot2);
					TextDrawSetString(ChangeMapp[playerid][6], string);
					AchievementsInfo(1, playerid);
				}
			}
			return 1;
        }
        case 1:
        {
	        new random_Maps[6] = {-1, ...}, tmp_MapPlayer[MAX_MAPS] = {-1, ...}, tmp_MapCount = 0;
			for(new m = 0; m < MAX_MAPS; m ++)//Для начала найдём подxодящие арены
			{
				if(MapSettings[m][Preset][0] <= slot <= MapSettings[m][Preset][1] && m != Arena[slot1] && Arena[slot4] != m && Arena[slot5] != m) // проверка по онлайну
				{
					tmp_MapPlayer[tmp_MapCount] = m;
					tmp_MapCount ++;
				}
			}
	  		InitRandomNumberArr(MAX_MAPS, tmp_arr_rand_num);//Инициализируем массив под рандом (язык статичный, выделяем максимальный размер MAX_MAPS)
	  		SetRandomMaxNumberArr(tmp_MapCount, tmp_arr_rand_num);//Установим максимальное рандомное число (tmp_MapCount), сколько у нас карт подошло под условие
	  		for(new m = 0; m < 6; m ++)//Получим рандомные 6 карт
	  		{
	  			new value = GetRandomNumberFromArr(tmp_arr_rand_num);
	  			if(value > -1) random_Maps[m] = tmp_MapPlayer[value];
	 		}
	  		for(new m = 0; m < 6; m ++)//Приведём массив в порядок
	        {
	        	if(random_Maps[m] == -1)
	        	{
	        		new bool:bOK = false;
	        		for(new k = m; k < 6; k ++)
	       			{
	        			if(random_Maps[k] > -1)
	        			{
	        				random_Maps[m] = random_Maps[k];
	        				random_Maps[k] = -1;
	        				bOK = true;
	        			}
	       			}
	        		if(bOK == false) break;
	        	}
	    	}
		    switch(slot2)
		    {
		        case 1: for(new i = 0; i < sizeof(random_Maps); i ++) AdditionalReset[i] = random_Maps[i];
		        case 2: for(new i = 7; i < 13; i ++) AdditionalReset[i] = random_Maps[i - 7];
	   			case 3: for(new i = 14; i < 20; i ++) AdditionalReset[i] = random_Maps[i - 14];
		    }
		    return 1;
        }
    }
 	return 1;
}

stock ActionWithoutPlayer()// 5535
{
	if(Arena[1] >= 1 && PlayerOnline[2] != 0) Arena[1] -= 1;
	if(Arena[8] >= 1 && PlayerOnline[3] != 0) Arena[8] -= 1;
	if(Arena[15] >= 1 && PlayerOnline[4] != 0) Arena[15] -= 1;
	if(Arena[1] == 1 || Arena[8] == 1 || Arena[15] == 1)
    {
		if(Arena[1] == 1) Arena[2] = 38;
		if(Arena[8] == 1) Arena[9] = 38;
		if(Arena[15] == 1) Arena[16] = 38;
		foreach(new i: Player)
		{
			if((ChoiceTeamCheck[i][6] == 1 && Arena[1] == 1 || ChoiceTeamCheck[i][6] == 2 && Arena[8] == 1 || ChoiceTeamCheck[i][6] == 3 && Arena[15] == 1) && PlayerLogged[i] == 1 && PlayerInfo[i][pFreeMode] == 0 && PlayerInfo[i][pPrison] == 0 && ChoiceTeamCheck[i][0] == 0 && DuelCheck[i][3] == 0 && ChangeMap[i][3] == 0)
			{
			    ChangeMap[i][2] = 1;
			    if(KillsCheck[i][0] != 0) KillsCheck[i][0] = 0;
 				if(SelectionCheck[i][0] == 1) ShowModelSelectionMenu(i, 255);
 				TogglePlayerControllableZS(i, 0);
            	PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
 				GameTextForPlayerZS(i, "~n~~g~Match ended", "~n~~g~Ma¦¤ џako®¤њћc¬", 2000, 4);
 				if(GetPVarInt(i, "Achievements[14]") == 1) AchievementsInfo(14, i), DeletePVar(i, "Achievements[14]");
 				if(ChoiceItemsCheck[i][0] == 1) SetDialogResponse(i, 0, 1);
				if(MenuProcurementTime[i] != 0)
				{
			 		MenuProcurementTime[i] = 0;
					TextDrawHideForPlayer(i, MenuProcurementIcon[i][0]);
					TextDrawHideForPlayer(i, MenuProcurementIcon[i][1]);
				}
				if(PlayerInfo[i][pInfoText][2] == 1) TextDrawHideForPlayer(i, UpPanel[i]);
				if(PlayerInfo[i][pInfoText][3] == 0) TextDrawHideForPlayer(i, HealthPure[i]);
				if(PlayerInfo[i][pInfoText][0] == 0)
				{
					TextDrawHideForPlayer(i, ArenaInfo[i][0]);
					TextDrawHideForPlayer(i, ArenaInfo[i][1]);
					TextDrawHideForPlayer(i, ArenaInfo[i][2]);
					TextDrawHideForPlayer(i, ArenaInfo[i][10]);
					TextDrawHideForPlayer(i, ArenaInfo[i][11]);
				}
 			}
		}
	}
    if(Arena[2] >= 1 || Arena[9] >= 1 || Arena[16] >= 1)
    {
		if(Arena[2] >= 1) Arena[2] -= 1;
		if(Arena[9] >= 1) Arena[9] -= 1;
		if(Arena[16] >= 1) Arena[16] -= 1;
		switch(Arena[2])
  		{
			case 25: ArenaUpdate(0, PlayerOnline[2], 0, 1, 1, 7, 14);
	  		case 5:
	  		{
	  		    new slot[2] = 0, string[72];
	  		    slot[0] = GetMaxValue(ChangeMapAccount[0], ChangeMapAccount[1], ChangeMapAccount[2], ChangeMapAccount[3], ChangeMapAccount[4], ChangeMapAccount[5], ChangeMapAccount[6]);
				slot[1] = Arena[0];
				for(new x; x < 6; x ++)
				{
					if(ChangeMapAccount[x] != slot[0]) continue;
					Arena[0] = AdditionalReset[x];
					break;
				}
				if(Arena[0] == slot[1]) format(string, sizeof(string), "Большинство голосов было за {4FDF24}продолжение {FFFFFF}текущий карты.");
				else format(string, sizeof(string), "Большинство голосов было за карту{4FDF24}%s{FFFFFF}.", MapSettings[Arena[0]][Name1]);
				ABroadCast(0xFFFFFFFF, string, 1, 2);
			   	for(new x; x < 7; x ++)
			   	{
			   	    AdditionalReset[x] = 0;
			   	    ChangeMapAccount[x] = 0;
			   	}
	  		}
		}
		switch(Arena[9])
  		{
			case 25: ArenaUpdate(0, PlayerOnline[3], 7, 2, 1, 0, 14);
	  		case 5:
	  		{
	  		    new slot[2] = 0, string[72];
	  		    slot[0] = GetMaxValue(ChangeMapAccount[7], ChangeMapAccount[8], ChangeMapAccount[9], ChangeMapAccount[10], ChangeMapAccount[11], ChangeMapAccount[12], ChangeMapAccount[13]);
				slot[1] = Arena[7];
				for(new x = 7; x < 13; x ++)
				{
					if(ChangeMapAccount[x] != slot[0]) continue;
					Arena[7] = AdditionalReset[x];
					break;
				}
				if(Arena[7] == slot[1]) format(string, sizeof(string), "Большинство голосов было за {4FDF24}продолжение {FFFFFF}текущий карты.");
				else format(string, sizeof(string), "Большинство голосов было за карту{4FDF24}%s{FFFFFF}.", MapSettings[Arena[7]][Name1]);
				ABroadCast(0xFFFFFFFF, string, 1, 3);
			   	for(new x = 7; x < 14; x ++)
			   	{
			   	    AdditionalReset[x] = 0;
			   	    ChangeMapAccount[x] = 0;
			   	}
	  		}
		}
		switch(Arena[16])
  		{
			case 25: ArenaUpdate(0, PlayerOnline[4], 14, 3, 1, 0, 7);
	  		case 5:
	  		{
	  		    new slot[2] = 0, string[72];
	  		    slot[0] = GetMaxValue(ChangeMapAccount[14], ChangeMapAccount[15], ChangeMapAccount[16], ChangeMapAccount[17], ChangeMapAccount[18], ChangeMapAccount[19], ChangeMapAccount[20]);
				slot[1] = Arena[14];
				for(new x = 14; x < 20; x ++)
				{
					if(ChangeMapAccount[x] != slot[0]) continue;
					Arena[14] = AdditionalReset[x];
					break;
				}
				if(Arena[14] == slot[1]) format(string, sizeof(string), "Большинство голосов было за {4FDF24}продолжение {FFFFFF}текущий карты.");
				else format(string, sizeof(string), "Большинство голосов было за карту{4FDF24}%s{FFFFFF}.", MapSettings[Arena[14]][Name1]);
				ABroadCast(0xFFFFFFFF, string, 1, 4);
			   	for(new x = 14; x < 21; x ++)
			   	{
			   	    AdditionalReset[x] = 0;
			   	    ChangeMapAccount[x] = 0;
			   	}
	  		}
		}
		foreach(new i: Player)
		{
		    if((ChoiceTeamCheck[i][6] == 1 && Arena[2] == 3 || ChoiceTeamCheck[i][6] == 2 && Arena[9] == 3 || ChoiceTeamCheck[i][6] == 3 && Arena[16] == 3) && PlayerLogged[i] == 1 && PlayerInfo[i][pFreeMode] == 0 && (PrisonCheckArena[i] >= 5 || PlayerInfo[i][pPrison] == 0) && ChoiceTeamCheck[i][0] == 0 && (ChangeMap[i][2] == 0 || DuelCheck[i][3] != 0 || ChangeMap[i][3] != 0))
		    {
		        switch(ChoiceTeamCheck[i][6])
		        {
		        	case 1: ChoiceTeamCheck[i][7] = Arena[0];
					case 2: ChoiceTeamCheck[i][7] = Arena[7];
					case 3: ChoiceTeamCheck[i][7] = Arena[14];
   				}
		    }
		    if((ChoiceTeamCheck[i][6] == 1 && Arena[2] != 0 || ChoiceTeamCheck[i][6] == 2 && Arena[9] != 0 || ChoiceTeamCheck[i][6] == 3 && Arena[16] != 0) && PlayerLogged[i] == 1 && PlayerInfo[i][pFreeMode] == 0 && PlayerInfo[i][pPrison] == 0 && ChoiceTeamCheck[i][0] == 0 && DuelCheck[i][3] == 0 && ChangeMap[i][3] == 0)
			{
				new string[108], lang = PlayerInfo[i][pRussifier][1];
				if(ChoiceTeamCheck[i][6] == 1 && Arena[2] == 35 || ChoiceTeamCheck[i][6] == 2 && Arena[9] == 35 || ChoiceTeamCheck[i][6] == 3 && Arena[16] == 35)
				{
				    ChangeMap[i][2] = 2;
				    SelectTextDraw(i, 0x88AA88FF);
				    if(PlayerInfo[i][pInfoText][11] == 0)
				    {//1 Обновить первый список, 2 Обновить второй список, 3 Обновить первый и второй список и отобразить их
		   				TopList[i][1] = 0;
					    TopList[i][2] = 0;
					    TopList[i][3] = 0;
					    TopList[i][4] = 0;
						mysql_format(MysqlConnectID, string, sizeof(string), "SELECT name,score1,scores1 FROM profile WHERE scorecheck=%d AND scores1>0 ORDER BY scores1 DESC LIMIT 0,10", ChoiceTeamCheck[i][6]);
						mysql_tquery(MysqlConnectID, string, "OnPlayerForAll", "iiii", i, 6, 1, 3);
	   				}
			   		for(new x; x < 20; ++ x) SendClientMessage(i, 0x000000AA, "");
			    	TextDrawShowForPlayer(i, ChangeMapp[i][5]);
			    	TextDrawShowForPlayer(i, ChangeMapp[i][6]);
			    	switch(ChoiceTeamCheck[i][6])
				    {
				        case 1: ArenaUpdate(i, Arena[0], Arena[3], Arena[4]);
				        case 2: ArenaUpdate(i, Arena[7], Arena[10], Arena[11]);
				        case 3: ArenaUpdate(i, Arena[14], Arena[17], Arena[18]);
					}
				}
				if(ChoiceTeamCheck[i][6] == 1 && Arena[2] == 25 || ChoiceTeamCheck[i][6] == 2 && Arena[9] == 25 || ChoiceTeamCheck[i][6] == 3 && Arena[16] == 25)
				{
				    ChangeMap[i][0] = 1;
		    		ChangeMap[i][1] = 0;
		    		if(PlayerInfo[i][pInfoText][11] == 0) for(new x; x < 18; ++ x) TextDrawHideForPlayer(i, ScoreArena[i][x]);
		    		if(ClientCheck[i] == 1)
		    		{
		   				for(new x = 11; x < 33; ++ x) TextDrawShowForPlayer(i, ChangeMapp[i][x]);
			            TextDrawShowForPlayer(i, ChangeMapp[i][40]);
			            TextDrawSetString(ChangeMapp[i][13], TextDrawInfo[70][lang]);
			            TextDrawSetString(ChangeMapp[i][40], TextDrawInfo[93][lang]);
					    if(PlayerInfo[i][pAdmin] >= 2 || PlayerInfo[i][pVip] >= 2)
				 		{
							TextDrawShowForPlayer(i, ChangeMapp[i][33]);
							TextDrawSetString(ChangeMapp[i][33], TextDrawInfo[71][lang]);
	 					}
					}
					else
				    {
				        TextDrawSetString(DuelInfo[i][47], TextDrawInfo[70][lang]);
			            TextDrawSetString(DuelInfo[i][11], TextDrawInfo[69][lang]);
						TextDrawSetString(DuelInfo[i][12], TextDrawInfo[93][lang]);
			            TextDrawShowForPlayer(i, DuelInfo[i][46]);
				        TextDrawShowForPlayer(i, DuelInfo[i][47]);
				        for(new x = 5; x < 13; ++ x) TextDrawShowForPlayer(i, DuelInfo[i][x]);
				        TextDrawShowForPlayer(i, DuelInfo[i][37]);
				        TextDrawShowForPlayer(i, DuelInfo[i][38]);
				        TextDrawShowForPlayer(i, DuelInfo[i][39]);
				        TextDrawShowForPlayer(i, DuelInfo[i][40]);
				        TextDrawShowForPlayer(i, DuelInfo[i][41]);
				        TextDrawShowForPlayer(i, DuelInfo[i][42]);
				        TextDrawShowForPlayer(i, DuelInfo[i][43]);
					    if(PlayerInfo[i][pAdmin] >= 2 || PlayerInfo[i][pVip] >= 2)
				 		{
							TextDrawShowForPlayer(i, DuelInfo[i][13]);
							TextDrawSetString(DuelInfo[i][13], TextDrawInfo[71][lang]);
	 					}
				    }
				    switch(ChoiceTeamCheck[i][6])
				    {
				        case 1:
				        {
				            if(ClientCheck[i] == 1)
		    				{
		    				    for(new x; x < 6; ++ x)
		    				    {
		    				    	format(string, sizeof(string), "mdl-2000:map%d", AdditionalReset[0+x]);
					            	TextDrawSetString(ChangeMapp[i][14+x], string);
		    				    }
		 				    }
		 				    else for(new x; x < 6; ++ x) TextDrawSetString(DuelInfo[i][5+x], MapSettings[AdditionalReset[0+x]][Name]);
				        }
				        case 2:
				        {
				            if(ClientCheck[i] == 1)
		    				{
		    				    for(new x; x < 6; ++ x)
		    				    {
		    				    	format(string, sizeof(string), "mdl-2000:map%d", AdditionalReset[7+x]);
					            	TextDrawSetString(ChangeMapp[i][14+x], string);
		    				    }
						    }
						    else for(new x; x < 6; ++ x) TextDrawSetString(DuelInfo[i][5+x], MapSettings[AdditionalReset[7+x]][Name]);
				        }
						case 3:
						{
						    if(ClientCheck[i] == 1)
		    				{
		    				    for(new x; x < 6; ++ x)
		    				    {
		    				    	format(string, sizeof(string), "mdl-2000:map%d", AdditionalReset[14+x]);
					            	TextDrawSetString(ChangeMapp[i][14+x], string);
		    				    }
						    }
						    else for(new x; x < 6; ++ x) TextDrawSetString(DuelInfo[i][5+x], MapSettings[AdditionalReset[14+x]][Name]);
						}
				    }
				}
				if(ChangeMap[i][0] == 1 && ChoiceTeamCheck[i][6] == 1 && Arena[2] >= 6 && Arena[2] <= 25 || ChangeMap[i][0] == 1 && ChoiceTeamCheck[i][6] == 2 && Arena[9] >= 6 && Arena[9] <= 25 || ChangeMap[i][0] == 1 && ChoiceTeamCheck[i][6] == 3 && Arena[16] >= 6 && Arena[16] <= 25)
				{
				    switch(ChoiceTeamCheck[i][6])
				    {
				        case 1:
						{
						    if(Arena[2] <= 10) PlayerPlaySound(i, 5205, 0.0, 0.0, 0.0);
						    if(ClientCheck[i] == 1)
						    {
						    	format(string, sizeof(string), "%s ~y~%d", MapSettings[AdditionalReset[0]][Name], ChangeMapAccount[0]);
						    	TextDrawSetString(ChangeMapp[i][21], string);
						    	format(string, sizeof(string), "%s ~y~%d", MapSettings[AdditionalReset[1]][Name], ChangeMapAccount[1]);
						    	TextDrawSetString(ChangeMapp[i][23], string);
						    	format(string, sizeof(string), "%s ~y~%d", MapSettings[AdditionalReset[2]][Name], ChangeMapAccount[2]);
						    	TextDrawSetString(ChangeMapp[i][25], string);
						    	format(string, sizeof(string), "%s ~y~%d", MapSettings[AdditionalReset[3]][Name], ChangeMapAccount[3]);
						    	TextDrawSetString(ChangeMapp[i][27], string);
						    	format(string, sizeof(string), "%s ~y~%d", MapSettings[AdditionalReset[4]][Name], ChangeMapAccount[4]);
						    	TextDrawSetString(ChangeMapp[i][29], string);
						    	format(string, sizeof(string), "%s ~y~%d", MapSettings[AdditionalReset[5]][Name], ChangeMapAccount[5]);
						    	TextDrawSetString(ChangeMapp[i][31], string);
						    	format(string, sizeof(string), "%s ~y~%d", TextDrawInfo[69][lang], ChangeMapAccount[6]);
						    	TextDrawSetString(ChangeMapp[i][32], string);
					    	}
					    	else for(new x; x < 7; ++ x)
		    				{
								format(string, sizeof(string), "~y~%d", ChangeMapAccount[0+x]);
								TextDrawSetString(DuelInfo[i][37+x], string);
					    	}
 						}
 						case 2:
 						{
 						    if(Arena[9] <= 10) PlayerPlaySound(i, 5205, 0.0, 0.0, 0.0);
 						    if(ClientCheck[i] == 1)
						    {
						    	format(string, sizeof(string), "%s ~y~%d", MapSettings[AdditionalReset[7]][Name], ChangeMapAccount[7]);
						    	TextDrawSetString(ChangeMapp[i][21], string);
						    	format(string, sizeof(string), "%s ~y~%d", MapSettings[AdditionalReset[8]][Name], ChangeMapAccount[8]);
						    	TextDrawSetString(ChangeMapp[i][23], string);
						    	format(string, sizeof(string), "%s ~y~%d", MapSettings[AdditionalReset[9]][Name], ChangeMapAccount[9]);
						    	TextDrawSetString(ChangeMapp[i][25], string);
						    	format(string, sizeof(string), "%s ~y~%d", MapSettings[AdditionalReset[10]][Name], ChangeMapAccount[10]);
						    	TextDrawSetString(ChangeMapp[i][27], string);
						    	format(string, sizeof(string), "%s ~y~%d", MapSettings[AdditionalReset[11]][Name], ChangeMapAccount[11]);
						    	TextDrawSetString(ChangeMapp[i][29], string);
						    	format(string, sizeof(string), "%s ~y~%d", MapSettings[AdditionalReset[11]][Name], ChangeMapAccount[12]);
						    	TextDrawSetString(ChangeMapp[i][31], string);
						    	format(string, sizeof(string), "%s ~y~%d", TextDrawInfo[69][lang], ChangeMapAccount[13]);
						    	TextDrawSetString(ChangeMapp[i][32], string);
					    	}
					    	else for(new x; x < 7; ++ x)
							{
								format(string, sizeof(string), "~y~%d", ChangeMapAccount[7+x]);
								TextDrawSetString(DuelInfo[i][37+x], string);
					    	}
 						}
 						case 3:
 						{
 						    if(Arena[16] <= 10) PlayerPlaySound(i, 5205, 0.0, 0.0, 0.0);
 						    if(ClientCheck[i] == 1)
						    {
						    	format(string, sizeof(string), "%s ~y~%d", MapSettings[AdditionalReset[14]][Name], ChangeMapAccount[14]);
						    	TextDrawSetString(ChangeMapp[i][21], string);
						    	format(string, sizeof(string), "%s ~y~%d", MapSettings[AdditionalReset[15]][Name], ChangeMapAccount[15]);
						    	TextDrawSetString(ChangeMapp[i][23], string);
						    	format(string, sizeof(string), "%s ~y~%d", MapSettings[AdditionalReset[16]][Name], ChangeMapAccount[16]);
						    	TextDrawSetString(ChangeMapp[i][25], string);
						    	format(string, sizeof(string), "%s ~y~%d", MapSettings[AdditionalReset[17]][Name], ChangeMapAccount[17]);
						    	TextDrawSetString(ChangeMapp[i][27], string);
						    	format(string, sizeof(string), "%s ~y~%d", MapSettings[AdditionalReset[18]][Name], ChangeMapAccount[18]);
						    	TextDrawSetString(ChangeMapp[i][29], string);
						    	format(string, sizeof(string), "%s ~y~%d", MapSettings[AdditionalReset[19]][Name], ChangeMapAccount[19]);
						    	TextDrawSetString(ChangeMapp[i][31], string);
						    	format(string, sizeof(string), "%s ~y~%d", TextDrawInfo[69][lang], ChangeMapAccount[20]);
						    	TextDrawSetString(ChangeMapp[i][32], string);
					    	}
					    	else for(new x; x < 7; ++ x)
							{
								format(string, sizeof(string), "~y~%d", ChangeMapAccount[14+x]);
								TextDrawSetString(DuelInfo[i][37+x], string);
							}
 						}
 					}
				}
				if(ChoiceTeamCheck[i][6] == 1 && Arena[2] == 5 || ChoiceTeamCheck[i][6] == 2 && Arena[9] == 5 || ChoiceTeamCheck[i][6] == 3 && Arena[16] == 5)
				{
	    			ForbiddenArea[i][0] = 0;
                    DestroyDynamicArea(ForbiddenArea[i][1]);
                    if(ChangeMap[i][2] == 3)
                    {
		   				TopList[i][1] = 0;
					    TopList[i][2] = 0;
					    TopList[i][3] = 0;
					    TopList[i][4] = 0;
		   				for(new x; x < 18; ++ x) TextDrawHideForPlayer(i, ScoreArena[i][x]);
	   				}
	   				else
	   				{
	   				    if(ClientCheck[i] == 1)
	   				    {
							for(new x = 11; x < 34; ++ x) TextDrawHideForPlayer(i, ChangeMapp[i][x]);
							TextDrawHideForPlayer(i, ChangeMapp[i][40]);
						}
						else
						{
							TextDrawHideForPlayer(i, DuelInfo[i][46]);
				        	TextDrawHideForPlayer(i, DuelInfo[i][47]);
				        	for(new x = 5; x < 14; ++ x) TextDrawHideForPlayer(i, DuelInfo[i][x]);
				        	TextDrawHideForPlayer(i, DuelInfo[i][37]);
				        	TextDrawHideForPlayer(i, DuelInfo[i][38]);
				        	TextDrawHideForPlayer(i, DuelInfo[i][39]);
				        	TextDrawHideForPlayer(i, DuelInfo[i][40]);
				        	TextDrawHideForPlayer(i, DuelInfo[i][41]);
				        	TextDrawHideForPlayer(i, DuelInfo[i][42]);
				        	TextDrawHideForPlayer(i, DuelInfo[i][43]);
						}
					}
					ChangeMap[i][0] = 0;
					switch(ChoiceTeamCheck[i][6])//5535
				    {
				        case 1:
				        {
							if(Arena[0] == 19 && PlayerInfo[i][pAchievements][14] == 0) SetPVarInt(i, "Achievements[14]", 1);
				     		ChoiceTeamCheck[i][7] = Arena[0];
	   					}
	   					case 2:
	   					{
	   					    if(Arena[7] == 19 && PlayerInfo[i][pAchievements][14] == 0) SetPVarInt(i, "Achievements[14]", 1);
				     		ChoiceTeamCheck[i][7] = Arena[7];
	   					}
	   					case 3:
	   					{
	   					    if(Arena[14] == 19 && PlayerInfo[i][pAchievements][14] == 0) SetPVarInt(i, "Achievements[14]", 1);
				     		ChoiceTeamCheck[i][7] = Arena[14];
	   					}
					}
				}
	 		}
   		}
	}
	if(Arena[2] == 1 || Arena[9] == 1 || Arena[16] == 1)
	{
        if(ServerGate[3] == 1)
        {
            ServerGate[3] = 0;
	    	MoveDynamicObject(ServerGate[0], 2214.78, 1584.90, 1000.30, 3);
 	        MoveDynamicObject(ServerGate[1], 2195.90, 1584.98, 1000.30, 3);
	    	MoveDynamicObject(ServerGate[2], -2438.11, 1548.25, 16.07, 3);
		}
		new string[117];
        foreach(new i: Player)
        {
	        if((ChoiceTeamCheck[i][6] == 1 && Arena[2] == 1 || ChoiceTeamCheck[i][6] == 2 && Arena[9] == 1 || ChoiceTeamCheck[i][6] == 3 && Arena[16] == 1) && PlayerInfo[i][pFreeMode] == 0 && PlayerLogged[i] == 1 && PlayerInfo[i][pPrison] == 0 && ChoiceTeamCheck[i][0] == 0 && DuelCheck[i][3] == 0 && ChangeMap[i][3] == 0)
	       	{
	       	    if(PlayerInfo[i][pAutoBuyWeapon][4] == 1 && ChangeMap[i][1] != 8)
	       	    {
					for(new x = 0; x < 4; x ++)
					{
					    if(PlayerInfo[i][pAutoBuyWeapon][x] == 0) continue;
						WeaponsSlotSpawn[i][6] += MenuBuy[PlayerInfo[i][pAutoBuyWeapon][x] - 22][2];
	 				}
	       	        if(PlayerInfo[i][pMoney] < WeaponsSlotSpawn[i][6] || WeaponsSlotSpawn[i][6] == 0)
					{
					    PlayerInfo[i][pAutoBuyWeapon][4] = 0;
					    if(WeaponsSlotSpawn[i][6] != 0)
					    {
				    		format(string, sizeof(string), "У вас недостаточно средств для автоматической закупки %s", AddCommasToInt(WeaponsSlotSpawn[i][6]));
	   						SendClientMessageZS(i, COLOR_RED, string, 1085);
	   					}
	   					ChoiceTeamCheck[i][4] = 1;
						WeaponsSlotSpawn[i][0] = 0;
				        WeaponsSlotSpawn[i][1] = 0;
				        WeaponsSlotSpawn[i][2] = 0;
				        WeaponsSlotSpawn[i][3] = 0;
				        WeaponsSlotSpawn[i][4] = 0;
				        WeaponsSlotSpawn[i][5] = 0;
				        WeaponsSlotSpawn[i][6] = 0;
	    				new str[15];
						format(str, sizeof(str), "%d,%d,%d,%d,%d", PlayerInfo[i][pAutoBuyWeapon][0], PlayerInfo[i][pAutoBuyWeapon][1], PlayerInfo[i][pAutoBuyWeapon][2], PlayerInfo[i][pAutoBuyWeapon][3], PlayerInfo[i][pAutoBuyWeapon][4]);
						mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET autobuyweapon='%s' WHERE id=%d", str, PlayerInfo[i][pRoomAccount]);
						mysql_tquery(MysqlConnectID, string);
		       		}
		       		else
		       		{
			       		MoneyInfoCall(i, WeaponsSlotSpawn[i][6], 1);
			       		for(new x = 0; x < 4; x ++)
			   			{
			   			    if(PlayerInfo[i][pAutoBuyWeapon][x] == 0) continue;
						   	WeaponsSlotSpawn[i][x] = PlayerInfo[i][pAutoBuyWeapon][x];
		 				}
                        WeaponsSlotSpawn[i][4] = 0;
				        WeaponsSlotSpawn[i][5] = 0;
						WeaponsSlotSpawn[i][6] = 0;
		       		}
	       	    }
	       	    else
	       	    {
	       	        WeaponsSlotSpawn[i][0] = 0;
			        WeaponsSlotSpawn[i][1] = 0;
			        WeaponsSlotSpawn[i][2] = 0;
			        WeaponsSlotSpawn[i][3] = 0;
			        WeaponsSlotSpawn[i][4] = 0;
			        WeaponsSlotSpawn[i][5] = 0;
			        WeaponsSlotSpawn[i][6] = 0;
			        if(ChangeMap[i][1] == 8)
					{
					    PlayerOnline[1] += 1;
				        PlayerColor[i] = 0xFFFFFFAA;
						PlayerInfo[i][pFreeMode] = 1;
						mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET freemode=1 WHERE id=%d", PlayerInfo[i][pRoomAccount]);
						mysql_tquery(MysqlConnectID, string);
						GangZoneHideForPlayer(i, ServerCheck[0]);
						switch(ChoiceTeamCheck[i][6])
						{
				  			case 1:
				  			{
				  				if(PlayerOnline[2] >= 1) PlayerOnline[2] -= 1;
				  				if(ChoiceTeamCheck[i][2] == 1 && Arena[5] >= 1) Arena[5] -= 1;
								else if(ChoiceTeamCheck[i][2] == 2 && Arena[6] >= 1) Arena[6] -= 1;
				  			}
				  			case 2:
							{
				  				if(PlayerOnline[3] >= 1) PlayerOnline[3] -= 1;
				  				if(ChoiceTeamCheck[i][2] == 1 && Arena[12] >= 1) Arena[12] -= 1;
								else if(ChoiceTeamCheck[i][2] == 2 && Arena[13] >= 1) Arena[13] -= 1;
							}
							case 3:
							{
				  				if(PlayerOnline[4] >= 1) PlayerOnline[4] -= 1;
				  				if(ChoiceTeamCheck[i][2] == 1 && Arena[19] >= 1) Arena[19] -= 1;
								else if(ChoiceTeamCheck[i][2] == 2 && Arena[20] >= 1) Arena[20] -= 1;
							}
						}
						SetPlayerTeam(i, 255);
						ChoiceTeamCheck[i][1] = 0;
						ChoiceTeamCheck[i][2] = 256;
						ChoiceTeamCheck[i][3] = 1;
						ChoiceTeamCheck[i][6] = 0;
						ChoiceTeamCheck[i][7] = 0;
						TeamColor(i);
	 				}
					else ChoiceTeamCheck[i][4] = 1;
	       	    }
	       	    mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET lastscore=%d,score1='0,0',score2='0,0',scores1=0,scores2=0 WHERE id=%d", WeaponsSlotSpawn[i][9], PlayerInfo[i][pRoomAccount]);
				mysql_tquery(MysqlConnectID, string);
	       	    ChangeMap[i][2] = 0;
	       	    CancelSelectTextDraw(i);
    	        WeaponsSlotSpawn[i][7] = 0;
		        WeaponsSlotSpawn[i][8] = 0;
		        WeaponsSlotSpawn[i][9] = 0;
	       	    if(ChangeMap[i][3] == 0)
	       	    {
	                TextDrawHideForPlayer(i, ChangeMapp[i][5]);
					TextDrawHideForPlayer(i, ChangeMapp[i][6]);
				   	if(PlayerInfo[i][pInfoText][2] == 1) TextDrawHideForPlayer(i, UpPanel[i]);
				   	SpawnCheck[i][0] = 1;
				   	ChangeMap[i][1] = 0;
		      		if(Health[i] != 0) SpawnPlayerZS(i);
		      		else SetPlayerHealth(i, 100.0);
	 			}
	  		}
		}
        if(Arena[2] == 1)
	    {
			Arena[1] = 900;
			Arena[2] = 0;
			Arena[3] = 0;
        	Arena[4] = 0;
   		}
   		if(Arena[9] == 1)
   		{
   		    Arena[8] = 900;
			Arena[9] = 0;
			Arena[10] = 0;
        	Arena[11] = 0;
   		}
   		if(Arena[16] == 1)
   		{
   		    Arena[15] = 900;
			Arena[16] = 0;
			Arena[17] = 0;
        	Arena[18] = 0;
   		}
	}
    return 1;
}

stock GetMaxValue(...)
{
    new num, i = numargs();
    while(i --) if(getarg(i) > num) num = getarg(i);
    return num;
}

stock KickWithMessage(playerid, const message[] = "_", color = 0xCD853FAA)
{
	if(!IsPlayerConnected(playerid)) return 1;
   	if(strlen(message) >= 2) SendClientMessage(playerid, color, message);
	return SetTimerEx("KickTime", 1000, false, "d", playerid);
}

public KickTime(playerid)
{
    if(IsPlayerConnected(playerid)) Kick(playerid);
	return 1;
}

stock PlayerCheat(playerid, const text[], const textt[], log = 1, chek = 0)
{
	new string[212];
	format(string, sizeof(string), "Игрок %s (ID: %d) был кикнут за %s (IP: %s | R: %s)", PlayerName[playerid], playerid, text, PlayerIp[playerid], PlayerInfo[playerid][pIpReg]);
	ABroadCast(0xC3C3C3AA, string, 0, 4);
	if(log == 1) LogMysql(playerid, text);
	if(strlen(textt) <= 1 || !IsPlayerConnected(playerid)) return 1;
	PlayerCheatCheck[playerid] = 1;
	SetPlayerVirtualWorld(playerid, 0);
	//PlayerPlaySound(playerid, 16200, 0.0, 0.0, 0.0);//31202
	SendClientMessage(playerid, 0xCD853FAA, textt);
	if(chek == 1)
	{
		PlayerInfo[playerid][pCheaterTime] = gettime()+60*7;
		mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET cheatertime=%d WHERE id=%d", PlayerInfo[playerid][pCheaterTime], PlayerInfo[playerid][pRoomAccount]);
		mysql_tquery(MysqlConnectID, string);
	}
	//GameTextForPlayerZS(playerid, "~r~kick player", "~r~‹Ё —Ёћњ kњk®y¦", 5000, 4);
	SetTimerEx("KickTime", 500, false, "d", playerid);
	return 1;
}
stock LogMysql(playerid, const text[])
{
	new string[212], date[6], slot[25];
 	getdate(date[0], date[1], date[2]);
 	gettime(date[3], date[4], date[5]);
 	format(slot, sizeof(slot), "%02d/%02d/%d %d:%d:%d", date[2], date[1], date[0], date[3], date[4], date[5]);
	mysql_format(MysqlConnectID, string, sizeof(string), "INSERT INTO logs (`name`,`datatime`,`ipreg`,`iplocal`,`reason`) VALUES ('%s','%s','%s','%s','%s')", PlayerName[playerid], slot, PlayerInfo[playerid][pIpReg], PlayerIp[playerid], text);
	return mysql_tquery(MysqlConnectID, string);
}

public OnPlayerLogin(playerid, line)
{
	new row;
	cache_get_row_count(row);
	if(line == 1)
	{
		if(row == 0)
		{
  			new string[190];
  			format(string, sizeof(string), "{FFFFFF}Добро пожаловать на {61dd61}TDM Zones {FFFFFF}сервер\n\nДанный никнейм {61dd61}%s {FFFFFF}не зарегистрирован.\nДля дальнейшей регистрации придумайте пароль:", PlayerName[playerid]);
  			return ShowPlayerDialogZS(playerid, 2, DIALOG_STYLE_INPUT, "Регистрация", string, "Дальше", "");
		}
		new string[71];
		cache_get_value_name(0, "password", PlayerInfo[playerid][pPass], 65);
		cache_get_value_name(0, "password2", PlayerInfo[playerid][pPass1], 65);
		cache_get_value_name(0, "salt", PlayerInfo[playerid][pSalt], 11);
		cache_get_value_name(0, "salt2", PlayerInfo[playerid][pSalt1], 11);
		mysql_format(MysqlConnectID, string, sizeof(string), "SELECT * FROM blocked WHERE `name`='%s'", PlayerName[playerid]);
		return mysql_tquery(MysqlConnectID, string, "OnPlayerForAll", "iii", playerid, 1, 0);
	}
    if(row == 0) return KickWithMessage(playerid, "[Ошибка]: >> Данный аккаунт не найден!", COLOR_RED);
    new string[180], date[6], slot[25];
    cache_get_value_name_int(0, "id", PlayerInfo[playerid][pRoomAccount]);
    cache_get_value_name(0, "ipreg", PlayerInfo[playerid][pIpReg], 16);
    cache_get_value_name(0, "iplocal", PlayerInfo[playerid][pIpLocal], 16);
    cache_get_value_name(0, "datetime", PlayerInfo[playerid][pDateTimeReg], 24);
    cache_get_value_name(0, "lastentrance", PlayerInfo[playerid][pLastEntrance], 24);
    cache_get_value_name_int(0, "admin", PlayerInfo[playerid][pAdmin]);
    cache_get_value_name_int(0, "admintime", PlayerInfo[playerid][pAdminTime]);
    cache_get_value_name_int(0, "vip", PlayerInfo[playerid][pVip]);
    cache_get_value_name_int(0, "viptime", PlayerInfo[playerid][pVipTime]);
    cache_get_value_name_int(0, "muted", PlayerInfo[playerid][pMuted]);
    cache_get_value_name_int(0, "prison", PlayerInfo[playerid][pPrison]);
    cache_get_value_name_int(0, "freeze", PlayerInfo[playerid][pFreeze]);
    cache_get_value_name_int(0, "level0", PlayerInfo[playerid][pLevel][0]);
	cache_get_value_name_int(0, "level1", PlayerInfo[playerid][pLevel][1]);
    cache_get_value_name_int(0, "deaths", PlayerInfo[playerid][pDeaths]);
    cache_get_value_name_int(0, "kills", PlayerInfo[playerid][pKills]);
    cache_get_value_name_int(0, "lastscore", PlayerInfo[playerid][pLastScore]);
    cache_get_value_name_int(0, "money", PlayerInfo[playerid][pMoney]);
    cache_get_value_name(0, "timegame", string);
	sscanf(string, "p<,>a<d>[3]", PlayerInfo[playerid][pTimeGame]);
	cache_get_value_name(0, "spawnkill", string);
	sscanf(string, "p<,>a<d>[3]", PlayerInfo[playerid][pSpawnKill]);
    cache_get_value_name_int(0, "visits", PlayerInfo[playerid][pVisits]);
    cache_get_value_name(0, "yourskin", string);
    sscanf(string, "p<,>dd", PlayerInfo[playerid][pYourSkin][0], PlayerInfo[playerid][pYourSkin][1]);
	cache_get_value_name_int(0, "nickcolor", PlayerInfo[playerid][pNickColor]);
	cache_get_value_name_int(0, "timers", PlayerInfo[playerid][pTimers]);
	cache_get_value_name_int(0, "weather", PlayerInfo[playerid][pWeather]);
	cache_get_value_name_int(0, "freemode", PlayerInfo[playerid][pFreeMode]);
    cache_get_value_name_int(0, "cheatertime", PlayerInfo[playerid][pCheaterTime]);
    cache_get_value_name_int(0, "floodcmd", PlayerInfo[playerid][pFloodCmd]);
    cache_get_value_name(0, "hisweapons", string);
	sscanf(string, "p<,>a<d>[3]", PlayerInfo[playerid][pHisWeapons]);
    cache_get_value_name(0, "message", string);
	sscanf(string, "p<,>a<d>[6]", PlayerInfo[playerid][pMessage]);
    cache_get_value_name_int(0, "passive", PlayerInfo[playerid][pPassive]);
    cache_get_value_name(0, "duel", string);
	sscanf(string, "p<,>a<d>[4]", PlayerInfo[playerid][pDuel]);
    cache_get_value_name(0, "russifier", string);
	sscanf(string, "p<,>a<d>[2]", PlayerInfo[playerid][pRussifier]);
    cache_get_value_name(0, "infotext", string);
    sscanf(string, "p<,>a<d>[13]", PlayerInfo[playerid][pInfoText]);
    cache_get_value_name(0, "bonus", string);
    sscanf(string, "p<,>a<d>[9]", PlayerInfo[playerid][pBonus]);
    cache_get_value_name(0, "serverhelp", string);
    sscanf(string, "p<,>a<d>[3]", PlayerInfo[playerid][pServerHelp]);
	cache_get_value_name_int(0, "gang0", PlayerInfo[playerid][pGang][0]);
    cache_get_value_name_int(0, "gang1", PlayerInfo[playerid][pGang][3]);
	cache_get_value_name(0, "gang", string);
    sscanf(string, "p<,>dd", PlayerInfo[playerid][pGang][1], PlayerInfo[playerid][pGang][2]);
    cache_get_value_name_int(0, "donat", PlayerInfo[playerid][pDonat]);
    cache_get_value_name(0, "autobuyweapon", string);
    sscanf(string, "p<,>a<d>[5]", PlayerInfo[playerid][pAutoBuyWeapon]);
    cache_get_value_name(0, "classweapons", string);
    sscanf(string, "p<,>a<d>[6]", PlayerInfo[playerid][pClassWeapons]);
    cache_get_value_name(0, "achievements", string);
    sscanf(string, "p<,>a<d>[21]", PlayerInfo[playerid][pAchievements]);
	cache_get_value_name(0, "interaction", string);
    sscanf(string, "p<,>a<d>[7]", PlayerInfo[playerid][pInteraction]);
    cache_get_value_name(0, "aimingx", string);
    sscanf(string, "p<,>a<d>[2]", PlayerInfo[playerid][pAimingX]);

    if(strcmp(PlayerInfo[playerid][pIpLocal], PlayerIp[playerid], true) == 1) strmid(PlayerInfo[playerid][pIpLocal], PlayerIp[playerid], 0, strlen(PlayerIp[playerid]), 16);
	TimeInput[playerid] = 0;
	WrPass[playerid] = 1;
	PlayerLogged[playerid] = 1;
	PlayerInfo[playerid][pVisits] += 1;
	if(PlayerInfo[playerid][pAdmin] >= 2)
  	{
  	    if(PlayerInfo[playerid][pAdminTime] != 0 && PlayerInfo[playerid][pAdminTime] < getdate())
  	    {
  	    	PlayerInfo[playerid][pAdmin] = 0;
			PlayerInfo[playerid][pAdminTime] = 0;
			PlayerInfo[playerid][pFreeMode] = 0;
			PlayerInfo[playerid][pPassive] = 0;
			PlayerInfo[playerid][pTimers] = 9;
			PlayerInfo[playerid][pWeather] = 13;
			PlayerInfo[playerid][pMessage][0] = 0;
			PlayerInfo[playerid][pMessage][2] = 0;
			PlayerInfo[playerid][pMessage][3] = 0;
			PlayerInfo[playerid][pMessage][4] = 0;
			PlayerInfo[playerid][pYourSkin][1] = 0;
			SendClientMessage(playerid, 0xFFFFFFFF, "Срок действия ваших Административных привилегий истек!");
			mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET admin=0,admintime=0,freemode=0,yourskin='%d,0' WHERE id=%d", PlayerInfo[playerid][pYourSkin][0], PlayerInfo[playerid][pRoomAccount]);
			mysql_tquery(MysqlConnectID, string);
			UpdateMysql(playerid, 2);
  	    }
  	    else SendClientMessage(playerid, 0xFFFFFFFF, "Для помощи по административным правам используйте кнопку {4FDF24}H {FFFFFF}- {4FDF24}Помощь{FFFFFF}");
	}
    if(PlayerInfo[playerid][pVip] >= 2)
    {
        if(PlayerInfo[playerid][pVipTime] != 0 && PlayerInfo[playerid][pVipTime] < getdate())
        {
        	PlayerInfo[playerid][pVip] = 0;
			PlayerInfo[playerid][pVipTime] = 0;
			PlayerInfo[playerid][pFreeMode] = 0;
			PlayerInfo[playerid][pPassive] = 0;
			PlayerInfo[playerid][pTimers] = 9;
			PlayerInfo[playerid][pWeather] = 13;
			PlayerInfo[playerid][pYourSkin][1] = 0;
			PlayerInfo[playerid][pAutoBuyWeapon][2] = 0;
			PlayerInfo[playerid][pAutoBuyWeapon][3] = 0;
			mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET vip=0,viptime=0,freemode=0,yourskin='%d,0' WHERE id=%d", PlayerInfo[playerid][pYourSkin][0], PlayerInfo[playerid][pRoomAccount]);
			mysql_tquery(MysqlConnectID, string);
			SendClientMessage(playerid, 0xFFFFFFFF, "Срок действия ваших VIP привилегий истек!");
        }
        else SendClientMessage(playerid, 0xFFFFFFFF, "Для помощи по VIP привилегиям используйте кнопку {4FDF24}H {FFFFFF}- {4FDF24}Помощь{FFFFFF}");
	}
	if(PlayerInfo[playerid][pFreeMode] == 0 && PlayerInfo[playerid][pPrison] == 0)
	{
		ChoiceTeamCheck[playerid][0] = 1;
		PlayerInfo[playerid][pPassive] = 0;
		GangZoneShowForPlayer(playerid, ServerCheck[0], 0x395075FF);
    }
    else if(PlayerInfo[playerid][pFreeMode] == 1) PlayerOnline[1] += 1;
    TeamColor(playerid);
    TextDrawColor(Aiming[playerid][0], PlayerInfo[playerid][pAimingX][1]);
	TextDrawColor(Aiming[playerid][1], PlayerInfo[playerid][pAimingX][1]);
    getdate(date[0], date[1], date[2]);
	gettime(date[3], date[4], date[5]);
	format(slot, sizeof(slot), "%02d/%02d/%d %d:%d:%d", date[2], date[1], date[0], date[3], date[4], date[5]);
    mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET iplocal='%s',lastentrance='%s',online=1,visits=%d,freemode=%d,passive=%d WHERE id=%d", PlayerIp[playerid], slot, PlayerInfo[playerid][pVisits], PlayerInfo[playerid][pFreeMode], PlayerInfo[playerid][pPassive], PlayerInfo[playerid][pRoomAccount]);
	mysql_tquery(MysqlConnectID, string);
	format(string, sizeof(string), "Игрок %s (ID: %d) успешно авторизовался (IP: %s | R: %s | Ping: %d)", PlayerName[playerid], playerid, PlayerIp[playerid], PlayerInfo[playerid][pIpReg], GetPlayerPing(playerid));
 	ABroadCast(0xC3C3C3AA, string, 0, 4);
 	switch(date[3])
 	{
 	    case 0..6: slot = "Доброй ночи";
	  	case 7..12: slot = "Доброе утро";
  		case 13..17: slot = "Добрый день";
  		case 18..23: slot = "Добрый вечер";
		default: slot = "Добро пожаловать";
 	}
 	format(string, sizeof(string), "%s, {4FDF24}%s{FFFFFF}.", slot, PlayerName[playerid]);
 	SendClientMessage(playerid, 0xFFFFFFFF, string);
 	if(PlayerInfo[playerid][pGang][2] != 0 || PlayerInfo[playerid][pGang][3] == -1)
 	{
 	    if(PlayerInfo[playerid][pGang][2] != -2)
	  	{
	  	    if(PlayerInfo[playerid][pGang][3] == -1) format(string, sizeof(string), "Ваша заявка в банду #{4FDF24}%d{FFFFFF} была отклонена.", PlayerInfo[playerid][pGang][2]);
 	    	else format(string, sizeof(string), "Вы были выгнаны из банды #{4FDF24}%d{FFFFFF}", PlayerInfo[playerid][pGang][2]);
 	    	PlayerInfo[playerid][pGang][3] = 0;
	  	}
	  	else format(string, sizeof(string), "Вы были приняты в банду #{4FDF24}%d{FFFFFF}", PlayerInfo[playerid][pGang][0]);
	 	SendClientMessageZS(playerid, 0xFFFFFFFF, string, 1085);
	 	PlayerInfo[playerid][pGang][2] = 0;
	 	format(slot, sizeof(slot), "%d,%d", PlayerInfo[playerid][pGang][1], PlayerInfo[playerid][pGang][2]);
	 	mysql_format(MysqlConnectID, string, sizeof(string), "UPDATE profile SET gang1=0,gang='%s' WHERE id=%d", slot, PlayerInfo[playerid][pRoomAccount]);
	 	mysql_tquery(MysqlConnectID, string);
 	}
 	if(PlayerInfo[playerid][pGang][0] >= 1)
 	{
 		mysql_format(MysqlConnectID, string, sizeof(string), "SELECT name,crewtag,action,rank FROM gang WHERE id=%d LIMIT 1", PlayerInfo[playerid][pGang][0]);
		mysql_tquery(MysqlConnectID, string, "GangPublic", "iii", playerid, 14, 0);
 	}
    GivePlayerMoney(playerid, PlayerInfo[playerid][pMoney]);
    SetPlayerScore(playerid, PlayerInfo[playerid][pLevel][0]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 0);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 500);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 500);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 0);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 0);
	if(PlayerInfo[playerid][pBonus][6] >= 1)
	{
		new Style[6] = {FIGHT_STYLE_NORMAL, FIGHT_STYLE_GRABKICK, FIGHT_STYLE_BOXING, FIGHT_STYLE_KUNGFU, FIGHT_STYLE_KNEEHEAD, FIGHT_STYLE_ELBOW};
		SetPlayerFightingStyle(playerid, Style[PlayerInfo[playerid][pBonus][6]-1]);
	}
    GetPlayerVersion(playerid, string, sizeof(string));
    if(!strcmp(string, "0.3DL")) ClientCheck[playerid] = 1;
	else ClientCheck[playerid] = 0;
	PlayerText[playerid] = CreateDynamic3DTextLabel("_", 0xFFFFFFFF, 0.0, 0.0, 0.3, 15.0, playerid, INVALID_VEHICLE_ID, 1);
	return SpawnPlayerZS(playerid);
}